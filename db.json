{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/shenma-site-verification.txt","path":"shenma-site-verification.txt","modified":0,"renderable":0},{"_id":"source/favicon_bak_big.ico","path":"favicon_bak_big.ico","modified":0,"renderable":0},{"_id":"source/asset/clock.html","path":"asset/clock.html","modified":0,"renderable":0},{"_id":"source/asset/css-pic.html","path":"asset/css-pic.html","modified":0,"renderable":0},{"_id":"source/asset/js_sources_bookmark.html","path":"asset/js_sources_bookmark.html","modified":0,"renderable":0},{"_id":"source/asset/nonviolent-communication.drawio","path":"asset/nonviolent-communication.drawio","modified":0,"renderable":0},{"_id":"source/asset/sitemap.txt","path":"asset/sitemap.txt","modified":0,"renderable":0},{"_id":"source/asset/sitemap.xml","path":"asset/sitemap.xml","modified":0,"renderable":0},{"_id":"source/asset/sitemap.html","path":"asset/sitemap.html","modified":0,"renderable":0},{"_id":"source/asset/quotes.js","path":"asset/quotes.js","modified":0,"renderable":0},{"_id":"source/asset/tech_commuity.html","path":"asset/tech_commuity.html","modified":0,"renderable":0},{"_id":"source/images/hexo1.jpg","path":"images/hexo1.jpg","modified":0,"renderable":0},{"_id":"source/images/hexo3.jpg","path":"images/hexo3.jpg","modified":0,"renderable":0},{"_id":"source/images/hexo2.jpg","path":"images/hexo2.jpg","modified":0,"renderable":0},{"_id":"source/images/learning3.png","path":"images/learning3.png","modified":0,"renderable":0},{"_id":"source/images/learning1.png","path":"images/learning1.png","modified":0,"renderable":0},{"_id":"source/images/learning2.png","path":"images/learning2.png","modified":0,"renderable":0},{"_id":"source/images/profile.jpg","path":"images/profile.jpg","modified":0,"renderable":0},{"_id":"source/images/stress_circle.png","path":"images/stress_circle.png","modified":0,"renderable":0},{"_id":"source/images/vue-message-plugin.png","path":"images/vue-message-plugin.png","modified":0,"renderable":0},{"_id":"source/images/vuex1.png","path":"images/vuex1.png","modified":0,"renderable":0},{"_id":"source/images/vuex3.png","path":"images/vuex3.png","modified":0,"renderable":0},{"_id":"source/images/wxCode.jpg","path":"images/wxCode.jpg","modified":0,"renderable":0},{"_id":"source/images/dunning-kruger_effect_cn.jpg","path":"images/dunning-kruger_effect_cn.jpg","modified":0,"renderable":0},{"_id":"source/images/dunning-kruger_effect.png","path":"images/dunning-kruger_effect.png","modified":0,"renderable":0},{"_id":"source/images/maupassant.jpg","path":"images/maupassant.jpg","modified":0,"renderable":0},{"_id":"source/images/profile_bak_big.jpg","path":"images/profile_bak_big.jpg","modified":0,"renderable":0},{"_id":"source/images/schedule v3.0.png","path":"images/schedule v3.0.png","modified":0,"renderable":0},{"_id":"source/images/slogan.png","path":"images/slogan.png","modified":0,"renderable":0},{"_id":"source/images/vuex2.png","path":"images/vuex2.png","modified":0,"renderable":0},{"_id":"source/asset/drum/index.html","path":"asset/drum/index.html","modified":0,"renderable":0},{"_id":"source/asset/drum/style.css","path":"asset/drum/style.css","modified":0,"renderable":0},{"_id":"source/images/ai/003.gif","path":"images/ai/003.gif","modified":0,"renderable":0},{"_id":"source/images/ai/05.png","path":"images/ai/05.png","modified":0,"renderable":0},{"_id":"source/images/ai/06.png","path":"images/ai/06.png","modified":0,"renderable":0},{"_id":"source/images/ai/08.png","path":"images/ai/08.png","modified":0,"renderable":0},{"_id":"source/images/ai/07.png","path":"images/ai/07.png","modified":0,"renderable":0},{"_id":"source/images/ai/10.png","path":"images/ai/10.png","modified":0,"renderable":0},{"_id":"source/images/ai/09.png","path":"images/ai/09.png","modified":0,"renderable":0},{"_id":"source/images/ai/13.png","path":"images/ai/13.png","modified":0,"renderable":0},{"_id":"source/images/ai/11.png","path":"images/ai/11.png","modified":0,"renderable":0},{"_id":"source/images/ai/12.png","path":"images/ai/12.png","modified":0,"renderable":0},{"_id":"source/images/ai/17.png","path":"images/ai/17.png","modified":0,"renderable":0},{"_id":"source/images/ai/14.png","path":"images/ai/14.png","modified":0,"renderable":0},{"_id":"source/images/ai/16.png","path":"images/ai/16.png","modified":0,"renderable":0},{"_id":"source/images/ai/18.png","path":"images/ai/18.png","modified":0,"renderable":0},{"_id":"source/images/ai/20.png","path":"images/ai/20.png","modified":0,"renderable":0},{"_id":"source/images/ai/23.png","path":"images/ai/23.png","modified":0,"renderable":0},{"_id":"source/images/ai/24.png","path":"images/ai/24.png","modified":0,"renderable":0},{"_id":"source/images/ai/25.png","path":"images/ai/25.png","modified":0,"renderable":0},{"_id":"source/images/ai/26.png","path":"images/ai/26.png","modified":0,"renderable":0},{"_id":"source/images/ai/27.png","path":"images/ai/27.png","modified":0,"renderable":0},{"_id":"source/images/ai/28.png","path":"images/ai/28.png","modified":0,"renderable":0},{"_id":"source/images/ai/29.png","path":"images/ai/29.png","modified":0,"renderable":0},{"_id":"source/images/ai/32.png","path":"images/ai/32.png","modified":0,"renderable":0},{"_id":"source/images/ai/33.png","path":"images/ai/33.png","modified":0,"renderable":0},{"_id":"source/images/ai/34.png","path":"images/ai/34.png","modified":0,"renderable":0},{"_id":"source/images/ai/35.png","path":"images/ai/35.png","modified":0,"renderable":0},{"_id":"source/images/ai/38.png","path":"images/ai/38.png","modified":0,"renderable":0},{"_id":"source/images/ai/40.png","path":"images/ai/40.png","modified":0,"renderable":0},{"_id":"source/images/ai/41.png","path":"images/ai/41.png","modified":0,"renderable":0},{"_id":"source/images/ai/42.png","path":"images/ai/42.png","modified":0,"renderable":0},{"_id":"source/images/ai/44.png","path":"images/ai/44.png","modified":0,"renderable":0},{"_id":"source/images/ai/47.png","path":"images/ai/47.png","modified":0,"renderable":0},{"_id":"source/images/ai/49.png","path":"images/ai/49.png","modified":0,"renderable":0},{"_id":"source/images/ai/51.png","path":"images/ai/51.png","modified":0,"renderable":0},{"_id":"source/images/ai/52.png","path":"images/ai/52.png","modified":0,"renderable":0},{"_id":"source/images/ai/53.png","path":"images/ai/53.png","modified":0,"renderable":0},{"_id":"source/images/ai/54.png","path":"images/ai/54.png","modified":0,"renderable":0},{"_id":"source/images/ai/55.png","path":"images/ai/55.png","modified":0,"renderable":0},{"_id":"source/images/ai/56.png","path":"images/ai/56.png","modified":0,"renderable":0},{"_id":"source/images/ai/58.png","path":"images/ai/58.png","modified":0,"renderable":0},{"_id":"source/images/ai/57.png","path":"images/ai/57.png","modified":0,"renderable":0},{"_id":"source/images/ai/61.png","path":"images/ai/61.png","modified":0,"renderable":0},{"_id":"source/images/ai/62.png","path":"images/ai/62.png","modified":0,"renderable":0},{"_id":"source/images/ai/63.png","path":"images/ai/63.png","modified":0,"renderable":0},{"_id":"source/images/ai/64.png","path":"images/ai/64.png","modified":0,"renderable":0},{"_id":"source/images/ai/65.png","path":"images/ai/65.png","modified":0,"renderable":0},{"_id":"source/images/ai/66.png","path":"images/ai/66.png","modified":0,"renderable":0},{"_id":"source/images/ai/67.png","path":"images/ai/67.png","modified":0,"renderable":0},{"_id":"source/images/blog/blog-counter.gif","path":"images/blog/blog-counter.gif","modified":0,"renderable":0},{"_id":"source/images/blog/google_search.png","path":"images/blog/google_search.png","modified":0,"renderable":0},{"_id":"source/images/blog/google_search3.png","path":"images/blog/google_search3.png","modified":0,"renderable":0},{"_id":"source/images/blog/google_search4.png","path":"images/blog/google_search4.png","modified":0,"renderable":0},{"_id":"source/images/blog/google_search5.png","path":"images/blog/google_search5.png","modified":0,"renderable":0},{"_id":"source/images/continuous_action.png","path":"images/continuous_action.png","modified":0,"renderable":0},{"_id":"source/images/devtools/030.png","path":"images/devtools/030.png","modified":0,"renderable":0},{"_id":"source/images/devtools/020.png","path":"images/devtools/020.png","modified":0,"renderable":0},{"_id":"source/images/devtools/100.png","path":"images/devtools/100.png","modified":0,"renderable":0},{"_id":"source/images/devtools/060.png","path":"images/devtools/060.png","modified":0,"renderable":0},{"_id":"source/images/devtools/110.png","path":"images/devtools/110.png","modified":0,"renderable":0},{"_id":"source/images/devtools/120.png","path":"images/devtools/120.png","modified":0,"renderable":0},{"_id":"source/images/devtools/132.png","path":"images/devtools/132.png","modified":0,"renderable":0},{"_id":"source/images/devtools/135.gif","path":"images/devtools/135.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/140.png","path":"images/devtools/140.png","modified":0,"renderable":0},{"_id":"source/images/devtools/150.png","path":"images/devtools/150.png","modified":0,"renderable":0},{"_id":"source/images/devtools/160.png","path":"images/devtools/160.png","modified":0,"renderable":0},{"_id":"source/images/devtools/180.png","path":"images/devtools/180.png","modified":0,"renderable":0},{"_id":"source/images/devtools/170.png","path":"images/devtools/170.png","modified":0,"renderable":0},{"_id":"source/images/devtools/190.png","path":"images/devtools/190.png","modified":0,"renderable":0},{"_id":"source/images/devtools/191.png","path":"images/devtools/191.png","modified":0,"renderable":0},{"_id":"source/images/devtools/204.png","path":"images/devtools/204.png","modified":0,"renderable":0},{"_id":"source/images/devtools/205.png","path":"images/devtools/205.png","modified":0,"renderable":0},{"_id":"source/images/devtools/209.png","path":"images/devtools/209.png","modified":0,"renderable":0},{"_id":"source/images/devtools/210.png","path":"images/devtools/210.png","modified":0,"renderable":0},{"_id":"source/images/devtools/211.png","path":"images/devtools/211.png","modified":0,"renderable":0},{"_id":"source/images/devtools/214.png","path":"images/devtools/214.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 1.png","path":"images/event-loop/Untitled 1.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 10.png","path":"images/event-loop/Untitled 10.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 11.png","path":"images/event-loop/Untitled 11.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 12.png","path":"images/event-loop/Untitled 12.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 15.png","path":"images/event-loop/Untitled 15.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 2.png","path":"images/event-loop/Untitled 2.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 16.png","path":"images/event-loop/Untitled 16.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 17.png","path":"images/event-loop/Untitled 17.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 3.png","path":"images/event-loop/Untitled 3.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 4.png","path":"images/event-loop/Untitled 4.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 5.png","path":"images/event-loop/Untitled 5.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled.png","path":"images/event-loop/Untitled.png","modified":0,"renderable":0},{"_id":"source/images/gitbook/web_font02.png","path":"images/gitbook/web_font02.png","modified":0,"renderable":0},{"_id":"source/images/gitbook/web_font04.png","path":"images/gitbook/web_font04.png","modified":0,"renderable":0},{"_id":"source/images/grunt/grunt01.png","path":"images/grunt/grunt01.png","modified":0,"renderable":0},{"_id":"source/images/grunt/grunt03.png","path":"images/grunt/grunt03.png","modified":0,"renderable":0},{"_id":"source/images/grunt/grunt02.png","path":"images/grunt/grunt02.png","modified":0,"renderable":0},{"_id":"source/images/grunt/grunt04.png","path":"images/grunt/grunt04.png","modified":0,"renderable":0},{"_id":"source/images/hmos/001.png","path":"images/hmos/001.png","modified":0,"renderable":0},{"_id":"source/images/hmos/002.png","path":"images/hmos/002.png","modified":0,"renderable":0},{"_id":"source/images/hmos/006.png","path":"images/hmos/006.png","modified":0,"renderable":0},{"_id":"source/images/hmos/007.png","path":"images/hmos/007.png","modified":0,"renderable":0},{"_id":"source/images/hmos/008.png","path":"images/hmos/008.png","modified":0,"renderable":0},{"_id":"source/images/hmos/009.png","path":"images/hmos/009.png","modified":0,"renderable":0},{"_id":"source/images/hmos/010.png","path":"images/hmos/010.png","modified":0,"renderable":0},{"_id":"source/images/hmos/012.png","path":"images/hmos/012.png","modified":0,"renderable":0},{"_id":"source/images/movie/bwbj2.jpg","path":"images/movie/bwbj2.jpg","modified":0,"renderable":0},{"_id":"source/images/movie/no_war.jpg","path":"images/movie/no_war.jpg","modified":0,"renderable":0},{"_id":"source/images/nvc/nvc-map.png","path":"images/nvc/nvc-map.png","modified":0,"renderable":0},{"_id":"source/images/nvc/nvc3.jpg","path":"images/nvc/nvc3.jpg","modified":0,"renderable":0},{"_id":"source/images/post/000.png","path":"images/post/000.png","modified":0,"renderable":0},{"_id":"source/images/post/002.png","path":"images/post/002.png","modified":0,"renderable":0},{"_id":"source/images/post/006.png","path":"images/post/006.png","modified":0,"renderable":0},{"_id":"source/images/rich/poor_cf.png","path":"images/rich/poor_cf.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/11.png","path":"images/stateofjs/11.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/10.png","path":"images/stateofjs/10.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/13.png","path":"images/stateofjs/13.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/12.png","path":"images/stateofjs/12.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/14.png","path":"images/stateofjs/14.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/16.png","path":"images/stateofjs/16.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/15.png","path":"images/stateofjs/15.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/18.png","path":"images/stateofjs/18.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/17.png","path":"images/stateofjs/17.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/19.png","path":"images/stateofjs/19.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/20.png","path":"images/stateofjs/20.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/2.png","path":"images/stateofjs/2.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201904.png","path":"images/stateofjs/201904.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201905.png","path":"images/stateofjs/201905.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201907.png","path":"images/stateofjs/201907.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201908.png","path":"images/stateofjs/201908.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201906.png","path":"images/stateofjs/201906.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201911.png","path":"images/stateofjs/201911.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201909.png","path":"images/stateofjs/201909.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201913.png","path":"images/stateofjs/201913.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201912.png","path":"images/stateofjs/201912.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201914.png","path":"images/stateofjs/201914.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201915.png","path":"images/stateofjs/201915.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201916.png","path":"images/stateofjs/201916.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201918.png","path":"images/stateofjs/201918.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201917.png","path":"images/stateofjs/201917.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201919.png","path":"images/stateofjs/201919.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201920.png","path":"images/stateofjs/201920.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201921.png","path":"images/stateofjs/201921.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201922.png","path":"images/stateofjs/201922.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201923.png","path":"images/stateofjs/201923.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201924.png","path":"images/stateofjs/201924.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201925.png","path":"images/stateofjs/201925.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201928.png","path":"images/stateofjs/201928.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201927.png","path":"images/stateofjs/201927.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201926.png","path":"images/stateofjs/201926.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201929.png","path":"images/stateofjs/201929.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201930.png","path":"images/stateofjs/201930.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201932.png","path":"images/stateofjs/201932.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201931.png","path":"images/stateofjs/201931.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201933.png","path":"images/stateofjs/201933.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201934.png","path":"images/stateofjs/201934.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201935.png","path":"images/stateofjs/201935.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201936.png","path":"images/stateofjs/201936.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201937.png","path":"images/stateofjs/201937.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201939.png","path":"images/stateofjs/201939.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201938.png","path":"images/stateofjs/201938.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201940.png","path":"images/stateofjs/201940.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201941.png","path":"images/stateofjs/201941.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/21.png","path":"images/stateofjs/21.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/22.png","path":"images/stateofjs/22.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/23.png","path":"images/stateofjs/23.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/3.png","path":"images/stateofjs/3.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/4.png","path":"images/stateofjs/4.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/5.png","path":"images/stateofjs/5.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/7.png","path":"images/stateofjs/7.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/6.png","path":"images/stateofjs/6.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/8.png","path":"images/stateofjs/8.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/9.png","path":"images/stateofjs/9.png","modified":0,"renderable":0},{"_id":"source/pwa/clock/favicon.ico","path":"pwa/clock/favicon.ico","modified":0,"renderable":0},{"_id":"source/pwa/clock/index.html","path":"pwa/clock/index.html","modified":0,"renderable":0},{"_id":"source/pwa/clock/index.js","path":"pwa/clock/index.js","modified":0,"renderable":0},{"_id":"source/pwa/clock/manifest.webmanifest","path":"pwa/clock/manifest.webmanifest","modified":0,"renderable":0},{"_id":"source/pwa/clock/quotes.js","path":"pwa/clock/quotes.js","modified":0,"renderable":0},{"_id":"source/pwa/clock/style.css","path":"pwa/clock/style.css","modified":0,"renderable":0},{"_id":"source/pwa/clock/sw.js","path":"pwa/clock/sw.js","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/git_comment.css","path":"css/git_comment.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/images/ai/01.png","path":"images/ai/01.png","modified":0,"renderable":0},{"_id":"source/images/ai/15.png","path":"images/ai/15.png","modified":0,"renderable":0},{"_id":"source/images/ai/19.png","path":"images/ai/19.png","modified":0,"renderable":0},{"_id":"source/images/ai/21.png","path":"images/ai/21.png","modified":0,"renderable":0},{"_id":"source/images/ai/31.png","path":"images/ai/31.png","modified":0,"renderable":0},{"_id":"source/images/ai/39.png","path":"images/ai/39.png","modified":0,"renderable":0},{"_id":"source/images/ai/45.png","path":"images/ai/45.png","modified":0,"renderable":0},{"_id":"source/images/ai/46.png","path":"images/ai/46.png","modified":0,"renderable":0},{"_id":"source/images/ai/60.png","path":"images/ai/60.png","modified":0,"renderable":0},{"_id":"source/images/ai/59.png","path":"images/ai/59.png","modified":0,"renderable":0},{"_id":"source/images/blog/google_search2.png","path":"images/blog/google_search2.png","modified":0,"renderable":0},{"_id":"source/images/blog/shenma.png","path":"images/blog/shenma.png","modified":0,"renderable":0},{"_id":"source/images/blog/scarsu-baidu.png","path":"images/blog/scarsu-baidu.png","modified":0,"renderable":0},{"_id":"source/images/c4/code.jpg","path":"images/c4/code.jpg","modified":0,"renderable":0},{"_id":"source/images/c4/context.jpg","path":"images/c4/context.jpg","modified":0,"renderable":0},{"_id":"source/images/devtools/011.png","path":"images/devtools/011.png","modified":0,"renderable":0},{"_id":"source/images/devtools/010.png","path":"images/devtools/010.png","modified":0,"renderable":0},{"_id":"source/images/devtools/000.png","path":"images/devtools/000.png","modified":0,"renderable":0},{"_id":"source/images/devtools/051.png","path":"images/devtools/051.png","modified":0,"renderable":0},{"_id":"source/images/devtools/130.png","path":"images/devtools/130.png","modified":0,"renderable":0},{"_id":"source/images/devtools/131.png","path":"images/devtools/131.png","modified":0,"renderable":0},{"_id":"source/images/devtools/133.gif","path":"images/devtools/133.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/200.png","path":"images/devtools/200.png","modified":0,"renderable":0},{"_id":"source/images/devtools/203.gif","path":"images/devtools/203.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/207.png","path":"images/devtools/207.png","modified":0,"renderable":0},{"_id":"source/images/devtools/211.gif","path":"images/devtools/211.gif","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 8.png","path":"images/event-loop/Untitled 8.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 9.png","path":"images/event-loop/Untitled 9.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 7.png","path":"images/event-loop/Untitled 7.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/raf.png","path":"images/event-loop/raf.png","modified":0,"renderable":0},{"_id":"source/images/gitbook/web_font01.png","path":"images/gitbook/web_font01.png","modified":0,"renderable":0},{"_id":"source/images/gitbook/web_font03.png","path":"images/gitbook/web_font03.png","modified":0,"renderable":0},{"_id":"source/images/hmos/005.png","path":"images/hmos/005.png","modified":0,"renderable":0},{"_id":"source/images/movie/tsaml1.gif","path":"images/movie/tsaml1.gif","modified":0,"renderable":0},{"_id":"source/images/movie/tsaml3.jpeg","path":"images/movie/tsaml3.jpeg","modified":0,"renderable":0},{"_id":"source/images/nvc/nvc.jpg","path":"images/nvc/nvc.jpg","modified":0,"renderable":0},{"_id":"source/images/nvc/nvc2.jpg","path":"images/nvc/nvc2.jpg","modified":0,"renderable":0},{"_id":"source/images/post/003.png","path":"images/post/003.png","modified":0,"renderable":0},{"_id":"source/images/notion/ds.png","path":"images/notion/ds.png","modified":0,"renderable":0},{"_id":"source/images/notion/header.png","path":"images/notion/header.png","modified":0,"renderable":0},{"_id":"source/images/read/behavior.jpg","path":"images/read/behavior.jpg","modified":0,"renderable":0},{"_id":"source/images/read/rem.png","path":"images/read/rem.png","modified":0,"renderable":0},{"_id":"source/images/profile_bak_black.jpg","path":"images/profile_bak_black.jpg","modified":0,"renderable":0},{"_id":"source/images/rich/4.png","path":"images/rich/4.png","modified":0,"renderable":0},{"_id":"source/images/rich/middle_cf.png","path":"images/rich/middle_cf.png","modified":0,"renderable":0},{"_id":"source/images/rich/rich_cf.png","path":"images/rich/rich_cf.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/1.png","path":"images/stateofjs/1.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201903.png","path":"images/stateofjs/201903.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201902.png","path":"images/stateofjs/201902.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201910.png","path":"images/stateofjs/201910.png","modified":0,"renderable":0},{"_id":"source/images/vue3/demo.png","path":"images/vue3/demo.png","modified":0,"renderable":0},{"_id":"source/asset/drum/sounds/hihat.wav","path":"asset/drum/sounds/hihat.wav","modified":0,"renderable":0},{"_id":"source/asset/drum/sounds/kick.wav","path":"asset/drum/sounds/kick.wav","modified":0,"renderable":0},{"_id":"source/asset/drum/sounds/snare.wav","path":"asset/drum/sounds/snare.wav","modified":0,"renderable":0},{"_id":"source/asset/drum/sounds/tink.wav","path":"asset/drum/sounds/tink.wav","modified":0,"renderable":0},{"_id":"source/images/ai/03.png","path":"images/ai/03.png","modified":0,"renderable":0},{"_id":"source/images/ai/30.png","path":"images/ai/30.png","modified":0,"renderable":0},{"_id":"source/images/ai/36.png","path":"images/ai/36.png","modified":0,"renderable":0},{"_id":"source/images/ai/37.png","path":"images/ai/37.png","modified":0,"renderable":0},{"_id":"source/images/ai/43.png","path":"images/ai/43.png","modified":0,"renderable":0},{"_id":"source/images/ai/48.png","path":"images/ai/48.png","modified":0,"renderable":0},{"_id":"source/images/c4/container.jpg","path":"images/c4/container.jpg","modified":0,"renderable":0},{"_id":"source/images/c4/component.jpg","path":"images/c4/component.jpg","modified":0,"renderable":0},{"_id":"source/images/bookmark.png","path":"images/bookmark.png","modified":0,"renderable":0},{"_id":"source/images/devtools/201.gif","path":"images/devtools/201.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/212.gif","path":"images/devtools/212.gif","modified":0,"renderable":0},{"_id":"source/images/hmos/000.png","path":"images/hmos/000.png","modified":0,"renderable":0},{"_id":"source/images/movie/rsgs4.jpeg","path":"images/movie/rsgs4.jpeg","modified":0,"renderable":0},{"_id":"source/images/post/004.png","path":"images/post/004.png","modified":0,"renderable":0},{"_id":"source/images/read/3-8lifestyle.jpg","path":"images/read/3-8lifestyle.jpg","modified":0,"renderable":0},{"_id":"source/images/self_control.png","path":"images/self_control.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/000.png","path":"images/stateofjs/000.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/001.png","path":"images/stateofjs/001.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/0000.png","path":"images/stateofjs/0000.png","modified":0,"renderable":0},{"_id":"source/images/stateofjs/201901.png","path":"images/stateofjs/201901.png","modified":0,"renderable":0},{"_id":"source/images/vue3/reactive.png","path":"images/vue3/reactive.png","modified":0,"renderable":0},{"_id":"source/pwa/clock/icon/icon.png","path":"pwa/clock/icon/icon.png","modified":0,"renderable":0},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1},{"_id":"source/asset/drum/sounds/clap.wav","path":"asset/drum/sounds/clap.wav","modified":0,"renderable":0},{"_id":"source/asset/drum/sounds/tom.wav","path":"asset/drum/sounds/tom.wav","modified":0,"renderable":0},{"_id":"source/images/ai/02.png","path":"images/ai/02.png","modified":0,"renderable":0},{"_id":"source/images/devtools/040.png","path":"images/devtools/040.png","modified":0,"renderable":0},{"_id":"source/images/devtools/050.png","path":"images/devtools/050.png","modified":0,"renderable":0},{"_id":"source/images/devtools/208.gif","path":"images/devtools/208.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/overview.png","path":"images/devtools/overview.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 6.png","path":"images/event-loop/Untitled 6.png","modified":0,"renderable":0},{"_id":"source/images/hmos/004.png","path":"images/hmos/004.png","modified":0,"renderable":0},{"_id":"source/images/hmos/003.png","path":"images/hmos/003.png","modified":0,"renderable":0},{"_id":"source/images/post/005.png","path":"images/post/005.png","modified":0,"renderable":0},{"_id":"source/images/rich/0.jpg","path":"images/rich/0.jpg","modified":0,"renderable":0},{"_id":"source/asset/drum/sounds/boom.wav","path":"asset/drum/sounds/boom.wav","modified":0,"renderable":0},{"_id":"source/images/ai/22.png","path":"images/ai/22.png","modified":0,"renderable":0},{"_id":"source/images/movie/jrayty.png","path":"images/movie/jrayty.png","modified":0,"renderable":0},{"_id":"source/images/post/001.png","path":"images/post/001.png","modified":0,"renderable":0},{"_id":"source/images/notion/home.png","path":"images/notion/home.png","modified":0,"renderable":0},{"_id":"source/images/movie/agzz2.jpeg","path":"images/movie/agzz2.jpeg","modified":0,"renderable":0},{"_id":"source/images/movie/agzz3.jpeg","path":"images/movie/agzz3.jpeg","modified":0,"renderable":0},{"_id":"source/asset/drum/sounds/openhat.wav","path":"asset/drum/sounds/openhat.wav","modified":0,"renderable":0},{"_id":"source/images/ai/04.png","path":"images/ai/04.png","modified":0,"renderable":0},{"_id":"source/images/devtools/202.gif","path":"images/devtools/202.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/206.gif","path":"images/devtools/206.gif","modified":0,"renderable":0},{"_id":"source/images/hmos/011.png","path":"images/hmos/011.png","modified":0,"renderable":0},{"_id":"source/images/movie/agzz1.jpeg","path":"images/movie/agzz1.jpeg","modified":0,"renderable":0},{"_id":"source/images/ai/50.png","path":"images/ai/50.png","modified":0,"renderable":0},{"_id":"source/images/movie/rsgs2.jpeg","path":"images/movie/rsgs2.jpeg","modified":0,"renderable":0},{"_id":"source/images/devtools/207.gif","path":"images/devtools/207.gif","modified":0,"renderable":0},{"_id":"source/images/vue-message-plugin.gif","path":"images/vue-message-plugin.gif","modified":0,"renderable":0},{"_id":"source/images/movie/tsaml4.jpeg","path":"images/movie/tsaml4.jpeg","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 14.png","path":"images/event-loop/Untitled 14.png","modified":0,"renderable":0},{"_id":"source/images/event-loop/Untitled 13.png","path":"images/event-loop/Untitled 13.png","modified":0,"renderable":0},{"_id":"source/asset/drum/sounds/ride.wav","path":"asset/drum/sounds/ride.wav","modified":0,"renderable":0},{"_id":"source/images/ai/002.gif","path":"images/ai/002.gif","modified":0,"renderable":0},{"_id":"source/images/devtools/213.gif","path":"images/devtools/213.gif","modified":0,"renderable":0},{"_id":"source/images/read/morning.png","path":"images/read/morning.png","modified":0,"renderable":0},{"_id":"source/images/movie/rsgs3.jpeg","path":"images/movie/rsgs3.jpeg","modified":0,"renderable":0},{"_id":"source/images/movie/tsaml2.png","path":"images/movie/tsaml2.png","modified":0,"renderable":0},{"_id":"source/images/movie/wmsj2.png","path":"images/movie/wmsj2.png","modified":0,"renderable":0},{"_id":"source/images/movie/rsgs1.jpeg","path":"images/movie/rsgs1.jpeg","modified":0,"renderable":0},{"_id":"source/images/movie/wmsj.jpeg","path":"images/movie/wmsj.jpeg","modified":0,"renderable":0},{"_id":"source/images/ai/001.gif","path":"images/ai/001.gif","modified":0,"renderable":0},{"_id":"source/images/movie/bwbj1.png","path":"images/movie/bwbj1.png","modified":0,"renderable":0},{"_id":"source/images/movie/jcldxt.jpg","path":"images/movie/jcldxt.jpg","modified":0,"renderable":0},{"_id":"source/images/movie/prxd2.jpeg","path":"images/movie/prxd2.jpeg","modified":0,"renderable":0},{"_id":"source/images/event-loop/preview.gif","path":"images/event-loop/preview.gif","modified":0,"renderable":0},{"_id":"source/images/movie/prxd1.jpeg","path":"images/movie/prxd1.jpeg","modified":0,"renderable":0},{"_id":"source/images/event-loop/event_loop.gif","path":"images/event-loop/event_loop.gif","modified":0,"renderable":0},{"_id":"source/images/ai/000.gif","path":"images/ai/000.gif","modified":0,"renderable":0},{"_id":"source/asset/notion-char/index.html","path":"asset/notion-char/index.html","modified":0,"renderable":0},{"_id":"source/asset/notion-char/asset/dom2img.js","path":"asset/notion-char/asset/dom2img.js","modified":0,"renderable":0},{"_id":"source/asset/notion-char/asset/style.css","path":"asset/notion-char/asset/style.css","modified":0,"renderable":0},{"_id":"source/asset/notion-char/asset/semi.ttf","path":"asset/notion-char/asset/semi.ttf","modified":0,"renderable":0},{"_id":"source/asset/notion-char/asset/Fraunces.ttf","path":"asset/notion-char/asset/Fraunces.ttf","modified":0,"renderable":0}],"Cache":[{"_id":"source/favicon.ico","hash":"9445630aff5bce00ea44758fc3de1da69ab1007b","modified":1586306581231},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1586306581543},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1586306581543},{"_id":"source/shenma-site-verification.txt","hash":"453e70e52866908a33ac172f3af4d222c0f54ef0","modified":1597895199764},{"_id":"themes/maupassant/_config.yml","hash":"4dc527d6f3d6ae9d243dd6c3197b6dbc2ac7a8a5","modified":1607850289780},{"_id":"themes/maupassant/README.md","hash":"1c8631bc25c0f616e2dbd01c7fc224fa19eefdf3","modified":1586306581543},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1586306581574},{"_id":"source/_drafts/自卑与超越.drawio","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599889574727},{"_id":"source/_todo/bash.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005636},{"_id":"source/_todo/checklist2019.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005509},{"_id":"source/_todo/git.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005638},{"_id":"source/_todo/idea.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005639},{"_id":"source/_todo/resources.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005509},{"_id":"source/_todo/package.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005641},{"_id":"source/_todo/os.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005640},{"_id":"source/_todo/route.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005509},{"_id":"source/_todo/snippet.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005642},{"_id":"source/_todo/vsc.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586490005644},{"_id":"source/favicon_bak_big.ico","hash":"20054e2789b1a26d9ba34be4662a0910015b8c10","modified":1586306581231},{"_id":"source/404/index.md","hash":"11ee5f8b6f54addd9704523191ebb747c469d72d","modified":1586306581107},{"_id":"source/_drafts/2018_summary_and_2019_plan.md","hash":"e6c10e00fafb2122d615de67f0140a1c4a77c1a6","modified":1611286101128},{"_id":"source/_drafts/Vue3响应式原理bak.md","hash":"01a3f40214d1bd006c0766eda95cb25a554b5fe4","modified":1599889575400},{"_id":"source/_drafts/javascript-comments-of-25-years-ago.md","hash":"eaad7797649ef1c9be8b56a39dcc3ea508a20248","modified":1607335506734},{"_id":"source/_drafts/devtools_intro_share.md","hash":"45e98eb70fc37f6a54c7090bf006afa86c63c6ed","modified":1599889575085},{"_id":"source/_drafts/jenkins_fe_ci.md","hash":"49cf112fb2469d005f6d0e9c0af94cc9b227c81c","modified":1607335699858},{"_id":"source/_drafts/vm in devtools.md","hash":"3bb4d539f958b6998b91e5cbbfa09afd29a5bf9e","modified":1599889575306},{"_id":"source/_drafts/year_summary_point.md","hash":"4777bfedbcccb8496f3aebe6ffa48d902d3a30e1","modified":1611286101128},{"_id":"source/_drafts/自卑与超越.md","hash":"9bcf8a0b43ea704a0c0d6f49544f56ca594e01da","modified":1609329853400},{"_id":"source/_drafts/mdnice.css","hash":"a90c396f9b5a118fa3cbdb88cb2118e9779bbb6a","modified":1600222275820},{"_id":"source/_drafts/读书笔记模板.md","hash":"911883243ac56adfb098631733c2e03150433db0","modified":1599889574516},{"_id":"source/apps/index.md","hash":"01e85d75fa598ebe6565c946e5254fd5c1632b15","modified":1612004464259},{"_id":"source/_posts/2018_javascript_report.md","hash":"1bb00c63147c0145df4e1f106180251b22b8c856","modified":1611309556977},{"_id":"source/_posts/2019_javascript_sources.md","hash":"04035aad9e3e8db2d58b0bca2c4ba6217c6bcd48","modified":1611309568013},{"_id":"source/_posts/2019_javascript_report.md","hash":"3379d5eb95b08717d1ef6a09b980f0d6f8db6036","modified":1611309560154},{"_id":"source/_posts/3-8lifestyle.md","hash":"94c85510c5f587f2722d5eb7db0b339a748de2c6","modified":1618988017270},{"_id":"source/_posts/33_js_concepts.md","hash":"17a4d466f4e5f68bc3375474a259596653c35b55","modified":1599116454414},{"_id":"source/_posts/360fe_02_css.md","hash":"8dff573c9f8dc6c56685e02984f826bb437b2e81","modified":1611309540801},{"_id":"source/_posts/Animate.css.md","hash":"16d3702a600228b21ebd091dddad161d037b0b52","modified":1599116454413},{"_id":"source/_posts/360fe_01_html.md","hash":"c10cbc7df7a069043c60216b9ab4007826c4e50b","modified":1611309535755},{"_id":"source/_posts/Danshari.md","hash":"f9bd437d7c145d198bdb17fd5eab5c6f2af0b53f","modified":1618988017262},{"_id":"source/_posts/ES6 Code Style.md","hash":"9d122478fbbbf85f514bb7cb95cb71f1cb5a136d","modified":1599116454419},{"_id":"source/_posts/Fullpage.js.md","hash":"b0a65c7cfb2588553de8379a78fb8bc19ed1bd53","modified":1599116454450},{"_id":"source/_posts/behavior_decision.md","hash":"e592c4f87d89306912c6c6594e5bafbd600b9c8d","modified":1618988017262},{"_id":"source/_posts/ancient_magical_table.md","hash":"b9da8b9ee6c578d0d799da006c4b465b427a08c6","modified":1599116454413},{"_id":"source/_posts/continuous_action.md","hash":"b00be7b0462a41007ce6646b49b9b2278a3264ac","modified":1618988017287},{"_id":"source/_posts/blog_history.md","hash":"ac938a0a4b5b5002c86643c9269ae663465e6192","modified":1611286101131},{"_id":"source/_posts/cs_english.md","hash":"4585bfcd187ec96b80da4309fd91d657dc3f18c1","modified":1621326605773},{"_id":"source/_posts/customize_vscode.md","hash":"e7e4f942cf907822842743bfd475476c6715e4a5","modified":1611802131144},{"_id":"source/_posts/css-variable.md","hash":"e409cc44f3e70735372fb71dea409a343cf8c706","modified":1611309592844},{"_id":"source/_posts/debug_node.js_with_chrome.md","hash":"887cfcda7eed86334fca0ed9cb109fa89d76b646","modified":1599116487679},{"_id":"source/_posts/devtools_02_elements.md","hash":"4c34f715dff772de83231100884420c5369d9d07","modified":1599116487679},{"_id":"source/_posts/devtools_01_intro.md","hash":"d6f043a998ef2925d0f69fe8e934ca699450fd32","modified":1608716275504},{"_id":"source/_posts/devtools_03_console.md","hash":"bb61ce676663163c960b83dee97bdd41e1ac0b21","modified":1599116487679},{"_id":"source/_posts/devtools_04_sources.md","hash":"53bc3cc38ff35af1b9f176fd6dab8cba5881062d","modified":1599116487679},{"_id":"source/_posts/devtools_05_network.md","hash":"38329efdea8b9b6bb143a1d793af2aeff80d54aa","modified":1599116487680},{"_id":"source/_posts/devtools_06_performance.md","hash":"bd0a15aefad5e51c8a273945c10a01a46ab3cfff","modified":1599116487680},{"_id":"source/_posts/dive_into_regular_expression.md","hash":"4e52862251bcc19a08aa6f6c19b1cf8a16f3a861","modified":1607699327172},{"_id":"source/_posts/devtools_rookie_intro.md","hash":"b0d11422896d33b0490b88b69f8c7780ea0ef787","modified":1599116487680},{"_id":"source/_posts/devtools_07_memory.md","hash":"e7b296f18160139016167484218d581204ffb1d2","modified":1599116487679},{"_id":"source/_posts/e_journal_by_notion.md","hash":"c36ada68d20ae5a7524acd0bcb98f685752291ef","modified":1611802098756},{"_id":"source/_posts/escape_from_the_world.md","hash":"117dc34dc4453f37b41592d081b92761a8f01a6f","modified":1616641739256},{"_id":"source/_posts/fed_ml_01.md","hash":"02faa9dde83dadc67ac0d0b27c8017abc46278c6","modified":1611309634791},{"_id":"source/_posts/event_loop.md","hash":"8df6ee2c6f539253f498970fb76f32a844bbb4b3","modified":1607664762843},{"_id":"source/_posts/fed_ml_02_tensorflow.md","hash":"15038ee72cd0781662284f8d55b244052552083e","modified":1611309641751},{"_id":"source/_posts/fed_ml_03_tensor.md","hash":"88c32cd6b0c45033732fb6990c625eb625bd1f0b","modified":1611309651581},{"_id":"source/_posts/fed_ml_04_linear_regression.md","hash":"fb2a8e92983b7ac974dc3069ec4975baf318f90a","modified":1611309656989},{"_id":"source/_posts/fed_ml_06_logistic_regression.md","hash":"d0f54ae2166b81ced22772a3df5e65d34bc098f8","modified":1611309669833},{"_id":"source/_posts/fed_ml_05_normalize.md","hash":"58cd5c5712c0a2105d760de7aaaaf3120efb27ee","modified":1611309663640},{"_id":"source/_posts/fed_ml_08_iris.md","hash":"d9fbae0dfe2a4ba2143ff2a4b4ec04948416caaa","modified":1611309683179},{"_id":"source/_posts/fed_ml_07_xor_regression.md","hash":"3a6f821d5f963fa21938b6173c4b16217d70eb34","modified":1611309676011},{"_id":"source/_posts/fed_ml_09_under&overfitting.md","hash":"fd5aaabe00fbc4f3f8bba64b3e42ec4a9c41d3cc","modified":1611309689875},{"_id":"source/_posts/fed_ml_11_pre_training_model.md","hash":"2023f71124b47c2d8532afec86ceec0428ff886e","modified":1611309717021},{"_id":"source/_posts/fed_ml_10_handwriting_number.md","hash":"6de718dfcb41782a27988a1d42f3092fd07ea0c2","modified":1611309696101},{"_id":"source/_posts/fed_ml_13_speech_recognition.md","hash":"4a3982ce10b5e876ef056f3e916e20586dc79e1e","modified":1611309730441},{"_id":"source/_posts/fed_ml_12_transfer_learning.md","hash":"1598ac11471ee98e80f7763c4584c5efd4998562","modified":1611309723409},{"_id":"source/_posts/fed_ml_14_slider.md","hash":"90d428e9d12724ad90858df6ac8724c67dbb0e49","modified":1611309735418},{"_id":"source/_posts/grunt.md","hash":"0f83d1dd79e07c0d20adde36a77769b3bb9b493c","modified":1599116454486},{"_id":"source/_posts/functional_programing.md","hash":"af00ab0eff2c70963beaf3881061f0b56b99f129","modified":1607698719691},{"_id":"source/_posts/fed_ml_15_py_model.md","hash":"e43b59b3b2c501e465513be3700bbfb6251c579e","modified":1611309743657},{"_id":"source/_posts/hello_hexo.md","hash":"e3750796daa73f81156e719b8c01fc1e91a90cc9","modified":1611286101137},{"_id":"source/_posts/highly_configurable_low_maintenance_blog_build_guide.md","hash":"78194e13e5f307164d02475f0f2edc523cecf413","modified":1611286101131},{"_id":"source/_posts/hmos.md","hash":"7ad2faca64c3f2ac26b54a2637927d7912a5ed78","modified":1611309765678},{"_id":"source/_posts/iconfont.md","hash":"dbac396453f651edbcefe26f9f64e57cf8b1edd2","modified":1616573148327},{"_id":"source/_posts/how_to_learn_wheels_source_code.md","hash":"7a78587824d2b95069822d8f4df64d98c473c98b","modified":1611737396954},{"_id":"source/_posts/learning_how_to_learn.md","hash":"9131e19a39eb3b3bf30e11040c3914e305ec581f","modified":1611737396954},{"_id":"source/_posts/mongoDB_configuration.md","hash":"7a4670e38ae76dcafb7739eb17e05d5da54cbfd0","modified":1599116454489},{"_id":"source/_posts/nextTick.md","hash":"924eb815123a9a6dc8ebd5dc8e54a20eedb6a2a7","modified":1611309802045},{"_id":"source/_posts/life_courage.md","hash":"1f142fc44f973556fea7da8c440b8a01342ef793","modified":1618988017287},{"_id":"source/_posts/nvm_for_windows.md","hash":"e880700e9e6495824281dabdfc78e6615a532dc0","modified":1611802135734},{"_id":"source/_posts/poor_economics.md","hash":"2ba2ec5aff33d8ef9f0cef35cd0c323ebed30293","modified":1618988017262},{"_id":"source/_posts/nonviolent_communication.md","hash":"a0f5c62758043713119cde3ea2fc845c445e243e","modified":1618988017284},{"_id":"source/_posts/rich_dad.md","hash":"e3da72b11570f1208186208435097633da21d8d2","modified":1618988017262},{"_id":"source/_posts/self_control.md","hash":"5206dddaba612d5bc807e71db96c9d263985dfd0","modified":1618988017262},{"_id":"source/_posts/tools.md","hash":"27c795fadb13fd36b73401880ab08402f6b7a609","modified":1599116454491},{"_id":"source/_posts/vue-message-plugin.md","hash":"2a21789f49c39735e113ce8a441a5601e3a4fcb4","modified":1611309853310},{"_id":"source/_posts/vm_in_devtools.md","hash":"f9f71d30ad0f36f42e39136685b6b4695b35ee8b","modified":1599116488036},{"_id":"source/_posts/vue3_reactive.md","hash":"c86a16f2d7a85d4760a0ed53336b40efa008f626","modified":1611309860434},{"_id":"source/_posts/vue_e2e.md","hash":"685b78ce939edd01a987ee7af9876af2f5b21b80","modified":1611309825520},{"_id":"source/_posts/vue_store_and_vuex.md","hash":"f3708e7b4b2bd54b0064210ea1eb90092f398f14","modified":1611309842468},{"_id":"source/asset/clock.html","hash":"cc3bb18925eea6089f5b59c2eb5b7568ce0344c6","modified":1595301740960},{"_id":"source/asset/css-pic.html","hash":"8b7a9f03cc3affdf8e82c169c6529ee50a9f5063","modified":1600849011386},{"_id":"source/_posts/web_fonts.md","hash":"7fcda9965b18a1acf2523c427c2bb51748a93fa4","modified":1599116454494},{"_id":"source/asset/js_sources_bookmark.html","hash":"0cee127d97114028d0c5d594db31d5adf419f65b","modified":1592444505827},{"_id":"source/asset/nonviolent-communication.drawio","hash":"2462c42be9e59c72c7614a5535a865bc6a33df5f","modified":1593390535497},{"_id":"source/asset/sitemap.txt","hash":"c34dab9fb31b18e95efb9b67d292258f25ebf2e0","modified":1597288318540},{"_id":"source/asset/sitemap.xml","hash":"1845827da29d49510166976dfe2c92d54d089615","modified":1597288315549},{"_id":"source/asset/sitemap.html","hash":"bd5502a970e4ab104a7b8fcbe460cf6b51473172","modified":1618988017262},{"_id":"source/asset/quotes.js","hash":"e0ca2aad0634e74bda79c9bd1779da45e0043082","modified":1592362994289},{"_id":"source/asset/tech_commuity.html","hash":"93704b2ee0654569b45ea94ecbc9ce31b41e5d35","modified":1592444199020},{"_id":"source/about/index.md","hash":"a0f7a9c3e24c930e21a39d98f9a07140393c8175","modified":1600152805642},{"_id":"source/cognition/index.md","hash":"d0ad0b8530940daf45671d07b978d1a17b485970","modified":1599122953352},{"_id":"source/comment/index.md","hash":"011ab80895435f87542c9b26ae3efb5ef10d18b9","modified":1587110268908},{"_id":"source/demo/index.md","hash":"dbb87fe1afb14e90a32fc1dffbe532d78351fd1a","modified":1586306581231},{"_id":"source/friends/index.html","hash":"d6cf6403621397a7a8a93f3b9aa1c49454bad70c","modified":1612830133565},{"_id":"source/gitbook/index.md","hash":"c6244434bf601c53beb2cc530e9f5979d809c44b","modified":1586306581231},{"_id":"source/fe_nav/index.md","hash":"1eb2030f31f2359cc01a2e73158587d1f4ddc8f1","modified":1607748995286},{"_id":"source/images/hexo1.jpg","hash":"1cc06bda617b8e4a1f9c8367f36da71bef7e2dd1","modified":1586306581402},{"_id":"source/images/hexo3.jpg","hash":"fac5866e8108733189e45a1355a9ec44343503e3","modified":1586306581418},{"_id":"source/images/hexo2.jpg","hash":"7a720d31151cf9bee431d1497f8644e273475c20","modified":1586306581402},{"_id":"source/images/learning3.png","hash":"4d68dd4fa35af91d478490a94df2779051271446","modified":1589441168226},{"_id":"source/images/learning1.png","hash":"fba653c164e0a3fd81572b5e07e97a2f14aa52c9","modified":1589441177718},{"_id":"source/images/learning2.png","hash":"a14c77764607d85cfa5e56e065a603e5e00d250e","modified":1589441191698},{"_id":"source/images/profile.jpg","hash":"27cd2ec742f33453f4a150df01e109b7c9e11e27","modified":1586306581512},{"_id":"source/images/stress_circle.png","hash":"3b8ce8f2ac5c13f27707b1e1b4849a5d0a1c8d90","modified":1586306581543},{"_id":"source/images/vue-message-plugin.png","hash":"082f905df8f419e94b26aec027bbd94543312a50","modified":1589394156000},{"_id":"source/images/vuex1.png","hash":"5d5d421d15e91243c9b285c19fa56ed86642a945","modified":1588206234000},{"_id":"source/images/vuex3.png","hash":"bfa1a78618ddbef0fd4d331cd1a94ff6ab72c653","modified":1588206234000},{"_id":"source/self_regulation/index.md","hash":"78474ed93977bd415bc72de5bc93f1d0b1b7baea","modified":1586306581543},{"_id":"source/images/wxCode.jpg","hash":"0216612a947f42797c6197d6b4551080cd1a81cb","modified":1586306581543},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1586306581559},{"_id":"themes/maupassant/languages/en.yml","hash":"1906487c1ff0e5547b1b5797d97303ba9b2b369a","modified":1622616797703},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1586306581559},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1586306581559},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1586306581559},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1586306581559},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"11dcbf8ec853dddf76656308b8e0817acc8e07cf","modified":1622616803591},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"f7ef9ec573cb6ac7551cf3cc5867ffaa20ddefc0","modified":1586306581559},{"_id":"themes/maupassant/layout/archive.pug","hash":"19e78a855e1787ef7491cab296c9a8d1b906eeb8","modified":1611309908460},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"590af60eb6d8114892b8b2bfbddad1156168b99b","modified":1607847308936},{"_id":"themes/maupassant/layout/base.pug","hash":"d9e732a51ca19d89bb0e2755a8a68e020b2ac7a1","modified":1608030858605},{"_id":"themes/maupassant/layout/index.pug","hash":"fcbf2318e39368a1d1b52957b9e53514717d120d","modified":1611299140883},{"_id":"themes/maupassant/layout/page.pug","hash":"e8755dcfe4d21e683a67375396c157eef772cdd6","modified":1586306581574},{"_id":"themes/maupassant/layout/post.pug","hash":"24d7a77e338905fd512bd81418d1f8547314730f","modified":1616637613915},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1586306581574},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1586306581574},{"_id":"source/images/dunning-kruger_effect_cn.jpg","hash":"6ce91caa6b1f98fee452412b631558c5c6b794fa","modified":1600410419398},{"_id":"source/images/dunning-kruger_effect.png","hash":"ef8e45603fda8da72d32b606c5381c2149bce8b5","modified":1598932554759},{"_id":"source/images/maupassant.jpg","hash":"fa0e39d4cca3899571140ebf259d6a6045c234bb","modified":1586306581418},{"_id":"source/images/profile_bak_big.jpg","hash":"02c503eebd742f9aac901cd3d2e9cd1a2db7cbf4","modified":1586306581512},{"_id":"source/images/schedule v3.0.png","hash":"85d53ede58a8ce03d337c287a29cc12c4bb97e75","modified":1586306581512},{"_id":"source/images/slogan.png","hash":"c48d18e3581eb93f0dc52191db6b076bd709c8fc","modified":1589603334105},{"_id":"source/images/vuex2.png","hash":"ba4fcc70a8c087d80d8817599e05ef6bfdb4fc99","modified":1588206234000},{"_id":"themes/maupassant/source/css/_variables.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607746903466},{"_id":"source/asset/drum/index.html","hash":"e8a81481e85ca24d19e04ff7ec642a334f84779a","modified":1600847450340},{"_id":"source/asset/drum/style.css","hash":"a184a075ba5718f5f318477ea97565b84b90c383","modified":1600844897322},{"_id":"source/images/ai/._01.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._04.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._02.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._17.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._03.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._18.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._19.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._20.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._21.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._22.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._23.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._24.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._26.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._27.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._25.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._28.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581246},{"_id":"source/images/ai/._32.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._29.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._30.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._33.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._31.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._35.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._34.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._42.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._44.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._43.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/._45.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581262},{"_id":"source/images/ai/003.gif","hash":"de9361cc26df550d89538f0b43544676bd0ca7cb","modified":1588141834505},{"_id":"source/images/ai/05.png","hash":"6122ade120b475d3e71faf3f0c205b11ba2f7010","modified":1586306581278},{"_id":"source/images/ai/06.png","hash":"71e872a303c3795d87cd05992366b6aa5c470f9b","modified":1586306581278},{"_id":"source/images/ai/08.png","hash":"a4f1635e3c090f9f7531a017e0bbd7cac42efebd","modified":1586306581278},{"_id":"source/images/ai/07.png","hash":"59f6d7a8e88733de5287d5cedee0f032c09d14b3","modified":1586306581278},{"_id":"source/images/ai/10.png","hash":"26492a5305f468c7f9db73644a981eeee7c7de5a","modified":1586306581278},{"_id":"source/images/ai/09.png","hash":"221bec12170cd87eb2618d8cae0ca6a746f7cc35","modified":1586306581278},{"_id":"source/images/ai/13.png","hash":"0b18b91ca71c8fdd1131880df6a31fbf2637e314","modified":1586306581278},{"_id":"source/images/ai/11.png","hash":"ebd77261e047d6dc9efc6971a99080099716efc9","modified":1586306581278},{"_id":"source/images/ai/12.png","hash":"51ccc0c92cc9805268e142c3d488875508982f6a","modified":1586306581278},{"_id":"source/images/ai/17.png","hash":"880d6dfcfa28edd1dd35bdab82aa4416dece1338","modified":1586306581293},{"_id":"source/images/ai/14.png","hash":"36c0d6b3952b724ffe7a4e064559a68334d63e7e","modified":1586306581278},{"_id":"source/images/ai/16.png","hash":"d952bf60d8aedf29f817c0c28050bdb52b1ded76","modified":1586306581278},{"_id":"source/images/ai/18.png","hash":"79e74ad64d26d026d2c1afae5ec90aa80c8dc131","modified":1586306581293},{"_id":"source/images/ai/20.png","hash":"c06df282cfbd420d05f59b39d5b4434f3c8f4589","modified":1586306581293},{"_id":"source/images/ai/23.png","hash":"bd358effdd8e0691b808fa46a6ed031051a3e3d0","modified":1586306581293},{"_id":"source/images/ai/24.png","hash":"04e4b378b831c0fb8a3147dccedfebf851acc590","modified":1586306581293},{"_id":"source/images/ai/25.png","hash":"ef5b4d671a997a48ff1fa700f9f4c087edd9f838","modified":1586306581293},{"_id":"source/images/ai/26.png","hash":"8ba7d0c7d3e91e516afbad93245063085ddc5cbc","modified":1586306581293},{"_id":"source/images/ai/27.png","hash":"c536f70765dd076d653e34836abb046b1b275fa5","modified":1586306581293},{"_id":"source/images/ai/28.png","hash":"5e20eadc0ab28adcec211a6398a0a266145b25be","modified":1586306581293},{"_id":"source/images/ai/29.png","hash":"43d887f2ec60c7ec4d6b4018a80ecd72bee50dec","modified":1586306581293},{"_id":"source/images/ai/32.png","hash":"0db43b80e834717e659b519a763b19114bc17290","modified":1586306581309},{"_id":"source/images/ai/33.png","hash":"019ecf7f95ce2d2ca26bd302899211b3907333ea","modified":1586306581309},{"_id":"source/images/ai/34.png","hash":"53e114bd5e091de0b0c00c0f7e9e777776127023","modified":1586306581309},{"_id":"source/images/ai/35.png","hash":"73215ba6df69da95008171b3e876bedc0516e200","modified":1586306581309},{"_id":"source/images/ai/38.png","hash":"7997bf7835da9d5fd69a03e02ca4f6ac5e87e5d9","modified":1586306581309},{"_id":"source/images/ai/40.png","hash":"80ec728674d602a1242a63372d41e3c09d42ab58","modified":1586306581309},{"_id":"source/images/ai/41.png","hash":"39972f1f80f41606cdb673b03b4d9f833ea06e92","modified":1586306581309},{"_id":"source/images/ai/42.png","hash":"4a51bae240ede3954833376daeb6d61d72b5b2fe","modified":1586306581309},{"_id":"source/images/ai/44.png","hash":"0cf14067ef5bf6b88c6e82d1b0bd82f98f820ab8","modified":1586306581309},{"_id":"source/images/ai/47.png","hash":"3a1920c9f2443356df8032d28e9f264ee8ca4dc4","modified":1587957576867},{"_id":"source/images/ai/49.png","hash":"1f8cd181e5fbd7afc9598d576b3e19bfa436cd84","modified":1587957705531},{"_id":"source/images/ai/51.png","hash":"ef0ddb1c104d2d793a869b849b08ecee161c1c3d","modified":1587966907007},{"_id":"source/images/ai/52.png","hash":"4f2ef4d67fd520480316825300054762e24e185b","modified":1587968351250},{"_id":"source/images/ai/53.png","hash":"ae11df9b192eb5b15f825acfc3b45958cbe2f56a","modified":1587969101428},{"_id":"source/images/ai/54.png","hash":"bcd7e620db670266714c16cfc3137ff62d0b7875","modified":1587969188308},{"_id":"source/images/ai/55.png","hash":"85188eefeed301a8999a9ee404952519268de452","modified":1587975958949},{"_id":"source/images/ai/56.png","hash":"8a28832b8c69fa9c2a5d0e9725d6b04bf269e36d","modified":1587975779565},{"_id":"source/images/ai/58.png","hash":"0f3b849a7c3de663df7cb9473846dc56958756f8","modified":1587976566607},{"_id":"source/images/ai/57.png","hash":"e850580bc849a4a0ed921c9c01e0c85ded319e28","modified":1587976143874},{"_id":"source/images/ai/61.png","hash":"bc95a5bb1e5f5733fcf4206d13031805eff2d515","modified":1588035230190},{"_id":"source/images/ai/62.png","hash":"c9283991adb0e2006eb12651370c8a6ff0329fd6","modified":1588045075468},{"_id":"source/images/ai/63.png","hash":"8e4a675f82be6fc9881581a47522ccdbe7248914","modified":1588053798114},{"_id":"source/images/ai/64.png","hash":"b031691e8fd3d9ed15870f3ca734897f7a55fd75","modified":1588056255026},{"_id":"source/images/ai/65.png","hash":"00da9ecc4ef8bf7e3a3b723fa8400c8143a2a1b9","modified":1588056642827},{"_id":"source/images/ai/66.png","hash":"86609ff198905c2349065761f10a6cd029c25650","modified":1588057862298},{"_id":"source/images/blog/._blog-counter.gif","hash":"a219e4f9305c65cc0e514202e5d4d27ca960d7d5","modified":1586306581324},{"_id":"source/images/ai/67.png","hash":"42df3002f2abddc1b035d923a9192d255740fd51","modified":1588142279682},{"_id":"source/images/blog/._google_search2.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581324},{"_id":"source/images/blog/._google_search.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581324},{"_id":"source/images/blog/._google_search3.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581324},{"_id":"source/images/blog/._google_search5.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581324},{"_id":"source/images/blog/._google_search4.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581324},{"_id":"source/images/blog/._scarsu-baidu.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581324},{"_id":"source/images/blog/._shenma.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581324},{"_id":"source/images/blog/blog-counter.gif","hash":"4393977c8bd2fc60720b736c356a84319a64b750","modified":1586306581324},{"_id":"source/images/blog/google_search.png","hash":"c38e3b87694887e0840eb915d3baba73f9f7e67a","modified":1586306581324},{"_id":"source/images/blog/google_search3.png","hash":"189a33243842f9f13dd5643e960f870dfd00a916","modified":1586306581324},{"_id":"source/images/blog/google_search4.png","hash":"d2183299b3db610685b9eae0eb4c26f723380874","modified":1586306581324},{"_id":"source/images/blog/google_search5.png","hash":"f80c3a4946987332dc11df0e0d8cd78440e5224b","modified":1586306581324},{"_id":"source/images/continuous_action.png","hash":"e5f172d441f522aa3d62f3bfb6f0478e566bd585","modified":1586306581340},{"_id":"source/images/devtools/._000.png","hash":"8b68a4efe25255aba3a9c1d1136c05b05638ebbe","modified":1586306581340},{"_id":"source/images/devtools/._214.png","hash":"9d7f6798673f25f9ac109cd550defb9b9630663b","modified":1586306581340},{"_id":"source/images/devtools/030.png","hash":"804c693c0f5a0743db2da304d6ccf3eec593ed22","modified":1586306581340},{"_id":"source/images/devtools/020.png","hash":"20a3c5c04916e17ab616d953f8b2bc9cb63938de","modified":1586306581340},{"_id":"source/images/devtools/100.png","hash":"ddd33280b017b4491fb12471caaa3ac1735ef6f6","modified":1586306581356},{"_id":"source/images/devtools/060.png","hash":"eb8f29bf8fa98e16bbf1a2ec435ed2cecd8974f0","modified":1586306581356},{"_id":"source/images/devtools/110.png","hash":"eba2980ad9b9df66e7fe29f1fdd4ea74d3320f6d","modified":1586306581356},{"_id":"source/images/devtools/120.png","hash":"db63189d91e50f56ea85ff69d89bf4e719c1da1e","modified":1586306581356},{"_id":"source/images/devtools/132.png","hash":"c908c9855df43d54c4f7180c666530802b905811","modified":1586306581356},{"_id":"source/images/devtools/135.gif","hash":"fd7bfff0563b7e31efb305a7b5243b6e95a233a7","modified":1586306581356},{"_id":"source/images/devtools/140.png","hash":"86ec1c8dc95294346f9f3929423d4644909a86a9","modified":1586306581356},{"_id":"source/images/devtools/150.png","hash":"5495d072f6f1aeb63eb599d1ad6ebdae09923ec6","modified":1586306581356},{"_id":"source/images/devtools/160.png","hash":"ee08ea8e09a00a974c22e53829cd54bfcba856c8","modified":1586306581356},{"_id":"source/images/devtools/180.png","hash":"652b613e0d55f3c9b46598f01cd4d018e1d96b4d","modified":1586306581356},{"_id":"source/images/devtools/170.png","hash":"d7307a319a2ea73234bd426b9a6a656f6b57ad0d","modified":1586306581356},{"_id":"source/images/devtools/190.png","hash":"84112be795cc0cd097ff6f5d2eb8f45fed2270f7","modified":1586306581356},{"_id":"source/images/devtools/191.png","hash":"168599000723952d3787dcfb802a6dbd6d6b1eb6","modified":1586306581371},{"_id":"source/images/devtools/204.png","hash":"16f6eb34d710a2b02aea3c1b7b19c0a0ddc40442","modified":1586306581371},{"_id":"source/images/devtools/205.png","hash":"e0d81980e1f494df7706ef6649d9b4dede2d0f3b","modified":1586306581371},{"_id":"source/images/devtools/209.png","hash":"35459e6f0a7d47d8b11979a7363bd50c6c2b4dce","modified":1586306581387},{"_id":"source/images/devtools/210.png","hash":"022d95969ca44093e4aff8260dfea63ac13f35ed","modified":1586306581387},{"_id":"source/images/devtools/211.png","hash":"44166d76b38a081b49b28ffbec937c059d779c22","modified":1586306581387},{"_id":"source/images/devtools/214.png","hash":"0fc80918fbbcae2d5a0660a4eae65ed60e60832a","modified":1586306581387},{"_id":"source/images/event-loop/Untitled 1.png","hash":"8ba0da82aa7844aa32d686db6b47492c30294ff4","modified":1591573536000},{"_id":"source/images/event-loop/Untitled 10.png","hash":"5b155df9654f517a9429005e570b55068431ae59","modified":1591573538000},{"_id":"source/images/event-loop/Untitled 11.png","hash":"fdc895a0056cd58bc8218abfb5d23de72e339d4e","modified":1591573538000},{"_id":"source/images/event-loop/Untitled 12.png","hash":"e65dc9beeb3abb82d5ee86e3f0861f2c3a4e3ecb","modified":1591573538000},{"_id":"source/images/event-loop/Untitled 15.png","hash":"4e695d13e9af700abcd3673771d9a0ce9aa075ff","modified":1591573538000},{"_id":"source/images/event-loop/Untitled 2.png","hash":"19a351a4bb378e10da2ae57e241fc9cd36783105","modified":1591573536000},{"_id":"source/images/event-loop/Untitled 16.png","hash":"daa83fd566dcc6331a73576f7941630af3ca8dcd","modified":1591573538000},{"_id":"source/images/event-loop/Untitled 17.png","hash":"6469960541cfcff072322591772a2a4722e00a83","modified":1591573540000},{"_id":"source/images/event-loop/Untitled 3.png","hash":"bac2e974a8eaa4583d56a2909846b125cec13feb","modified":1591573536000},{"_id":"source/images/event-loop/Untitled 4.png","hash":"137475aae005ab59ed98294fd1aedaae3e6f7ad9","modified":1591573536000},{"_id":"source/images/event-loop/Untitled 5.png","hash":"bef418518bc414236789fbc55a324204d6dc41ad","modified":1591573536000},{"_id":"source/images/event-loop/Untitled.png","hash":"bae817e1f8b6b6744a726263735523664991a1d6","modified":1591573536000},{"_id":"source/images/gitbook/._web_font01.png","hash":"45c6b5f75e612050c416176e071da4e4f51593d2","modified":1586306581402},{"_id":"source/images/gitbook/._web_font02.png","hash":"336f398f1a374fcf1390321f3a787a92ec6b618a","modified":1586306581402},{"_id":"source/images/gitbook/._web_font03.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581402},{"_id":"source/images/gitbook/._web_font04.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581402},{"_id":"source/images/gitbook/web_font02.png","hash":"fb975479c3c954b4939ea2151df8afd47b84db06","modified":1586306581402},{"_id":"source/images/grunt/._grunt03.png","hash":"746121711739f680ed2df8be6d7289defecee0c2","modified":1586306581402},{"_id":"source/images/grunt/._grunt02.png","hash":"a99874c1180b1c14a46e71f39241eeaed9af579c","modified":1586306581402},{"_id":"source/images/grunt/._grunt01.png","hash":"a17a34b2d48e941d8809e8ee9128720811d160a3","modified":1586306581402},{"_id":"source/images/gitbook/web_font04.png","hash":"f5f158b5072c4bfc7237814568d748f7043267f0","modified":1586306581402},{"_id":"source/images/grunt/._grunt04.png","hash":"ef50695cd1a8d7aced4499d5c44ff9f8e8c66ebb","modified":1586306581402},{"_id":"source/images/grunt/grunt01.png","hash":"e83e797076d76497aa6c5902ee4b7214ca44c964","modified":1586306581402},{"_id":"source/images/grunt/grunt03.png","hash":"3d8ac1eeef068a93df2b7790b54f2b1e6c8db305","modified":1586306581402},{"_id":"source/images/grunt/grunt02.png","hash":"b66b32865a140ef179897af5d96dda71eae4bfdb","modified":1586306581402},{"_id":"source/images/grunt/grunt04.png","hash":"8e5468599e491d91d757352ba89ecafb3f755fda","modified":1586306581402},{"_id":"source/images/hmos/001.png","hash":"0655206c8daa79d50dce11487716af4d4a6ee275","modified":1599742506214},{"_id":"source/images/hmos/002.png","hash":"e49cf2926b61ee9db735df72cbd72dc9e6d926f7","modified":1599742920321},{"_id":"source/images/hmos/006.png","hash":"e61fc02caa1ef78d3ef77591cbdf4e5625bcd6ac","modified":1599738606651},{"_id":"source/images/hmos/007.png","hash":"214728ef20a8189b66e26618efa25a9b3b52dde9","modified":1599738658262},{"_id":"source/images/hmos/008.png","hash":"8a95f1bf5af5a8e9f277cf4322d86bec2f3365ad","modified":1599743861816},{"_id":"source/images/hmos/009.png","hash":"6eb9a7a755d5f18d64f4d048c6a2d5c940f83fbb","modified":1599884049968},{"_id":"source/images/hmos/010.png","hash":"97e35b130086b05224e4dd0055c6a450bda53a07","modified":1599801372336},{"_id":"source/images/hmos/012.png","hash":"aa5e079947ce5719aaaff6c9ac1c72da0c89e3d3","modified":1599884751252},{"_id":"source/images/movie/._agzz1.jpeg","hash":"92d59af6436009321bf60be91a896beb45307bcd","modified":1586306581418},{"_id":"source/images/movie/._agzz2.jpeg","hash":"7a203427e0609a5b14757bbfe6dfa9342e6ca410","modified":1586306581418},{"_id":"source/images/movie/._agzz3.jpeg","hash":"86f931f733d7da4b2b1f5aabbc9ca70a01c7a1ec","modified":1586306581418},{"_id":"source/images/movie/._bwbj1.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581418},{"_id":"source/images/movie/._bwbj2.jpg","hash":"f75bb1b0eaaa0963cb16164a725c28774706fa33","modified":1586306581418},{"_id":"source/images/movie/._jrayty.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581418},{"_id":"source/images/movie/._jcldxt.jpg","hash":"c231fa29aa4617eb2ed3efb1c466d9c658cb614d","modified":1586306581418},{"_id":"source/images/movie/._prxd2.jpeg","hash":"70db3e9d2e628825b5c67d6635e8e66b59b1de03","modified":1586306581418},{"_id":"source/images/movie/._prxd1.jpeg","hash":"11c10a064feb3b88c01beff006dd5ccde4d4e8d4","modified":1586306581418},{"_id":"source/images/movie/._no_war.jpg","hash":"63b3c11f7746a814c9dff96240e2181970881414","modified":1586306581418},{"_id":"source/images/movie/._rsgs2.jpeg","hash":"62fc87c93535f90638bc3499c60bd237dd4d5eae","modified":1586306581418},{"_id":"source/images/movie/._rsgs1.jpeg","hash":"1b43a2037aaa5a0b412b50a9d0b69d072bbef232","modified":1586306581418},{"_id":"source/images/movie/._rsgs3.jpeg","hash":"296654a4a2b614c5bf116571449d5f847d8b414b","modified":1586306581418},{"_id":"source/images/movie/._rsgs4.jpeg","hash":"ca8e9bd042d0444b02dad7601752204fef4cbb8a","modified":1586306581418},{"_id":"source/images/movie/._tsaml1.gif","hash":"26562e363ba4d6f690904ffca9ef51debd99670c","modified":1586306581418},{"_id":"source/images/movie/._tsaml2.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581418},{"_id":"source/images/movie/._tsaml3.jpeg","hash":"718cfb35c2abf1efbf4926f69b2ca8b1fd561412","modified":1586306581418},{"_id":"source/images/movie/._wmsj.jpeg","hash":"ec81b35904e0a4b51808b83d706d5082f91bf379","modified":1586306581434},{"_id":"source/images/movie/._tsaml4.jpeg","hash":"a5285fd71214aea1f7f43ae55dae99938edf274e","modified":1586306581418},{"_id":"source/images/movie/._wmsj2.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1586306581434},{"_id":"source/images/movie/bwbj2.jpg","hash":"1645757f50c53a4bbb80c2e17873251b7621d8d0","modified":1586306581434},{"_id":"source/images/movie/no_war.jpg","hash":"03e7c7fe1d1ae762be7832d463b6a422a3d7357b","modified":1586306581449},{"_id":"source/images/nvc/._nvc.jpg","hash":"b5070eb01c76174e362ca315c84cf032199509e6","modified":1593390535505},{"_id":"source/images/nvc/._nvc2.jpg","hash":"7b12ad6537a8b6a3881a53778fb832e95024082f","modified":1593390535508},{"_id":"source/images/nvc/._nvc-map.png","hash":"e032bae48dfc9e18ee0d69768c02fdb3b2cb442a","modified":1593390535503},{"_id":"source/images/nvc/nvc-map.png","hash":"af85fd0f185c0f84d3a8ee40999ac5e9b36be5c8","modified":1593390535513},{"_id":"source/images/nvc/._nvc3.jpg","hash":"f8f36700649112affb33a4ca8a266bf7652b3c43","modified":1593390535510},{"_id":"source/images/nvc/nvc3.jpg","hash":"6ae7fbe1603b2cdc873f944a8270dfef778b4979","modified":1593390535523},{"_id":"source/images/post/000.png","hash":"efdc1476a2bd9af5c9e9ecba3240b0f0fd018d1f","modified":1586306581496},{"_id":"source/images/post/002.png","hash":"b5c2f919135697d19a37d81fe42c915b827d7e4e","modified":1586306581496},{"_id":"source/images/post/006.png","hash":"68b441ee371899a31be5ac1e9ad28801e3188707","modified":1586306581512},{"_id":"source/images/rich/poor_cf.png","hash":"5982778abc1dcd61646d76d1a5405b8a008c9cdb","modified":1592177540878},{"_id":"source/images/stateofjs/11.png","hash":"3efbb1fa7a72542f2c31e2ac76c95c5a11bc0ae3","modified":1586306581512},{"_id":"source/images/stateofjs/10.png","hash":"ea8c6838aa1c91d29f65b02e652ea66138aa86e6","modified":1586306581512},{"_id":"source/images/stateofjs/13.png","hash":"79f5658c2e2fd12e207f394e4fe7a9352d61b5dc","modified":1586306581527},{"_id":"source/images/stateofjs/12.png","hash":"e165ead054c37823e3136d7f20b0bb6bf3c1db18","modified":1586306581527},{"_id":"source/images/stateofjs/14.png","hash":"46e06656c42b74d32d11eba0ec55e28d8f38e69e","modified":1586306581527},{"_id":"source/images/stateofjs/16.png","hash":"1567896a8a70f44f5cdebbf272100138976f59d1","modified":1586306581527},{"_id":"source/images/stateofjs/15.png","hash":"1b126657a5c0feab23cb2b44e07f158a4a3d4bf2","modified":1586306581527},{"_id":"source/images/stateofjs/18.png","hash":"f76eb54fe2f58cbe97bbc94f6881bb0387e9a48b","modified":1586306581527},{"_id":"source/images/stateofjs/17.png","hash":"b5e71e6035e4920eb0e96c8e8be42520a4dd826f","modified":1586306581527},{"_id":"source/images/stateofjs/19.png","hash":"e96721bc1fae4f3a6061ca3820e87547f373f8c1","modified":1586306581527},{"_id":"source/images/stateofjs/20.png","hash":"c2b23b3f72d922aaf06345d627f4c2e910c61423","modified":1586306581527},{"_id":"source/images/stateofjs/2.png","hash":"5826deb5ff27ff26fe34396d51aff6e85b4615f8","modified":1586306581527},{"_id":"source/images/stateofjs/201904.png","hash":"ff513154c2a5c15f98335cb01640479d638a2b8f","modified":1588561875709},{"_id":"source/images/stateofjs/201905.png","hash":"a269aea212816e0339d87a6d5f10b9b4ea6073b9","modified":1588561915205},{"_id":"source/images/stateofjs/201907.png","hash":"ef870e0a094e0948af41aa440c6042a1ae89cf76","modified":1588561978338},{"_id":"source/images/stateofjs/201908.png","hash":"93297eb7ec25476b6c5c98b0e9033295105621ca","modified":1588562068086},{"_id":"source/images/stateofjs/201906.png","hash":"8172d66a2cd647262a40d62b173995b6c2d0e06f","modified":1588561935151},{"_id":"source/images/stateofjs/201911.png","hash":"0dcdd20c8e322e4cf63a20e2b0bae734872e49bb","modified":1588563636307},{"_id":"source/images/stateofjs/201909.png","hash":"37a3fb831dc9d90527ea412b1ad761483403d560","modified":1588563518600},{"_id":"source/images/stateofjs/201913.png","hash":"84c417f80747ceccc0f4646ebbee311e9f630265","modified":1588564089589},{"_id":"source/images/stateofjs/201912.png","hash":"44d3c62c24802c9de1be4061a6f940c4b302dfb5","modified":1588563914899},{"_id":"source/images/stateofjs/201914.png","hash":"6da1074ccffc0ec3fab83e567403911c5061bb9b","modified":1588564197572},{"_id":"source/images/stateofjs/201915.png","hash":"fc8402e9ee15bf6ab7a6e1af758d05f498f8f97e","modified":1588564290960},{"_id":"source/images/stateofjs/201916.png","hash":"c6149cc904ae7f417218c56447c64659e7120a4a","modified":1588564318937},{"_id":"source/images/stateofjs/201918.png","hash":"879ae7a4a20eb47011eba9637bf9fe420c0bfd22","modified":1588564359363},{"_id":"source/images/stateofjs/201917.png","hash":"91ca314cd561ea037f83bb6b6a3c6b054c45565c","modified":1588564339857},{"_id":"source/images/stateofjs/201919.png","hash":"1667493e9217ea1d6c77009e25635e97ebaf0f95","modified":1588564376875},{"_id":"source/images/stateofjs/201920.png","hash":"dd31e04cb0543bfc16fb30e7e636ab13ccb4c508","modified":1588565283419},{"_id":"source/images/stateofjs/201921.png","hash":"5202f630a0f2935afb45061fc3d7c91af8aaa421","modified":1588565299700},{"_id":"source/images/stateofjs/201922.png","hash":"d84ca4131bb7536d30dcd05d1383927c12b102c2","modified":1588565364792},{"_id":"source/images/stateofjs/201923.png","hash":"d8afc6736173865db737668fc13c2ac1f8d1f743","modified":1588565380344},{"_id":"source/images/stateofjs/201924.png","hash":"30ae54708faf767a05ae8d95aad7bfd9bc123910","modified":1588565411624},{"_id":"source/images/stateofjs/201925.png","hash":"8caf56fb18f6a45b60d82e3ca1c844c59eba267c","modified":1588565419714},{"_id":"source/images/stateofjs/201928.png","hash":"2240b728fdad61bd9196def165e0e9beb653e625","modified":1588565490687},{"_id":"source/images/stateofjs/201927.png","hash":"b005d6a0e49d63532275288486effc13e7dbea33","modified":1588565466663},{"_id":"source/images/stateofjs/201926.png","hash":"650ec659a4486843482162057c3fe375e7cd5113","modified":1588565448769},{"_id":"source/images/stateofjs/201929.png","hash":"2371b1c812d82aa925578f3661b7cc85d98af1bd","modified":1588565560068},{"_id":"source/images/stateofjs/201930.png","hash":"55da527b7e80b976fcd9e5af7377ef5f11922549","modified":1588566086713},{"_id":"source/images/stateofjs/201932.png","hash":"e499e8da049dcba990b9401400fed5e95c35c74f","modified":1588566117724},{"_id":"source/images/stateofjs/201931.png","hash":"8eeb8f9fb54210eff2df3322614a259d23ad519a","modified":1588566097468},{"_id":"source/images/stateofjs/201933.png","hash":"6b60010bb15ab3a3044bd276172052f96c7094fb","modified":1588566140038},{"_id":"source/images/stateofjs/201934.png","hash":"59e715bd2c6d0b1d56446ff687c849bee1a1588b","modified":1588566152151},{"_id":"source/images/stateofjs/201935.png","hash":"a8ccccc79523e916a4a4532314a01afc4faf3d50","modified":1588566164671},{"_id":"source/images/stateofjs/201936.png","hash":"5f38b2529c3a31728c847687270e490055734bca","modified":1588567134836},{"_id":"source/images/stateofjs/201937.png","hash":"61e0f14c9f1036eebcd969e0b45bb13c9b884909","modified":1588567180368},{"_id":"source/images/stateofjs/201939.png","hash":"e36d4850e5f97561aeb40a8b0c93763004a2db68","modified":1588567216755},{"_id":"source/images/stateofjs/201938.png","hash":"509d13bfa4ad17b8a2e24fe7b332387c27211a65","modified":1588567202284},{"_id":"source/images/stateofjs/201940.png","hash":"24c0c8911300660e8e0ce58c6d6b6fe061e73775","modified":1588567228481},{"_id":"source/images/stateofjs/201941.png","hash":"56b376221bfd49a95d1377c01ada2409093b7273","modified":1588567242357},{"_id":"source/images/stateofjs/21.png","hash":"0e634f4ad7be66fd1e1184ebb44fe87b594b8c5f","modified":1586306581527},{"_id":"source/images/stateofjs/22.png","hash":"930ae81b060233ba30e6d4f7b7721d547d455aad","modified":1586306581527},{"_id":"source/images/stateofjs/23.png","hash":"04fce4509a18a8e7e3ea853fae0f20b9b71514b4","modified":1586306581527},{"_id":"source/images/stateofjs/3.png","hash":"8ba961493d2e87fd9d117f51d95aa1f97a53d85c","modified":1586306581527},{"_id":"source/images/stateofjs/4.png","hash":"6fc7177289d99308fab327c4d95b53e92b2d4a78","modified":1586306581543},{"_id":"source/images/stateofjs/5.png","hash":"79cf6c61431003a9d901ba8a396212ee8caa87cd","modified":1586306581543},{"_id":"source/images/stateofjs/7.png","hash":"1618150df07c867acec4a2208bd4324aab27e48f","modified":1586306581543},{"_id":"source/images/stateofjs/6.png","hash":"b944f703a919d79369b113494d4fd32fa9b47236","modified":1586306581543},{"_id":"source/images/stateofjs/8.png","hash":"cdb87a31ad7f2f12b57a3b68d4d197c7d17e1963","modified":1586306581543},{"_id":"source/images/stateofjs/9.png","hash":"e2b23fa1d0929a9f6d4b352f806e876c42462343","modified":1586306581543},{"_id":"source/pwa/clock/favicon.ico","hash":"9445630aff5bce00ea44758fc3de1da69ab1007b","modified":1592535747761},{"_id":"source/pwa/clock/index.html","hash":"1e0118d31ec43250fc082c7c62e217562d6b0af3","modified":1592549822830},{"_id":"source/pwa/clock/index.js","hash":"d7b35a8a7a43e8704aefe31def6257d2c228fa68","modified":1592549822831},{"_id":"source/pwa/clock/manifest.webmanifest","hash":"40bd7976c30604d94b9a11b28fe4c8433f044f34","modified":1592550355800},{"_id":"source/pwa/clock/quotes.js","hash":"f266f31804ad8f14170cd5e0d50a57411e26c942","modified":1592538229592},{"_id":"source/pwa/clock/style.css","hash":"88c044ecf4df030cb0d41e03eb8836b131ca9462","modified":1592537584735},{"_id":"source/pwa/clock/sw.js","hash":"24fc441f0c8fbbed956da562312c4647b7583cfa","modified":1592552839575},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"a6e49060fad643899256ad10c9fa976336086cae","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"724445f46bddf62abf0ac88b7068ee4b9e3c19bb","modified":1607747723105},{"_id":"themes/maupassant/layout/_partial/footer_script.pug","hash":"22b8a73692e82817ea5cbb03c8afb7d4c686d224","modified":1597462028814},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"6d7ec21e88475ba76e76d2edfa070afadbfa0877","modified":1608032170361},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"31f95e472de4a7bc112b70fdf58d7cec43bc52ae","modified":1607768302341},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"b00d0bf59e7a723c8ebfb0582bd66238f3fd1d38","modified":1607692072905},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"2074eb18448143d34ff104e580f8fd4324626553","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"44a932d09ed74104eda6c244fb47455d0cb94888","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1586306581559},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"6fb1d8ee09cfc4fd31e8ae53736e4f479d45e31e","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"595e85948da68d9e19055384f29598c4f5e74a12","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"6598a94b5b7490cbded68f6eb4fc5fb12f18e85e","modified":1586306581574},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1586306581574},{"_id":"themes/maupassant/source/css/_dark_theme.scss","hash":"0c59480aa8a1935b631f7d1f1b0034a7d9fc559c","modified":1608009322355},{"_id":"themes/maupassant/source/css/_devices.scss","hash":"4996482bd65ed4fecb8479f787647c9af1957099","modified":1611357816918},{"_id":"themes/maupassant/source/css/_font_size.scss","hash":"e2512605561334744561eee6e4e4a5ebf0b05d08","modified":1607765462241},{"_id":"themes/maupassant/source/css/_process.scss","hash":"21e9562ac6a8ec40086d3d0cf1b9903c465d3eae","modified":1608028808822},{"_id":"themes/maupassant/source/css/donate.css","hash":"249aae275c1f0fd6ca8107cd260c23e1e2622f04","modified":1588574571023},{"_id":"themes/maupassant/source/css/git_comment.css","hash":"c429bbab7bdb20822bb812321ce17ad3e4d6844c","modified":1607747731149},{"_id":"themes/maupassant/source/css/style.scss","hash":"b2398eb3c672e6fcecef77e00f23fa8a50e9a317","modified":1616638293904},{"_id":"themes/maupassant/source/css/normalize.css","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1607747965879},{"_id":"themes/maupassant/source/donate/index.html","hash":"15cccdbea40527be50168617f239620e9d524370","modified":1586306581590},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1586306581590},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1586306581590},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1586306581590},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1586306581590},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1586306581590},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1586306581590},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1586306581590},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1586306581590},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1586306581590},{"_id":"themes/maupassant/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1586306581606},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1586306581606},{"_id":"themes/maupassant/source/js/donate.js","hash":"a9ff8d20f00ba6c216e6a55865c0b47ce6b28f2c","modified":1586306581606},{"_id":"themes/maupassant/source/js/search.js","hash":"8208d1eeab5f44d12a6da1bdd54062f6216b132c","modified":1587106221399},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"398bcfbc900e53c33353e9e95493268d53075853","modified":1602919238990},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1586306581606},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1586306581606},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1586306581606},{"_id":"source/images/ai/01.png","hash":"99271ef28b5b2e0d1e311ff23e0e31e05c3abd3a","modified":1586306581262},{"_id":"source/images/ai/15.png","hash":"2e5355a2b7fa32fe443bc234ea800ddf68adc840","modified":1586306581278},{"_id":"source/images/ai/19.png","hash":"1faa4a0e942071884c981d8130836086b36bad69","modified":1586306581293},{"_id":"source/images/ai/21.png","hash":"931099fe5bab57f72c54f17239dd9cebbb859321","modified":1586306581293},{"_id":"source/images/ai/31.png","hash":"85cf5fbbea342c9c254d48a52ef19415f9fe102f","modified":1586306581309},{"_id":"source/images/ai/39.png","hash":"84f218d5543d0cfe7c04355ed6d680c722e6776e","modified":1586306581309},{"_id":"source/images/ai/45.png","hash":"c59356ae2bd32aa56aedc4515af1c5597107e909","modified":1586306581309},{"_id":"source/images/ai/46.png","hash":"081a687a587619ec2262984118dbad9b35761b15","modified":1587957465105},{"_id":"source/images/ai/60.png","hash":"e5c35e7a3f567044d56b6f6272765eea1c2bb503","modified":1587981553034},{"_id":"source/images/ai/59.png","hash":"e35975b3432e0249489a8c792d0af50a73569973","modified":1587980046667},{"_id":"source/images/blog/google_search2.png","hash":"21d386888d09580f9023da57cb13fa8304d1c435","modified":1586306581324},{"_id":"source/images/blog/shenma.png","hash":"adfa661a15da1d96785d25953b1a506a81b93356","modified":1586306581340},{"_id":"source/images/blog/scarsu-baidu.png","hash":"d153241c8e6b9b579a64dc0d77b5ee52e2a80263","modified":1586306581324},{"_id":"source/images/c4/code.jpg","hash":"b6d5df8bcaaf41253ecf593fed2353f23ac6aee2","modified":1592460436861},{"_id":"source/images/c4/context.jpg","hash":"3a877f9c858f83d20f28089d36774032b24f7b05","modified":1592460083233},{"_id":"source/images/devtools/011.png","hash":"198e745a5d1729cb59d40084c79b4f670c68e3f8","modified":1586306581340},{"_id":"source/images/devtools/010.png","hash":"2bcf243f9f3c22c8e7c7d119f14443457596c6d3","modified":1586306581340},{"_id":"source/images/devtools/000.png","hash":"cc3498ea5ef888a78868c473fcd25b76ba6e62c5","modified":1586306581340},{"_id":"source/images/devtools/051.png","hash":"c331ce7d6c91967c72d8132ae6fa4fd47e349a54","modified":1586306581356},{"_id":"source/images/devtools/130.png","hash":"ffa1f9ecd4bdd0c41d002d883f89b423d53f881b","modified":1586306581356},{"_id":"source/images/devtools/131.png","hash":"163aa1ff1ccf47e45a99a6dff5fd19101118cb37","modified":1586306581356},{"_id":"source/images/devtools/133.gif","hash":"1aa7fc9ad2b024b3f5fce63add221ae5f5e5ea6d","modified":1586306581356},{"_id":"source/images/devtools/200.png","hash":"4fed1fdfbd0beda6d803720479f6464d88982515","modified":1586306581371},{"_id":"source/images/devtools/203.gif","hash":"a5950c2e1b1fdecdd5680866244e0809e91afcb6","modified":1586306581371},{"_id":"source/images/devtools/207.png","hash":"0e2afa90952c38932e87676b83e89b8ab0951b26","modified":1586306581387},{"_id":"source/images/devtools/211.gif","hash":"a8a2e27f0f85490bec6fbe3cbd0f96cd00d38d26","modified":1586306581387},{"_id":"source/images/event-loop/Untitled 8.png","hash":"34c2b73c878c78483633aacbc8345068bedacc09","modified":1591573538000},{"_id":"source/images/event-loop/Untitled 9.png","hash":"746c32667dc0c2e42464957e6b7bd94cc827e5a6","modified":1591573538000},{"_id":"source/images/event-loop/Untitled 7.png","hash":"21f953a035dbb76af559b4d4d26d85a8960c74de","modified":1591573538000},{"_id":"source/images/event-loop/raf.png","hash":"817abb04d9413c6f93cee4bfc53917eae6863b7e","modified":1593768171861},{"_id":"source/images/gitbook/web_font01.png","hash":"e6795d49c23e8705f847bb3d1fbd49620cbd3350","modified":1586306581402},{"_id":"source/images/gitbook/web_font03.png","hash":"2e710f6177d2663f3b3dbb4bdcd200e5e2012a18","modified":1586306581402},{"_id":"source/images/hmos/005.png","hash":"084080234107a3e5551f9f12f082f4da7eb8854a","modified":1599740684820},{"_id":"source/images/movie/tsaml1.gif","hash":"dbb3fda84c01456047672b1ed0d72a35d5d56f4f","modified":1586306581481},{"_id":"source/images/movie/tsaml3.jpeg","hash":"5a9d23af0287e54060c4f2e3b8d90e256597e676","modified":1586306581481},{"_id":"source/images/nvc/nvc.jpg","hash":"dc5e3a80ecb255f49d62da73dcb2bbc9fb8f4524","modified":1593390535517},{"_id":"source/images/nvc/nvc2.jpg","hash":"1b6a74f7b5212c76be140e11d72b77ae4b6a311c","modified":1593390535520},{"_id":"source/images/post/003.png","hash":"77e199bb723835b4989290731b9a4e39fede67f3","modified":1586306581496},{"_id":"source/images/notion/ds.png","hash":"bd4b51b536b22e192f50e6351d9aa9884558fd08","modified":1586503506239},{"_id":"source/images/notion/header.png","hash":"c5ebd687a663e6807fd2ece16869ab99832f7632","modified":1586479686365},{"_id":"source/images/read/behavior.jpg","hash":"724ae9e5275d2006766ea6b7d43fd8c02ac47987","modified":1589846647367},{"_id":"source/images/read/rem.png","hash":"0b1e2b34ccf9bc6f3e46f4411c996f03847d006c","modified":1589952335455},{"_id":"source/images/profile_bak_black.jpg","hash":"f192a9524a91c1166d39074729930ba63b211471","modified":1597465133840},{"_id":"source/images/rich/4.png","hash":"cb12d7b2bd6725aed195e127842e1fc66b44c346","modified":1592177540868},{"_id":"source/images/rich/middle_cf.png","hash":"bd79e283a463e60ac704c1e9d4a70d323143afec","modified":1592177540872},{"_id":"source/images/rich/rich_cf.png","hash":"a7975617709eeedfca487d6d3987ee9dd6f3b214","modified":1592177540881},{"_id":"source/images/stateofjs/1.png","hash":"d87af032052cfdc70f3786234d9bc922ca526d04","modified":1586306581512},{"_id":"source/images/stateofjs/201903.png","hash":"51fd7ed9f06d6a16bca0c5bece1587e50213f0d0","modified":1588561860516},{"_id":"source/images/stateofjs/201902.png","hash":"79c9eb3cfa4283e318cf532f4a082f7a740aca10","modified":1588561783601},{"_id":"source/images/stateofjs/201910.png","hash":"2c9fbc2aa2f17a6323742a807733dcff1a6ac902","modified":1588563384972},{"_id":"source/images/vue3/demo.png","hash":"cf06fb5ce3a9183cab05cc13a7867bf0bc8dc075","modified":1595552330000},{"_id":"source/asset/drum/sounds/hihat.wav","hash":"83da2ee10e1d23554ef870573a91786bec9f61ba","modified":1600844897309},{"_id":"source/asset/drum/sounds/kick.wav","hash":"4f936bca3cd20d14e98286e3b6cd96b495fabfff","modified":1600844897310},{"_id":"source/asset/drum/sounds/snare.wav","hash":"c6fbd1c79b653b815ef3f84db9edb4f9465a99be","modified":1600844897319},{"_id":"source/asset/drum/sounds/tink.wav","hash":"fcd01a08cf5aea833923fb505bbab2c070a2bc8d","modified":1600844897320},{"_id":"source/images/ai/03.png","hash":"a43c69e998137abfc4a2d1a79124433bf4730b84","modified":1586306581262},{"_id":"source/images/ai/30.png","hash":"c09289ead258b80b802961c77e4e1549f2471c0e","modified":1586306581293},{"_id":"source/images/ai/36.png","hash":"367e9e5774f2b0bf320ca25a1e2bfcf4bda0fc03","modified":1586306581309},{"_id":"source/images/ai/37.png","hash":"5649709ab965bb0d994268eea5d9ea35381e2572","modified":1586306581309},{"_id":"source/images/ai/43.png","hash":"296921057ef4fc321e72e0b251f4caaa916083fe","modified":1586306581309},{"_id":"source/images/ai/48.png","hash":"75a86c2a935420e1feee31d91d21f748e219236d","modified":1587957596971},{"_id":"source/images/c4/container.jpg","hash":"30515916b069b78a06e5a00da4a70f539b6fb915","modified":1592460184393},{"_id":"source/images/c4/component.jpg","hash":"48fbb4f1910b1fe3b97e7904e11836cf636382c6","modified":1592460196747},{"_id":"source/images/bookmark.png","hash":"1822a29e24998c29e3144c14345965881ecd7a3e","modified":1592444809754},{"_id":"source/images/devtools/201.gif","hash":"a55d80037ca54a18934e2a13c07c3cfe48251c8d","modified":1586306581371},{"_id":"source/images/devtools/212.gif","hash":"932a547023ac293373d0a7d0a99103920a75b693","modified":1586306581387},{"_id":"source/images/hmos/000.png","hash":"53fd986c67466715527bff980df7d2c06fd56e59","modified":1599746049860},{"_id":"source/images/movie/rsgs4.jpeg","hash":"9f7aa17885c627743d1b5263a8ebc7cd6f096064","modified":1586306581481},{"_id":"source/images/post/004.png","hash":"3e8c5fd447b95e73daee4477701b7d0690217a3a","modified":1586306581496},{"_id":"source/images/read/3-8lifestyle.jpg","hash":"e2b4835f5b98a97df8f34d800493078495a6fc93","modified":1589934982419},{"_id":"source/images/self_control.png","hash":"daec630a46993814592c07514619a3225ff26a74","modified":1586306581512},{"_id":"source/images/stateofjs/000.png","hash":"39990e5515da56e3179274c33c4d6adcfc32afc0","modified":1586306581512},{"_id":"source/images/stateofjs/001.png","hash":"61ea320c9a2580c68884cbb100f5a3432adebffe","modified":1586306581512},{"_id":"source/images/stateofjs/0000.png","hash":"7f73758305368a9d540a07985eb608a2c747588a","modified":1589532287621},{"_id":"source/images/stateofjs/201901.png","hash":"3e1241b94445793c9c2f8f783c1f63e1fd14ccb0","modified":1588561704767},{"_id":"source/images/vue3/reactive.png","hash":"3567260e695734c0cdb7fc44bd03b04e7c19c194","modified":1595552330000},{"_id":"source/pwa/clock/icon/icon.png","hash":"765822dff6a8a5c7c24fa5ba7e9bf54151e9e91a","modified":1592552097754},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"61c15b4c06481f7a48f919a47cc56902a737f7b5","modified":1589531094568},{"_id":"source/asset/drum/sounds/clap.wav","hash":"679d6e1831a44969df76373d9f6c43f28b4fdf12","modified":1600844897308},{"_id":"source/asset/drum/sounds/tom.wav","hash":"0a0b785773839b5758948af8807a23a61df9cd4d","modified":1600844897321},{"_id":"source/images/ai/02.png","hash":"0fc582f1db4f791dfc51e38eccc8e23586d9be4d","modified":1586306581262},{"_id":"source/images/devtools/040.png","hash":"901acbb786cef1cc8a21b08613670ea3e344895a","modified":1586306581340},{"_id":"source/images/devtools/050.png","hash":"2de60daf6e505379587d4e502a1bccf50fe6b86c","modified":1586306581340},{"_id":"source/images/devtools/208.gif","hash":"768a2842d3270857a7cc02ead069287005d539bc","modified":1586306581387},{"_id":"source/images/devtools/overview.png","hash":"37fefec933b285c6e47f0526208329687847921e","modified":1590103017756},{"_id":"source/images/event-loop/Untitled 6.png","hash":"c7112d7da76983eeb72b6f0769f6285b004b2e7c","modified":1591573538000},{"_id":"source/images/hmos/004.png","hash":"0f294d621e0c7584ab754d9c03a915de44110eff","modified":1599743372142},{"_id":"source/images/hmos/003.png","hash":"389bc8d8a5e6be6700937744e0809fa050f4b92a","modified":1599743236191},{"_id":"source/images/post/005.png","hash":"7ca58e79e362dc47225100e63641359aff4dd744","modified":1586306581496},{"_id":"source/images/rich/0.jpg","hash":"572dc1941b080501b2eae1ef979c71985ad6f1a5","modified":1592177540866},{"_id":"source/asset/drum/sounds/boom.wav","hash":"825475da6afa22c5fd92b47a4f376d20b4c16d45","modified":1600844897306},{"_id":"source/images/ai/22.png","hash":"b44e40857fd5bb721b2b085abd859ef061fc0333","modified":1586306581293},{"_id":"source/images/movie/jrayty.png","hash":"26761eaf6faee157505a697fe3b852a8c56e03e7","modified":1586306581449},{"_id":"source/images/post/001.png","hash":"744026cb0a6f80dd336d94765170fe7c5dd812d2","modified":1586306581496},{"_id":"source/images/notion/home.png","hash":"f7647ff6144180023860d647db3d18ff69abd941","modified":1586503495338},{"_id":"source/images/movie/agzz2.jpeg","hash":"f3b723889dcae55904787ebb53a71f6fc2b878de","modified":1586306581434},{"_id":"source/images/movie/agzz3.jpeg","hash":"27c8d1f572f0b4d9939477f5b6c71570284a689b","modified":1586306581434},{"_id":"source/asset/drum/sounds/openhat.wav","hash":"7b4d7f99a2b31eaa6625514c05f9d0fd45c3637a","modified":1600844897313},{"_id":"source/images/ai/04.png","hash":"1945193bc3bb0d8ef35f8a4a13d2b289eff15f3d","modified":1586306581278},{"_id":"source/images/devtools/202.gif","hash":"8d098caa60ac7728d4d817cbba7f36c056f9a31b","modified":1586306581371},{"_id":"source/images/devtools/206.gif","hash":"7017d0776ca9fea8232eba98082e0b2cd2269033","modified":1586306581371},{"_id":"source/images/hmos/011.png","hash":"2be25d7334af2be8fbcec69dafe50b0b58323165","modified":1599742058983},{"_id":"source/images/movie/agzz1.jpeg","hash":"a11787ecd8d1207f53c4a91236bffae329807d03","modified":1586306581434},{"_id":"source/images/ai/50.png","hash":"3eb435715c42b1f751b13c23bcba11afc36b7a43","modified":1587958190797},{"_id":"source/images/movie/rsgs2.jpeg","hash":"fd51dcd95453e93dafe05f28b628970a19d946b0","modified":1586306581465},{"_id":"source/images/devtools/207.gif","hash":"8fa8fae5d8fce89678326a4997f3e1993792daf9","modified":1586306581371},{"_id":"source/images/vue-message-plugin.gif","hash":"06b0e2c4880dff259c94aaa1f80b0bf447f46b8e","modified":1589422605858},{"_id":"source/images/movie/tsaml4.jpeg","hash":"797ef29cbb2f665bddd278e15c36fd6872da4ca4","modified":1586306581481},{"_id":"source/images/event-loop/Untitled 14.png","hash":"e98df8b46a8ebb092bf72132898cd6e589263a1f","modified":1591573538000},{"_id":"source/images/event-loop/Untitled 13.png","hash":"cce1492c9f46fc7e44b9fea0b2add72856128ed3","modified":1591573538000},{"_id":"source/asset/drum/sounds/ride.wav","hash":"3e8d4f8e6556dcbb4878992d17be1dc98806b16e","modified":1600844897317},{"_id":"source/images/ai/002.gif","hash":"6a7844f1667e0bd18c7efed87f8754274893a395","modified":1588058122102},{"_id":"source/images/devtools/213.gif","hash":"38f16d2021930f25ede0fa59d894ae306ea524d4","modified":1586306581387},{"_id":"source/images/read/morning.png","hash":"29a9e422c12742580aba3339de50a413b67c8b7d","modified":1590021050988},{"_id":"source/images/movie/rsgs3.jpeg","hash":"843469c2db31cd07e6be6b534cc8982566d0de71","modified":1586306581481},{"_id":"source/images/movie/tsaml2.png","hash":"67c781a3650be2934974761d26bdb9badc2d4f37","modified":1586306581481},{"_id":"source/images/movie/wmsj2.png","hash":"03d1073b9e033a2fdcfcebc1383b131e4f92f3d5","modified":1586306581496},{"_id":"source/images/movie/rsgs1.jpeg","hash":"2c93647a3bc6cd4cfc56cf2cfdf78d2643e6be48","modified":1586306581465},{"_id":"source/images/movie/wmsj.jpeg","hash":"ad4d70dff76d35bc24b4625866dd4c27fef5e921","modified":1586306581496},{"_id":"source/images/ai/001.gif","hash":"8e6b6eef19ee00301fddc70c80e8e79266566ad6","modified":1588035706804},{"_id":"source/images/movie/bwbj1.png","hash":"18adfaddcd058585bd4c559cad0068226de506ad","modified":1586306581434},{"_id":"source/images/movie/jcldxt.jpg","hash":"12cd96fe697c505884a0baccdf583cc32f8e1f5e","modified":1586306581449},{"_id":"source/images/movie/prxd2.jpeg","hash":"b20b3346a8b57139fdc005ec6b8d16416b325798","modified":1586306581465},{"_id":"source/images/event-loop/preview.gif","hash":"8079dfd97cc3891057de56e213b472c5910ba1a1","modified":1591573536000},{"_id":"source/images/movie/prxd1.jpeg","hash":"b15c44d3c80ccf4509a7178d69df4d274f0849b0","modified":1586306581449},{"_id":"source/_drafts/devtools_intro_share.pdf","hash":"2af27c4c8c9ffbbdb2a71ca8ecfebbd2938a0e2c","modified":1599889575193},{"_id":"source/images/event-loop/event_loop.gif","hash":"849b6a246f4355ab5c3559e938fc26f223ef89e9","modified":1591573538000},{"_id":"source/images/ai/000.gif","hash":"12a36f10b7e4c282e4dd2a2820e68711e5fa6cfe","modified":1587967534161},{"_id":"public/atom.xml","hash":"cb2aeb5d869ebe5da0efb053a3ac9bde241c9b42","modified":1611296668826},{"_id":"public/search.xml","hash":"952260ca228510d8fe5b824ff95bab6c19e3cf28","modified":1611296668845},{"_id":"public/404.html","hash":"5195838a536e8e9b74b43a08d097804e2da39ed8","modified":1611296668918},{"_id":"public/apps/index.html","hash":"57accaab4196caf32f05ec7224c6b2a5f0220913","modified":1611296668918},{"_id":"public/comment/index.html","hash":"062ccc027359717b316b1ab0d623308cea117d95","modified":1611296668917},{"_id":"public/about/index.html","hash":"865b8e647a7ef50c6b2832c8014ec310c60b587a","modified":1611296668918},{"_id":"public/demo/index.html","hash":"f83ac66dffb70f504618c6d0be6ab5f8edc9a77f","modified":1611296668918},{"_id":"public/gitbook/index.html","hash":"f2d73e2536c9d149072098fd2ffc1c1c0078c4c7","modified":1611296668918},{"_id":"public/archives/1996/index.html","hash":"19ccdaf62d6bcc56ea9c49ba0778b96798ae6487","modified":1611296668919},{"_id":"public/archives/1996/06/index.html","hash":"a57b60c2529e92392eb2e2c86796ff70ca939b56","modified":1611296668919},{"_id":"public/archives/2018/01/index.html","hash":"9fd79c7672214941e7ea7b285e7492a3d2c52ea6","modified":1611296668919},{"_id":"public/archives/2018/02/index.html","hash":"e5ead9d0461e4a87c9abebbe8d315cbf8dc6a2c8","modified":1611296668919},{"_id":"public/archives/2018/03/index.html","hash":"6bbbf5e66e3699516ff5e87f86231839c113c4b8","modified":1611296668919},{"_id":"public/archives/2018/04/index.html","hash":"ae1a12fdab930117137ca8efcb57a116b3384991","modified":1611296668919},{"_id":"public/archives/2018/07/index.html","hash":"a6ead88af55dedb1093621e4b491634fb53201ec","modified":1611296668919},{"_id":"public/archives/2018/08/index.html","hash":"fed91ee261e84ebce61d13765325d374a38c3913","modified":1611296668919},{"_id":"public/archives/2018/09/index.html","hash":"46d4625d9efa525ad91ea44d72c0613f99406288","modified":1611296668919},{"_id":"public/archives/2018/12/index.html","hash":"a64559451ba9035410b5818a182a82eace6d3814","modified":1611296668919},{"_id":"public/archives/2019/01/index.html","hash":"ef627389a3a07bef47ca6fa0741e989be581712a","modified":1611296668919},{"_id":"public/archives/2019/06/index.html","hash":"b181fc98b53ff066914734ed78f5a92169c9d669","modified":1611296668919},{"_id":"public/archives/2019/07/index.html","hash":"be131e61a6fc31763e58cce5a1cae642f2337c13","modified":1611296668919},{"_id":"public/archives/2019/08/index.html","hash":"be30c6356c1fcfe3cb422bfe3d13d85af1c25e8e","modified":1611296668919},{"_id":"public/archives/2019/09/index.html","hash":"9577f23827b49bbde4f1b44a4d298b864b3f6172","modified":1611296668919},{"_id":"public/archives/2019/11/index.html","hash":"5894dc6316832c8d6868c256cbeecbcaf76b36d7","modified":1611296668919},{"_id":"public/archives/2020/07/index.html","hash":"729bc9641551d3311eab4df03203d5622a6f86d0","modified":1611296668919},{"_id":"public/categories/ScarSu/index.html","hash":"35b483a83d12c7bc67c73e4fbecdade4f99bb6ff","modified":1611296668925},{"_id":"public/categories/fe-tools/index.html","hash":"38bc0a951cf794443ffe2b9043b6f16136087519","modified":1611296668925},{"_id":"public/categories/tech-news/index.html","hash":"c4f0384c6ea060732c2c02a9b2185af44ea75130","modified":1611296668919},{"_id":"public/categories/html/index.html","hash":"004daa0d149cddfc64d6ac88fe71b3c2ac311ec4","modified":1611296668919},{"_id":"public/categories/tools/index.html","hash":"5d0ebb659354b4deda434c9a1e66a528fbbe9ff7","modified":1611296668919},{"_id":"public/categories/10技术-JS/index.html","hash":"755e0410b34cc2c86b31b3adeb06d89da3122ed2","modified":1611296668920},{"_id":"public/categories/database/index.html","hash":"2c25d7de64e422ad8bcf8ce80c27db451886517f","modified":1611296668920},{"_id":"public/categories/learn/index.html","hash":"f81cfbdaf8132ef5d78f0698f9ff4aa824935d4b","modified":1611296668920},{"_id":"public/categories/lang/index.html","hash":"afe1dc70f3f4022d18fc9dab746828a9d3d1bf7f","modified":1611296668920},{"_id":"public/categories/fe-test/index.html","hash":"e804983286fcba11915f06851acc03c04e7713ac","modified":1611296668920},{"_id":"public/page/4/index.html","hash":"ab335bab62d8cedc46e1086451d99fc3a793fa8c","modified":1611296668925},{"_id":"public/tags/360fed/index.html","hash":"03be73f0c187af04be1e4c6180e8d742c97373ab","modified":1611296668920},{"_id":"public/tags/ES/index.html","hash":"261189fc23d2a43c0e042c12d27d5e2353e4b1ec","modified":1611296668920},{"_id":"public/tags/阿德勒心理学/index.html","hash":"a02d2a8ab72500b3709b24f373a8911b9f0b87e5","modified":1611296668920},{"_id":"public/cognition/index.html","hash":"4c434a24c1fdcb7d09b09a10a0a4d39330e3c30b","modified":1611296668920},{"_id":"public/friends/index.html","hash":"7d8880995bc555302429391cb37bffce29556858","modified":1611296668920},{"_id":"public/self_regulation/index.html","hash":"1c32c0691c0291367752e73c242517f859b600b6","modified":1611296668920},{"_id":"public/fe_nav/index.html","hash":"e2ef8642459b5e7b88c12f800045f47d90782792","modified":1611296668920},{"_id":"public/css-variable/index.html","hash":"95aea403fa61fd4d7742840e81fd49e6e92e374b","modified":1611296668920},{"_id":"public/learning_how_to_learn/index.html","hash":"1ae1969ac2e4b67230f17a632c96a7aa160b1753","modified":1611296668920},{"_id":"public/hmos/index.html","hash":"d8d653fd0464f3a5b5c6a9cbe162cb4094f068af","modified":1611296668920},{"_id":"public/vue_e2e/index.html","hash":"b20550ae0345b24adf8965e0f8f409379bf6f5c0","modified":1611296668920},{"_id":"public/vue3_reactive/index.html","hash":"66ea0519792a8c9a9e87cb79127c7b09b59468bd","modified":1611296668921},{"_id":"public/nonviolent_communication/index.html","hash":"2e7f6910aa3e25bcdb9dd1a54f47f972528e613b","modified":1611296668921},{"_id":"public/rich_dad/index.html","hash":"2d690cc2498a7bd28d4eebdb3587c0ce050c3347","modified":1611296668920},{"_id":"public/nextTick/index.html","hash":"e1b5b83081ba8c0c44183f05d1dbd7edfe172c22","modified":1611296668921},{"_id":"public/event_loop/index.html","hash":"45d20ad13893a5bbcf3bd0584e7cbd7c3d58b696","modified":1611296668921},{"_id":"public/3-8lifestyle/index.html","hash":"00914737c745210b6e328f17df7effd4bcef3cdb","modified":1611296668921},{"_id":"public/how_to_learn_wheels_source_code/index.html","hash":"7c252e9616fc030a4b56d412869b04b0949f06d2","modified":1611296668921},{"_id":"public/vue-message-plugin/index.html","hash":"e94647286c244f4b4e92aa07408b117ba0ca0251","modified":1611296668921},{"_id":"public/functional_programing/index.html","hash":"5d98bfa610f92c10d83d607272a7a58425063cc9","modified":1611296668921},{"_id":"public/dive_into_regular_expression/index.html","hash":"b7b9a5257eb61f79d0ac83485797f9553128ec5e","modified":1611296668921},{"_id":"public/vue_store_and_vuex/index.html","hash":"788f85c4cd739cb5900f27e38413ddab0fa9a9b7","modified":1611296668921},{"_id":"public/fed_ml_15_py_model/index.html","hash":"45b37119fcbc24e3818807e931b236e514def0ae","modified":1611296668921},{"_id":"public/fed_ml_14_slider/index.html","hash":"a2934017f569643b49dcddfddfc8ab7608e33b81","modified":1611296668921},{"_id":"public/customize_vscode/index.html","hash":"58cba2e6f1bca597ef5ec27b18f39dba762e0cef","modified":1611296668921},{"_id":"public/fed_ml_13_speech_recognition/index.html","hash":"8a561a03dcb6653c9c7119531db946847a22b21b","modified":1611296668921},{"_id":"public/fed_ml_12_transfer_learning/index.html","hash":"f021f6b17f6f51cfcc1bf4f9f2bf42483e591e79","modified":1611296668921},{"_id":"public/fed_ml_11_pre_training_model/index.html","hash":"ad8f7e379b4778a986cfc6d03d6551a51225d97d","modified":1611296668921},{"_id":"public/fed_ml_10_handwriting_number/index.html","hash":"c5aae1bd0eec2a99d66b0ec0103806628c1416ec","modified":1611296668921},{"_id":"public/fed_ml_09_under&overfitting/index.html","hash":"9da42fd67518e449aa90d8423da785b9871f44dd","modified":1611296668921},{"_id":"public/e_journal_by_notion/index.html","hash":"28bd9e7b558b5018d5fb4dbba3b2c95b8471eebf","modified":1611296668921},{"_id":"public/vm_in_devtools/index.html","hash":"d66ee00891a221c358eb360e1fb7f7a7b348f2c6","modified":1611296668922},{"_id":"public/devtools_07_memory/index.html","hash":"585f63c793037fa864aedf8da29e0f14abd41b88","modified":1611296668922},{"_id":"public/devtools_06_performance/index.html","hash":"eafb3fc36216dc37c629c540ae65faf991242077","modified":1611296668922},{"_id":"public/behavior_decision/index.html","hash":"07e90d31df792af7982a29d06583f2ce3b806145","modified":1611296668922},{"_id":"public/devtools_05_network/index.html","hash":"c3aab9dee9e61115c75cf9f804e86a52571de852","modified":1611296668922},{"_id":"public/devtools_04_sources/index.html","hash":"fd536cc547193256e55691dfd7eef2a6c58309d3","modified":1611296668922},{"_id":"public/devtools_03_console/index.html","hash":"242ead1e80f3576c1c12997f572a4aa2664a5be1","modified":1611296668922},{"_id":"public/devtools_02_elements/index.html","hash":"4edd1cac142ed1b158aea1eccbd733abff6ccaee","modified":1611296668922},{"_id":"public/devtools_01_intro/index.html","hash":"62c80b6d17868b6223d49fbc6230ec06c14f82aa","modified":1611296668922},{"_id":"public/devtools_rookie_intro/index.html","hash":"8218e7f3c941727aea7c8896295cb13bafe1ada0","modified":1611296668922},{"_id":"public/iconfont/index.html","hash":"47ce71374932c11996e1dc0f5555e0dd505336fb","modified":1611296668922},{"_id":"public/web_fonts/index.html","hash":"86ccbaac2bc5f8ae9fb005b3921225f824113bfc","modified":1611296668922},{"_id":"public/fed_ml_08_iris/index.html","hash":"e2306c6676463c210a320a10a5c80625eff70cdf","modified":1611296668922},{"_id":"public/fed_ml_07_xor_regression/index.html","hash":"03e713da99ce27aef26aef10c35b6d75b3cc5740","modified":1611296668922},{"_id":"public/fed_ml_06_logistic_regression/index.html","hash":"025ea6a6363ba00bf2abe6f31c4946f3be1bbcb4","modified":1611296668922},{"_id":"public/fed_ml_05_normalize/index.html","hash":"0ab6365a1a981f1e2133d4fcd4a80593e857a43c","modified":1611296668922},{"_id":"public/poor_economics/index.html","hash":"639a2f044891312e8c8ce740aede76509beb6772","modified":1611296668922},{"_id":"public/fed_ml_04_linear_regression/index.html","hash":"52e84317dc90545cb5607305ba43895f2c9bc64f","modified":1611296668922},{"_id":"public/2019_javascript_report/index.html","hash":"eb1046738f14981b7f6c8ab602dcbdd43f12d742","modified":1611296668922},{"_id":"public/2019_javascript_sources/index.html","hash":"289fe668e3ca9c80a7d23c16ad36e17f1784b893","modified":1611296668922},{"_id":"public/fed_ml_03_tensor/index.html","hash":"4689973b96f413699ad7f939759f90e6ab0e60e3","modified":1611296668923},{"_id":"public/fed_ml_02_tensorflow/index.html","hash":"be6aa29de666ed05d7177f47fd199db8ed144616","modified":1611296668923},{"_id":"public/fed_ml_01/index.html","hash":"e595a4b3af97a723d6b35dfa8eea3071bdc44ab3","modified":1611296668923},{"_id":"public/life_courage/index.html","hash":"cb007ef084121cbedea83ef49d562f3abef4d37e","modified":1611296668923},{"_id":"public/ES6 Code Style/index.html","hash":"9ea32e459de233cd2bccf661516a8c85077c5341","modified":1611296668923},{"_id":"public/self_control/index.html","hash":"ace855fe1d8f18a4821b66f6600a271cc7c01d42","modified":1611296668923},{"_id":"public/continuous_action/index.html","hash":"d1aebf3cb1cf4ea3c7addcb5eace0f315b14b955","modified":1611296668923},{"_id":"public/Danshari/index.html","hash":"1a971688c404d41a89b2f333b5dc78d49670767e","modified":1611296668923},{"_id":"public/33_js_concepts/index.html","hash":"0aa25ad729041f56793e869e5b1a32c9f851cd18","modified":1611296668923},{"_id":"public/grunt/index.html","hash":"009f4c9132a7af59c2e0ba1b22db0ec99271c812","modified":1611296668923},{"_id":"public/cs_english/index.html","hash":"3bd34ffea6e8c7c9e282b12a7a61aeee255fc499","modified":1611296668923},{"_id":"public/2018_javascript_report/index.html","hash":"0a0142dc13d2a4103639e41829af63c98bbc91cd","modified":1611296668923},{"_id":"public/highly_configurable_low_maintenance_blog_build_guide/index.html","hash":"f85b66a1743684ca84e68252fd0fdfab5f543a15","modified":1611296668923},{"_id":"public/nvm_for_windows/index.html","hash":"d0cae3c8ff9813878b0b43fd38ae331990c9ff60","modified":1611296668923},{"_id":"public/360fe_02_css/index.html","hash":"4848b81649242003e4bb7157a970fa69f05ec9a7","modified":1611296668923},{"_id":"public/360fe_01_html/index.html","hash":"7e8a9e3f8960a5e017a9d450c995b45d8940b402","modified":1611296668923},{"_id":"public/ancient_magical_table/index.html","hash":"df90af2d6ee4f2dc877673b5048092c4114de806","modified":1611296668923},{"_id":"public/debug_node.js_with_chrome/index.html","hash":"6c19442fda529b030c0d666d2f6888009e702039","modified":1611296668923},{"_id":"public/Fullpage.js/index.html","hash":"f2aba761df0fb95e082652b2abe8deb0a8a7523c","modified":1611296668923},{"_id":"public/mongoDB_configuration/index.html","hash":"43cb0e14b3284f88e2ed6c2199a288ccf068cbcb","modified":1611296668924},{"_id":"public/Animate.css/index.html","hash":"1d51375740181f68560884b5792c46970ab9da6d","modified":1611296668924},{"_id":"public/blog_history/index.html","hash":"6db7255bee0ffe8e199c63c9087ec8f2804bd2eb","modified":1611296668924},{"_id":"public/hello_hexo/index.html","hash":"2f96259779e69856a49b860f03f19dfb87b63a65","modified":1611296668924},{"_id":"public/tools/index.html","hash":"fee14f8ad1da67872e9a08c0d3602a15e9caa22b","modified":1611296668924},{"_id":"public/escape_from_the_world/index.html","hash":"94b692319b7b7a2c522fd71b99acabc7e0080bfa","modified":1611296668924},{"_id":"public/archives/index.html","hash":"b4dd297a180afe943e74da80260c05fe1e6532dc","modified":1611296668924},{"_id":"public/archives/2018/index.html","hash":"a3945a5540e2b053e27124e83cac41f0235f337b","modified":1611296668924},{"_id":"public/archives/2019/index.html","hash":"8864a27e479f85cfb630ccc09b39726944d185c4","modified":1611296668924},{"_id":"public/archives/2019/12/index.html","hash":"cb9f94ca24fedf704752d2cccb25508183c298ef","modified":1611296668924},{"_id":"public/archives/2020/index.html","hash":"07a7ede05f7b1422e27d9f95ded44f0607409fe8","modified":1611296668924},{"_id":"public/archives/2020/02/index.html","hash":"2824bc67d8573d7822333751f661021771a310fb","modified":1611296668924},{"_id":"public/archives/2020/01/index.html","hash":"dd97b1baf5fb8ad404924b53d418122a53905f89","modified":1611296668924},{"_id":"public/archives/2020/03/index.html","hash":"28caadbd93ad5b6c1ec187c840fc49f85bb0302b","modified":1611296668924},{"_id":"public/archives/2020/04/index.html","hash":"5412b8868770ba40fa1e0854e2419b5427c4ebbc","modified":1611296668924},{"_id":"public/archives/2020/05/index.html","hash":"8c0b19fe5452cf23803164bfe3352b51c89cd4fb","modified":1611296668924},{"_id":"public/archives/2020/06/index.html","hash":"48382d7599534cfc940a581d55fbf3e48c171c94","modified":1611296668924},{"_id":"public/archives/2020/09/index.html","hash":"c214b832c9c187fdf7703c40af6d4c53cdd79407","modified":1611296668924},{"_id":"public/categories/read/index.html","hash":"c657e610638aa3180a1fef552d6596caee5f9468","modified":1611296668925},{"_id":"public/categories/css/index.html","hash":"9077d2ea84a91b66fa16b89c0cdfe00cf46a4367","modified":1611296668925},{"_id":"public/categories/javascript/index.html","hash":"10679fd7d087f23042bfde33d2f226faa0ccc02e","modified":1611296668925},{"_id":"public/categories/debug/index.html","hash":"e15752d5efcdf7221151d9ef63f8393a14b3cac3","modified":1611296668925},{"_id":"public/categories/ml/index.html","hash":"0b9c2832d19f994f28a8c2d9e73026d19b7e01e1","modified":1611296668925},{"_id":"public/index.html","hash":"916770c9c1ea1060b0635932813c14e7ac521563","modified":1611296668925},{"_id":"public/page/2/index.html","hash":"17b66e68baff019e4b25697ba6ad11a82d725c0d","modified":1611296668925},{"_id":"public/page/3/index.html","hash":"b480d1038f6e6beca7dee52a4a6bde8403a6c9b8","modified":1611296668925},{"_id":"public/tags/stateOfJs/index.html","hash":"aab19ec90972eb926801208eb8908380a47f31c6","modified":1611296668925},{"_id":"public/favicon.ico","hash":"9445630aff5bce00ea44758fc3de1da69ab1007b","modified":1608774242002},{"_id":"public/shenma-site-verification.txt","hash":"453e70e52866908a33ac172f3af4d222c0f54ef0","modified":1608774242002},{"_id":"public/asset/css-pic.html","hash":"8b7a9f03cc3affdf8e82c169c6529ee50a9f5063","modified":1608774242002},{"_id":"public/asset/clock.html","hash":"cc3bb18925eea6089f5b59c2eb5b7568ce0344c6","modified":1608774242002},{"_id":"public/asset/js_sources_bookmark.html","hash":"0cee127d97114028d0c5d594db31d5adf419f65b","modified":1608774242002},{"_id":"public/asset/nonviolent-communication.drawio","hash":"2462c42be9e59c72c7614a5535a865bc6a33df5f","modified":1608774242002},{"_id":"public/asset/sitemap.txt","hash":"c34dab9fb31b18e95efb9b67d292258f25ebf2e0","modified":1608774242002},{"_id":"public/asset/quotes.js","hash":"e0ca2aad0634e74bda79c9bd1779da45e0043082","modified":1608774242002},{"_id":"public/asset/sitemap.xml","hash":"1845827da29d49510166976dfe2c92d54d089615","modified":1608774242002},{"_id":"public/asset/sitemap.html","hash":"b7f216398b38394eaeeaff17a52ac685879a2ce9","modified":1611296655622},{"_id":"public/asset/tech_commuity.html","hash":"93704b2ee0654569b45ea94ecbc9ce31b41e5d35","modified":1608774242002},{"_id":"public/images/hexo1.jpg","hash":"1cc06bda617b8e4a1f9c8367f36da71bef7e2dd1","modified":1608774242002},{"_id":"public/images/hexo3.jpg","hash":"fac5866e8108733189e45a1355a9ec44343503e3","modified":1608774242002},{"_id":"public/images/hexo2.jpg","hash":"7a720d31151cf9bee431d1497f8644e273475c20","modified":1608774242003},{"_id":"public/images/learning3.png","hash":"4d68dd4fa35af91d478490a94df2779051271446","modified":1608774242003},{"_id":"public/images/learning1.png","hash":"fba653c164e0a3fd81572b5e07e97a2f14aa52c9","modified":1608774242003},{"_id":"public/images/learning2.png","hash":"a14c77764607d85cfa5e56e065a603e5e00d250e","modified":1608774242003},{"_id":"public/images/profile.jpg","hash":"27cd2ec742f33453f4a150df01e109b7c9e11e27","modified":1608774242003},{"_id":"public/images/stress_circle.png","hash":"3b8ce8f2ac5c13f27707b1e1b4849a5d0a1c8d90","modified":1608774242003},{"_id":"public/images/vue-message-plugin.png","hash":"082f905df8f419e94b26aec027bbd94543312a50","modified":1608774242003},{"_id":"public/images/vuex3.png","hash":"bfa1a78618ddbef0fd4d331cd1a94ff6ab72c653","modified":1608774242003},{"_id":"public/images/vuex1.png","hash":"5d5d421d15e91243c9b285c19fa56ed86642a945","modified":1608774242004},{"_id":"public/images/wxCode.jpg","hash":"0216612a947f42797c6197d6b4551080cd1a81cb","modified":1608774242004},{"_id":"public/asset/drum/index.html","hash":"e8a81481e85ca24d19e04ff7ec642a334f84779a","modified":1608774242004},{"_id":"public/asset/drum/style.css","hash":"a184a075ba5718f5f318477ea97565b84b90c383","modified":1608774242004},{"_id":"public/images/ai/003.gif","hash":"de9361cc26df550d89538f0b43544676bd0ca7cb","modified":1608774242004},{"_id":"public/images/ai/05.png","hash":"6122ade120b475d3e71faf3f0c205b11ba2f7010","modified":1608774242004},{"_id":"public/images/ai/06.png","hash":"71e872a303c3795d87cd05992366b6aa5c470f9b","modified":1608774242004},{"_id":"public/images/ai/08.png","hash":"a4f1635e3c090f9f7531a017e0bbd7cac42efebd","modified":1608774242004},{"_id":"public/images/ai/07.png","hash":"59f6d7a8e88733de5287d5cedee0f032c09d14b3","modified":1608774242004},{"_id":"public/images/ai/10.png","hash":"26492a5305f468c7f9db73644a981eeee7c7de5a","modified":1608774242004},{"_id":"public/images/ai/09.png","hash":"221bec12170cd87eb2618d8cae0ca6a746f7cc35","modified":1608774242004},{"_id":"public/images/ai/13.png","hash":"0b18b91ca71c8fdd1131880df6a31fbf2637e314","modified":1608774242005},{"_id":"public/images/ai/11.png","hash":"ebd77261e047d6dc9efc6971a99080099716efc9","modified":1608774242005},{"_id":"public/images/ai/12.png","hash":"51ccc0c92cc9805268e142c3d488875508982f6a","modified":1608774242005},{"_id":"public/images/ai/17.png","hash":"880d6dfcfa28edd1dd35bdab82aa4416dece1338","modified":1608774242005},{"_id":"public/images/ai/14.png","hash":"36c0d6b3952b724ffe7a4e064559a68334d63e7e","modified":1608774242005},{"_id":"public/images/ai/16.png","hash":"d952bf60d8aedf29f817c0c28050bdb52b1ded76","modified":1608774242005},{"_id":"public/images/ai/18.png","hash":"79e74ad64d26d026d2c1afae5ec90aa80c8dc131","modified":1608774242005},{"_id":"public/images/ai/20.png","hash":"c06df282cfbd420d05f59b39d5b4434f3c8f4589","modified":1608774242005},{"_id":"public/images/ai/23.png","hash":"bd358effdd8e0691b808fa46a6ed031051a3e3d0","modified":1608774242005},{"_id":"public/images/ai/24.png","hash":"04e4b378b831c0fb8a3147dccedfebf851acc590","modified":1608774242005},{"_id":"public/images/ai/25.png","hash":"ef5b4d671a997a48ff1fa700f9f4c087edd9f838","modified":1608774242006},{"_id":"public/images/ai/26.png","hash":"8ba7d0c7d3e91e516afbad93245063085ddc5cbc","modified":1608774242006},{"_id":"public/images/ai/27.png","hash":"c536f70765dd076d653e34836abb046b1b275fa5","modified":1608774242006},{"_id":"public/images/ai/28.png","hash":"5e20eadc0ab28adcec211a6398a0a266145b25be","modified":1608774242006},{"_id":"public/images/ai/29.png","hash":"43d887f2ec60c7ec4d6b4018a80ecd72bee50dec","modified":1608774242006},{"_id":"public/images/ai/32.png","hash":"0db43b80e834717e659b519a763b19114bc17290","modified":1608774242006},{"_id":"public/images/ai/33.png","hash":"019ecf7f95ce2d2ca26bd302899211b3907333ea","modified":1608774242006},{"_id":"public/images/ai/34.png","hash":"53e114bd5e091de0b0c00c0f7e9e777776127023","modified":1608774242006},{"_id":"public/images/ai/35.png","hash":"73215ba6df69da95008171b3e876bedc0516e200","modified":1608774242006},{"_id":"public/images/ai/38.png","hash":"7997bf7835da9d5fd69a03e02ca4f6ac5e87e5d9","modified":1608774242006},{"_id":"public/images/ai/40.png","hash":"80ec728674d602a1242a63372d41e3c09d42ab58","modified":1608774242006},{"_id":"public/images/ai/41.png","hash":"39972f1f80f41606cdb673b03b4d9f833ea06e92","modified":1608774242006},{"_id":"public/images/ai/42.png","hash":"4a51bae240ede3954833376daeb6d61d72b5b2fe","modified":1608774242006},{"_id":"public/images/ai/44.png","hash":"0cf14067ef5bf6b88c6e82d1b0bd82f98f820ab8","modified":1608774242006},{"_id":"public/images/ai/47.png","hash":"3a1920c9f2443356df8032d28e9f264ee8ca4dc4","modified":1608774242006},{"_id":"public/images/ai/49.png","hash":"1f8cd181e5fbd7afc9598d576b3e19bfa436cd84","modified":1608774242006},{"_id":"public/images/ai/51.png","hash":"ef0ddb1c104d2d793a869b849b08ecee161c1c3d","modified":1608774242007},{"_id":"public/images/ai/52.png","hash":"4f2ef4d67fd520480316825300054762e24e185b","modified":1608774242007},{"_id":"public/images/ai/53.png","hash":"ae11df9b192eb5b15f825acfc3b45958cbe2f56a","modified":1608774242007},{"_id":"public/images/ai/54.png","hash":"bcd7e620db670266714c16cfc3137ff62d0b7875","modified":1608774242007},{"_id":"public/images/ai/55.png","hash":"85188eefeed301a8999a9ee404952519268de452","modified":1608774242007},{"_id":"public/images/ai/56.png","hash":"8a28832b8c69fa9c2a5d0e9725d6b04bf269e36d","modified":1608774242007},{"_id":"public/images/ai/58.png","hash":"0f3b849a7c3de663df7cb9473846dc56958756f8","modified":1608774242007},{"_id":"public/images/ai/57.png","hash":"e850580bc849a4a0ed921c9c01e0c85ded319e28","modified":1608774242007},{"_id":"public/images/ai/61.png","hash":"bc95a5bb1e5f5733fcf4206d13031805eff2d515","modified":1608774242007},{"_id":"public/images/ai/62.png","hash":"c9283991adb0e2006eb12651370c8a6ff0329fd6","modified":1608774242007},{"_id":"public/images/ai/63.png","hash":"8e4a675f82be6fc9881581a47522ccdbe7248914","modified":1608774242007},{"_id":"public/images/ai/64.png","hash":"b031691e8fd3d9ed15870f3ca734897f7a55fd75","modified":1608774242007},{"_id":"public/images/ai/65.png","hash":"00da9ecc4ef8bf7e3a3b723fa8400c8143a2a1b9","modified":1608774242007},{"_id":"public/images/ai/66.png","hash":"86609ff198905c2349065761f10a6cd029c25650","modified":1608774242007},{"_id":"public/images/ai/67.png","hash":"42df3002f2abddc1b035d923a9192d255740fd51","modified":1608774242007},{"_id":"public/images/blog/blog-counter.gif","hash":"4393977c8bd2fc60720b736c356a84319a64b750","modified":1608774242007},{"_id":"public/images/blog/google_search.png","hash":"c38e3b87694887e0840eb915d3baba73f9f7e67a","modified":1608774242007},{"_id":"public/images/blog/google_search3.png","hash":"189a33243842f9f13dd5643e960f870dfd00a916","modified":1608774242007},{"_id":"public/images/blog/google_search4.png","hash":"d2183299b3db610685b9eae0eb4c26f723380874","modified":1608774242007},{"_id":"public/images/blog/google_search5.png","hash":"f80c3a4946987332dc11df0e0d8cd78440e5224b","modified":1608774242007},{"_id":"public/images/devtools/020.png","hash":"20a3c5c04916e17ab616d953f8b2bc9cb63938de","modified":1608774242008},{"_id":"public/images/devtools/030.png","hash":"804c693c0f5a0743db2da304d6ccf3eec593ed22","modified":1608774242008},{"_id":"public/images/devtools/100.png","hash":"ddd33280b017b4491fb12471caaa3ac1735ef6f6","modified":1608774242008},{"_id":"public/images/devtools/060.png","hash":"eb8f29bf8fa98e16bbf1a2ec435ed2cecd8974f0","modified":1608774242008},{"_id":"public/images/devtools/110.png","hash":"eba2980ad9b9df66e7fe29f1fdd4ea74d3320f6d","modified":1608774242008},{"_id":"public/images/devtools/120.png","hash":"db63189d91e50f56ea85ff69d89bf4e719c1da1e","modified":1608774242008},{"_id":"public/images/devtools/132.png","hash":"c908c9855df43d54c4f7180c666530802b905811","modified":1608774242008},{"_id":"public/images/devtools/135.gif","hash":"fd7bfff0563b7e31efb305a7b5243b6e95a233a7","modified":1608774242008},{"_id":"public/images/devtools/140.png","hash":"86ec1c8dc95294346f9f3929423d4644909a86a9","modified":1608774242008},{"_id":"public/images/devtools/150.png","hash":"5495d072f6f1aeb63eb599d1ad6ebdae09923ec6","modified":1608774242008},{"_id":"public/images/devtools/160.png","hash":"ee08ea8e09a00a974c22e53829cd54bfcba856c8","modified":1608774242008},{"_id":"public/images/devtools/180.png","hash":"652b613e0d55f3c9b46598f01cd4d018e1d96b4d","modified":1608774242008},{"_id":"public/images/devtools/170.png","hash":"d7307a319a2ea73234bd426b9a6a656f6b57ad0d","modified":1608774242008},{"_id":"public/images/devtools/191.png","hash":"168599000723952d3787dcfb802a6dbd6d6b1eb6","modified":1608774242009},{"_id":"public/images/devtools/190.png","hash":"84112be795cc0cd097ff6f5d2eb8f45fed2270f7","modified":1608774242009},{"_id":"public/images/devtools/204.png","hash":"16f6eb34d710a2b02aea3c1b7b19c0a0ddc40442","modified":1608774242009},{"_id":"public/images/devtools/205.png","hash":"e0d81980e1f494df7706ef6649d9b4dede2d0f3b","modified":1608774242009},{"_id":"public/images/devtools/209.png","hash":"35459e6f0a7d47d8b11979a7363bd50c6c2b4dce","modified":1608774242009},{"_id":"public/images/devtools/214.png","hash":"0fc80918fbbcae2d5a0660a4eae65ed60e60832a","modified":1608774242009},{"_id":"public/images/devtools/210.png","hash":"022d95969ca44093e4aff8260dfea63ac13f35ed","modified":1608774242009},{"_id":"public/images/devtools/211.png","hash":"44166d76b38a081b49b28ffbec937c059d779c22","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 1.png","hash":"8ba0da82aa7844aa32d686db6b47492c30294ff4","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 10.png","hash":"5b155df9654f517a9429005e570b55068431ae59","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 11.png","hash":"fdc895a0056cd58bc8218abfb5d23de72e339d4e","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 12.png","hash":"e65dc9beeb3abb82d5ee86e3f0861f2c3a4e3ecb","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 15.png","hash":"4e695d13e9af700abcd3673771d9a0ce9aa075ff","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 2.png","hash":"19a351a4bb378e10da2ae57e241fc9cd36783105","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 16.png","hash":"daa83fd566dcc6331a73576f7941630af3ca8dcd","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 17.png","hash":"6469960541cfcff072322591772a2a4722e00a83","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 3.png","hash":"bac2e974a8eaa4583d56a2909846b125cec13feb","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 4.png","hash":"137475aae005ab59ed98294fd1aedaae3e6f7ad9","modified":1608774242009},{"_id":"public/images/event-loop/Untitled 5.png","hash":"bef418518bc414236789fbc55a324204d6dc41ad","modified":1608774242009},{"_id":"public/images/event-loop/Untitled.png","hash":"bae817e1f8b6b6744a726263735523664991a1d6","modified":1608774242009},{"_id":"public/images/gitbook/web_font02.png","hash":"fb975479c3c954b4939ea2151df8afd47b84db06","modified":1608774242009},{"_id":"public/images/gitbook/web_font04.png","hash":"f5f158b5072c4bfc7237814568d748f7043267f0","modified":1608774242009},{"_id":"public/images/grunt/grunt03.png","hash":"3d8ac1eeef068a93df2b7790b54f2b1e6c8db305","modified":1608774242010},{"_id":"public/images/grunt/grunt01.png","hash":"e83e797076d76497aa6c5902ee4b7214ca44c964","modified":1608774242010},{"_id":"public/images/grunt/grunt02.png","hash":"b66b32865a140ef179897af5d96dda71eae4bfdb","modified":1608774242010},{"_id":"public/images/grunt/grunt04.png","hash":"8e5468599e491d91d757352ba89ecafb3f755fda","modified":1608774242010},{"_id":"public/images/hmos/001.png","hash":"0655206c8daa79d50dce11487716af4d4a6ee275","modified":1608774242010},{"_id":"public/images/hmos/006.png","hash":"e61fc02caa1ef78d3ef77591cbdf4e5625bcd6ac","modified":1608774242010},{"_id":"public/images/hmos/002.png","hash":"e49cf2926b61ee9db735df72cbd72dc9e6d926f7","modified":1608774242010},{"_id":"public/images/hmos/007.png","hash":"214728ef20a8189b66e26618efa25a9b3b52dde9","modified":1608774242010},{"_id":"public/images/hmos/008.png","hash":"8a95f1bf5af5a8e9f277cf4322d86bec2f3365ad","modified":1608774242010},{"_id":"public/images/hmos/009.png","hash":"6eb9a7a755d5f18d64f4d048c6a2d5c940f83fbb","modified":1608774242010},{"_id":"public/images/hmos/010.png","hash":"97e35b130086b05224e4dd0055c6a450bda53a07","modified":1608774242010},{"_id":"public/images/hmos/012.png","hash":"aa5e079947ce5719aaaff6c9ac1c72da0c89e3d3","modified":1608774242010},{"_id":"public/images/movie/bwbj2.jpg","hash":"1645757f50c53a4bbb80c2e17873251b7621d8d0","modified":1608774242010},{"_id":"public/images/movie/no_war.jpg","hash":"03e7c7fe1d1ae762be7832d463b6a422a3d7357b","modified":1608774242010},{"_id":"public/images/nvc/nvc-map.png","hash":"af85fd0f185c0f84d3a8ee40999ac5e9b36be5c8","modified":1608774242010},{"_id":"public/images/nvc/nvc3.jpg","hash":"6ae7fbe1603b2cdc873f944a8270dfef778b4979","modified":1608774242010},{"_id":"public/images/post/000.png","hash":"efdc1476a2bd9af5c9e9ecba3240b0f0fd018d1f","modified":1608774242010},{"_id":"public/images/post/002.png","hash":"b5c2f919135697d19a37d81fe42c915b827d7e4e","modified":1608774242010},{"_id":"public/images/post/006.png","hash":"68b441ee371899a31be5ac1e9ad28801e3188707","modified":1608774242010},{"_id":"public/images/rich/poor_cf.png","hash":"5982778abc1dcd61646d76d1a5405b8a008c9cdb","modified":1608774242011},{"_id":"public/images/stateofjs/11.png","hash":"3efbb1fa7a72542f2c31e2ac76c95c5a11bc0ae3","modified":1608774242011},{"_id":"public/images/stateofjs/10.png","hash":"ea8c6838aa1c91d29f65b02e652ea66138aa86e6","modified":1608774242011},{"_id":"public/images/stateofjs/13.png","hash":"79f5658c2e2fd12e207f394e4fe7a9352d61b5dc","modified":1608774242011},{"_id":"public/images/stateofjs/12.png","hash":"e165ead054c37823e3136d7f20b0bb6bf3c1db18","modified":1608774242011},{"_id":"public/images/stateofjs/14.png","hash":"46e06656c42b74d32d11eba0ec55e28d8f38e69e","modified":1608774242011},{"_id":"public/images/stateofjs/16.png","hash":"1567896a8a70f44f5cdebbf272100138976f59d1","modified":1608774242011},{"_id":"public/images/stateofjs/15.png","hash":"1b126657a5c0feab23cb2b44e07f158a4a3d4bf2","modified":1608774242011},{"_id":"public/images/stateofjs/18.png","hash":"f76eb54fe2f58cbe97bbc94f6881bb0387e9a48b","modified":1608774242011},{"_id":"public/images/stateofjs/17.png","hash":"b5e71e6035e4920eb0e96c8e8be42520a4dd826f","modified":1608774242011},{"_id":"public/images/stateofjs/19.png","hash":"e96721bc1fae4f3a6061ca3820e87547f373f8c1","modified":1608774242011},{"_id":"public/images/stateofjs/20.png","hash":"c2b23b3f72d922aaf06345d627f4c2e910c61423","modified":1608774242011},{"_id":"public/images/stateofjs/2.png","hash":"5826deb5ff27ff26fe34396d51aff6e85b4615f8","modified":1608774242011},{"_id":"public/images/stateofjs/201904.png","hash":"ff513154c2a5c15f98335cb01640479d638a2b8f","modified":1608774242011},{"_id":"public/images/stateofjs/201905.png","hash":"a269aea212816e0339d87a6d5f10b9b4ea6073b9","modified":1608774242011},{"_id":"public/images/stateofjs/201907.png","hash":"ef870e0a094e0948af41aa440c6042a1ae89cf76","modified":1608774242011},{"_id":"public/images/stateofjs/201906.png","hash":"8172d66a2cd647262a40d62b173995b6c2d0e06f","modified":1608774242011},{"_id":"public/images/stateofjs/201908.png","hash":"93297eb7ec25476b6c5c98b0e9033295105621ca","modified":1608774242011},{"_id":"public/images/stateofjs/201911.png","hash":"0dcdd20c8e322e4cf63a20e2b0bae734872e49bb","modified":1608774242011},{"_id":"public/images/stateofjs/201909.png","hash":"37a3fb831dc9d90527ea412b1ad761483403d560","modified":1608774242011},{"_id":"public/images/stateofjs/201913.png","hash":"84c417f80747ceccc0f4646ebbee311e9f630265","modified":1608774242011},{"_id":"public/images/stateofjs/201912.png","hash":"44d3c62c24802c9de1be4061a6f940c4b302dfb5","modified":1608774242012},{"_id":"public/images/stateofjs/201914.png","hash":"6da1074ccffc0ec3fab83e567403911c5061bb9b","modified":1608774242012},{"_id":"public/images/stateofjs/201915.png","hash":"fc8402e9ee15bf6ab7a6e1af758d05f498f8f97e","modified":1608774242012},{"_id":"public/images/stateofjs/201916.png","hash":"c6149cc904ae7f417218c56447c64659e7120a4a","modified":1608774242012},{"_id":"public/images/stateofjs/201917.png","hash":"91ca314cd561ea037f83bb6b6a3c6b054c45565c","modified":1608774242012},{"_id":"public/images/stateofjs/201918.png","hash":"879ae7a4a20eb47011eba9637bf9fe420c0bfd22","modified":1608774242012},{"_id":"public/images/stateofjs/201919.png","hash":"1667493e9217ea1d6c77009e25635e97ebaf0f95","modified":1608774242012},{"_id":"public/images/stateofjs/201920.png","hash":"dd31e04cb0543bfc16fb30e7e636ab13ccb4c508","modified":1608774242012},{"_id":"public/images/stateofjs/201921.png","hash":"5202f630a0f2935afb45061fc3d7c91af8aaa421","modified":1608774242012},{"_id":"public/images/stateofjs/201922.png","hash":"d84ca4131bb7536d30dcd05d1383927c12b102c2","modified":1608774242012},{"_id":"public/images/stateofjs/201923.png","hash":"d8afc6736173865db737668fc13c2ac1f8d1f743","modified":1608774242012},{"_id":"public/images/stateofjs/201924.png","hash":"30ae54708faf767a05ae8d95aad7bfd9bc123910","modified":1608774242012},{"_id":"public/images/stateofjs/201925.png","hash":"8caf56fb18f6a45b60d82e3ca1c844c59eba267c","modified":1608774242012},{"_id":"public/images/stateofjs/201928.png","hash":"2240b728fdad61bd9196def165e0e9beb653e625","modified":1608774242012},{"_id":"public/images/stateofjs/201927.png","hash":"b005d6a0e49d63532275288486effc13e7dbea33","modified":1608774242012},{"_id":"public/images/stateofjs/201926.png","hash":"650ec659a4486843482162057c3fe375e7cd5113","modified":1608774242012},{"_id":"public/images/stateofjs/201929.png","hash":"2371b1c812d82aa925578f3661b7cc85d98af1bd","modified":1608774242012},{"_id":"public/images/stateofjs/201930.png","hash":"55da527b7e80b976fcd9e5af7377ef5f11922549","modified":1608774242012},{"_id":"public/images/stateofjs/201932.png","hash":"e499e8da049dcba990b9401400fed5e95c35c74f","modified":1608774242012},{"_id":"public/images/stateofjs/201931.png","hash":"8eeb8f9fb54210eff2df3322614a259d23ad519a","modified":1608774242013},{"_id":"public/images/stateofjs/201933.png","hash":"6b60010bb15ab3a3044bd276172052f96c7094fb","modified":1608774242013},{"_id":"public/images/stateofjs/201934.png","hash":"59e715bd2c6d0b1d56446ff687c849bee1a1588b","modified":1608774242013},{"_id":"public/images/stateofjs/201935.png","hash":"a8ccccc79523e916a4a4532314a01afc4faf3d50","modified":1608774242013},{"_id":"public/images/stateofjs/201936.png","hash":"5f38b2529c3a31728c847687270e490055734bca","modified":1608774242013},{"_id":"public/images/stateofjs/201937.png","hash":"61e0f14c9f1036eebcd969e0b45bb13c9b884909","modified":1608774242013},{"_id":"public/images/stateofjs/201939.png","hash":"e36d4850e5f97561aeb40a8b0c93763004a2db68","modified":1608774242013},{"_id":"public/images/stateofjs/201938.png","hash":"509d13bfa4ad17b8a2e24fe7b332387c27211a65","modified":1608774242013},{"_id":"public/images/stateofjs/201940.png","hash":"24c0c8911300660e8e0ce58c6d6b6fe061e73775","modified":1608774242013},{"_id":"public/images/stateofjs/201941.png","hash":"56b376221bfd49a95d1377c01ada2409093b7273","modified":1608774242013},{"_id":"public/images/stateofjs/21.png","hash":"0e634f4ad7be66fd1e1184ebb44fe87b594b8c5f","modified":1608774242013},{"_id":"public/images/stateofjs/22.png","hash":"930ae81b060233ba30e6d4f7b7721d547d455aad","modified":1608774242013},{"_id":"public/images/stateofjs/23.png","hash":"04fce4509a18a8e7e3ea853fae0f20b9b71514b4","modified":1608774242017},{"_id":"public/images/stateofjs/3.png","hash":"8ba961493d2e87fd9d117f51d95aa1f97a53d85c","modified":1608774242020},{"_id":"public/images/stateofjs/4.png","hash":"6fc7177289d99308fab327c4d95b53e92b2d4a78","modified":1608774242020},{"_id":"public/images/stateofjs/5.png","hash":"79cf6c61431003a9d901ba8a396212ee8caa87cd","modified":1608774242020},{"_id":"public/images/stateofjs/7.png","hash":"1618150df07c867acec4a2208bd4324aab27e48f","modified":1608774242020},{"_id":"public/images/stateofjs/6.png","hash":"b944f703a919d79369b113494d4fd32fa9b47236","modified":1608774242021},{"_id":"public/images/stateofjs/8.png","hash":"cdb87a31ad7f2f12b57a3b68d4d197c7d17e1963","modified":1608774242021},{"_id":"public/images/stateofjs/9.png","hash":"e2b23fa1d0929a9f6d4b352f806e876c42462343","modified":1608774242021},{"_id":"public/pwa/clock/favicon.ico","hash":"9445630aff5bce00ea44758fc3de1da69ab1007b","modified":1608774242021},{"_id":"public/pwa/clock/index.html","hash":"1e0118d31ec43250fc082c7c62e217562d6b0af3","modified":1608774242021},{"_id":"public/pwa/clock/index.js","hash":"d7b35a8a7a43e8704aefe31def6257d2c228fa68","modified":1608774242021},{"_id":"public/pwa/clock/manifest.webmanifest","hash":"40bd7976c30604d94b9a11b28fe4c8433f044f34","modified":1608774242021},{"_id":"public/pwa/clock/quotes.js","hash":"f266f31804ad8f14170cd5e0d50a57411e26c942","modified":1608774242021},{"_id":"public/pwa/clock/style.css","hash":"88c044ecf4df030cb0d41e03eb8836b131ca9462","modified":1608774242021},{"_id":"public/pwa/clock/sw.js","hash":"24fc441f0c8fbbed956da562312c4647b7583cfa","modified":1608774242021},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1608774242021},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1608774242022},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1608774242022},{"_id":"public/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1608774242022},{"_id":"public/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1608774242022},{"_id":"public/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1608774242022},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1608774242022},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1608774242022},{"_id":"public/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1608774242022},{"_id":"public/images/ai/31.png","hash":"85cf5fbbea342c9c254d48a52ef19415f9fe102f","modified":1608774242022},{"_id":"public/images/ai/45.png","hash":"c59356ae2bd32aa56aedc4515af1c5597107e909","modified":1608774242022},{"_id":"public/images/ai/60.png","hash":"e5c35e7a3f567044d56b6f6272765eea1c2bb503","modified":1608774242022},{"_id":"public/images/vue3/demo.png","hash":"cf06fb5ce3a9183cab05cc13a7867bf0bc8dc075","modified":1608774242022},{"_id":"public/asset/drum/sounds/hihat.wav","hash":"83da2ee10e1d23554ef870573a91786bec9f61ba","modified":1608774242022},{"_id":"public/asset/drum/sounds/kick.wav","hash":"4f936bca3cd20d14e98286e3b6cd96b495fabfff","modified":1608774242022},{"_id":"public/asset/drum/sounds/snare.wav","hash":"c6fbd1c79b653b815ef3f84db9edb4f9465a99be","modified":1608774242022},{"_id":"public/asset/drum/sounds/tink.wav","hash":"fcd01a08cf5aea833923fb505bbab2c070a2bc8d","modified":1608774242022},{"_id":"public/pwa/clock/icon/icon.png","hash":"765822dff6a8a5c7c24fa5ba7e9bf54151e9e91a","modified":1608774242022},{"_id":"public/asset/drum/sounds/clap.wav","hash":"679d6e1831a44969df76373d9f6c43f28b4fdf12","modified":1608774242022},{"_id":"public/favicon_bak_big.ico","hash":"20054e2789b1a26d9ba34be4662a0910015b8c10","modified":1608774242058},{"_id":"public/images/maupassant.jpg","hash":"fa0e39d4cca3899571140ebf259d6a6045c234bb","modified":1608774242060},{"_id":"public/images/dunning-kruger_effect.png","hash":"ef8e45603fda8da72d32b606c5381c2149bce8b5","modified":1608774242060},{"_id":"public/images/dunning-kruger_effect_cn.jpg","hash":"6ce91caa6b1f98fee452412b631558c5c6b794fa","modified":1608774242060},{"_id":"public/images/profile_bak_big.jpg","hash":"02c503eebd742f9aac901cd3d2e9cd1a2db7cbf4","modified":1608774242060},{"_id":"public/images/schedule v3.0.png","hash":"85d53ede58a8ce03d337c287a29cc12c4bb97e75","modified":1608774242060},{"_id":"public/images/slogan.png","hash":"c48d18e3581eb93f0dc52191db6b076bd709c8fc","modified":1608774242061},{"_id":"public/images/vuex2.png","hash":"ba4fcc70a8c087d80d8817599e05ef6bfdb4fc99","modified":1608774242061},{"_id":"public/images/ai/01.png","hash":"99271ef28b5b2e0d1e311ff23e0e31e05c3abd3a","modified":1608774242061},{"_id":"public/images/ai/15.png","hash":"2e5355a2b7fa32fe443bc234ea800ddf68adc840","modified":1608774242061},{"_id":"public/images/ai/19.png","hash":"1faa4a0e942071884c981d8130836086b36bad69","modified":1608774242061},{"_id":"public/images/ai/21.png","hash":"931099fe5bab57f72c54f17239dd9cebbb859321","modified":1608774242061},{"_id":"public/images/ai/39.png","hash":"84f218d5543d0cfe7c04355ed6d680c722e6776e","modified":1608774242061},{"_id":"public/images/ai/46.png","hash":"081a687a587619ec2262984118dbad9b35761b15","modified":1608774242061},{"_id":"public/images/ai/59.png","hash":"e35975b3432e0249489a8c792d0af50a73569973","modified":1608774242061},{"_id":"public/images/blog/google_search2.png","hash":"21d386888d09580f9023da57cb13fa8304d1c435","modified":1608774242061},{"_id":"public/images/blog/shenma.png","hash":"adfa661a15da1d96785d25953b1a506a81b93356","modified":1608774242061},{"_id":"public/images/blog/scarsu-baidu.png","hash":"d153241c8e6b9b579a64dc0d77b5ee52e2a80263","modified":1608774242062},{"_id":"public/images/c4/code.jpg","hash":"b6d5df8bcaaf41253ecf593fed2353f23ac6aee2","modified":1608774242062},{"_id":"public/images/c4/context.jpg","hash":"3a877f9c858f83d20f28089d36774032b24f7b05","modified":1608774242062},{"_id":"public/images/devtools/011.png","hash":"198e745a5d1729cb59d40084c79b4f670c68e3f8","modified":1608774242062},{"_id":"public/images/devtools/010.png","hash":"2bcf243f9f3c22c8e7c7d119f14443457596c6d3","modified":1608774242062},{"_id":"public/images/devtools/000.png","hash":"cc3498ea5ef888a78868c473fcd25b76ba6e62c5","modified":1608774242062},{"_id":"public/images/devtools/051.png","hash":"c331ce7d6c91967c72d8132ae6fa4fd47e349a54","modified":1608774242062},{"_id":"public/images/devtools/130.png","hash":"ffa1f9ecd4bdd0c41d002d883f89b423d53f881b","modified":1608774242062},{"_id":"public/images/devtools/131.png","hash":"163aa1ff1ccf47e45a99a6dff5fd19101118cb37","modified":1608774242062},{"_id":"public/images/devtools/133.gif","hash":"1aa7fc9ad2b024b3f5fce63add221ae5f5e5ea6d","modified":1608774242062},{"_id":"public/images/devtools/200.png","hash":"4fed1fdfbd0beda6d803720479f6464d88982515","modified":1608774242062},{"_id":"public/images/devtools/203.gif","hash":"a5950c2e1b1fdecdd5680866244e0809e91afcb6","modified":1608774242062},{"_id":"public/images/devtools/207.png","hash":"0e2afa90952c38932e87676b83e89b8ab0951b26","modified":1608774242063},{"_id":"public/images/devtools/211.gif","hash":"a8a2e27f0f85490bec6fbe3cbd0f96cd00d38d26","modified":1608774242063},{"_id":"public/images/event-loop/Untitled 8.png","hash":"34c2b73c878c78483633aacbc8345068bedacc09","modified":1608774242063},{"_id":"public/images/event-loop/Untitled 9.png","hash":"746c32667dc0c2e42464957e6b7bd94cc827e5a6","modified":1608774242063},{"_id":"public/images/event-loop/Untitled 7.png","hash":"21f953a035dbb76af559b4d4d26d85a8960c74de","modified":1608774242063},{"_id":"public/images/event-loop/raf.png","hash":"817abb04d9413c6f93cee4bfc53917eae6863b7e","modified":1608774242063},{"_id":"public/images/gitbook/web_font01.png","hash":"e6795d49c23e8705f847bb3d1fbd49620cbd3350","modified":1608774242063},{"_id":"public/images/gitbook/web_font03.png","hash":"2e710f6177d2663f3b3dbb4bdcd200e5e2012a18","modified":1608774242063},{"_id":"public/images/hmos/005.png","hash":"084080234107a3e5551f9f12f082f4da7eb8854a","modified":1608774242063},{"_id":"public/images/movie/tsaml1.gif","hash":"dbb3fda84c01456047672b1ed0d72a35d5d56f4f","modified":1608774242063},{"_id":"public/images/movie/tsaml3.jpeg","hash":"5a9d23af0287e54060c4f2e3b8d90e256597e676","modified":1608774242064},{"_id":"public/images/nvc/nvc.jpg","hash":"dc5e3a80ecb255f49d62da73dcb2bbc9fb8f4524","modified":1608774242064},{"_id":"public/images/nvc/nvc2.jpg","hash":"1b6a74f7b5212c76be140e11d72b77ae4b6a311c","modified":1608774242064},{"_id":"public/images/post/003.png","hash":"77e199bb723835b4989290731b9a4e39fede67f3","modified":1608774242064},{"_id":"public/images/notion/ds.png","hash":"bd4b51b536b22e192f50e6351d9aa9884558fd08","modified":1608774242064},{"_id":"public/images/notion/header.png","hash":"c5ebd687a663e6807fd2ece16869ab99832f7632","modified":1608774242064},{"_id":"public/images/read/behavior.jpg","hash":"724ae9e5275d2006766ea6b7d43fd8c02ac47987","modified":1608774242064},{"_id":"public/images/read/rem.png","hash":"0b1e2b34ccf9bc6f3e46f4411c996f03847d006c","modified":1608774242064},{"_id":"public/images/rich/4.png","hash":"cb12d7b2bd6725aed195e127842e1fc66b44c346","modified":1608774242064},{"_id":"public/images/rich/middle_cf.png","hash":"bd79e283a463e60ac704c1e9d4a70d323143afec","modified":1608774242065},{"_id":"public/images/rich/rich_cf.png","hash":"a7975617709eeedfca487d6d3987ee9dd6f3b214","modified":1608774242065},{"_id":"public/images/stateofjs/1.png","hash":"d87af032052cfdc70f3786234d9bc922ca526d04","modified":1608774242065},{"_id":"public/images/stateofjs/201903.png","hash":"51fd7ed9f06d6a16bca0c5bece1587e50213f0d0","modified":1608774242066},{"_id":"public/images/stateofjs/201902.png","hash":"79c9eb3cfa4283e318cf532f4a082f7a740aca10","modified":1608774242066},{"_id":"public/images/stateofjs/201910.png","hash":"2c9fbc2aa2f17a6323742a807733dcff1a6ac902","modified":1608774242066},{"_id":"public/images/ai/03.png","hash":"a43c69e998137abfc4a2d1a79124433bf4730b84","modified":1608774242066},{"_id":"public/images/ai/43.png","hash":"296921057ef4fc321e72e0b251f4caaa916083fe","modified":1608774242066},{"_id":"public/images/ai/48.png","hash":"75a86c2a935420e1feee31d91d21f748e219236d","modified":1608774242067},{"_id":"public/images/hmos/000.png","hash":"53fd986c67466715527bff980df7d2c06fd56e59","modified":1608774242067},{"_id":"public/images/vue3/reactive.png","hash":"3567260e695734c0cdb7fc44bd03b04e7c19c194","modified":1608774242068},{"_id":"public/asset/drum/sounds/tom.wav","hash":"0a0b785773839b5758948af8807a23a61df9cd4d","modified":1608774242068},{"_id":"public/css/donate.css","hash":"a5f91e8cd4686bbfc3c5937df5857d11390f98ad","modified":1608774242078},{"_id":"public/css/normalize.css","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1608774242078},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1608774242078},{"_id":"public/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1608774242078},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1608774242078},{"_id":"public/js/fancybox.js","hash":"225faa1a88f8b7de248cc3a8cfad2590a4706819","modified":1608774242078},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1608774242078},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1608774242079},{"_id":"public/js/search.js","hash":"e2692eb3a72a6f9f40756e194af17e0b10f39101","modified":1608774242079},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1608774242079},{"_id":"public/donate/index.html","hash":"c9dc1587466cb4a1d7a4e045e3d5d59c81d7dd15","modified":1608774242079},{"_id":"public/images/ai/30.png","hash":"c09289ead258b80b802961c77e4e1549f2471c0e","modified":1608774242079},{"_id":"public/images/ai/36.png","hash":"367e9e5774f2b0bf320ca25a1e2bfcf4bda0fc03","modified":1608774242079},{"_id":"public/images/ai/37.png","hash":"5649709ab965bb0d994268eea5d9ea35381e2572","modified":1608774242079},{"_id":"public/images/c4/component.jpg","hash":"48fbb4f1910b1fe3b97e7904e11836cf636382c6","modified":1608774242079},{"_id":"public/images/devtools/212.gif","hash":"932a547023ac293373d0a7d0a99103920a75b693","modified":1608774242079},{"_id":"public/images/post/004.png","hash":"3e8c5fd447b95e73daee4477701b7d0690217a3a","modified":1608774242080},{"_id":"public/images/read/3-8lifestyle.jpg","hash":"e2b4835f5b98a97df8f34d800493078495a6fc93","modified":1608774242081},{"_id":"public/images/stateofjs/000.png","hash":"39990e5515da56e3179274c33c4d6adcfc32afc0","modified":1608774242081},{"_id":"public/images/stateofjs/001.png","hash":"61ea320c9a2580c68884cbb100f5a3432adebffe","modified":1608774242083},{"_id":"public/images/stateofjs/201901.png","hash":"3e1241b94445793c9c2f8f783c1f63e1fd14ccb0","modified":1608774242083},{"_id":"public/images/devtools/040.png","hash":"901acbb786cef1cc8a21b08613670ea3e344895a","modified":1608774242083},{"_id":"public/images/devtools/050.png","hash":"2de60daf6e505379587d4e502a1bccf50fe6b86c","modified":1608774242083},{"_id":"public/images/event-loop/Untitled 6.png","hash":"c7112d7da76983eeb72b6f0769f6285b004b2e7c","modified":1608774242084},{"_id":"public/images/hmos/004.png","hash":"0f294d621e0c7584ab754d9c03a915de44110eff","modified":1608774242084},{"_id":"public/images/hmos/003.png","hash":"389bc8d8a5e6be6700937744e0809fa050f4b92a","modified":1608774242084},{"_id":"public/images/post/005.png","hash":"7ca58e79e362dc47225100e63641359aff4dd744","modified":1608774242085},{"_id":"public/asset/drum/sounds/boom.wav","hash":"825475da6afa22c5fd92b47a4f376d20b4c16d45","modified":1608774242086},{"_id":"public/images/continuous_action.png","hash":"e5f172d441f522aa3d62f3bfb6f0478e566bd585","modified":1608774242104},{"_id":"public/images/c4/container.jpg","hash":"30515916b069b78a06e5a00da4a70f539b6fb915","modified":1608774242104},{"_id":"public/images/movie/rsgs4.jpeg","hash":"9f7aa17885c627743d1b5263a8ebc7cd6f096064","modified":1608774242105},{"_id":"public/images/stateofjs/0000.png","hash":"7f73758305368a9d540a07985eb608a2c747588a","modified":1608774242105},{"_id":"public/images/devtools/208.gif","hash":"768a2842d3270857a7cc02ead069287005d539bc","modified":1608774242105},{"_id":"public/images/ai/22.png","hash":"b44e40857fd5bb721b2b085abd859ef061fc0333","modified":1608774242105},{"_id":"public/css/git_comment.css","hash":"d539b418379e429d3c33cbee40766c7bc3fd1ce1","modified":1608774242131},{"_id":"public/images/profile_bak_black.jpg","hash":"f192a9524a91c1166d39074729930ba63b211471","modified":1608774242131},{"_id":"public/images/devtools/201.gif","hash":"a55d80037ca54a18934e2a13c07c3cfe48251c8d","modified":1608774242131},{"_id":"public/images/self_control.png","hash":"daec630a46993814592c07514619a3225ff26a74","modified":1608774242131},{"_id":"public/images/rich/0.jpg","hash":"572dc1941b080501b2eae1ef979c71985ad6f1a5","modified":1608774242131},{"_id":"public/images/post/001.png","hash":"744026cb0a6f80dd336d94765170fe7c5dd812d2","modified":1608774242132},{"_id":"public/images/devtools/202.gif","hash":"8d098caa60ac7728d4d817cbba7f36c056f9a31b","modified":1608774242133},{"_id":"public/images/devtools/overview.png","hash":"37fefec933b285c6e47f0526208329687847921e","modified":1608774242246},{"_id":"public/images/notion/home.png","hash":"f7647ff6144180023860d647db3d18ff69abd941","modified":1608774242246},{"_id":"public/images/movie/jrayty.png","hash":"26761eaf6faee157505a697fe3b852a8c56e03e7","modified":1608774242246},{"_id":"public/asset/drum/sounds/openhat.wav","hash":"7b4d7f99a2b31eaa6625514c05f9d0fd45c3637a","modified":1608774242247},{"_id":"public/images/ai/04.png","hash":"1945193bc3bb0d8ef35f8a4a13d2b289eff15f3d","modified":1608774242247},{"_id":"public/images/hmos/011.png","hash":"2be25d7334af2be8fbcec69dafe50b0b58323165","modified":1608774242247},{"_id":"public/css/style.css","hash":"9a68e3acf87c5e71854247174a4b55c60f359dd2","modified":1609325897536},{"_id":"public/images/ai/02.png","hash":"0fc582f1db4f791dfc51e38eccc8e23586d9be4d","modified":1608774242257},{"_id":"public/images/movie/agzz1.jpeg","hash":"a11787ecd8d1207f53c4a91236bffae329807d03","modified":1608774242257},{"_id":"public/images/ai/50.png","hash":"3eb435715c42b1f751b13c23bcba11afc36b7a43","modified":1608774242257},{"_id":"public/images/devtools/207.gif","hash":"8fa8fae5d8fce89678326a4997f3e1993792daf9","modified":1608774242258},{"_id":"public/images/movie/agzz2.jpeg","hash":"f3b723889dcae55904787ebb53a71f6fc2b878de","modified":1608774242338},{"_id":"public/images/event-loop/Untitled 13.png","hash":"cce1492c9f46fc7e44b9fea0b2add72856128ed3","modified":1608774242338},{"_id":"public/images/movie/agzz3.jpeg","hash":"27c8d1f572f0b4d9939477f5b6c71570284a689b","modified":1608774242370},{"_id":"public/images/devtools/206.gif","hash":"7017d0776ca9fea8232eba98082e0b2cd2269033","modified":1608774242370},{"_id":"public/images/movie/rsgs2.jpeg","hash":"fd51dcd95453e93dafe05f28b628970a19d946b0","modified":1608774242370},{"_id":"public/images/event-loop/Untitled 14.png","hash":"e98df8b46a8ebb092bf72132898cd6e589263a1f","modified":1608774242370},{"_id":"public/asset/drum/sounds/ride.wav","hash":"3e8d4f8e6556dcbb4878992d17be1dc98806b16e","modified":1608774242370},{"_id":"public/images/bookmark.png","hash":"1822a29e24998c29e3144c14345965881ecd7a3e","modified":1608774242408},{"_id":"public/images/vue-message-plugin.gif","hash":"06b0e2c4880dff259c94aaa1f80b0bf447f46b8e","modified":1608774242408},{"_id":"public/images/movie/tsaml4.jpeg","hash":"797ef29cbb2f665bddd278e15c36fd6872da4ca4","modified":1608774242466},{"_id":"public/images/read/morning.png","hash":"29a9e422c12742580aba3339de50a413b67c8b7d","modified":1608774242466},{"_id":"public/images/devtools/213.gif","hash":"38f16d2021930f25ede0fa59d894ae306ea524d4","modified":1608774242472},{"_id":"public/images/movie/rsgs3.jpeg","hash":"843469c2db31cd07e6be6b534cc8982566d0de71","modified":1608774242472},{"_id":"public/images/movie/tsaml2.png","hash":"67c781a3650be2934974761d26bdb9badc2d4f37","modified":1608774242475},{"_id":"public/images/movie/wmsj2.png","hash":"03d1073b9e033a2fdcfcebc1383b131e4f92f3d5","modified":1608774242479},{"_id":"public/images/movie/wmsj.jpeg","hash":"ad4d70dff76d35bc24b4625866dd4c27fef5e921","modified":1608774242479},{"_id":"public/images/movie/bwbj1.png","hash":"18adfaddcd058585bd4c559cad0068226de506ad","modified":1608774242479},{"_id":"public/images/ai/002.gif","hash":"6a7844f1667e0bd18c7efed87f8754274893a395","modified":1608774242482},{"_id":"public/images/movie/jcldxt.jpg","hash":"12cd96fe697c505884a0baccdf583cc32f8e1f5e","modified":1608774242488},{"_id":"public/images/movie/rsgs1.jpeg","hash":"2c93647a3bc6cd4cfc56cf2cfdf78d2643e6be48","modified":1608774242490},{"_id":"public/js/gitment.browser.js","hash":"309788596ac428e0013bb5c3b522ac83a3175795","modified":1608774242495},{"_id":"public/images/ai/001.gif","hash":"8e6b6eef19ee00301fddc70c80e8e79266566ad6","modified":1608774242495},{"_id":"public/images/movie/prxd2.jpeg","hash":"b20b3346a8b57139fdc005ec6b8d16416b325798","modified":1608774242497},{"_id":"public/images/event-loop/preview.gif","hash":"8079dfd97cc3891057de56e213b472c5910ba1a1","modified":1608774242499},{"_id":"public/images/movie/prxd1.jpeg","hash":"b15c44d3c80ccf4509a7178d69df4d274f0849b0","modified":1608774242504},{"_id":"public/images/event-loop/event_loop.gif","hash":"849b6a246f4355ab5c3559e938fc26f223ef89e9","modified":1608774242522},{"_id":"public/images/ai/000.gif","hash":"12a36f10b7e4c282e4dd2a2820e68711e5fa6cfe","modified":1608774242536},{"_id":"source/_posts/debounce_raf.md","hash":"717aa4cf8b8d98685549203d2300d07fd9b74859","modified":1611309605033},{"_id":"public/archives/2020/12/index.html","hash":"d8f822298e969c23af54de71001e34c5f2c23da1","modified":1611296668919},{"_id":"public/categories/fe-perf/index.html","hash":"086eec62697aeb537a16a2893ae834d7e039ec7a","modified":1611296668920},{"_id":"public/debounce_raf/index.html","hash":"441756a68b00381e8d1dc2b28b33deafb4ba5b29","modified":1611296668920},{"_id":"source/_posts/run.md","hash":"2bfc422580e923f3cce793b14e3a0859e225b3ac","modified":1609327577764},{"_id":"public/run/index.html","hash":"2a38be10cd7cde73954b0c26d642dd2528d6df55","modified":1609327853007},{"_id":"public/archives/2020/11/index.html","hash":"77dfaac46660a22f1b4ae6dcbca9801786b9bd3d","modified":1611296668919},{"_id":"source/_posts/running_life.md","hash":"c743a999ed749522901dbac867235ebfc0fa8272","modified":1618988017262},{"_id":"public/running_life/index.html","hash":"1ee80d6d7498e29a3ec6c5b53266421dc4ef0f39","modified":1611296668920},{"_id":"source/_posts/meaning_of_life.md","hash":"b94d1f19f4ae992ef526941eb82ce7f1d7319c88","modified":1618988017262},{"_id":"public/archives/2020/10/index.html","hash":"8a3b72e46dbd9ee2dde12dbc60bfa7c4203cfa2c","modified":1611296668919},{"_id":"public/meaning_of_life/index.html","hash":"836db994274bf2a150b462a923b2a9357e7607db","modified":1611296668920},{"_id":"source/_posts/2021_hello.md","hash":"54396718b5cc72d983ae915b456f1e5d6bc43504","modified":1611308434457},{"_id":"public/archives/2021/index.html","hash":"22a492c0fb71efca2f62594a34f28615064d0191","modified":1611296668926},{"_id":"public/archives/2021/01/index.html","hash":"f73b20a6b97366fb3ff033053ddf292421928081","modified":1611296668926},{"_id":"public/2021_hello/index.html","hash":"ebf4617fa122d7e5ce8b601eabcdab8fc64e7255","modified":1611296668926},{"_id":"source/_posts/gtd.md","hash":"e3c8d533c2be5e23fa69ae7155dd9296335f34bc","modified":1611743096758},{"_id":"source/_posts/2020_wechat_inout.md","hash":"bfb570087a8dd9ff03f613817cb2dff1a3e5a3ba","modified":1611816607041},{"_id":"source/_posts/shizhi.md","hash":"68a6ecab33f71bf68b1fcb4c8fcc444a7f38a5f8","modified":1618988017287},{"_id":"source/asset/notion-char/index.html","hash":"a893bf031103eb7a410f6b9131f9668526552859","modified":1612009727817},{"_id":"source/asset/notion-char/asset/dom2img.js","hash":"cc5c8550706c1d7afea88fee427be5e2b4656809","modified":1612004208995},{"_id":"source/asset/notion-char/asset/style.css","hash":"265d00050db98f8f6ab792326ca0bffbf247a572","modified":1612009404935},{"_id":"source/asset/notion-char/asset/semi.ttf","hash":"141e3e9a7fc1892ff1df7731d13e2765bee63b44","modified":1612004209006},{"_id":"source/asset/notion-char/asset/Fraunces.ttf","hash":"260cb2031f9ef83696d9adfe0fb405f7a2da9f94","modified":1595433600000},{"_id":"source/_posts/month_2021_01.md","hash":"78101b476eb0472958b0aa8080cfd9657e110ad9","modified":1612175342889},{"_id":"source/_posts/monthly_#1_2021_01.md","hash":"78101b476eb0472958b0aa8080cfd9657e110ad9","modified":1612175398807},{"_id":"source/_posts/monthly_1_2021_01.md","hash":"7f2bc89de672955caa467398cdece360e99623cb","modified":1615260470443},{"_id":"source/_posts/monthly_2_2021_02.md","hash":"855aded8c9dd52c25f301b902e2fd5ef39e326aa","modified":1615260478999},{"_id":"source/_posts/writing_tech.md","hash":"b8b3e61e2a0eb7252cae0638d4c7d1acd948d104","modified":1622859367430},{"_id":"source/_posts/monthly_3_2021_04.md","hash":"b5fe624d558b2479d6d8693ab01e287dec079195","modified":1618307182298},{"_id":"source/_posts/relationship.md","hash":"3058e3111a329377078ddf594bfd7dfc172cd436","modified":1622868385212},{"_id":"source/_posts/monthly_4_2021_05.md","hash":"7b972b8d7734cbabdc050c549618b42cf66b2d5b","modified":1622773019939},{"_id":"source/_posts/monthly_4_2021_05-06.md","hash":"d4d38258ac950f32f6f7507a84d5151f8c1d7c83","modified":1622774405446}],"Category":[{"name":"01关于 | 此博客的来世今生","_id":"ckir88iev0004c8y6gi4ovx7a"},{"name":"10技术 | 前端工具与工程化","_id":"ckir88if3000bc8y65ondomb3"},{"name":"10技术 | 行业信息","_id":"ckir88if7000gc8y6wkrsvju8"},{"name":"02阅读 | 我的课外书笔记","_id":"ckir88ifb000lc8y6lvub82rr"},{"name":"10技术 | JavaScript","_id":"ckir88ifm0014c8y6w39njmm7"},{"name":"10技术 | CSS","_id":"ckir88ifq001dc8y65u57i3gb"},{"name":"10技术 | HTML","_id":"ckir88ift001jc8y6ed4nwbhr"},{"name":"04工具 | 效率MAX","_id":"ckir88ig40021c8y6sl5w7d7r"},{"name":"10技术 | 前端Debug老司机","_id":"ckir88ig70026c8y6p4zfxgrn"},{"name":"10技术 | 前端机器学习","_id":"ckir88igq002xc8y6ybxh73jh"},{"name":"10技术 | JS","_id":"ckir88ihm004gc8y67r3owoew"},{"name":"10技术 | 数据库","_id":"ckir88ihn004jc8y6di9namsq"},{"name":"03方法论 | 高效学习","_id":"ckir88iho004lc8y6wwrxpkw6"},{"name":"05外语","_id":"ckir88jbk004zc8y6brbwgce3"},{"name":"10技术 | 前端测试","_id":"ckir88jbw005cc8y681hfwino"},{"name":"10技术 | 前端性能","_id":"ckjbb32am0001ggy6rn99xznh"},{"name":"01关于","_id":"ckk7wfafg000050y6tvxfrier"},{"name":"03成长 | 自我管理","_id":"ckkf7l96o0001rwy6uepzriwf"},{"name":"00月刊","_id":"ckkx9fhsc0000ewy6r16kij31"},{"name":"02阅读 | 读书笔记","_id":"ckphp64o2000288y630dl38ct"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"description":"腾讯404公益页面","_content":"\n<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                \n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"></script>\n\t</body>\n</html>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\ndescription: 腾讯404公益页面\n---\n\n<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                \n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"></script>\n\t</body>\n</html>\n","date":"2020-12-02T10:06:16.431Z","updated":"2020-04-08T00:43:01.107Z","path":"/404.html","layout":"page","_id":"ckir88ier0001c8y6xj2zy2m4","content":"<p>&lt;!DOCTYPE html&gt;</p>\n<html><br>    <head><meta name=\"generator\" content=\"Hexo 3.9.0\"><br>         <meta charset=\"UTF-8\"><br>         <title>404</title><br>    <link rel=\"alternate\" href=\"atom.xml\" title=\"ScarSu\" type=\"application/atom+xml\">\n</head><br>    <body><br>         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homepagename=\"返回首页\" homepageurl=\"https://www.scarsu.com\"></script><br>    </body><br></html>\n","site":{"data":{}},"excerpt":"","more":"<p>&lt;!DOCTYPE html&gt;</p>\n<html><br>    <head><meta name=\"generator\" content=\"Hexo 3.9.0\"><br>         <meta charset=\"UTF-8\"><br>         <title>404</title><br>    <link rel=\"alternate\" href=\"atom.xml\" title=\"ScarSu\" type=\"application/atom+xml\">\n</head><br>    <body><br>         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homepagename=\"返回首页\" homepageurl=\"https://www.scarsu.com\"></script><br>    </body><br></html>\n"},{"title":"Apps","_content":"\n#### [NotionX ( for Notion )](https://github.com/scarsu/NotionX)\n#### [Notion 风格符号图标生成器](/asset/notion-char/)\n#### <a href=\"/pwa/clock/index.html\" target=\"_blank\">全屏简黑时钟(PWA)</a>\n#### [计算机相关 单词本](/cs_english)\n<!-- #### [留言墙](/comment/) -->\n#### <a href=\"/asset/drum/index.html\" target=\"_blank\">JS Drum Kit</a>\n#### <a href=\"/asset/css-pic.html\" target=\"_blank\">用原生CSS box-shadow画图</a>\n\n<!-- > 还有很多个坑，还在建设中 -->\n\n<!-- - Chrome 插件：书签同步助手(使用gist 拉取数据/上传数据/监控书签更改自动上传)\n- 浏览器书签生成器(将网址信息+链接数据，转换为浏览器可导入的html书签文件)\n- 访问数据\n- 随机手机壁纸\n- 在线图片转换工具\n- 番茄钟\n- 随机一句芬芳 -->\n\n<!-- #### 7.愿望清单 -->\n<!-- ```js\n//有想的请联系我邮箱  scarsu001@gmail.com\n``` -->","source":"apps/index.md","raw":"---\ntitle: Apps\n---\n\n#### [NotionX ( for Notion )](https://github.com/scarsu/NotionX)\n#### [Notion 风格符号图标生成器](/asset/notion-char/)\n#### <a href=\"/pwa/clock/index.html\" target=\"_blank\">全屏简黑时钟(PWA)</a>\n#### [计算机相关 单词本](/cs_english)\n<!-- #### [留言墙](/comment/) -->\n#### <a href=\"/asset/drum/index.html\" target=\"_blank\">JS Drum Kit</a>\n#### <a href=\"/asset/css-pic.html\" target=\"_blank\">用原生CSS box-shadow画图</a>\n\n<!-- > 还有很多个坑，还在建设中 -->\n\n<!-- - Chrome 插件：书签同步助手(使用gist 拉取数据/上传数据/监控书签更改自动上传)\n- 浏览器书签生成器(将网址信息+链接数据，转换为浏览器可导入的html书签文件)\n- 访问数据\n- 随机手机壁纸\n- 在线图片转换工具\n- 番茄钟\n- 随机一句芬芳 -->\n\n<!-- #### 7.愿望清单 -->\n<!-- ```js\n//有想的请联系我邮箱  scarsu001@gmail.com\n``` -->","date":"2021-01-30T11:01:04.259Z","updated":"2021-01-30T11:01:04.259Z","path":"apps/index.html","_id":"ckir88ieu0003c8y695qhrxvo","comments":1,"layout":"page","content":"<h4 id=\"NotionX-for-Notion\"><a href=\"#NotionX-for-Notion\" class=\"headerlink\" title=\"NotionX ( for Notion )\"></a><a href=\"https://github.com/scarsu/NotionX\" target=\"_blank\" rel=\"noopener\">NotionX ( for Notion )</a></h4><h4 id=\"Notion-风格符号图标生成器\"><a href=\"#Notion-风格符号图标生成器\" class=\"headerlink\" title=\"Notion 风格符号图标生成器\"></a><a href=\"/asset/notion-char/\">Notion 风格符号图标生成器</a></h4><h4 id=\"全屏简黑时钟-PWA\"><a href=\"#全屏简黑时钟-PWA\" class=\"headerlink\" title=\"全屏简黑时钟(PWA)\"></a><a href=\"/pwa/clock/index.html\" target=\"_blank\">全屏简黑时钟(PWA)</a></h4><h4 id=\"计算机相关-单词本\"><a href=\"#计算机相关-单词本\" class=\"headerlink\" title=\"计算机相关 单词本\"></a><a href=\"/cs_english\">计算机相关 单词本</a></h4><!-- #### [留言墙](/comment/) -->\n<h4 id=\"JS-Drum-Kit\"><a href=\"#JS-Drum-Kit\" class=\"headerlink\" title=\"JS Drum Kit\"></a><a href=\"/asset/drum/index.html\" target=\"_blank\">JS Drum Kit</a></h4><h4 id=\"用原生CSS-box-shadow画图\"><a href=\"#用原生CSS-box-shadow画图\" class=\"headerlink\" title=\"用原生CSS box-shadow画图\"></a><a href=\"/asset/css-pic.html\" target=\"_blank\">用原生CSS box-shadow画图</a></h4><!-- > 还有很多个坑，还在建设中 -->\n<!-- - Chrome 插件：书签同步助手(使用gist 拉取数据/上传数据/监控书签更改自动上传)\n- 浏览器书签生成器(将网址信息+链接数据，转换为浏览器可导入的html书签文件)\n- 访问数据\n- 随机手机壁纸\n- 在线图片转换工具\n- 番茄钟\n- 随机一句芬芳 -->\n<!-- #### 7.愿望清单 -->\n<!-- ```js\n//有想的请联系我邮箱  scarsu001@gmail.com\n``` -->","site":{"data":{}},"excerpt":"","more":"<h4 id=\"NotionX-for-Notion\"><a href=\"#NotionX-for-Notion\" class=\"headerlink\" title=\"NotionX ( for Notion )\"></a><a href=\"https://github.com/scarsu/NotionX\" target=\"_blank\" rel=\"noopener\">NotionX ( for Notion )</a></h4><h4 id=\"Notion-风格符号图标生成器\"><a href=\"#Notion-风格符号图标生成器\" class=\"headerlink\" title=\"Notion 风格符号图标生成器\"></a><a href=\"/asset/notion-char/\">Notion 风格符号图标生成器</a></h4><h4 id=\"全屏简黑时钟-PWA\"><a href=\"#全屏简黑时钟-PWA\" class=\"headerlink\" title=\"全屏简黑时钟(PWA)\"></a><a href=\"/pwa/clock/index.html\" target=\"_blank\">全屏简黑时钟(PWA)</a></h4><h4 id=\"计算机相关-单词本\"><a href=\"#计算机相关-单词本\" class=\"headerlink\" title=\"计算机相关 单词本\"></a><a href=\"/cs_english\">计算机相关 单词本</a></h4><!-- #### [留言墙](/comment/) -->\n<h4 id=\"JS-Drum-Kit\"><a href=\"#JS-Drum-Kit\" class=\"headerlink\" title=\"JS Drum Kit\"></a><a href=\"/asset/drum/index.html\" target=\"_blank\">JS Drum Kit</a></h4><h4 id=\"用原生CSS-box-shadow画图\"><a href=\"#用原生CSS-box-shadow画图\" class=\"headerlink\" title=\"用原生CSS box-shadow画图\"></a><a href=\"/asset/css-pic.html\" target=\"_blank\">用原生CSS box-shadow画图</a></h4><!-- > 还有很多个坑，还在建设中 -->\n<!-- - Chrome 插件：书签同步助手(使用gist 拉取数据/上传数据/监控书签更改自动上传)\n- 浏览器书签生成器(将网址信息+链接数据，转换为浏览器可导入的html书签文件)\n- 访问数据\n- 随机手机壁纸\n- 在线图片转换工具\n- 番茄钟\n- 随机一句芬芳 -->\n<!-- #### 7.愿望清单 -->\n<!-- ```js\n//有想的请联系我邮箱  scarsu001@gmail.com\n``` -->"},{"_content":"<iframe id=\"commentBoard\" frameborder=\"0\" src=\"https://support.qq.com/products/144820\"></iframe>","source":"comment/index.md","raw":"<iframe id=\"commentBoard\" frameborder=\"0\" src=\"https://support.qq.com/products/144820\"></iframe>","date":"2020-04-17T07:57:48.908Z","updated":"2020-04-17T07:57:48.908Z","path":"comment/index.html","title":"","comments":1,"layout":"page","_id":"ckir88jb8004pc8y65vm672bz","content":"<iframe id=\"commentBoard\" frameborder=\"0\" src=\"https://support.qq.com/products/144820\"></iframe>","site":{"data":{}},"excerpt":"","more":"<iframe id=\"commentBoard\" frameborder=\"0\" src=\"https://support.qq.com/products/144820\"></iframe>"},{"title":"关于","_content":"#### 关于我\n\n- 网名 ScarSu\n- 昵称 酥鱼\n\n- ScarSu这个有点中二的英文名来源于我的大学室友，没什么特别的故事和寓意，沿用至今~\n- 18年毕业于岳麓山第一高中(母校昵称)，从事前端开发工作至今~\n- 双商极低，认知片面，什么都不懂~\n- DIY爱好者🔨~\n- 倡导轻断食 + 断舍离📖 + 极简生活~\n- 有一个发原创文章的个人公众号：自律神仙ScarSu\n\n<img id=\"slogan_img\" src=\"/images/slogan.png\" title=\"微信公众号：自律神仙ScarSu\"/>\n\n#### 联系方式\n\n- <i class=\"fa fa-github\"></i>   Github：<a href=\"https://github.com/scarsu\">scarsu</a>\n- <i class=\"fa fa-envelope\"></i>     邮箱：scarsu001@gmail.com\n- <i class=\"fa fa-wechat\"></i>    微信: scarsu001\n\n<!-- #### 开源贡献\n\n- [Chrome 插件 - NotionX](https://github.com/scarsu/NotionX)\n- [markdown-nice](https://github.com/mdnice/markdown-nice/graphs/contributors)\n- [现代javascript教程翻译](https://github.com/javascript-tutorial/zh.javascript.info/pr)\n- [Vue插件：npm/vue-message-plugin](https://www.npmjs.com/package/vue-message-plugin)\n- [Chrome 插件 - TOPEST](https://github.com/scarsu/Topest-Chrome-Extension) -->\n\n#### 为什么要技术输出\n\n1. 分享、写文档、技术输出，是对自己掌握得知识的**沉淀**\n2. 一个人的认知面是有限的，把你的认知分享给别人，可以听到别人的声音\n3. 分享、和别人交流的过程，是对知识的 **复盘** ，从《论语》的“温故而知新”，到[费曼学习法](https://36kr.com/p/1721599983617)，都印证了技术输出的作用\n\n<!-- #### Skills\n- 前端：HTML | CSS | JS | REACT | GRUNT | NODE | VUE\n- 毕设：基于Node.js的即时通讯系统（Socket.io|Express)\n- 数据库：Oracle | SQL | PL/SQL\n- 服务端：Node | J2EE | ASP.net  -->\n","source":"about/index.md","raw":"---\ntitle: 关于\n---\n#### 关于我\n\n- 网名 ScarSu\n- 昵称 酥鱼\n\n- ScarSu这个有点中二的英文名来源于我的大学室友，没什么特别的故事和寓意，沿用至今~\n- 18年毕业于岳麓山第一高中(母校昵称)，从事前端开发工作至今~\n- 双商极低，认知片面，什么都不懂~\n- DIY爱好者🔨~\n- 倡导轻断食 + 断舍离📖 + 极简生活~\n- 有一个发原创文章的个人公众号：自律神仙ScarSu\n\n<img id=\"slogan_img\" src=\"/images/slogan.png\" title=\"微信公众号：自律神仙ScarSu\"/>\n\n#### 联系方式\n\n- <i class=\"fa fa-github\"></i>   Github：<a href=\"https://github.com/scarsu\">scarsu</a>\n- <i class=\"fa fa-envelope\"></i>     邮箱：scarsu001@gmail.com\n- <i class=\"fa fa-wechat\"></i>    微信: scarsu001\n\n<!-- #### 开源贡献\n\n- [Chrome 插件 - NotionX](https://github.com/scarsu/NotionX)\n- [markdown-nice](https://github.com/mdnice/markdown-nice/graphs/contributors)\n- [现代javascript教程翻译](https://github.com/javascript-tutorial/zh.javascript.info/pr)\n- [Vue插件：npm/vue-message-plugin](https://www.npmjs.com/package/vue-message-plugin)\n- [Chrome 插件 - TOPEST](https://github.com/scarsu/Topest-Chrome-Extension) -->\n\n#### 为什么要技术输出\n\n1. 分享、写文档、技术输出，是对自己掌握得知识的**沉淀**\n2. 一个人的认知面是有限的，把你的认知分享给别人，可以听到别人的声音\n3. 分享、和别人交流的过程，是对知识的 **复盘** ，从《论语》的“温故而知新”，到[费曼学习法](https://36kr.com/p/1721599983617)，都印证了技术输出的作用\n\n<!-- #### Skills\n- 前端：HTML | CSS | JS | REACT | GRUNT | NODE | VUE\n- 毕设：基于Node.js的即时通讯系统（Socket.io|Express)\n- 数据库：Oracle | SQL | PL/SQL\n- 服务端：Node | J2EE | ASP.net  -->\n","date":"2020-09-15T06:53:25.642Z","updated":"2020-09-15T06:53:25.642Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckir88jbd004rc8y6yykn8smm","content":"<h4 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h4><ul>\n<li>网名 ScarSu</li>\n<li><p>昵称 酥鱼</p>\n</li>\n<li><p>ScarSu这个有点中二的英文名来源于我的大学室友，没什么特别的故事和寓意，沿用至今~</p>\n</li>\n<li>18年毕业于岳麓山第一高中(母校昵称)，从事前端开发工作至今~</li>\n<li>双商极低，认知片面，什么都不懂~</li>\n<li>DIY爱好者🔨~</li>\n<li>倡导轻断食 + 断舍离📖 + 极简生活~</li>\n<li>有一个发原创文章的个人公众号：自律神仙ScarSu</li>\n</ul>\n<p><img id=\"slogan_img\" src=\"/images/slogan.png\" title=\"微信公众号：自律神仙ScarSu\"></p>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li><i class=\"fa fa-github\"></i>   Github：<a href=\"https://github.com/scarsu\" target=\"_blank\" rel=\"noopener\">scarsu</a></li>\n<li><i class=\"fa fa-envelope\"></i>     邮箱：<a href=\"mailto:scarsu001@gmail.com\" target=\"_blank\" rel=\"noopener\">scarsu001@gmail.com</a></li>\n<li><i class=\"fa fa-wechat\"></i>    微信: scarsu001</li>\n</ul>\n<!-- #### 开源贡献\n\n- [Chrome 插件 - NotionX](https://github.com/scarsu/NotionX)\n- [markdown-nice](https://github.com/mdnice/markdown-nice/graphs/contributors)\n- [现代javascript教程翻译](https://github.com/javascript-tutorial/zh.javascript.info/pr)\n- [Vue插件：npm/vue-message-plugin](https://www.npmjs.com/package/vue-message-plugin)\n- [Chrome 插件 - TOPEST](https://github.com/scarsu/Topest-Chrome-Extension) -->\n<h4 id=\"为什么要技术输出\"><a href=\"#为什么要技术输出\" class=\"headerlink\" title=\"为什么要技术输出\"></a>为什么要技术输出</h4><ol>\n<li>分享、写文档、技术输出，是对自己掌握得知识的<strong>沉淀</strong></li>\n<li>一个人的认知面是有限的，把你的认知分享给别人，可以听到别人的声音</li>\n<li>分享、和别人交流的过程，是对知识的 <strong>复盘</strong> ，从《论语》的“温故而知新”，到<a href=\"https://36kr.com/p/1721599983617\" target=\"_blank\" rel=\"noopener\">费曼学习法</a>，都印证了技术输出的作用</li>\n</ol>\n<!-- #### Skills\n- 前端：HTML | CSS | JS | REACT | GRUNT | NODE | VUE\n- 毕设：基于Node.js的即时通讯系统（Socket.io|Express)\n- 数据库：Oracle | SQL | PL/SQL\n- 服务端：Node | J2EE | ASP.net  -->\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h4><ul>\n<li>网名 ScarSu</li>\n<li><p>昵称 酥鱼</p>\n</li>\n<li><p>ScarSu这个有点中二的英文名来源于我的大学室友，没什么特别的故事和寓意，沿用至今~</p>\n</li>\n<li>18年毕业于岳麓山第一高中(母校昵称)，从事前端开发工作至今~</li>\n<li>双商极低，认知片面，什么都不懂~</li>\n<li>DIY爱好者🔨~</li>\n<li>倡导轻断食 + 断舍离📖 + 极简生活~</li>\n<li>有一个发原创文章的个人公众号：自律神仙ScarSu</li>\n</ul>\n<p><img id=\"slogan_img\" src=\"/images/slogan.png\" title=\"微信公众号：自律神仙ScarSu\"></p>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li><i class=\"fa fa-github\"></i>   Github：<a href=\"https://github.com/scarsu\" target=\"_blank\" rel=\"noopener\">scarsu</a></li>\n<li><i class=\"fa fa-envelope\"></i>     邮箱：<a href=\"mailto:scarsu001@gmail.com\" target=\"_blank\" rel=\"noopener\">scarsu001@gmail.com</a></li>\n<li><i class=\"fa fa-wechat\"></i>    微信: scarsu001</li>\n</ul>\n<!-- #### 开源贡献\n\n- [Chrome 插件 - NotionX](https://github.com/scarsu/NotionX)\n- [markdown-nice](https://github.com/mdnice/markdown-nice/graphs/contributors)\n- [现代javascript教程翻译](https://github.com/javascript-tutorial/zh.javascript.info/pr)\n- [Vue插件：npm/vue-message-plugin](https://www.npmjs.com/package/vue-message-plugin)\n- [Chrome 插件 - TOPEST](https://github.com/scarsu/Topest-Chrome-Extension) -->\n<h4 id=\"为什么要技术输出\"><a href=\"#为什么要技术输出\" class=\"headerlink\" title=\"为什么要技术输出\"></a>为什么要技术输出</h4><ol>\n<li>分享、写文档、技术输出，是对自己掌握得知识的<strong>沉淀</strong></li>\n<li>一个人的认知面是有限的，把你的认知分享给别人，可以听到别人的声音</li>\n<li>分享、和别人交流的过程，是对知识的 <strong>复盘</strong> ，从《论语》的“温故而知新”，到<a href=\"https://36kr.com/p/1721599983617\" target=\"_blank\" rel=\"noopener\">费曼学习法</a>，都印证了技术输出的作用</li>\n</ol>\n<!-- #### Skills\n- 前端：HTML | CSS | JS | REACT | GRUNT | NODE | VUE\n- 毕设：基于Node.js的即时通讯系统（Socket.io|Express)\n- 数据库：Oracle | SQL | PL/SQL\n- 服务端：Node | J2EE | ASP.net  -->\n"},{"title":"demo","_content":"\n#### [1. 实时弹幕墙](http://htmlpreview.github.io/?https://github.com/scarsu/code_lib/blob/master/project%26module/fcc03-%E5%BC%B9%E5%B9%95%E5%A2%99/index.html)\n\n#### [2.RandomQuote](https://codepen.io/zsy/full/PmpWzz)\n\n#### [3.Calculate](https://codepen.io/zsy/full/EmvpVm)\n\n#### [4.番茄钟](https://codepen.io/zsy/full/zwEpzL/)\n\n#### [5.GruntLearn](https://github.com/scarsu/gruntlearn)\n\n<!-- #### [6.ife 课程](https://github.com/scarsu/code_lib/tree/master/exercise/ife_baidu/01html.css) -->\n\n#### 6.Node.js即时通讯(毕设  等买的起服务器再放)\n\n#### 7.愿望清单\n- 【快应用】简黑时钟    (这么简单的功能实在没必要做app)\n- 【小程序】日子    (类似于生日管家，但是app太臃肿商业化)\n- 【Chrome 插件】书签导出助手   (导出定时任务 / 监控书签更改自动导出)\n```js\n//有想合作的请联系我邮箱  scarsu001@gmail.com\n```","source":"demo/index.md","raw":"---\ntitle: demo\n---\n\n#### [1. 实时弹幕墙](http://htmlpreview.github.io/?https://github.com/scarsu/code_lib/blob/master/project%26module/fcc03-%E5%BC%B9%E5%B9%95%E5%A2%99/index.html)\n\n#### [2.RandomQuote](https://codepen.io/zsy/full/PmpWzz)\n\n#### [3.Calculate](https://codepen.io/zsy/full/EmvpVm)\n\n#### [4.番茄钟](https://codepen.io/zsy/full/zwEpzL/)\n\n#### [5.GruntLearn](https://github.com/scarsu/gruntlearn)\n\n<!-- #### [6.ife 课程](https://github.com/scarsu/code_lib/tree/master/exercise/ife_baidu/01html.css) -->\n\n#### 6.Node.js即时通讯(毕设  等买的起服务器再放)\n\n#### 7.愿望清单\n- 【快应用】简黑时钟    (这么简单的功能实在没必要做app)\n- 【小程序】日子    (类似于生日管家，但是app太臃肿商业化)\n- 【Chrome 插件】书签导出助手   (导出定时任务 / 监控书签更改自动导出)\n```js\n//有想合作的请联系我邮箱  scarsu001@gmail.com\n```","date":"2020-04-08T00:43:01.231Z","updated":"2020-04-08T00:43:01.231Z","path":"demo/index.html","comments":1,"layout":"page","_id":"ckir88jbg004tc8y604wywofx","content":"<h4 id=\"1-实时弹幕墙\"><a href=\"#1-实时弹幕墙\" class=\"headerlink\" title=\"1. 实时弹幕墙\"></a><a href=\"http://htmlpreview.github.io/?https://github.com/scarsu/code_lib/blob/master/project%26module/fcc03-%E5%BC%B9%E5%B9%95%E5%A2%99/index.html\" target=\"_blank\" rel=\"noopener\">1. 实时弹幕墙</a></h4><h4 id=\"2-RandomQuote\"><a href=\"#2-RandomQuote\" class=\"headerlink\" title=\"2.RandomQuote\"></a><a href=\"https://codepen.io/zsy/full/PmpWzz\" target=\"_blank\" rel=\"noopener\">2.RandomQuote</a></h4><h4 id=\"3-Calculate\"><a href=\"#3-Calculate\" class=\"headerlink\" title=\"3.Calculate\"></a><a href=\"https://codepen.io/zsy/full/EmvpVm\" target=\"_blank\" rel=\"noopener\">3.Calculate</a></h4><h4 id=\"4-番茄钟\"><a href=\"#4-番茄钟\" class=\"headerlink\" title=\"4.番茄钟\"></a><a href=\"https://codepen.io/zsy/full/zwEpzL/\" target=\"_blank\" rel=\"noopener\">4.番茄钟</a></h4><h4 id=\"5-GruntLearn\"><a href=\"#5-GruntLearn\" class=\"headerlink\" title=\"5.GruntLearn\"></a><a href=\"https://github.com/scarsu/gruntlearn\" target=\"_blank\" rel=\"noopener\">5.GruntLearn</a></h4><!-- #### [6.ife 课程](https://github.com/scarsu/code_lib/tree/master/exercise/ife_baidu/01html.css) -->\n<h4 id=\"6-Node-js即时通讯-毕设-等买的起服务器再放\"><a href=\"#6-Node-js即时通讯-毕设-等买的起服务器再放\" class=\"headerlink\" title=\"6.Node.js即时通讯(毕设  等买的起服务器再放)\"></a>6.Node.js即时通讯(毕设  等买的起服务器再放)</h4><h4 id=\"7-愿望清单\"><a href=\"#7-愿望清单\" class=\"headerlink\" title=\"7.愿望清单\"></a>7.愿望清单</h4><ul>\n<li>【快应用】简黑时钟    (这么简单的功能实在没必要做app)</li>\n<li>【小程序】日子    (类似于生日管家，但是app太臃肿商业化)</li>\n<li>【Chrome 插件】书签导出助手   (导出定时任务 / 监控书签更改自动导出)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有想合作的请联系我邮箱  scarsu001@gmail.com</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-实时弹幕墙\"><a href=\"#1-实时弹幕墙\" class=\"headerlink\" title=\"1. 实时弹幕墙\"></a><a href=\"http://htmlpreview.github.io/?https://github.com/scarsu/code_lib/blob/master/project%26module/fcc03-%E5%BC%B9%E5%B9%95%E5%A2%99/index.html\" target=\"_blank\" rel=\"noopener\">1. 实时弹幕墙</a></h4><h4 id=\"2-RandomQuote\"><a href=\"#2-RandomQuote\" class=\"headerlink\" title=\"2.RandomQuote\"></a><a href=\"https://codepen.io/zsy/full/PmpWzz\" target=\"_blank\" rel=\"noopener\">2.RandomQuote</a></h4><h4 id=\"3-Calculate\"><a href=\"#3-Calculate\" class=\"headerlink\" title=\"3.Calculate\"></a><a href=\"https://codepen.io/zsy/full/EmvpVm\" target=\"_blank\" rel=\"noopener\">3.Calculate</a></h4><h4 id=\"4-番茄钟\"><a href=\"#4-番茄钟\" class=\"headerlink\" title=\"4.番茄钟\"></a><a href=\"https://codepen.io/zsy/full/zwEpzL/\" target=\"_blank\" rel=\"noopener\">4.番茄钟</a></h4><h4 id=\"5-GruntLearn\"><a href=\"#5-GruntLearn\" class=\"headerlink\" title=\"5.GruntLearn\"></a><a href=\"https://github.com/scarsu/gruntlearn\" target=\"_blank\" rel=\"noopener\">5.GruntLearn</a></h4><!-- #### [6.ife 课程](https://github.com/scarsu/code_lib/tree/master/exercise/ife_baidu/01html.css) -->\n<h4 id=\"6-Node-js即时通讯-毕设-等买的起服务器再放\"><a href=\"#6-Node-js即时通讯-毕设-等买的起服务器再放\" class=\"headerlink\" title=\"6.Node.js即时通讯(毕设  等买的起服务器再放)\"></a>6.Node.js即时通讯(毕设  等买的起服务器再放)</h4><h4 id=\"7-愿望清单\"><a href=\"#7-愿望清单\" class=\"headerlink\" title=\"7.愿望清单\"></a>7.愿望清单</h4><ul>\n<li>【快应用】简黑时钟    (这么简单的功能实在没必要做app)</li>\n<li>【小程序】日子    (类似于生日管家，但是app太臃肿商业化)</li>\n<li>【Chrome 插件】书签导出助手   (导出定时任务 / 监控书签更改自动导出)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有想合作的请联系我邮箱  scarsu001@gmail.com</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"认知/输入","subtitle":"睁开眼睛看看这世界吧","_content":"\n#### 认知书单\n\n- 井喷的信息让你误以为自己知道了很多，但其实这些即时易得的碎片信息，离真相还很远\n- 记忆和知识的连结，要依靠逻辑；碎片信息最大的缺点，就是燕过无痕，落叶无声，没有逻辑，不成体系\n- [《娱乐至死》](https://book.douban.com/subject/1062193/)波兹曼\n- [《1984》](https://book.douban.com/subject/1062193/)奥威尔\n- [《美丽新世界》](https://book.douban.com/subject/1062193/)赫胥黎\n- 邓宁-克鲁格效应([论文](http://homepages.se.edu/cvonbergen/files/2012/12/Unskilled-and-Unaware-of-It.pdf))\n\n![邓宁-克鲁格效应](/images/dunning-kruger_effect_cn.jpg)\n- [《如何阅读一本书》](https://book.douban.com/subject/1013208/)\n- [《时间简史》](https://weread.qq.com/web/reader/e5d329105b9072e5d188fd9)\n- [《人类简史》](https://weread.qq.com/web/reader/d4a322a05d0f04d4a01f0d6)\n\n\n\n#### 自律书单\n\n- <a target=\"_blank\" href=\"https://www.scarsu.com/self_control/\">《自控力》</a> ([豆瓣链接](https://book.douban.com/subject/6828163/))\n- [《刻意练习》](https://book.douban.com/subject/26895993/)从心理学了解自控与失控-斯坦福大学最受欢迎心理学课程\n- [《4点起床》](https://book.douban.com/subject/10786473/)\n- <a target=\"_blank\" href=\"https://www.scarsu.com/continuous_action/\">《刻意学习》 </a> ([豆瓣链接](https://book.douban.com/subject/27071913/))如何更高效的成长\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/26575679/\">《当我谈跑步时，我谈些什么》</a>村上春树25年跑步与人生历程，痛楚难以避免，而磨难可以选择。\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/34432670/\">《胡适忍不住的新努力》</a>胡适的人生哲学\n- <a target=\"_blank\" href=\"https://weread.qq.com/web/reader/7253294071cc8a5a72594ff\">《施瓦辛格健身全书》</a>\n- [《习惯的力量》](https://book.douban.com/subject/20507212/)\n\n#### 心智成长书单\n\n- <a target=\"_blank\" href=\"https://www.scarsu.com/life_courage/\">《被讨厌的勇气》</a> ([豆瓣链接](https://book.douban.com/subject/26369699/))决定我们的不是过去的经历，而是我们自己赋予经历的意义 - 入门阿德勒心理学\n- [《逆商》](https://book.douban.com/subject/30458408/)如何应对坏事件\n- [《心流》](https://book.douban.com/subject/27186106/)全神贯注、投入忘我、感觉不到时间存在的状态\n- [《自卑与超越》](https://book.douban.com/subject/26989781/)阿德勒心理学读本，生活的意义到底是什么？\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/1874488/\">《别做正常的傻瓜》</a>行为决策学入门,让你的每一个行为都得到最优解\n- <a target=\"_blank\" href=\"https://www.scarsu.com/nonviolent_communication/\">《非暴力沟通》</a>有些话真的可以好好说\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/30475278/\">《人生的智慧：如何幸福度过一生》</a>世界级哲学大师叔本华晚年心血之作\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/35013437/\">《人性的枷锁》</a>毛姆以30年经验反思自我,生离死别，爱恨情仇，世间险恶。生活中的不幸，爱情中的挫折，工作中的折磨\n\n#### 搞钱书单\n\n- <a target=\"_blank\" href=\"https://www.scarsu.com/rich_dad/\">《富爸爸穷爸爸》</a> 为什么你很穷？改变对钱的认知，理财入门书\n- <a target=\"_blank\" href=\"https://www.scarsu.com/poor_economics/\">《贫穷的本质：我们为什么摆脱不了贫穷》</a> 2019诺贝尔经济学奖得主作品\n- <a target=\"_blank\" href=\"https://weread.qq.com/web/reader/6c4324d059eee96c43a4b3e\">《国富论》</a> \n- <a target=\"_blank\" href=\"https://weread.qq.com/web/reader/ea232e205c3023ea2c96525\">《小狗钱钱》</a> \n\n#### 舒适生活书单\n- <a target=\"_blank\" href=\"https://www.scarsu.com/danshari/\">《断舍离》</a> ([豆瓣链接](https://book.douban.com/subject/24749465/))透过整理物品了解自己，整理心中的混沌，让人生更舒适\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/25882638/\">《轻断食》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/30302866/\">《两个人到一个人》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/27001607/\">《积存时间的生活》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/27028717/\">《每天都是小春日和》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/26733854/\">《明天也是小春日和》</a>\n\n<!-- #### 文章推荐\n\n- <a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=5&sn=8b4b51e2c1a88f7fe369a4b756657672&chksm=88bc7865bfcbf17324e364a8ade43fd38556041908e3baa5e7268c6c4428696477a97cd0723a&token=842281904&lang=zh_CN#rd\">【为什么马云能成功而你不能】</a> \n- <a target=\"_blank\" href=\"https://medium.com/s/notes-on-changing-your-life/how-to-seem-like-you-always-have-your-sh-t-together-11114005114e\">【How to Seem Like You Always Have Your Sh*t Together】</a> \n\n\n#### 优质社区\n- <a target=\"_blank\" href=\"https://medium.com/\">Medium</a> - a place to read and write big ideas and important stories -->\n\n\n#### 文学书单\n- [《读者》](https://book.douban.com/subject/4031698/)梁文道，谈论书缘，读书的方法，对阅读的看法\n- [《人生海海》](https://book.douban.com/subject/33457122/)麦家\n\n\n#### 不看也可以单\n- <a target=\"_blank\" href=\"https://www.notion.so/f1ba5d9c5aab4a458109abd3c1673f92\">我的影单分享</a>\n- <a target=\"_blank\" href=\"https://www.scarsu.com/escape_from_the_world/\">我与这世界的距离</a>一些胡言乱语。","source":"cognition/index.md","raw":"---\ntitle: 认知/输入\nsubtitle: 睁开眼睛看看这世界吧\n---\n\n#### 认知书单\n\n- 井喷的信息让你误以为自己知道了很多，但其实这些即时易得的碎片信息，离真相还很远\n- 记忆和知识的连结，要依靠逻辑；碎片信息最大的缺点，就是燕过无痕，落叶无声，没有逻辑，不成体系\n- [《娱乐至死》](https://book.douban.com/subject/1062193/)波兹曼\n- [《1984》](https://book.douban.com/subject/1062193/)奥威尔\n- [《美丽新世界》](https://book.douban.com/subject/1062193/)赫胥黎\n- 邓宁-克鲁格效应([论文](http://homepages.se.edu/cvonbergen/files/2012/12/Unskilled-and-Unaware-of-It.pdf))\n\n![邓宁-克鲁格效应](/images/dunning-kruger_effect_cn.jpg)\n- [《如何阅读一本书》](https://book.douban.com/subject/1013208/)\n- [《时间简史》](https://weread.qq.com/web/reader/e5d329105b9072e5d188fd9)\n- [《人类简史》](https://weread.qq.com/web/reader/d4a322a05d0f04d4a01f0d6)\n\n\n\n#### 自律书单\n\n- <a target=\"_blank\" href=\"https://www.scarsu.com/self_control/\">《自控力》</a> ([豆瓣链接](https://book.douban.com/subject/6828163/))\n- [《刻意练习》](https://book.douban.com/subject/26895993/)从心理学了解自控与失控-斯坦福大学最受欢迎心理学课程\n- [《4点起床》](https://book.douban.com/subject/10786473/)\n- <a target=\"_blank\" href=\"https://www.scarsu.com/continuous_action/\">《刻意学习》 </a> ([豆瓣链接](https://book.douban.com/subject/27071913/))如何更高效的成长\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/26575679/\">《当我谈跑步时，我谈些什么》</a>村上春树25年跑步与人生历程，痛楚难以避免，而磨难可以选择。\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/34432670/\">《胡适忍不住的新努力》</a>胡适的人生哲学\n- <a target=\"_blank\" href=\"https://weread.qq.com/web/reader/7253294071cc8a5a72594ff\">《施瓦辛格健身全书》</a>\n- [《习惯的力量》](https://book.douban.com/subject/20507212/)\n\n#### 心智成长书单\n\n- <a target=\"_blank\" href=\"https://www.scarsu.com/life_courage/\">《被讨厌的勇气》</a> ([豆瓣链接](https://book.douban.com/subject/26369699/))决定我们的不是过去的经历，而是我们自己赋予经历的意义 - 入门阿德勒心理学\n- [《逆商》](https://book.douban.com/subject/30458408/)如何应对坏事件\n- [《心流》](https://book.douban.com/subject/27186106/)全神贯注、投入忘我、感觉不到时间存在的状态\n- [《自卑与超越》](https://book.douban.com/subject/26989781/)阿德勒心理学读本，生活的意义到底是什么？\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/1874488/\">《别做正常的傻瓜》</a>行为决策学入门,让你的每一个行为都得到最优解\n- <a target=\"_blank\" href=\"https://www.scarsu.com/nonviolent_communication/\">《非暴力沟通》</a>有些话真的可以好好说\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/30475278/\">《人生的智慧：如何幸福度过一生》</a>世界级哲学大师叔本华晚年心血之作\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/35013437/\">《人性的枷锁》</a>毛姆以30年经验反思自我,生离死别，爱恨情仇，世间险恶。生活中的不幸，爱情中的挫折，工作中的折磨\n\n#### 搞钱书单\n\n- <a target=\"_blank\" href=\"https://www.scarsu.com/rich_dad/\">《富爸爸穷爸爸》</a> 为什么你很穷？改变对钱的认知，理财入门书\n- <a target=\"_blank\" href=\"https://www.scarsu.com/poor_economics/\">《贫穷的本质：我们为什么摆脱不了贫穷》</a> 2019诺贝尔经济学奖得主作品\n- <a target=\"_blank\" href=\"https://weread.qq.com/web/reader/6c4324d059eee96c43a4b3e\">《国富论》</a> \n- <a target=\"_blank\" href=\"https://weread.qq.com/web/reader/ea232e205c3023ea2c96525\">《小狗钱钱》</a> \n\n#### 舒适生活书单\n- <a target=\"_blank\" href=\"https://www.scarsu.com/danshari/\">《断舍离》</a> ([豆瓣链接](https://book.douban.com/subject/24749465/))透过整理物品了解自己，整理心中的混沌，让人生更舒适\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/25882638/\">《轻断食》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/30302866/\">《两个人到一个人》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/27001607/\">《积存时间的生活》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/27028717/\">《每天都是小春日和》</a>\n- <a target=\"_blank\" href=\"https://book.douban.com/subject/26733854/\">《明天也是小春日和》</a>\n\n<!-- #### 文章推荐\n\n- <a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=5&sn=8b4b51e2c1a88f7fe369a4b756657672&chksm=88bc7865bfcbf17324e364a8ade43fd38556041908e3baa5e7268c6c4428696477a97cd0723a&token=842281904&lang=zh_CN#rd\">【为什么马云能成功而你不能】</a> \n- <a target=\"_blank\" href=\"https://medium.com/s/notes-on-changing-your-life/how-to-seem-like-you-always-have-your-sh-t-together-11114005114e\">【How to Seem Like You Always Have Your Sh*t Together】</a> \n\n\n#### 优质社区\n- <a target=\"_blank\" href=\"https://medium.com/\">Medium</a> - a place to read and write big ideas and important stories -->\n\n\n#### 文学书单\n- [《读者》](https://book.douban.com/subject/4031698/)梁文道，谈论书缘，读书的方法，对阅读的看法\n- [《人生海海》](https://book.douban.com/subject/33457122/)麦家\n\n\n#### 不看也可以单\n- <a target=\"_blank\" href=\"https://www.notion.so/f1ba5d9c5aab4a458109abd3c1673f92\">我的影单分享</a>\n- <a target=\"_blank\" href=\"https://www.scarsu.com/escape_from_the_world/\">我与这世界的距离</a>一些胡言乱语。","date":"2020-09-03T08:49:13.352Z","updated":"2020-09-03T08:49:13.352Z","path":"cognition/index.html","comments":1,"layout":"page","_id":"ckir88jbh004wc8y6qmcyabnd","content":"<h4 id=\"认知书单\"><a href=\"#认知书单\" class=\"headerlink\" title=\"认知书单\"></a>认知书单</h4><ul>\n<li>井喷的信息让你误以为自己知道了很多，但其实这些即时易得的碎片信息，离真相还很远</li>\n<li>记忆和知识的连结，要依靠逻辑；碎片信息最大的缺点，就是燕过无痕，落叶无声，没有逻辑，不成体系</li>\n<li><a href=\"https://book.douban.com/subject/1062193/\" target=\"_blank\" rel=\"noopener\">《娱乐至死》</a>波兹曼</li>\n<li><a href=\"https://book.douban.com/subject/1062193/\" target=\"_blank\" rel=\"noopener\">《1984》</a>奥威尔</li>\n<li><a href=\"https://book.douban.com/subject/1062193/\" target=\"_blank\" rel=\"noopener\">《美丽新世界》</a>赫胥黎</li>\n<li>邓宁-克鲁格效应(<a href=\"http://homepages.se.edu/cvonbergen/files/2012/12/Unskilled-and-Unaware-of-It.pdf\" target=\"_blank\" rel=\"noopener\">论文</a>)</li>\n</ul>\n<p><img src=\"/images/dunning-kruger_effect_cn.jpg\" alt=\"邓宁-克鲁格效应\"></p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/1013208/\" target=\"_blank\" rel=\"noopener\">《如何阅读一本书》</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/e5d329105b9072e5d188fd9\" target=\"_blank\" rel=\"noopener\">《时间简史》</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/d4a322a05d0f04d4a01f0d6\" target=\"_blank\" rel=\"noopener\">《人类简史》</a></li>\n</ul>\n<h4 id=\"自律书单\"><a href=\"#自律书单\" class=\"headerlink\" title=\"自律书单\"></a>自律书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/self_control/\">《自控力》</a> (<a href=\"https://book.douban.com/subject/6828163/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a>)</li>\n<li><a href=\"https://book.douban.com/subject/26895993/\" target=\"_blank\" rel=\"noopener\">《刻意练习》</a>从心理学了解自控与失控-斯坦福大学最受欢迎心理学课程</li>\n<li><a href=\"https://book.douban.com/subject/10786473/\" target=\"_blank\" rel=\"noopener\">《4点起床》</a></li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/continuous_action/\">《刻意学习》 </a> (<a href=\"https://book.douban.com/subject/27071913/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a>)如何更高效的成长</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/26575679/\">《当我谈跑步时，我谈些什么》</a>村上春树25年跑步与人生历程，痛楚难以避免，而磨难可以选择。</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/34432670/\">《胡适忍不住的新努力》</a>胡适的人生哲学</li>\n<li><a target=\"_blank\" href=\"https://weread.qq.com/web/reader/7253294071cc8a5a72594ff\">《施瓦辛格健身全书》</a></li>\n<li><a href=\"https://book.douban.com/subject/20507212/\" target=\"_blank\" rel=\"noopener\">《习惯的力量》</a></li>\n</ul>\n<h4 id=\"心智成长书单\"><a href=\"#心智成长书单\" class=\"headerlink\" title=\"心智成长书单\"></a>心智成长书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/life_courage/\">《被讨厌的勇气》</a> (<a href=\"https://book.douban.com/subject/26369699/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a>)决定我们的不是过去的经历，而是我们自己赋予经历的意义 - 入门阿德勒心理学</li>\n<li><a href=\"https://book.douban.com/subject/30458408/\" target=\"_blank\" rel=\"noopener\">《逆商》</a>如何应对坏事件</li>\n<li><a href=\"https://book.douban.com/subject/27186106/\" target=\"_blank\" rel=\"noopener\">《心流》</a>全神贯注、投入忘我、感觉不到时间存在的状态</li>\n<li><a href=\"https://book.douban.com/subject/26989781/\" target=\"_blank\" rel=\"noopener\">《自卑与超越》</a>阿德勒心理学读本，生活的意义到底是什么？</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/1874488/\">《别做正常的傻瓜》</a>行为决策学入门,让你的每一个行为都得到最优解</li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/nonviolent_communication/\">《非暴力沟通》</a>有些话真的可以好好说</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/30475278/\">《人生的智慧：如何幸福度过一生》</a>世界级哲学大师叔本华晚年心血之作</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/35013437/\">《人性的枷锁》</a>毛姆以30年经验反思自我,生离死别，爱恨情仇，世间险恶。生活中的不幸，爱情中的挫折，工作中的折磨</li>\n</ul>\n<h4 id=\"搞钱书单\"><a href=\"#搞钱书单\" class=\"headerlink\" title=\"搞钱书单\"></a>搞钱书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/rich_dad/\">《富爸爸穷爸爸》</a> 为什么你很穷？改变对钱的认知，理财入门书</li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/poor_economics/\">《贫穷的本质：我们为什么摆脱不了贫穷》</a> 2019诺贝尔经济学奖得主作品</li>\n<li><a target=\"_blank\" href=\"https://weread.qq.com/web/reader/6c4324d059eee96c43a4b3e\">《国富论》</a> </li>\n<li><a target=\"_blank\" href=\"https://weread.qq.com/web/reader/ea232e205c3023ea2c96525\">《小狗钱钱》</a> </li>\n</ul>\n<h4 id=\"舒适生活书单\"><a href=\"#舒适生活书单\" class=\"headerlink\" title=\"舒适生活书单\"></a>舒适生活书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/danshari/\">《断舍离》</a> (<a href=\"https://book.douban.com/subject/24749465/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a>)透过整理物品了解自己，整理心中的混沌，让人生更舒适</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/25882638/\">《轻断食》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/30302866/\">《两个人到一个人》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/27001607/\">《积存时间的生活》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/27028717/\">《每天都是小春日和》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/26733854/\">《明天也是小春日和》</a></li>\n</ul>\n<!-- #### 文章推荐\n\n- <a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=5&sn=8b4b51e2c1a88f7fe369a4b756657672&chksm=88bc7865bfcbf17324e364a8ade43fd38556041908e3baa5e7268c6c4428696477a97cd0723a&token=842281904&lang=zh_CN#rd\">【为什么马云能成功而你不能】</a> \n- <a target=\"_blank\" href=\"https://medium.com/s/notes-on-changing-your-life/how-to-seem-like-you-always-have-your-sh-t-together-11114005114e\">【How to Seem Like You Always Have Your Sh*t Together】</a> \n\n\n#### 优质社区\n- <a target=\"_blank\" href=\"https://medium.com/\">Medium</a> - a place to read and write big ideas and important stories -->\n<h4 id=\"文学书单\"><a href=\"#文学书单\" class=\"headerlink\" title=\"文学书单\"></a>文学书单</h4><ul>\n<li><a href=\"https://book.douban.com/subject/4031698/\" target=\"_blank\" rel=\"noopener\">《读者》</a>梁文道，谈论书缘，读书的方法，对阅读的看法</li>\n<li><a href=\"https://book.douban.com/subject/33457122/\" target=\"_blank\" rel=\"noopener\">《人生海海》</a>麦家</li>\n</ul>\n<h4 id=\"不看也可以单\"><a href=\"#不看也可以单\" class=\"headerlink\" title=\"不看也可以单\"></a>不看也可以单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.notion.so/f1ba5d9c5aab4a458109abd3c1673f92\">我的影单分享</a></li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/escape_from_the_world/\">我与这世界的距离</a>一些胡言乱语。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"认知书单\"><a href=\"#认知书单\" class=\"headerlink\" title=\"认知书单\"></a>认知书单</h4><ul>\n<li>井喷的信息让你误以为自己知道了很多，但其实这些即时易得的碎片信息，离真相还很远</li>\n<li>记忆和知识的连结，要依靠逻辑；碎片信息最大的缺点，就是燕过无痕，落叶无声，没有逻辑，不成体系</li>\n<li><a href=\"https://book.douban.com/subject/1062193/\" target=\"_blank\" rel=\"noopener\">《娱乐至死》</a>波兹曼</li>\n<li><a href=\"https://book.douban.com/subject/1062193/\" target=\"_blank\" rel=\"noopener\">《1984》</a>奥威尔</li>\n<li><a href=\"https://book.douban.com/subject/1062193/\" target=\"_blank\" rel=\"noopener\">《美丽新世界》</a>赫胥黎</li>\n<li>邓宁-克鲁格效应(<a href=\"http://homepages.se.edu/cvonbergen/files/2012/12/Unskilled-and-Unaware-of-It.pdf\" target=\"_blank\" rel=\"noopener\">论文</a>)</li>\n</ul>\n<p><img src=\"/images/dunning-kruger_effect_cn.jpg\" alt=\"邓宁-克鲁格效应\"></p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/1013208/\" target=\"_blank\" rel=\"noopener\">《如何阅读一本书》</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/e5d329105b9072e5d188fd9\" target=\"_blank\" rel=\"noopener\">《时间简史》</a></li>\n<li><a href=\"https://weread.qq.com/web/reader/d4a322a05d0f04d4a01f0d6\" target=\"_blank\" rel=\"noopener\">《人类简史》</a></li>\n</ul>\n<h4 id=\"自律书单\"><a href=\"#自律书单\" class=\"headerlink\" title=\"自律书单\"></a>自律书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/self_control/\">《自控力》</a> (<a href=\"https://book.douban.com/subject/6828163/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a>)</li>\n<li><a href=\"https://book.douban.com/subject/26895993/\" target=\"_blank\" rel=\"noopener\">《刻意练习》</a>从心理学了解自控与失控-斯坦福大学最受欢迎心理学课程</li>\n<li><a href=\"https://book.douban.com/subject/10786473/\" target=\"_blank\" rel=\"noopener\">《4点起床》</a></li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/continuous_action/\">《刻意学习》 </a> (<a href=\"https://book.douban.com/subject/27071913/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a>)如何更高效的成长</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/26575679/\">《当我谈跑步时，我谈些什么》</a>村上春树25年跑步与人生历程，痛楚难以避免，而磨难可以选择。</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/34432670/\">《胡适忍不住的新努力》</a>胡适的人生哲学</li>\n<li><a target=\"_blank\" href=\"https://weread.qq.com/web/reader/7253294071cc8a5a72594ff\">《施瓦辛格健身全书》</a></li>\n<li><a href=\"https://book.douban.com/subject/20507212/\" target=\"_blank\" rel=\"noopener\">《习惯的力量》</a></li>\n</ul>\n<h4 id=\"心智成长书单\"><a href=\"#心智成长书单\" class=\"headerlink\" title=\"心智成长书单\"></a>心智成长书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/life_courage/\">《被讨厌的勇气》</a> (<a href=\"https://book.douban.com/subject/26369699/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a>)决定我们的不是过去的经历，而是我们自己赋予经历的意义 - 入门阿德勒心理学</li>\n<li><a href=\"https://book.douban.com/subject/30458408/\" target=\"_blank\" rel=\"noopener\">《逆商》</a>如何应对坏事件</li>\n<li><a href=\"https://book.douban.com/subject/27186106/\" target=\"_blank\" rel=\"noopener\">《心流》</a>全神贯注、投入忘我、感觉不到时间存在的状态</li>\n<li><a href=\"https://book.douban.com/subject/26989781/\" target=\"_blank\" rel=\"noopener\">《自卑与超越》</a>阿德勒心理学读本，生活的意义到底是什么？</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/1874488/\">《别做正常的傻瓜》</a>行为决策学入门,让你的每一个行为都得到最优解</li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/nonviolent_communication/\">《非暴力沟通》</a>有些话真的可以好好说</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/30475278/\">《人生的智慧：如何幸福度过一生》</a>世界级哲学大师叔本华晚年心血之作</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/35013437/\">《人性的枷锁》</a>毛姆以30年经验反思自我,生离死别，爱恨情仇，世间险恶。生活中的不幸，爱情中的挫折，工作中的折磨</li>\n</ul>\n<h4 id=\"搞钱书单\"><a href=\"#搞钱书单\" class=\"headerlink\" title=\"搞钱书单\"></a>搞钱书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/rich_dad/\">《富爸爸穷爸爸》</a> 为什么你很穷？改变对钱的认知，理财入门书</li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/poor_economics/\">《贫穷的本质：我们为什么摆脱不了贫穷》</a> 2019诺贝尔经济学奖得主作品</li>\n<li><a target=\"_blank\" href=\"https://weread.qq.com/web/reader/6c4324d059eee96c43a4b3e\">《国富论》</a> </li>\n<li><a target=\"_blank\" href=\"https://weread.qq.com/web/reader/ea232e205c3023ea2c96525\">《小狗钱钱》</a> </li>\n</ul>\n<h4 id=\"舒适生活书单\"><a href=\"#舒适生活书单\" class=\"headerlink\" title=\"舒适生活书单\"></a>舒适生活书单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/danshari/\">《断舍离》</a> (<a href=\"https://book.douban.com/subject/24749465/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a>)透过整理物品了解自己，整理心中的混沌，让人生更舒适</li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/25882638/\">《轻断食》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/30302866/\">《两个人到一个人》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/27001607/\">《积存时间的生活》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/27028717/\">《每天都是小春日和》</a></li>\n<li><a target=\"_blank\" href=\"https://book.douban.com/subject/26733854/\">《明天也是小春日和》</a></li>\n</ul>\n<!-- #### 文章推荐\n\n- <a target=\"_blank\" href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=5&sn=8b4b51e2c1a88f7fe369a4b756657672&chksm=88bc7865bfcbf17324e364a8ade43fd38556041908e3baa5e7268c6c4428696477a97cd0723a&token=842281904&lang=zh_CN#rd\">【为什么马云能成功而你不能】</a> \n- <a target=\"_blank\" href=\"https://medium.com/s/notes-on-changing-your-life/how-to-seem-like-you-always-have-your-sh-t-together-11114005114e\">【How to Seem Like You Always Have Your Sh*t Together】</a> \n\n\n#### 优质社区\n- <a target=\"_blank\" href=\"https://medium.com/\">Medium</a> - a place to read and write big ideas and important stories -->\n<h4 id=\"文学书单\"><a href=\"#文学书单\" class=\"headerlink\" title=\"文学书单\"></a>文学书单</h4><ul>\n<li><a href=\"https://book.douban.com/subject/4031698/\" target=\"_blank\" rel=\"noopener\">《读者》</a>梁文道，谈论书缘，读书的方法，对阅读的看法</li>\n<li><a href=\"https://book.douban.com/subject/33457122/\" target=\"_blank\" rel=\"noopener\">《人生海海》</a>麦家</li>\n</ul>\n<h4 id=\"不看也可以单\"><a href=\"#不看也可以单\" class=\"headerlink\" title=\"不看也可以单\"></a>不看也可以单</h4><ul>\n<li><a target=\"_blank\" href=\"https://www.notion.so/f1ba5d9c5aab4a458109abd3c1673f92\">我的影单分享</a></li>\n<li><a target=\"_blank\" href=\"https://www.scarsu.com/escape_from_the_world/\">我与这世界的距离</a>一些胡言乱语。</li>\n</ul>\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <style>\n      .card-list {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        flex-wrap: wrap;\n      }\n      .card-list .card {\n        display: flex;\n        flex-direction: row;\n        width: 48%;\n        min-height: 100px;\n        background: rgb(255 255 255);\n        transition: all 0.4s;\n        border-radius: 5px;\n        border:1px solid #ddd;\n        flex: 1 0 280px;\n        margin: 10px 10px;\n      }\n      .card-list .card:hover {\n        box-shadow: 8px 4px 20px 0px rgba(0, 0, 0, 0.15);\n        transform: translateY(-3px) scale(1.01);\n      }\n      .card-list .card img {\n        box-sizing: border-box;\n        width: 60px;\n        height: 60px;\n        border-radius: 50%;\n        border: 2px solid #fff;\n        box-shadow: 3px 2px 5px rgba(0, 0, 0, 0.08);\n        transition: all 0.4s;\n        margin: 20px 10px;\n        padding: 0;\n      }\n      .card-list .card div {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: center;\n        padding: 10px 10px;\n        color: rgb(41 30 30);\n        transition: all 0.4s;\n      }\n      .card-list .card .desc {\n        margin: 0;\n        opacity: 0.8;\n        font-size:.9em;\n      }\n      .card-list .card .name {\n        margin: 0;\n      }\n      body.dark-theme .card-list .card{\n        background-color:#292a2d;\n      }\n      body.dark-theme .card-list .card img{\n        background-color: #fff;\n      }\n      body.dark-theme .card-list .card .name{\n        color:#dddde8;\n      }\n      body.dark-theme .card-list .card .desc{\n        color:#dddde8;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"card-list\">\n\n      <a class=\"card\" href=\"http://www.taoweng.site/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://image.notbucai.com/2020/07/06/2b2ebb5ac7403b7ab9c5cb5203b3ed68.png\"\n        />\n        <div>\n          <p class=\"name\">前端桃园</p>\n          <p class=\"desc\">相信 W3C，遵从黑客文化，相信自己能改变世界</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://lxchuan12.gitee.io/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://avatar-static.segmentfault.com/221/196/2211965068-5cf3a535a13d9_huge256\"\n        />\n        <div>\n          <p class=\"name\">若川的博客</p>\n          <p class=\"desc\">撰写了学习源码整体架构系列8篇，公众号《若川视野》</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://www.notbucai.com/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://image.notbucai.com/logo.png\"\n        />\n        <div>\n          <p class=\"name\">不才的博客</p>\n          <p class=\"desc\">这是不才的博客，用于记录生活、学习笔记。专注WEB前端，全面发展，做一个有梦想又憨憨的咸鱼。</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://youyi.netlify.app/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://youyi.netlify.app/laugh.jpeg\"\n        />\n        <div>\n          <p class=\"name\">有义的简明博客</p>\n          <p class=\"desc\">前端 后端 Linux windows JavaScript typescript DBA</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://hungryturbo.com\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/avatar.jpeg\"\n        />\n        <div>\n          <p class=\"name\">童欧巴博客</p>\n          <p class=\"desc\">公众号《前端食堂》，吃好每一顿。</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://alili.tech\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://alili.tech/images/logo.png\"\n        />\n        <div>\n          <p class=\"name\">Alili丶前端大爆炸</p>\n          <p class=\"desc\">一个前端技术博客,持续学习,持续写博客. 关于此生理想、近期计划、今日功课。</p>\n        </div>\n      </a>\n      \n      <a class=\"card\" href=\"https://nofwl.com\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://static.nofwl.com/lencx.png\"\n        />\n        <div>\n          <p class=\"name\">lencx的博客</p>\n          <p class=\"desc\">{折腾 ⇌ 迷茫 ⇌ 思考]ing，在路上...</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://wangxitong.github.io/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://wangxitong.github.io/img/avatar.jpeg\"\n        />\n        <div>\n          <p class=\"name\">Daniel Wang</p>\n          <p class=\"desc\">溺死在前端的浑水里。。。</p>\n        </div>\n      </a>\n      \n      <a class=\"card\" href=\"https://crazymryan.github.io/blog\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://crazymryan.github.io/blog/favicon.ico\"\n        />\n        <div>\n          <p class=\"name\">悲伤日记</p>\n          <p class=\"desc\">一个不太懂前端的前端猿人</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"http://jsding96.cn/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://cdn.jsdelivr.net/gh/BestDingSheng/ImgHosting/Deson-PIC/20210208223244.jpeg\"\n        />\n        <div>\n          <p class=\"name\">Deson blog</p>\n          <p class=\"desc\">2021 深度思考⇌脱离舒适区</p>\n        </div>\n      </a>\n\n\n      \n      <!-- <a class=\"card\" href=\"\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"\"\n        />\n        <div>\n          <p class=\"name\"></p>\n          <p class=\"desc\"></p>\n        </div>\n      </a> -->\n    </div>\n\n    <div>\n      <h2>添加友链</h2>\n      <p>用任何方式联系上我都可以~</p>\n      <p>我的友链信息👇</p>\n      <pre style=\"overflow-x: auto;\">\n博客名称：ScarSu的博客\n博客网址：https://www.scarsu.com\n博客头像：https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201012144739.jpg\n博客介绍：一个程序媛关于【自律/读书认知/Web前端技术】的一些个人分享\n      </pre>\n    </div>\n  </body>\n</html>\n","source":"friends/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <style>\n      .card-list {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        flex-wrap: wrap;\n      }\n      .card-list .card {\n        display: flex;\n        flex-direction: row;\n        width: 48%;\n        min-height: 100px;\n        background: rgb(255 255 255);\n        transition: all 0.4s;\n        border-radius: 5px;\n        border:1px solid #ddd;\n        flex: 1 0 280px;\n        margin: 10px 10px;\n      }\n      .card-list .card:hover {\n        box-shadow: 8px 4px 20px 0px rgba(0, 0, 0, 0.15);\n        transform: translateY(-3px) scale(1.01);\n      }\n      .card-list .card img {\n        box-sizing: border-box;\n        width: 60px;\n        height: 60px;\n        border-radius: 50%;\n        border: 2px solid #fff;\n        box-shadow: 3px 2px 5px rgba(0, 0, 0, 0.08);\n        transition: all 0.4s;\n        margin: 20px 10px;\n        padding: 0;\n      }\n      .card-list .card div {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: center;\n        padding: 10px 10px;\n        color: rgb(41 30 30);\n        transition: all 0.4s;\n      }\n      .card-list .card .desc {\n        margin: 0;\n        opacity: 0.8;\n        font-size:.9em;\n      }\n      .card-list .card .name {\n        margin: 0;\n      }\n      body.dark-theme .card-list .card{\n        background-color:#292a2d;\n      }\n      body.dark-theme .card-list .card img{\n        background-color: #fff;\n      }\n      body.dark-theme .card-list .card .name{\n        color:#dddde8;\n      }\n      body.dark-theme .card-list .card .desc{\n        color:#dddde8;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"card-list\">\n\n      <a class=\"card\" href=\"http://www.taoweng.site/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://image.notbucai.com/2020/07/06/2b2ebb5ac7403b7ab9c5cb5203b3ed68.png\"\n        />\n        <div>\n          <p class=\"name\">前端桃园</p>\n          <p class=\"desc\">相信 W3C，遵从黑客文化，相信自己能改变世界</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://lxchuan12.gitee.io/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://avatar-static.segmentfault.com/221/196/2211965068-5cf3a535a13d9_huge256\"\n        />\n        <div>\n          <p class=\"name\">若川的博客</p>\n          <p class=\"desc\">撰写了学习源码整体架构系列8篇，公众号《若川视野》</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://www.notbucai.com/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://image.notbucai.com/logo.png\"\n        />\n        <div>\n          <p class=\"name\">不才的博客</p>\n          <p class=\"desc\">这是不才的博客，用于记录生活、学习笔记。专注WEB前端，全面发展，做一个有梦想又憨憨的咸鱼。</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://youyi.netlify.app/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://youyi.netlify.app/laugh.jpeg\"\n        />\n        <div>\n          <p class=\"name\">有义的简明博客</p>\n          <p class=\"desc\">前端 后端 Linux windows JavaScript typescript DBA</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://hungryturbo.com\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/avatar.jpeg\"\n        />\n        <div>\n          <p class=\"name\">童欧巴博客</p>\n          <p class=\"desc\">公众号《前端食堂》，吃好每一顿。</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://alili.tech\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://alili.tech/images/logo.png\"\n        />\n        <div>\n          <p class=\"name\">Alili丶前端大爆炸</p>\n          <p class=\"desc\">一个前端技术博客,持续学习,持续写博客. 关于此生理想、近期计划、今日功课。</p>\n        </div>\n      </a>\n      \n      <a class=\"card\" href=\"https://nofwl.com\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://static.nofwl.com/lencx.png\"\n        />\n        <div>\n          <p class=\"name\">lencx的博客</p>\n          <p class=\"desc\">{折腾 ⇌ 迷茫 ⇌ 思考]ing，在路上...</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://wangxitong.github.io/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://wangxitong.github.io/img/avatar.jpeg\"\n        />\n        <div>\n          <p class=\"name\">Daniel Wang</p>\n          <p class=\"desc\">溺死在前端的浑水里。。。</p>\n        </div>\n      </a>\n      \n      <a class=\"card\" href=\"https://crazymryan.github.io/blog\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://crazymryan.github.io/blog/favicon.ico\"\n        />\n        <div>\n          <p class=\"name\">悲伤日记</p>\n          <p class=\"desc\">一个不太懂前端的前端猿人</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"http://jsding96.cn/\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"https://cdn.jsdelivr.net/gh/BestDingSheng/ImgHosting/Deson-PIC/20210208223244.jpeg\"\n        />\n        <div>\n          <p class=\"name\">Deson blog</p>\n          <p class=\"desc\">2021 深度思考⇌脱离舒适区</p>\n        </div>\n      </a>\n\n\n      \n      <!-- <a class=\"card\" href=\"\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"\"\n        />\n        <div>\n          <p class=\"name\"></p>\n          <p class=\"desc\"></p>\n        </div>\n      </a> -->\n    </div>\n\n    <div>\n      <h2>添加友链</h2>\n      <p>用任何方式联系上我都可以~</p>\n      <p>我的友链信息👇</p>\n      <pre style=\"overflow-x: auto;\">\n博客名称：ScarSu的博客\n博客网址：https://www.scarsu.com\n博客头像：https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201012144739.jpg\n博客介绍：一个程序媛关于【自律/读书认知/Web前端技术】的一些个人分享\n      </pre>\n    </div>\n  </body>\n</html>\n","date":"2021-02-09T00:22:13.565Z","updated":"2021-02-09T00:22:13.565Z","path":"friends/index.html","_id":"ckir88jbj004yc8y6eyxjx3ny","title":"","comments":1,"layout":"page","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n      .card-list {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        flex-wrap: wrap;\n      }\n      .card-list .card {\n        display: flex;\n        flex-direction: row;\n        width: 48%;\n        min-height: 100px;\n        background: rgb(255 255 255);\n        transition: all 0.4s;\n        border-radius: 5px;\n        border:1px solid #ddd;\n        flex: 1 0 280px;\n        margin: 10px 10px;\n      }\n      .card-list .card:hover {\n        box-shadow: 8px 4px 20px 0px rgba(0, 0, 0, 0.15);\n        transform: translateY(-3px) scale(1.01);\n      }\n      .card-list .card img {\n        box-sizing: border-box;\n        width: 60px;\n        height: 60px;\n        border-radius: 50%;\n        border: 2px solid #fff;\n        box-shadow: 3px 2px 5px rgba(0, 0, 0, 0.08);\n        transition: all 0.4s;\n        margin: 20px 10px;\n        padding: 0;\n      }\n      .card-list .card div {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: center;\n        padding: 10px 10px;\n        color: rgb(41 30 30);\n        transition: all 0.4s;\n      }\n      .card-list .card .desc {\n        margin: 0;\n        opacity: 0.8;\n        font-size:.9em;\n      }\n      .card-list .card .name {\n        margin: 0;\n      }\n      body.dark-theme .card-list .card{\n        background-color:#292a2d;\n      }\n      body.dark-theme .card-list .card img{\n        background-color: #fff;\n      }\n      body.dark-theme .card-list .card .name{\n        color:#dddde8;\n      }\n      body.dark-theme .card-list .card .desc{\n        color:#dddde8;\n      }\n    </style>\n  <link rel=\"alternate\" href=\"atom.xml\" title=\"ScarSu\" type=\"application/atom+xml\">\n</head>\n  <body>\n    <div class=\"card-list\">\n\n      <a class=\"card\" href=\"http://www.taoweng.site/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://image.notbucai.com/2020/07/06/2b2ebb5ac7403b7ab9c5cb5203b3ed68.png\">\n        <div>\n          <p class=\"name\">前端桃园</p>\n          <p class=\"desc\">相信 W3C，遵从黑客文化，相信自己能改变世界</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://lxchuan12.gitee.io/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://avatar-static.segmentfault.com/221/196/2211965068-5cf3a535a13d9_huge256\">\n        <div>\n          <p class=\"name\">若川的博客</p>\n          <p class=\"desc\">撰写了学习源码整体架构系列8篇，公众号《若川视野》</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://www.notbucai.com/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://image.notbucai.com/logo.png\">\n        <div>\n          <p class=\"name\">不才的博客</p>\n          <p class=\"desc\">这是不才的博客，用于记录生活、学习笔记。专注WEB前端，全面发展，做一个有梦想又憨憨的咸鱼。</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://youyi.netlify.app/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://youyi.netlify.app/laugh.jpeg\">\n        <div>\n          <p class=\"name\">有义的简明博客</p>\n          <p class=\"desc\">前端 后端 Linux windows JavaScript typescript DBA</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://hungryturbo.com\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/avatar.jpeg\">\n        <div>\n          <p class=\"name\">童欧巴博客</p>\n          <p class=\"desc\">公众号《前端食堂》，吃好每一顿。</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://alili.tech\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://alili.tech/images/logo.png\">\n        <div>\n          <p class=\"name\">Alili丶前端大爆炸</p>\n          <p class=\"desc\">一个前端技术博客,持续学习,持续写博客. 关于此生理想、近期计划、今日功课。</p>\n        </div>\n      </a>\n      \n      <a class=\"card\" href=\"https://nofwl.com\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://static.nofwl.com/lencx.png\">\n        <div>\n          <p class=\"name\">lencx的博客</p>\n          <p class=\"desc\">{折腾 ⇌ 迷茫 ⇌ 思考]ing，在路上...</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://wangxitong.github.io/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://wangxitong.github.io/img/avatar.jpeg\">\n        <div>\n          <p class=\"name\">Daniel Wang</p>\n          <p class=\"desc\">溺死在前端的浑水里。。。</p>\n        </div>\n      </a>\n      \n      <a class=\"card\" href=\"https://crazymryan.github.io/blog\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://crazymryan.github.io/blog/favicon.ico\">\n        <div>\n          <p class=\"name\">悲伤日记</p>\n          <p class=\"desc\">一个不太懂前端的前端猿人</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"http://jsding96.cn/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://cdn.jsdelivr.net/gh/BestDingSheng/ImgHosting/Deson-PIC/20210208223244.jpeg\">\n        <div>\n          <p class=\"name\">Deson blog</p>\n          <p class=\"desc\">2021 深度思考⇌脱离舒适区</p>\n        </div>\n      </a>\n\n\n      \n      <!-- <a class=\"card\" href=\"\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"\"\n        />\n        <div>\n          <p class=\"name\"></p>\n          <p class=\"desc\"></p>\n        </div>\n      </a> -->\n    </div>\n\n    <div>\n      <h2>添加友链</h2>\n      <p>用任何方式联系上我都可以~</p>\n      <p>我的友链信息👇</p>\n      <pre style=\"overflow-x: auto;\">\n博客名称：ScarSu的博客\n博客网址：https://www.scarsu.com\n博客头像：https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201012144739.jpg\n博客介绍：一个程序媛关于【自律/读书认知/Web前端技术】的一些个人分享\n      </pre>\n    </div>\n  </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n      .card-list {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        flex-wrap: wrap;\n      }\n      .card-list .card {\n        display: flex;\n        flex-direction: row;\n        width: 48%;\n        min-height: 100px;\n        background: rgb(255 255 255);\n        transition: all 0.4s;\n        border-radius: 5px;\n        border:1px solid #ddd;\n        flex: 1 0 280px;\n        margin: 10px 10px;\n      }\n      .card-list .card:hover {\n        box-shadow: 8px 4px 20px 0px rgba(0, 0, 0, 0.15);\n        transform: translateY(-3px) scale(1.01);\n      }\n      .card-list .card img {\n        box-sizing: border-box;\n        width: 60px;\n        height: 60px;\n        border-radius: 50%;\n        border: 2px solid #fff;\n        box-shadow: 3px 2px 5px rgba(0, 0, 0, 0.08);\n        transition: all 0.4s;\n        margin: 20px 10px;\n        padding: 0;\n      }\n      .card-list .card div {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: center;\n        padding: 10px 10px;\n        color: rgb(41 30 30);\n        transition: all 0.4s;\n      }\n      .card-list .card .desc {\n        margin: 0;\n        opacity: 0.8;\n        font-size:.9em;\n      }\n      .card-list .card .name {\n        margin: 0;\n      }\n      body.dark-theme .card-list .card{\n        background-color:#292a2d;\n      }\n      body.dark-theme .card-list .card img{\n        background-color: #fff;\n      }\n      body.dark-theme .card-list .card .name{\n        color:#dddde8;\n      }\n      body.dark-theme .card-list .card .desc{\n        color:#dddde8;\n      }\n    </style>\n  <link rel=\"alternate\" href=\"atom.xml\" title=\"ScarSu\" type=\"application/atom+xml\">\n</head>\n  <body>\n    <div class=\"card-list\">\n\n      <a class=\"card\" href=\"http://www.taoweng.site/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://image.notbucai.com/2020/07/06/2b2ebb5ac7403b7ab9c5cb5203b3ed68.png\">\n        <div>\n          <p class=\"name\">前端桃园</p>\n          <p class=\"desc\">相信 W3C，遵从黑客文化，相信自己能改变世界</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://lxchuan12.gitee.io/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://avatar-static.segmentfault.com/221/196/2211965068-5cf3a535a13d9_huge256\">\n        <div>\n          <p class=\"name\">若川的博客</p>\n          <p class=\"desc\">撰写了学习源码整体架构系列8篇，公众号《若川视野》</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://www.notbucai.com/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://image.notbucai.com/logo.png\">\n        <div>\n          <p class=\"name\">不才的博客</p>\n          <p class=\"desc\">这是不才的博客，用于记录生活、学习笔记。专注WEB前端，全面发展，做一个有梦想又憨憨的咸鱼。</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://youyi.netlify.app/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://youyi.netlify.app/laugh.jpeg\">\n        <div>\n          <p class=\"name\">有义的简明博客</p>\n          <p class=\"desc\">前端 后端 Linux windows JavaScript typescript DBA</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://hungryturbo.com\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://cdn.jsdelivr.net/gh/Geekhyt/blogimgbed/blog/avatar.jpeg\">\n        <div>\n          <p class=\"name\">童欧巴博客</p>\n          <p class=\"desc\">公众号《前端食堂》，吃好每一顿。</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://alili.tech\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://alili.tech/images/logo.png\">\n        <div>\n          <p class=\"name\">Alili丶前端大爆炸</p>\n          <p class=\"desc\">一个前端技术博客,持续学习,持续写博客. 关于此生理想、近期计划、今日功课。</p>\n        </div>\n      </a>\n      \n      <a class=\"card\" href=\"https://nofwl.com\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://static.nofwl.com/lencx.png\">\n        <div>\n          <p class=\"name\">lencx的博客</p>\n          <p class=\"desc\">{折腾 ⇌ 迷茫 ⇌ 思考]ing，在路上...</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"https://wangxitong.github.io/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://wangxitong.github.io/img/avatar.jpeg\">\n        <div>\n          <p class=\"name\">Daniel Wang</p>\n          <p class=\"desc\">溺死在前端的浑水里。。。</p>\n        </div>\n      </a>\n      \n      <a class=\"card\" href=\"https://crazymryan.github.io/blog\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://crazymryan.github.io/blog/favicon.ico\">\n        <div>\n          <p class=\"name\">悲伤日记</p>\n          <p class=\"desc\">一个不太懂前端的前端猿人</p>\n        </div>\n      </a>\n\n      <a class=\"card\" href=\"http://jsding96.cn/\" target=\"_blank\" rel=\"noopener\">\n        <img class=\"avatar nofancybox\" src=\"https://cdn.jsdelivr.net/gh/BestDingSheng/ImgHosting/Deson-PIC/20210208223244.jpeg\">\n        <div>\n          <p class=\"name\">Deson blog</p>\n          <p class=\"desc\">2021 深度思考⇌脱离舒适区</p>\n        </div>\n      </a>\n\n\n      \n      <!-- <a class=\"card\" href=\"\">\n        <img\n          class=\"avatar nofancybox\"\n          src=\"\"\n        />\n        <div>\n          <p class=\"name\"></p>\n          <p class=\"desc\"></p>\n        </div>\n      </a> -->\n    </div>\n\n    <div>\n      <h2>添加友链</h2>\n      <p>用任何方式联系上我都可以~</p>\n      <p>我的友链信息👇</p>\n      <pre style=\"overflow-x: auto;\">\n博客名称：ScarSu的博客\n博客网址：https://www.scarsu.com\n博客头像：https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201012144739.jpg\n博客介绍：一个程序媛关于【自律/读书认知/Web前端技术】的一些个人分享\n      </pre>\n    </div>\n  </body>\n</html>\n"},{"title":"读书笔记","_content":"#### 读书笔记temp","source":"gitbook/index.md","raw":"---\ntitle: 读书笔记\n---\n#### 读书笔记temp","date":"2020-04-08T00:43:01.231Z","updated":"2020-04-08T00:43:01.231Z","path":"gitbook/index.html","comments":1,"layout":"page","_id":"ckir88jbl0052c8y6opchfxgu","content":"<h4 id=\"读书笔记temp\"><a href=\"#读书笔记temp\" class=\"headerlink\" title=\"读书笔记temp\"></a>读书笔记temp</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"读书笔记temp\"><a href=\"#读书笔记temp\" class=\"headerlink\" title=\"读书笔记temp\"></a>读书笔记temp</h4>"},{"title":"自律打卡","_content":"#### 为什么要这样自律？\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=1&sn=a6478c7f40c8335a208025f02b382a0f&chksm=88bc7865bfcbf173217e7a1d0f9099c50208b992289fa8b355d91d3e0cdbf7d8184b8d011821&token=842281904&lang=zh_CN#rd\">【肥宅的自我救赎之路】</a> \n\n#### 怎样自律的？\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=2&sn=2c708569a52da883c86294496ba456da&chksm=88bc7865bfcbf1738ee9bdeb0fe820b28781c29c576b8dc395874b9f56e659bdf09e192ce384&token=842281904&lang=zh_CN#rd\">【自律计划】</a>\n\n#### 作息表？\n<img src=\"/images/schedule v3.0.png\" style=\"max-width:80%;box-shadow: 2px 2px 15px 1px #ada4a4\"/>\n\n#### 在哪监控我每天自律了没有？\n<a href=\"https://note.youdao.com/share/?id=85f08a4786675afec45399748599c7a9&type=note\">【打卡记录】（日更）</a>\n\n\n\n#### 打卡记录 / 每日心得\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=4&sn=6ff2baeb5d257721013c28ba3d65b4cb&chksm=88bc7865bfcbf173055919b9b75eb32fbf8fcfd13690204d3a6a894e2034d13994aaf1209ac2&token=842281904&lang=zh_CN#rd\">【自律打卡】Day1</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=2&sn=92317b888261e19ad13975df565f9f9d&chksm=88bc7876bfcbf16045c6f5662be997cb4ae2cb0f516f98f0dcd71c91531850df0517d2f16ef6&token=842281904&lang=zh_CN#rd\">【自律打卡】Day2</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=3&sn=32299d12d1796112ec872c70bcde8eb7&chksm=88bc7876bfcbf1601f5797c2d4c1fe4e5e012fe95fb7c81e3ea46d96324f136bd08d75ed8e41&token=842281904&lang=zh_CN#rd\">【自律打卡】Day3</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=4&sn=159967195260f95d62ad4f34045aec33&chksm=88bc7876bfcbf160c1c947ea3cd540cac694526578de827c4d21e94a9bd84b0c7667b7b9bff4&token=842281904&lang=zh_CN#rd\">【自律打卡】Day14</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=5&sn=e33736043334c2846b4bdea2ac06f03a&chksm=88bc7876bfcbf160a3b85f4908b88f25c4c52f5ab97b43e4898849f43365b97f7611ab7e7d54&token=842281904&lang=zh_CN#rd\">【自律打卡】Day15</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=4&sn=19408792790dd0a8ee3640e9ad4c9bb7&chksm=88bc7807bfcbf111f3ed8ead852dda5cf3d54bb79980686b8418cf0dd01a0a524b9b7ec8e940&token=842281904&lang=zh_CN#rd\">【自律打卡】Day16</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=3&sn=c79219eee494e265ec6d5b9d767716cd&chksm=88bc7807bfcbf1112bc209fe195242a193438eac034c4e349feaea2d8bc335c8ed9f9d647905&token=842281904&lang=zh_CN#rd\">【自律打卡】Day17</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=2&sn=055ebf9c483569f7cdba0d1484f84e98&chksm=88bc7807bfcbf1116ed86773f3c16cb00ba10a6cb554066b1e792aa856a2fa4251923459adc4&token=842281904&lang=zh_CN#rd\">【自律打卡】Day18</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=1&sn=4203792d580236028b105e9052dcce90&chksm=88bc7876bfcbf1600dc947abc683099b226e77e39b2d00dac86e422d282b6071b79638673c31&token=842281904&lang=zh_CN#rd\">【自律打卡】Day19</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=1&sn=d4fc566d7b5dcbbd5e92100895913c06&chksm=88bc7807bfcbf111feea0fdfc188f7fb0e397d050266f1bf698369de571c6eb11e092bbf0d31&token=842281904&lang=zh_CN#rd\">【自律打卡】Day20</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283489&idx=1&sn=8521881d61997bc922233d189b465c3f&chksm=88bc782bbfcbf13d2d409ea3b6f1eb9354530ae1e2594784ca0ba4cb5f2c41d3ff6056ae55b8&token=842281904&lang=zh_CN#rd\">【自律打卡】Day21</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283503&idx=1&sn=db2e1846a903ba77cc6d229fec3abfd8&chksm=88bc7825bfcbf133ea86c0af29c9eeddf0a50dc338179dfb1b6dafc51298183fa212dbff5cc0&token=842281904&lang=zh_CN#rd\">【自律打卡】Day22</a>\n\n\n<small>计划：写一个脚本自动把文章链接加上来，自己转真累</small>","source":"self_regulation/index.md","raw":"---\ntitle: 自律打卡\n---\n#### 为什么要这样自律？\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=1&sn=a6478c7f40c8335a208025f02b382a0f&chksm=88bc7865bfcbf173217e7a1d0f9099c50208b992289fa8b355d91d3e0cdbf7d8184b8d011821&token=842281904&lang=zh_CN#rd\">【肥宅的自我救赎之路】</a> \n\n#### 怎样自律的？\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=2&sn=2c708569a52da883c86294496ba456da&chksm=88bc7865bfcbf1738ee9bdeb0fe820b28781c29c576b8dc395874b9f56e659bdf09e192ce384&token=842281904&lang=zh_CN#rd\">【自律计划】</a>\n\n#### 作息表？\n<img src=\"/images/schedule v3.0.png\" style=\"max-width:80%;box-shadow: 2px 2px 15px 1px #ada4a4\"/>\n\n#### 在哪监控我每天自律了没有？\n<a href=\"https://note.youdao.com/share/?id=85f08a4786675afec45399748599c7a9&type=note\">【打卡记录】（日更）</a>\n\n\n\n#### 打卡记录 / 每日心得\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=4&sn=6ff2baeb5d257721013c28ba3d65b4cb&chksm=88bc7865bfcbf173055919b9b75eb32fbf8fcfd13690204d3a6a894e2034d13994aaf1209ac2&token=842281904&lang=zh_CN#rd\">【自律打卡】Day1</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=2&sn=92317b888261e19ad13975df565f9f9d&chksm=88bc7876bfcbf16045c6f5662be997cb4ae2cb0f516f98f0dcd71c91531850df0517d2f16ef6&token=842281904&lang=zh_CN#rd\">【自律打卡】Day2</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=3&sn=32299d12d1796112ec872c70bcde8eb7&chksm=88bc7876bfcbf1601f5797c2d4c1fe4e5e012fe95fb7c81e3ea46d96324f136bd08d75ed8e41&token=842281904&lang=zh_CN#rd\">【自律打卡】Day3</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=4&sn=159967195260f95d62ad4f34045aec33&chksm=88bc7876bfcbf160c1c947ea3cd540cac694526578de827c4d21e94a9bd84b0c7667b7b9bff4&token=842281904&lang=zh_CN#rd\">【自律打卡】Day14</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=5&sn=e33736043334c2846b4bdea2ac06f03a&chksm=88bc7876bfcbf160a3b85f4908b88f25c4c52f5ab97b43e4898849f43365b97f7611ab7e7d54&token=842281904&lang=zh_CN#rd\">【自律打卡】Day15</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=4&sn=19408792790dd0a8ee3640e9ad4c9bb7&chksm=88bc7807bfcbf111f3ed8ead852dda5cf3d54bb79980686b8418cf0dd01a0a524b9b7ec8e940&token=842281904&lang=zh_CN#rd\">【自律打卡】Day16</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=3&sn=c79219eee494e265ec6d5b9d767716cd&chksm=88bc7807bfcbf1112bc209fe195242a193438eac034c4e349feaea2d8bc335c8ed9f9d647905&token=842281904&lang=zh_CN#rd\">【自律打卡】Day17</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=2&sn=055ebf9c483569f7cdba0d1484f84e98&chksm=88bc7807bfcbf1116ed86773f3c16cb00ba10a6cb554066b1e792aa856a2fa4251923459adc4&token=842281904&lang=zh_CN#rd\">【自律打卡】Day18</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=1&sn=4203792d580236028b105e9052dcce90&chksm=88bc7876bfcbf1600dc947abc683099b226e77e39b2d00dac86e422d282b6071b79638673c31&token=842281904&lang=zh_CN#rd\">【自律打卡】Day19</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=1&sn=d4fc566d7b5dcbbd5e92100895913c06&chksm=88bc7807bfcbf111feea0fdfc188f7fb0e397d050266f1bf698369de571c6eb11e092bbf0d31&token=842281904&lang=zh_CN#rd\">【自律打卡】Day20</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283489&idx=1&sn=8521881d61997bc922233d189b465c3f&chksm=88bc782bbfcbf13d2d409ea3b6f1eb9354530ae1e2594784ca0ba4cb5f2c41d3ff6056ae55b8&token=842281904&lang=zh_CN#rd\">【自律打卡】Day21</a>\n\n<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283503&idx=1&sn=db2e1846a903ba77cc6d229fec3abfd8&chksm=88bc7825bfcbf133ea86c0af29c9eeddf0a50dc338179dfb1b6dafc51298183fa212dbff5cc0&token=842281904&lang=zh_CN#rd\">【自律打卡】Day22</a>\n\n\n<small>计划：写一个脚本自动把文章链接加上来，自己转真累</small>","date":"2020-04-08T00:43:01.543Z","updated":"2020-04-08T00:43:01.543Z","path":"self_regulation/index.html","comments":1,"layout":"page","_id":"ckir88jbo0054c8y6taovze14","content":"<h4 id=\"为什么要这样自律？\"><a href=\"#为什么要这样自律？\" class=\"headerlink\" title=\"为什么要这样自律？\"></a>为什么要这样自律？</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=1&sn=a6478c7f40c8335a208025f02b382a0f&chksm=88bc7865bfcbf173217e7a1d0f9099c50208b992289fa8b355d91d3e0cdbf7d8184b8d011821&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【肥宅的自我救赎之路】</a> </p>\n<h4 id=\"怎样自律的？\"><a href=\"#怎样自律的？\" class=\"headerlink\" title=\"怎样自律的？\"></a>怎样自律的？</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=2&sn=2c708569a52da883c86294496ba456da&chksm=88bc7865bfcbf1738ee9bdeb0fe820b28781c29c576b8dc395874b9f56e659bdf09e192ce384&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律计划】</a></p>\n<h4 id=\"作息表？\"><a href=\"#作息表？\" class=\"headerlink\" title=\"作息表？\"></a>作息表？</h4><p><img src=\"/images/schedule v3.0.png\" style=\"max-width:80%;box-shadow: 2px 2px 15px 1px #ada4a4\"></p>\n<h4 id=\"在哪监控我每天自律了没有？\"><a href=\"#在哪监控我每天自律了没有？\" class=\"headerlink\" title=\"在哪监控我每天自律了没有？\"></a>在哪监控我每天自律了没有？</h4><p><a href=\"https://note.youdao.com/share/?id=85f08a4786675afec45399748599c7a9&type=note\" target=\"_blank\" rel=\"noopener\">【打卡记录】（日更）</a></p>\n<h4 id=\"打卡记录-每日心得\"><a href=\"#打卡记录-每日心得\" class=\"headerlink\" title=\"打卡记录 / 每日心得\"></a>打卡记录 / 每日心得</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=4&sn=6ff2baeb5d257721013c28ba3d65b4cb&chksm=88bc7865bfcbf173055919b9b75eb32fbf8fcfd13690204d3a6a894e2034d13994aaf1209ac2&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day1</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=2&sn=92317b888261e19ad13975df565f9f9d&chksm=88bc7876bfcbf16045c6f5662be997cb4ae2cb0f516f98f0dcd71c91531850df0517d2f16ef6&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day2</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=3&sn=32299d12d1796112ec872c70bcde8eb7&chksm=88bc7876bfcbf1601f5797c2d4c1fe4e5e012fe95fb7c81e3ea46d96324f136bd08d75ed8e41&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day3</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=4&sn=159967195260f95d62ad4f34045aec33&chksm=88bc7876bfcbf160c1c947ea3cd540cac694526578de827c4d21e94a9bd84b0c7667b7b9bff4&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day14</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=5&sn=e33736043334c2846b4bdea2ac06f03a&chksm=88bc7876bfcbf160a3b85f4908b88f25c4c52f5ab97b43e4898849f43365b97f7611ab7e7d54&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day15</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=4&sn=19408792790dd0a8ee3640e9ad4c9bb7&chksm=88bc7807bfcbf111f3ed8ead852dda5cf3d54bb79980686b8418cf0dd01a0a524b9b7ec8e940&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day16</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=3&sn=c79219eee494e265ec6d5b9d767716cd&chksm=88bc7807bfcbf1112bc209fe195242a193438eac034c4e349feaea2d8bc335c8ed9f9d647905&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day17</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=2&sn=055ebf9c483569f7cdba0d1484f84e98&chksm=88bc7807bfcbf1116ed86773f3c16cb00ba10a6cb554066b1e792aa856a2fa4251923459adc4&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day18</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=1&sn=4203792d580236028b105e9052dcce90&chksm=88bc7876bfcbf1600dc947abc683099b226e77e39b2d00dac86e422d282b6071b79638673c31&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day19</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=1&sn=d4fc566d7b5dcbbd5e92100895913c06&chksm=88bc7807bfcbf111feea0fdfc188f7fb0e397d050266f1bf698369de571c6eb11e092bbf0d31&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day20</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283489&idx=1&sn=8521881d61997bc922233d189b465c3f&chksm=88bc782bbfcbf13d2d409ea3b6f1eb9354530ae1e2594784ca0ba4cb5f2c41d3ff6056ae55b8&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day21</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283503&idx=1&sn=db2e1846a903ba77cc6d229fec3abfd8&chksm=88bc7825bfcbf133ea86c0af29c9eeddf0a50dc338179dfb1b6dafc51298183fa212dbff5cc0&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day22</a></p>\n<p><small>计划：写一个脚本自动把文章链接加上来，自己转真累</small></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"为什么要这样自律？\"><a href=\"#为什么要这样自律？\" class=\"headerlink\" title=\"为什么要这样自律？\"></a>为什么要这样自律？</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=1&sn=a6478c7f40c8335a208025f02b382a0f&chksm=88bc7865bfcbf173217e7a1d0f9099c50208b992289fa8b355d91d3e0cdbf7d8184b8d011821&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【肥宅的自我救赎之路】</a> </p>\n<h4 id=\"怎样自律的？\"><a href=\"#怎样自律的？\" class=\"headerlink\" title=\"怎样自律的？\"></a>怎样自律的？</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=2&sn=2c708569a52da883c86294496ba456da&chksm=88bc7865bfcbf1738ee9bdeb0fe820b28781c29c576b8dc395874b9f56e659bdf09e192ce384&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律计划】</a></p>\n<h4 id=\"作息表？\"><a href=\"#作息表？\" class=\"headerlink\" title=\"作息表？\"></a>作息表？</h4><p><img src=\"/images/schedule v3.0.png\" style=\"max-width:80%;box-shadow: 2px 2px 15px 1px #ada4a4\"></p>\n<h4 id=\"在哪监控我每天自律了没有？\"><a href=\"#在哪监控我每天自律了没有？\" class=\"headerlink\" title=\"在哪监控我每天自律了没有？\"></a>在哪监控我每天自律了没有？</h4><p><a href=\"https://note.youdao.com/share/?id=85f08a4786675afec45399748599c7a9&type=note\" target=\"_blank\" rel=\"noopener\">【打卡记录】（日更）</a></p>\n<h4 id=\"打卡记录-每日心得\"><a href=\"#打卡记录-每日心得\" class=\"headerlink\" title=\"打卡记录 / 每日心得\"></a>打卡记录 / 每日心得</h4><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283439&idx=4&sn=6ff2baeb5d257721013c28ba3d65b4cb&chksm=88bc7865bfcbf173055919b9b75eb32fbf8fcfd13690204d3a6a894e2034d13994aaf1209ac2&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day1</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=2&sn=92317b888261e19ad13975df565f9f9d&chksm=88bc7876bfcbf16045c6f5662be997cb4ae2cb0f516f98f0dcd71c91531850df0517d2f16ef6&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day2</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=3&sn=32299d12d1796112ec872c70bcde8eb7&chksm=88bc7876bfcbf1601f5797c2d4c1fe4e5e012fe95fb7c81e3ea46d96324f136bd08d75ed8e41&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day3</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=4&sn=159967195260f95d62ad4f34045aec33&chksm=88bc7876bfcbf160c1c947ea3cd540cac694526578de827c4d21e94a9bd84b0c7667b7b9bff4&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day14</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=5&sn=e33736043334c2846b4bdea2ac06f03a&chksm=88bc7876bfcbf160a3b85f4908b88f25c4c52f5ab97b43e4898849f43365b97f7611ab7e7d54&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day15</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=4&sn=19408792790dd0a8ee3640e9ad4c9bb7&chksm=88bc7807bfcbf111f3ed8ead852dda5cf3d54bb79980686b8418cf0dd01a0a524b9b7ec8e940&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day16</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=3&sn=c79219eee494e265ec6d5b9d767716cd&chksm=88bc7807bfcbf1112bc209fe195242a193438eac034c4e349feaea2d8bc335c8ed9f9d647905&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day17</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=2&sn=055ebf9c483569f7cdba0d1484f84e98&chksm=88bc7807bfcbf1116ed86773f3c16cb00ba10a6cb554066b1e792aa856a2fa4251923459adc4&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day18</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283452&idx=1&sn=4203792d580236028b105e9052dcce90&chksm=88bc7876bfcbf1600dc947abc683099b226e77e39b2d00dac86e422d282b6071b79638673c31&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day19</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283469&idx=1&sn=d4fc566d7b5dcbbd5e92100895913c06&chksm=88bc7807bfcbf111feea0fdfc188f7fb0e397d050266f1bf698369de571c6eb11e092bbf0d31&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day20</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283489&idx=1&sn=8521881d61997bc922233d189b465c3f&chksm=88bc782bbfcbf13d2d409ea3b6f1eb9354530ae1e2594784ca0ba4cb5f2c41d3ff6056ae55b8&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day21</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283503&idx=1&sn=db2e1846a903ba77cc6d229fec3abfd8&chksm=88bc7825bfcbf133ea86c0af29c9eeddf0a50dc338179dfb1b6dafc51298183fa212dbff5cc0&token=842281904&lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">【自律打卡】Day22</a></p>\n<p><small>计划：写一个脚本自动把文章链接加上来，自己转真累</small></p>\n"},{"title":"前端导航","_content":"\n#### WEB开发书单\n\n知识体系\n\n- [《Web高效编程与优化实践》](https://book.douban.com/subject/30170670/) 2018 人人 李银城 8.4⭐\n- [《前端工程化：体系设计与实践》](https://book.douban.com/subject/27605366/) 2018 搜狗 周俊鹏 6.1\n- [《Webpack实战：入门、进阶与调优》](https://book.douban.com/subject/34430881/) 2019 YKit 居玉皓 8.7\n- [《前端开发核心知识进阶》](https://book.douban.com/subject/35218831/) 2020 侯策\n- [《Web性能权威指南》](https://book.douban.com/subject/25856314/) 2013 李松峰译 8.9⭐\n- [《程序员进阶心法：快速突破成长瓶颈》](https://book.douban.com/subject/34668487/) 2019 京东 胡峰 7.2\n- [《黑客与画家》](https://book.douban.com/subject/6021440/) 2011 阮一峰译 8.7\n- [《人件》](https://book.douban.com/subject/25956450/) 2014 软件管理 8.5⭐\n\nHTML & CSS & DOM\n\n- 入门：[《Head First HTML与CSS(第2版)》](https://book.douban.com/subject/25752357/) 2013 9.2\n- 入门：[《JavaScript DOM编程艺术(第2版)》](https://book.douban.com/subject/6038371/) 2011 8.7\n- 基础：[《CSS权威指南》](https://book.douban.com/subject/33398314/) 2019 8.9\n- 进阶：[《CSS揭秘》](https://book.douban.com/subject/26745943/) 2016 9.4⭐\n- [《CSS世界》](https://book.douban.com/subject/27615777/)2017 张鑫旭 7.7\n- [《深入解析CSS》](https://book.douban.com/subject/35021471/) 2020 9.1⭐\n- [《CSS选择器世界》](https://book.douban.com/subject/34846688/) 2019 张鑫旭 9.4⭐\n\nJavaScript\n\n- 红宝书：[《JavaScript高级程序设计》](https://book.douban.com/subject/35175321/) 2020 李松峰译 ⭐\n- 绿皮书：[《JavaScript语言精髓与编程实践》](https://book.douban.com/subject/35085910/) 2020 周爱民 8.8⭐\n- 犀牛书：[《JavaScript权威指南》](https://book.douban.com/subject/10549733/) 工具书 8.8\n- [《你不知道的JavaScript》](https://book.douban.com/subject/26351021/) 2015 Kyle Simpson 9.3⭐\n- 小黄书：[《JavaScript编程精解》](https://book.douban.com/subject/35011711/) 2020 ⭐\n- 蝴蝶书：[《JavaScript语言精粹》](https://book.douban.com/subject/3590768/) 2009 Douglas Crockford 9.1⭐\n- [《深入理解 TypeScript》](https://book.douban.com/subject/34908276/) 2020 6.5\n- [《TypeScript 项目开发》](https://book.douban.com/subject/35178048/) 2020\n- [《ES6 标准入门（第3版）》](https://book.douban.com/subject/27127030/) 2017 阮一峰 8.8\n- [《深入理解 ES6》](https://book.douban.com/subject/27072230/) 2017 红宝书v3作者Nicholas C. Zakas 9.3\n- [《JavaScript设计模式》](https://book.douban.com/subject/26589719/) 2015 百度 张容铭 6.5\n- [《JavaScript设计模式与开发实践》](https://book.douban.com/subject/26382780/) 2015 腾讯 曾探 9.0⭐\n- [《高性能JavaScript》](https://book.douban.com/subject/5362856/) 2010 红宝书v3作者Nicholas C. Zakas 9.0⭐\n- [《JavaScript忍者秘籍》](https://book.douban.com/subject/26638316/) 2015 8.8\n- [《深入理解 JavaScript 特性》](https://book.douban.com/subject/33441887/) 2019 8.4 ⭐\n\n数据结构与算法\n\n- 入门：[《数据结构与算法JavaScript描述》](https://book.douban.com/subject/25945449/) 2014 6.5\n- 入门：[《算法图解》](https://book.douban.com/subject/26979890/) 2017 8.4\n- 入门：[《大话数据结构》](https://book.douban.com/subject/6424904/) 2011 7.9\n- 基础：[《学习JavaScript数据结构与算法（第3版）》](https://book.douban.com/subject/33441631/) 2019 8.7⭐\n- 进阶：[《算法(第4版)》](https://book.douban.com/subject/19952400/) 2012 9.4⭐\n- 刷题：[《剑指Offer：名企面试官精讲典型编程题（第2版）》](https://book.douban.com/subject/27008702/) 2017 微软 何海涛 8.9\n- 扩展：[《数学之美》](https://book.douban.com/subject/26163454/) 2014 吴军 8.9\n- 深入：[《算法导论》](https://book.douban.com/subject/20432061/) 2012 经典大部头 9.3\n- 深入：[《计算机程序设计艺术 卷1 基本算法》](https://book.douban.com/subject/26681685/) 2016 9.6\n\n网络\n\n- [《图解HTTP》](https://book.douban.com/subject/25863515/) 2014 8.1\n\n#### 前端信息源\n\n- 从 StateOfJs2019 提取了上万名前端开发者最常用的一些[前端信息源网站](https://www.scarsu.com/2019_javascript_sources/) （<a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">点击下载书签文件</a>）\n\n![bookmark](/images/bookmark.png)\n\n- <a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">十个国外技术社区 （点击下载书签文件）</a>\n\n#### 前端大佬\n- <a href=\"https://me.getify.com/\">getify - Kyle Simpson </a> - you dont know js作者\n- <a href=\"https://www.h5jun.com/\">十年踪迹 / 月影</a> - 吴亮,360齐舞团团长\n- <a href=\"http://dr-axel.de/\">Dr. Axel Rauschmayer</a> - 《Speaking JavaScript (ES1–ES5)》等js书籍作者\n- <a href=\"https://www.zhangxinxu.com/\">张鑫旭</a> - 2009年华中科技大学毕业，现就职于阅文集团。知名CSS专家、《CSS世界》作者\n- <a href=\"https://overreacted.io/\">Dan Abramov</a> - React 核心开发成员，Redux 作者\n- <a href=\"http://evanyou.me\">Evan You 尤雨溪</a> - 毕业于上海复旦附中，在美国完成大学学业，硕士学位，现任职于纽约Google Creative Lab。2016年9月3日，宣布以技术顾问的身份加盟阿里巴巴Weex团队。其成就：Vue.js框架的作者，HTML5版Clear的打造人。\n- <a href=\"https://github.com/wintercn\">Shaofei Cheng / winter</a> - 程劭非，阿里巴巴高级技术专家，著名JavaScript专家，知乎大V\n- <a href=\"https://github.com/lifesinger\">lifesinger 玉伯</a> - seajs、kissy作者，支付宝前端\n- <a href=\"http://www.ruanyifeng.com/blog/\">阮一峰</a> - es6入门，软件随想录等书籍，除了这些以外，他还有三个网站，微趣、Italo Calvino in China和读书公园。\n- <a href=\"http://github.com/RubyLouvre\">司徒正美</a> - 钟钦成，网名司徒正美，著名的JS专家，去哪儿网前端架构师，立志做考古学家的日语系工程师，穿梭于二次元与二进制间的“魔法师”，做过陶艺，写过小说，涉猎Java、Ruby。其成就：《JS框架设计》一书作者。\n- <a href=\"https://github.com/JacksonTian\">朴灵</a> - 真名田永强，文艺型码农，Node.js布道者。现就职于阿里巴巴数据平台，任资深工程师，其成就：《深入浅出Node.js》一书作者，热爱开源，是多个Node.js模块的作者。\n- <a href=\"https://github.com/michaelliao\">廖雪峰</a> 技术作家，十年软件开发经验，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，其成就：《JS教程》一书作者，多个开源项目托管在GitHub。\n\n<!-- #### 高质量的前端公号\n- 前端桃园 -->\n\n#### 工具\n- <a href=\"https://devhints.io/\">fed cheatsheet</a> - all in one，前端snippets速查\n- <a href=\"https://github.com/30-seconds/30-seconds-of-code\">30 seconds of code</a> - 精选的JavaScript代码段集合，开发者可以在30秒或更短的时间内理解这些代码段\n\n<!-- #### rss -->\n\n<!-- #### FE Conf -->\n\n```js\n    //欢迎友链，联系我：scarsu001@gmail.com，微信号scarsu001\n    //不定期更新\n    //排名不分先后\n```\n\n<small>谁看的信息源越多，世界在他的眼中便越真实客观</small>","source":"fe_nav/index.md","raw":"---\ntitle: 前端导航\n---\n\n#### WEB开发书单\n\n知识体系\n\n- [《Web高效编程与优化实践》](https://book.douban.com/subject/30170670/) 2018 人人 李银城 8.4⭐\n- [《前端工程化：体系设计与实践》](https://book.douban.com/subject/27605366/) 2018 搜狗 周俊鹏 6.1\n- [《Webpack实战：入门、进阶与调优》](https://book.douban.com/subject/34430881/) 2019 YKit 居玉皓 8.7\n- [《前端开发核心知识进阶》](https://book.douban.com/subject/35218831/) 2020 侯策\n- [《Web性能权威指南》](https://book.douban.com/subject/25856314/) 2013 李松峰译 8.9⭐\n- [《程序员进阶心法：快速突破成长瓶颈》](https://book.douban.com/subject/34668487/) 2019 京东 胡峰 7.2\n- [《黑客与画家》](https://book.douban.com/subject/6021440/) 2011 阮一峰译 8.7\n- [《人件》](https://book.douban.com/subject/25956450/) 2014 软件管理 8.5⭐\n\nHTML & CSS & DOM\n\n- 入门：[《Head First HTML与CSS(第2版)》](https://book.douban.com/subject/25752357/) 2013 9.2\n- 入门：[《JavaScript DOM编程艺术(第2版)》](https://book.douban.com/subject/6038371/) 2011 8.7\n- 基础：[《CSS权威指南》](https://book.douban.com/subject/33398314/) 2019 8.9\n- 进阶：[《CSS揭秘》](https://book.douban.com/subject/26745943/) 2016 9.4⭐\n- [《CSS世界》](https://book.douban.com/subject/27615777/)2017 张鑫旭 7.7\n- [《深入解析CSS》](https://book.douban.com/subject/35021471/) 2020 9.1⭐\n- [《CSS选择器世界》](https://book.douban.com/subject/34846688/) 2019 张鑫旭 9.4⭐\n\nJavaScript\n\n- 红宝书：[《JavaScript高级程序设计》](https://book.douban.com/subject/35175321/) 2020 李松峰译 ⭐\n- 绿皮书：[《JavaScript语言精髓与编程实践》](https://book.douban.com/subject/35085910/) 2020 周爱民 8.8⭐\n- 犀牛书：[《JavaScript权威指南》](https://book.douban.com/subject/10549733/) 工具书 8.8\n- [《你不知道的JavaScript》](https://book.douban.com/subject/26351021/) 2015 Kyle Simpson 9.3⭐\n- 小黄书：[《JavaScript编程精解》](https://book.douban.com/subject/35011711/) 2020 ⭐\n- 蝴蝶书：[《JavaScript语言精粹》](https://book.douban.com/subject/3590768/) 2009 Douglas Crockford 9.1⭐\n- [《深入理解 TypeScript》](https://book.douban.com/subject/34908276/) 2020 6.5\n- [《TypeScript 项目开发》](https://book.douban.com/subject/35178048/) 2020\n- [《ES6 标准入门（第3版）》](https://book.douban.com/subject/27127030/) 2017 阮一峰 8.8\n- [《深入理解 ES6》](https://book.douban.com/subject/27072230/) 2017 红宝书v3作者Nicholas C. Zakas 9.3\n- [《JavaScript设计模式》](https://book.douban.com/subject/26589719/) 2015 百度 张容铭 6.5\n- [《JavaScript设计模式与开发实践》](https://book.douban.com/subject/26382780/) 2015 腾讯 曾探 9.0⭐\n- [《高性能JavaScript》](https://book.douban.com/subject/5362856/) 2010 红宝书v3作者Nicholas C. Zakas 9.0⭐\n- [《JavaScript忍者秘籍》](https://book.douban.com/subject/26638316/) 2015 8.8\n- [《深入理解 JavaScript 特性》](https://book.douban.com/subject/33441887/) 2019 8.4 ⭐\n\n数据结构与算法\n\n- 入门：[《数据结构与算法JavaScript描述》](https://book.douban.com/subject/25945449/) 2014 6.5\n- 入门：[《算法图解》](https://book.douban.com/subject/26979890/) 2017 8.4\n- 入门：[《大话数据结构》](https://book.douban.com/subject/6424904/) 2011 7.9\n- 基础：[《学习JavaScript数据结构与算法（第3版）》](https://book.douban.com/subject/33441631/) 2019 8.7⭐\n- 进阶：[《算法(第4版)》](https://book.douban.com/subject/19952400/) 2012 9.4⭐\n- 刷题：[《剑指Offer：名企面试官精讲典型编程题（第2版）》](https://book.douban.com/subject/27008702/) 2017 微软 何海涛 8.9\n- 扩展：[《数学之美》](https://book.douban.com/subject/26163454/) 2014 吴军 8.9\n- 深入：[《算法导论》](https://book.douban.com/subject/20432061/) 2012 经典大部头 9.3\n- 深入：[《计算机程序设计艺术 卷1 基本算法》](https://book.douban.com/subject/26681685/) 2016 9.6\n\n网络\n\n- [《图解HTTP》](https://book.douban.com/subject/25863515/) 2014 8.1\n\n#### 前端信息源\n\n- 从 StateOfJs2019 提取了上万名前端开发者最常用的一些[前端信息源网站](https://www.scarsu.com/2019_javascript_sources/) （<a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">点击下载书签文件</a>）\n\n![bookmark](/images/bookmark.png)\n\n- <a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">十个国外技术社区 （点击下载书签文件）</a>\n\n#### 前端大佬\n- <a href=\"https://me.getify.com/\">getify - Kyle Simpson </a> - you dont know js作者\n- <a href=\"https://www.h5jun.com/\">十年踪迹 / 月影</a> - 吴亮,360齐舞团团长\n- <a href=\"http://dr-axel.de/\">Dr. Axel Rauschmayer</a> - 《Speaking JavaScript (ES1–ES5)》等js书籍作者\n- <a href=\"https://www.zhangxinxu.com/\">张鑫旭</a> - 2009年华中科技大学毕业，现就职于阅文集团。知名CSS专家、《CSS世界》作者\n- <a href=\"https://overreacted.io/\">Dan Abramov</a> - React 核心开发成员，Redux 作者\n- <a href=\"http://evanyou.me\">Evan You 尤雨溪</a> - 毕业于上海复旦附中，在美国完成大学学业，硕士学位，现任职于纽约Google Creative Lab。2016年9月3日，宣布以技术顾问的身份加盟阿里巴巴Weex团队。其成就：Vue.js框架的作者，HTML5版Clear的打造人。\n- <a href=\"https://github.com/wintercn\">Shaofei Cheng / winter</a> - 程劭非，阿里巴巴高级技术专家，著名JavaScript专家，知乎大V\n- <a href=\"https://github.com/lifesinger\">lifesinger 玉伯</a> - seajs、kissy作者，支付宝前端\n- <a href=\"http://www.ruanyifeng.com/blog/\">阮一峰</a> - es6入门，软件随想录等书籍，除了这些以外，他还有三个网站，微趣、Italo Calvino in China和读书公园。\n- <a href=\"http://github.com/RubyLouvre\">司徒正美</a> - 钟钦成，网名司徒正美，著名的JS专家，去哪儿网前端架构师，立志做考古学家的日语系工程师，穿梭于二次元与二进制间的“魔法师”，做过陶艺，写过小说，涉猎Java、Ruby。其成就：《JS框架设计》一书作者。\n- <a href=\"https://github.com/JacksonTian\">朴灵</a> - 真名田永强，文艺型码农，Node.js布道者。现就职于阿里巴巴数据平台，任资深工程师，其成就：《深入浅出Node.js》一书作者，热爱开源，是多个Node.js模块的作者。\n- <a href=\"https://github.com/michaelliao\">廖雪峰</a> 技术作家，十年软件开发经验，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，其成就：《JS教程》一书作者，多个开源项目托管在GitHub。\n\n<!-- #### 高质量的前端公号\n- 前端桃园 -->\n\n#### 工具\n- <a href=\"https://devhints.io/\">fed cheatsheet</a> - all in one，前端snippets速查\n- <a href=\"https://github.com/30-seconds/30-seconds-of-code\">30 seconds of code</a> - 精选的JavaScript代码段集合，开发者可以在30秒或更短的时间内理解这些代码段\n\n<!-- #### rss -->\n\n<!-- #### FE Conf -->\n\n```js\n    //欢迎友链，联系我：scarsu001@gmail.com，微信号scarsu001\n    //不定期更新\n    //排名不分先后\n```\n\n<small>谁看的信息源越多，世界在他的眼中便越真实客观</small>","date":"2020-12-12T04:56:35.286Z","updated":"2020-12-12T04:56:35.286Z","path":"fe_nav/index.html","comments":1,"layout":"page","_id":"ckir88jbr0057c8y6ajd8m6l0","content":"<h4 id=\"WEB开发书单\"><a href=\"#WEB开发书单\" class=\"headerlink\" title=\"WEB开发书单\"></a>WEB开发书单</h4><p>知识体系</p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/30170670/\" target=\"_blank\" rel=\"noopener\">《Web高效编程与优化实践》</a> 2018 人人 李银城 8.4⭐</li>\n<li><a href=\"https://book.douban.com/subject/27605366/\" target=\"_blank\" rel=\"noopener\">《前端工程化：体系设计与实践》</a> 2018 搜狗 周俊鹏 6.1</li>\n<li><a href=\"https://book.douban.com/subject/34430881/\" target=\"_blank\" rel=\"noopener\">《Webpack实战：入门、进阶与调优》</a> 2019 YKit 居玉皓 8.7</li>\n<li><a href=\"https://book.douban.com/subject/35218831/\" target=\"_blank\" rel=\"noopener\">《前端开发核心知识进阶》</a> 2020 侯策</li>\n<li><a href=\"https://book.douban.com/subject/25856314/\" target=\"_blank\" rel=\"noopener\">《Web性能权威指南》</a> 2013 李松峰译 8.9⭐</li>\n<li><a href=\"https://book.douban.com/subject/34668487/\" target=\"_blank\" rel=\"noopener\">《程序员进阶心法：快速突破成长瓶颈》</a> 2019 京东 胡峰 7.2</li>\n<li><a href=\"https://book.douban.com/subject/6021440/\" target=\"_blank\" rel=\"noopener\">《黑客与画家》</a> 2011 阮一峰译 8.7</li>\n<li><a href=\"https://book.douban.com/subject/25956450/\" target=\"_blank\" rel=\"noopener\">《人件》</a> 2014 软件管理 8.5⭐</li>\n</ul>\n<p>HTML &amp; CSS &amp; DOM</p>\n<ul>\n<li>入门：<a href=\"https://book.douban.com/subject/25752357/\" target=\"_blank\" rel=\"noopener\">《Head First HTML与CSS(第2版)》</a> 2013 9.2</li>\n<li>入门：<a href=\"https://book.douban.com/subject/6038371/\" target=\"_blank\" rel=\"noopener\">《JavaScript DOM编程艺术(第2版)》</a> 2011 8.7</li>\n<li>基础：<a href=\"https://book.douban.com/subject/33398314/\" target=\"_blank\" rel=\"noopener\">《CSS权威指南》</a> 2019 8.9</li>\n<li>进阶：<a href=\"https://book.douban.com/subject/26745943/\" target=\"_blank\" rel=\"noopener\">《CSS揭秘》</a> 2016 9.4⭐</li>\n<li><a href=\"https://book.douban.com/subject/27615777/\" target=\"_blank\" rel=\"noopener\">《CSS世界》</a>2017 张鑫旭 7.7</li>\n<li><a href=\"https://book.douban.com/subject/35021471/\" target=\"_blank\" rel=\"noopener\">《深入解析CSS》</a> 2020 9.1⭐</li>\n<li><a href=\"https://book.douban.com/subject/34846688/\" target=\"_blank\" rel=\"noopener\">《CSS选择器世界》</a> 2019 张鑫旭 9.4⭐</li>\n</ul>\n<p>JavaScript</p>\n<ul>\n<li>红宝书：<a href=\"https://book.douban.com/subject/35175321/\" target=\"_blank\" rel=\"noopener\">《JavaScript高级程序设计》</a> 2020 李松峰译 ⭐</li>\n<li>绿皮书：<a href=\"https://book.douban.com/subject/35085910/\" target=\"_blank\" rel=\"noopener\">《JavaScript语言精髓与编程实践》</a> 2020 周爱民 8.8⭐</li>\n<li>犀牛书：<a href=\"https://book.douban.com/subject/10549733/\" target=\"_blank\" rel=\"noopener\">《JavaScript权威指南》</a> 工具书 8.8</li>\n<li><a href=\"https://book.douban.com/subject/26351021/\" target=\"_blank\" rel=\"noopener\">《你不知道的JavaScript》</a> 2015 Kyle Simpson 9.3⭐</li>\n<li>小黄书：<a href=\"https://book.douban.com/subject/35011711/\" target=\"_blank\" rel=\"noopener\">《JavaScript编程精解》</a> 2020 ⭐</li>\n<li>蝴蝶书：<a href=\"https://book.douban.com/subject/3590768/\" target=\"_blank\" rel=\"noopener\">《JavaScript语言精粹》</a> 2009 Douglas Crockford 9.1⭐</li>\n<li><a href=\"https://book.douban.com/subject/34908276/\" target=\"_blank\" rel=\"noopener\">《深入理解 TypeScript》</a> 2020 6.5</li>\n<li><a href=\"https://book.douban.com/subject/35178048/\" target=\"_blank\" rel=\"noopener\">《TypeScript 项目开发》</a> 2020</li>\n<li><a href=\"https://book.douban.com/subject/27127030/\" target=\"_blank\" rel=\"noopener\">《ES6 标准入门（第3版）》</a> 2017 阮一峰 8.8</li>\n<li><a href=\"https://book.douban.com/subject/27072230/\" target=\"_blank\" rel=\"noopener\">《深入理解 ES6》</a> 2017 红宝书v3作者Nicholas C. Zakas 9.3</li>\n<li><a href=\"https://book.douban.com/subject/26589719/\" target=\"_blank\" rel=\"noopener\">《JavaScript设计模式》</a> 2015 百度 张容铭 6.5</li>\n<li><a href=\"https://book.douban.com/subject/26382780/\" target=\"_blank\" rel=\"noopener\">《JavaScript设计模式与开发实践》</a> 2015 腾讯 曾探 9.0⭐</li>\n<li><a href=\"https://book.douban.com/subject/5362856/\" target=\"_blank\" rel=\"noopener\">《高性能JavaScript》</a> 2010 红宝书v3作者Nicholas C. Zakas 9.0⭐</li>\n<li><a href=\"https://book.douban.com/subject/26638316/\" target=\"_blank\" rel=\"noopener\">《JavaScript忍者秘籍》</a> 2015 8.8</li>\n<li><a href=\"https://book.douban.com/subject/33441887/\" target=\"_blank\" rel=\"noopener\">《深入理解 JavaScript 特性》</a> 2019 8.4 ⭐</li>\n</ul>\n<p>数据结构与算法</p>\n<ul>\n<li>入门：<a href=\"https://book.douban.com/subject/25945449/\" target=\"_blank\" rel=\"noopener\">《数据结构与算法JavaScript描述》</a> 2014 6.5</li>\n<li>入门：<a href=\"https://book.douban.com/subject/26979890/\" target=\"_blank\" rel=\"noopener\">《算法图解》</a> 2017 8.4</li>\n<li>入门：<a href=\"https://book.douban.com/subject/6424904/\" target=\"_blank\" rel=\"noopener\">《大话数据结构》</a> 2011 7.9</li>\n<li>基础：<a href=\"https://book.douban.com/subject/33441631/\" target=\"_blank\" rel=\"noopener\">《学习JavaScript数据结构与算法（第3版）》</a> 2019 8.7⭐</li>\n<li>进阶：<a href=\"https://book.douban.com/subject/19952400/\" target=\"_blank\" rel=\"noopener\">《算法(第4版)》</a> 2012 9.4⭐</li>\n<li>刷题：<a href=\"https://book.douban.com/subject/27008702/\" target=\"_blank\" rel=\"noopener\">《剑指Offer：名企面试官精讲典型编程题（第2版）》</a> 2017 微软 何海涛 8.9</li>\n<li>扩展：<a href=\"https://book.douban.com/subject/26163454/\" target=\"_blank\" rel=\"noopener\">《数学之美》</a> 2014 吴军 8.9</li>\n<li>深入：<a href=\"https://book.douban.com/subject/20432061/\" target=\"_blank\" rel=\"noopener\">《算法导论》</a> 2012 经典大部头 9.3</li>\n<li>深入：<a href=\"https://book.douban.com/subject/26681685/\" target=\"_blank\" rel=\"noopener\">《计算机程序设计艺术 卷1 基本算法》</a> 2016 9.6</li>\n</ul>\n<p>网络</p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">《图解HTTP》</a> 2014 8.1</li>\n</ul>\n<h4 id=\"前端信息源\"><a href=\"#前端信息源\" class=\"headerlink\" title=\"前端信息源\"></a>前端信息源</h4><ul>\n<li>从 StateOfJs2019 提取了上万名前端开发者最常用的一些<a href=\"https://www.scarsu.com/2019_javascript_sources/\">前端信息源网站</a> （<a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">点击下载书签文件</a>）</li>\n</ul>\n<p><img src=\"/images/bookmark.png\" alt=\"bookmark\"></p>\n<ul>\n<li><a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">十个国外技术社区 （点击下载书签文件）</a></li>\n</ul>\n<h4 id=\"前端大佬\"><a href=\"#前端大佬\" class=\"headerlink\" title=\"前端大佬\"></a>前端大佬</h4><ul>\n<li><a href=\"https://me.getify.com/\" target=\"_blank\" rel=\"noopener\">getify - Kyle Simpson </a> - you dont know js作者</li>\n<li><a href=\"https://www.h5jun.com/\" target=\"_blank\" rel=\"noopener\">十年踪迹 / 月影</a> - 吴亮,360齐舞团团长</li>\n<li><a href=\"http://dr-axel.de/\" target=\"_blank\" rel=\"noopener\">Dr. Axel Rauschmayer</a> - 《Speaking JavaScript (ES1–ES5)》等js书籍作者</li>\n<li><a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a> - 2009年华中科技大学毕业，现就职于阅文集团。知名CSS专家、《CSS世界》作者</li>\n<li><a href=\"https://overreacted.io/\" target=\"_blank\" rel=\"noopener\">Dan Abramov</a> - React 核心开发成员，Redux 作者</li>\n<li><a href=\"http://evanyou.me\" target=\"_blank\" rel=\"noopener\">Evan You 尤雨溪</a> - 毕业于上海复旦附中，在美国完成大学学业，硕士学位，现任职于纽约Google Creative Lab。2016年9月3日，宣布以技术顾问的身份加盟阿里巴巴Weex团队。其成就：Vue.js框架的作者，HTML5版Clear的打造人。</li>\n<li><a href=\"https://github.com/wintercn\" target=\"_blank\" rel=\"noopener\">Shaofei Cheng / winter</a> - 程劭非，阿里巴巴高级技术专家，著名JavaScript专家，知乎大V</li>\n<li><a href=\"https://github.com/lifesinger\" target=\"_blank\" rel=\"noopener\">lifesinger 玉伯</a> - seajs、kissy作者，支付宝前端</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> - es6入门，软件随想录等书籍，除了这些以外，他还有三个网站，微趣、Italo Calvino in China和读书公园。</li>\n<li><a href=\"http://github.com/RubyLouvre\" target=\"_blank\" rel=\"noopener\">司徒正美</a> - 钟钦成，网名司徒正美，著名的JS专家，去哪儿网前端架构师，立志做考古学家的日语系工程师，穿梭于二次元与二进制间的“魔法师”，做过陶艺，写过小说，涉猎Java、Ruby。其成就：《JS框架设计》一书作者。</li>\n<li><a href=\"https://github.com/JacksonTian\" target=\"_blank\" rel=\"noopener\">朴灵</a> - 真名田永强，文艺型码农，Node.js布道者。现就职于阿里巴巴数据平台，任资深工程师，其成就：《深入浅出Node.js》一书作者，热爱开源，是多个Node.js模块的作者。</li>\n<li><a href=\"https://github.com/michaelliao\" target=\"_blank\" rel=\"noopener\">廖雪峰</a> 技术作家，十年软件开发经验，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，其成就：《JS教程》一书作者，多个开源项目托管在GitHub。</li>\n</ul>\n<!-- #### 高质量的前端公号\n- 前端桃园 -->\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li><a href=\"https://devhints.io/\" target=\"_blank\" rel=\"noopener\">fed cheatsheet</a> - all in one，前端snippets速查</li>\n<li><a href=\"https://github.com/30-seconds/30-seconds-of-code\" target=\"_blank\" rel=\"noopener\">30 seconds of code</a> - 精选的JavaScript代码段集合，开发者可以在30秒或更短的时间内理解这些代码段</li>\n</ul>\n<!-- #### rss -->\n<!-- #### FE Conf -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//欢迎友链，联系我：scarsu001@gmail.com，微信号scarsu001</span></span><br><span class=\"line\"><span class=\"comment\">//不定期更新</span></span><br><span class=\"line\"><span class=\"comment\">//排名不分先后</span></span><br></pre></td></tr></table></figure>\n<p><small>谁看的信息源越多，世界在他的眼中便越真实客观</small></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"WEB开发书单\"><a href=\"#WEB开发书单\" class=\"headerlink\" title=\"WEB开发书单\"></a>WEB开发书单</h4><p>知识体系</p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/30170670/\" target=\"_blank\" rel=\"noopener\">《Web高效编程与优化实践》</a> 2018 人人 李银城 8.4⭐</li>\n<li><a href=\"https://book.douban.com/subject/27605366/\" target=\"_blank\" rel=\"noopener\">《前端工程化：体系设计与实践》</a> 2018 搜狗 周俊鹏 6.1</li>\n<li><a href=\"https://book.douban.com/subject/34430881/\" target=\"_blank\" rel=\"noopener\">《Webpack实战：入门、进阶与调优》</a> 2019 YKit 居玉皓 8.7</li>\n<li><a href=\"https://book.douban.com/subject/35218831/\" target=\"_blank\" rel=\"noopener\">《前端开发核心知识进阶》</a> 2020 侯策</li>\n<li><a href=\"https://book.douban.com/subject/25856314/\" target=\"_blank\" rel=\"noopener\">《Web性能权威指南》</a> 2013 李松峰译 8.9⭐</li>\n<li><a href=\"https://book.douban.com/subject/34668487/\" target=\"_blank\" rel=\"noopener\">《程序员进阶心法：快速突破成长瓶颈》</a> 2019 京东 胡峰 7.2</li>\n<li><a href=\"https://book.douban.com/subject/6021440/\" target=\"_blank\" rel=\"noopener\">《黑客与画家》</a> 2011 阮一峰译 8.7</li>\n<li><a href=\"https://book.douban.com/subject/25956450/\" target=\"_blank\" rel=\"noopener\">《人件》</a> 2014 软件管理 8.5⭐</li>\n</ul>\n<p>HTML &amp; CSS &amp; DOM</p>\n<ul>\n<li>入门：<a href=\"https://book.douban.com/subject/25752357/\" target=\"_blank\" rel=\"noopener\">《Head First HTML与CSS(第2版)》</a> 2013 9.2</li>\n<li>入门：<a href=\"https://book.douban.com/subject/6038371/\" target=\"_blank\" rel=\"noopener\">《JavaScript DOM编程艺术(第2版)》</a> 2011 8.7</li>\n<li>基础：<a href=\"https://book.douban.com/subject/33398314/\" target=\"_blank\" rel=\"noopener\">《CSS权威指南》</a> 2019 8.9</li>\n<li>进阶：<a href=\"https://book.douban.com/subject/26745943/\" target=\"_blank\" rel=\"noopener\">《CSS揭秘》</a> 2016 9.4⭐</li>\n<li><a href=\"https://book.douban.com/subject/27615777/\" target=\"_blank\" rel=\"noopener\">《CSS世界》</a>2017 张鑫旭 7.7</li>\n<li><a href=\"https://book.douban.com/subject/35021471/\" target=\"_blank\" rel=\"noopener\">《深入解析CSS》</a> 2020 9.1⭐</li>\n<li><a href=\"https://book.douban.com/subject/34846688/\" target=\"_blank\" rel=\"noopener\">《CSS选择器世界》</a> 2019 张鑫旭 9.4⭐</li>\n</ul>\n<p>JavaScript</p>\n<ul>\n<li>红宝书：<a href=\"https://book.douban.com/subject/35175321/\" target=\"_blank\" rel=\"noopener\">《JavaScript高级程序设计》</a> 2020 李松峰译 ⭐</li>\n<li>绿皮书：<a href=\"https://book.douban.com/subject/35085910/\" target=\"_blank\" rel=\"noopener\">《JavaScript语言精髓与编程实践》</a> 2020 周爱民 8.8⭐</li>\n<li>犀牛书：<a href=\"https://book.douban.com/subject/10549733/\" target=\"_blank\" rel=\"noopener\">《JavaScript权威指南》</a> 工具书 8.8</li>\n<li><a href=\"https://book.douban.com/subject/26351021/\" target=\"_blank\" rel=\"noopener\">《你不知道的JavaScript》</a> 2015 Kyle Simpson 9.3⭐</li>\n<li>小黄书：<a href=\"https://book.douban.com/subject/35011711/\" target=\"_blank\" rel=\"noopener\">《JavaScript编程精解》</a> 2020 ⭐</li>\n<li>蝴蝶书：<a href=\"https://book.douban.com/subject/3590768/\" target=\"_blank\" rel=\"noopener\">《JavaScript语言精粹》</a> 2009 Douglas Crockford 9.1⭐</li>\n<li><a href=\"https://book.douban.com/subject/34908276/\" target=\"_blank\" rel=\"noopener\">《深入理解 TypeScript》</a> 2020 6.5</li>\n<li><a href=\"https://book.douban.com/subject/35178048/\" target=\"_blank\" rel=\"noopener\">《TypeScript 项目开发》</a> 2020</li>\n<li><a href=\"https://book.douban.com/subject/27127030/\" target=\"_blank\" rel=\"noopener\">《ES6 标准入门（第3版）》</a> 2017 阮一峰 8.8</li>\n<li><a href=\"https://book.douban.com/subject/27072230/\" target=\"_blank\" rel=\"noopener\">《深入理解 ES6》</a> 2017 红宝书v3作者Nicholas C. Zakas 9.3</li>\n<li><a href=\"https://book.douban.com/subject/26589719/\" target=\"_blank\" rel=\"noopener\">《JavaScript设计模式》</a> 2015 百度 张容铭 6.5</li>\n<li><a href=\"https://book.douban.com/subject/26382780/\" target=\"_blank\" rel=\"noopener\">《JavaScript设计模式与开发实践》</a> 2015 腾讯 曾探 9.0⭐</li>\n<li><a href=\"https://book.douban.com/subject/5362856/\" target=\"_blank\" rel=\"noopener\">《高性能JavaScript》</a> 2010 红宝书v3作者Nicholas C. Zakas 9.0⭐</li>\n<li><a href=\"https://book.douban.com/subject/26638316/\" target=\"_blank\" rel=\"noopener\">《JavaScript忍者秘籍》</a> 2015 8.8</li>\n<li><a href=\"https://book.douban.com/subject/33441887/\" target=\"_blank\" rel=\"noopener\">《深入理解 JavaScript 特性》</a> 2019 8.4 ⭐</li>\n</ul>\n<p>数据结构与算法</p>\n<ul>\n<li>入门：<a href=\"https://book.douban.com/subject/25945449/\" target=\"_blank\" rel=\"noopener\">《数据结构与算法JavaScript描述》</a> 2014 6.5</li>\n<li>入门：<a href=\"https://book.douban.com/subject/26979890/\" target=\"_blank\" rel=\"noopener\">《算法图解》</a> 2017 8.4</li>\n<li>入门：<a href=\"https://book.douban.com/subject/6424904/\" target=\"_blank\" rel=\"noopener\">《大话数据结构》</a> 2011 7.9</li>\n<li>基础：<a href=\"https://book.douban.com/subject/33441631/\" target=\"_blank\" rel=\"noopener\">《学习JavaScript数据结构与算法（第3版）》</a> 2019 8.7⭐</li>\n<li>进阶：<a href=\"https://book.douban.com/subject/19952400/\" target=\"_blank\" rel=\"noopener\">《算法(第4版)》</a> 2012 9.4⭐</li>\n<li>刷题：<a href=\"https://book.douban.com/subject/27008702/\" target=\"_blank\" rel=\"noopener\">《剑指Offer：名企面试官精讲典型编程题（第2版）》</a> 2017 微软 何海涛 8.9</li>\n<li>扩展：<a href=\"https://book.douban.com/subject/26163454/\" target=\"_blank\" rel=\"noopener\">《数学之美》</a> 2014 吴军 8.9</li>\n<li>深入：<a href=\"https://book.douban.com/subject/20432061/\" target=\"_blank\" rel=\"noopener\">《算法导论》</a> 2012 经典大部头 9.3</li>\n<li>深入：<a href=\"https://book.douban.com/subject/26681685/\" target=\"_blank\" rel=\"noopener\">《计算机程序设计艺术 卷1 基本算法》</a> 2016 9.6</li>\n</ul>\n<p>网络</p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/25863515/\" target=\"_blank\" rel=\"noopener\">《图解HTTP》</a> 2014 8.1</li>\n</ul>\n<h4 id=\"前端信息源\"><a href=\"#前端信息源\" class=\"headerlink\" title=\"前端信息源\"></a>前端信息源</h4><ul>\n<li>从 StateOfJs2019 提取了上万名前端开发者最常用的一些<a href=\"https://www.scarsu.com/2019_javascript_sources/\">前端信息源网站</a> （<a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">点击下载书签文件</a>）</li>\n</ul>\n<p><img src=\"/images/bookmark.png\" alt=\"bookmark\"></p>\n<ul>\n<li><a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">十个国外技术社区 （点击下载书签文件）</a></li>\n</ul>\n<h4 id=\"前端大佬\"><a href=\"#前端大佬\" class=\"headerlink\" title=\"前端大佬\"></a>前端大佬</h4><ul>\n<li><a href=\"https://me.getify.com/\" target=\"_blank\" rel=\"noopener\">getify - Kyle Simpson </a> - you dont know js作者</li>\n<li><a href=\"https://www.h5jun.com/\" target=\"_blank\" rel=\"noopener\">十年踪迹 / 月影</a> - 吴亮,360齐舞团团长</li>\n<li><a href=\"http://dr-axel.de/\" target=\"_blank\" rel=\"noopener\">Dr. Axel Rauschmayer</a> - 《Speaking JavaScript (ES1–ES5)》等js书籍作者</li>\n<li><a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a> - 2009年华中科技大学毕业，现就职于阅文集团。知名CSS专家、《CSS世界》作者</li>\n<li><a href=\"https://overreacted.io/\" target=\"_blank\" rel=\"noopener\">Dan Abramov</a> - React 核心开发成员，Redux 作者</li>\n<li><a href=\"http://evanyou.me\" target=\"_blank\" rel=\"noopener\">Evan You 尤雨溪</a> - 毕业于上海复旦附中，在美国完成大学学业，硕士学位，现任职于纽约Google Creative Lab。2016年9月3日，宣布以技术顾问的身份加盟阿里巴巴Weex团队。其成就：Vue.js框架的作者，HTML5版Clear的打造人。</li>\n<li><a href=\"https://github.com/wintercn\" target=\"_blank\" rel=\"noopener\">Shaofei Cheng / winter</a> - 程劭非，阿里巴巴高级技术专家，著名JavaScript专家，知乎大V</li>\n<li><a href=\"https://github.com/lifesinger\" target=\"_blank\" rel=\"noopener\">lifesinger 玉伯</a> - seajs、kissy作者，支付宝前端</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> - es6入门，软件随想录等书籍，除了这些以外，他还有三个网站，微趣、Italo Calvino in China和读书公园。</li>\n<li><a href=\"http://github.com/RubyLouvre\" target=\"_blank\" rel=\"noopener\">司徒正美</a> - 钟钦成，网名司徒正美，著名的JS专家，去哪儿网前端架构师，立志做考古学家的日语系工程师，穿梭于二次元与二进制间的“魔法师”，做过陶艺，写过小说，涉猎Java、Ruby。其成就：《JS框架设计》一书作者。</li>\n<li><a href=\"https://github.com/JacksonTian\" target=\"_blank\" rel=\"noopener\">朴灵</a> - 真名田永强，文艺型码农，Node.js布道者。现就职于阿里巴巴数据平台，任资深工程师，其成就：《深入浅出Node.js》一书作者，热爱开源，是多个Node.js模块的作者。</li>\n<li><a href=\"https://github.com/michaelliao\" target=\"_blank\" rel=\"noopener\">廖雪峰</a> 技术作家，十年软件开发经验，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，其成就：《JS教程》一书作者，多个开源项目托管在GitHub。</li>\n</ul>\n<!-- #### 高质量的前端公号\n- 前端桃园 -->\n<h4 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h4><ul>\n<li><a href=\"https://devhints.io/\" target=\"_blank\" rel=\"noopener\">fed cheatsheet</a> - all in one，前端snippets速查</li>\n<li><a href=\"https://github.com/30-seconds/30-seconds-of-code\" target=\"_blank\" rel=\"noopener\">30 seconds of code</a> - 精选的JavaScript代码段集合，开发者可以在30秒或更短的时间内理解这些代码段</li>\n</ul>\n<!-- #### rss -->\n<!-- #### FE Conf -->\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//欢迎友链，联系我：scarsu001@gmail.com，微信号scarsu001</span></span><br><span class=\"line\"><span class=\"comment\">//不定期更新</span></span><br><span class=\"line\"><span class=\"comment\">//排名不分先后</span></span><br></pre></td></tr></table></figure>\n<p><small>谁看的信息源越多，世界在他的眼中便越真实客观</small></p>\n"}],"Post":[{"title":"用jenkins搭建前端CI流程","date":"2020-12-04T16:00:00.000Z","description":"用jenkins搭建前端CI流程","toc":1,"top":0,"_content":"\nhttps://www.jianshu.com/p/d6a6ecb31bd1?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation\n\nhttps://zhuanlan.zhihu.com/p/26701038\n\nhttps://www.mdnice.com/?outId=c0b5493e4e2442edaa81ac31020a3022\n\n```\n登录配置，ssh，ftp\n\n装docker，docker compose\n\n(装数据库，redis，配docker)\n\n装nginx(/home/docker-compose/nginx)）（/etc/nginx/nginx.conf）(/root/project/NotionX/dist)\n配置nginx代理 /etc/nginx/nginx.conf\nnginx status页面账户 nginx/nginx\n重启nginx服务 service nginx restart\n\n阿里云ecs配置防火墙（开启http端口）\n\n安装nvm\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n安装node\nnvm install v10.15.0\nnvm use v10.15.0\n\n\n装jenkins（v2.7.3）\nroot用户登录\nyum install -y java\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n修改配置 vi /etc/sysconfig/jenkins\nvi /etc/sysconfig/jenkins \nJENKINS_PORT=\"8081\" 保存\n阿里云ecs防火墙添加 自定义tcp 8081端口\n启动重启service jenkins start/stop/restart\n打开网页 IP:8081\n查看密码：cat /var/lib/jenkins/secrets/initialAdminPassword\nea5e853eab5e4b62bbf5a50daa9151ce\n安装推荐插件，等待\n创建管理员账户 jenkins 域9.大名\n\n\n查看环境变量\necho $PATH\n/root/.nvm/versions/node/v12.16.1/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n\n\n网易云服务\ncd /srv\n添加服务要调用的shell脚本文件\nsudo vi  netcloudmusic.sh \n```\n#!/bin/sh\nnpx @nondanee/unblockneteasemusic -s -p 8080\n```\n\ncd /etc/systemd/system\n添加自定义服务\nsudo vi  netcloudmusic.service\n```\n[Unit]\nDescription=netcloudmusic\n\n[Service]\nExecStart=/bin/sh /srv/netcloudmusic.sh #启动脚本\nRestart=no\nUser=root\nGroup=root\nEnvironment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/.nvm/versions/node/v12.16.1/bin\n\n[Install]\nWantedBy=multi-user.target\n```\n给执行权限 chmod +x netcloudmusic.service\n启动 systemctl start netcloudmusic\n查看状态 systemctl status netcloudmusic.service\n更改 service文件后重新加载systemctl daemon-reload\n重启 systemctl restart netcloudmusic\n\n\n\n\njenkins自动构建github-scarsu.com\njenkins安装github插件/node插件\njenkins配置环境变量\n\t执行echo $PATH\n\t得到环境变量（/home/admin/.nvm/versions/node/v10.15.0/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/admin/.local/bin:/home/admin/bin\n\tjenkins-系统管理-系统配置-全局属性-环境变量\n\t添加一条\n\t\tPATH\n\t\t/home/admin/.nvm/versions/node/v10.15.0/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/admin/.local/bin:/home/admin/bin\njenkin创建一个项目 类型github,填上自己的项目仓库地址。\n可以选择丢弃旧的构建，这样不会占空间。\n策略选择Log Rotation 不知道是什么，但是只能选这个。\n源码管理：选git,填仓库地址,验证，配置自己github的账户密码\nBranches to build ：填写需要监听的仓库分支。如：*/master\n构建触发器：选择GitHub hook trigger for GITScm polling。\n构建环境 选择provide node，选择已经安装（在系统工具中安装）的某版本node\n执行shell。填写需要执行的命令。这个时候命令行的目录是仓库里最新源码所在的目录。\n```\n# 依赖\nnpm install\nnpm install hexo-cli -g\n# 打包\nhexo g\n# 转移\nsudo cp -R ./public/* /var/www/scarsu\n```\njenkins用户添加sudo权限\n\tchmod u+w /etc/sudoers\n\tvi /etc/sudoers\n\t添加一行jenkins ALL=NOPASSWD:ALL\n配置github，仓库-settings-webhook-add hook\n\tPayload URL：http://scarsu.cn:8081/github-webhook/（jenkins地址/github-webhook）(结尾一定要加/，浪费我一下午时间！！)\n\tcontent-type：json\n\ttrigger：just push\n\tActice：check\n配置jenkins 系统配置-Github-高级选项-为 Github 指定另外一个 Hook URL，填写为http://scarsu.cn:8081/github-webhook/，保存\n回到jenkins，立即构建：success\n代码仓库push测试，构建成功\n\n\n\n\njenkins自动构建github-notionx\n```","source":"_drafts/jenkins_fe_ci.md","raw":"---\ntitle: 用jenkins搭建前端CI流程\ncategories:\n    - 10技术 | 前端工具与工程化\ndate: 2020-12-05\ndescription: 用jenkins搭建前端CI流程\ntoc: 1\ntop: 0\n---\n\nhttps://www.jianshu.com/p/d6a6ecb31bd1?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation\n\nhttps://zhuanlan.zhihu.com/p/26701038\n\nhttps://www.mdnice.com/?outId=c0b5493e4e2442edaa81ac31020a3022\n\n```\n登录配置，ssh，ftp\n\n装docker，docker compose\n\n(装数据库，redis，配docker)\n\n装nginx(/home/docker-compose/nginx)）（/etc/nginx/nginx.conf）(/root/project/NotionX/dist)\n配置nginx代理 /etc/nginx/nginx.conf\nnginx status页面账户 nginx/nginx\n重启nginx服务 service nginx restart\n\n阿里云ecs配置防火墙（开启http端口）\n\n安装nvm\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n安装node\nnvm install v10.15.0\nnvm use v10.15.0\n\n\n装jenkins（v2.7.3）\nroot用户登录\nyum install -y java\nwget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\nrpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n修改配置 vi /etc/sysconfig/jenkins\nvi /etc/sysconfig/jenkins \nJENKINS_PORT=\"8081\" 保存\n阿里云ecs防火墙添加 自定义tcp 8081端口\n启动重启service jenkins start/stop/restart\n打开网页 IP:8081\n查看密码：cat /var/lib/jenkins/secrets/initialAdminPassword\nea5e853eab5e4b62bbf5a50daa9151ce\n安装推荐插件，等待\n创建管理员账户 jenkins 域9.大名\n\n\n查看环境变量\necho $PATH\n/root/.nvm/versions/node/v12.16.1/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n\n\n网易云服务\ncd /srv\n添加服务要调用的shell脚本文件\nsudo vi  netcloudmusic.sh \n```\n#!/bin/sh\nnpx @nondanee/unblockneteasemusic -s -p 8080\n```\n\ncd /etc/systemd/system\n添加自定义服务\nsudo vi  netcloudmusic.service\n```\n[Unit]\nDescription=netcloudmusic\n\n[Service]\nExecStart=/bin/sh /srv/netcloudmusic.sh #启动脚本\nRestart=no\nUser=root\nGroup=root\nEnvironment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/.nvm/versions/node/v12.16.1/bin\n\n[Install]\nWantedBy=multi-user.target\n```\n给执行权限 chmod +x netcloudmusic.service\n启动 systemctl start netcloudmusic\n查看状态 systemctl status netcloudmusic.service\n更改 service文件后重新加载systemctl daemon-reload\n重启 systemctl restart netcloudmusic\n\n\n\n\njenkins自动构建github-scarsu.com\njenkins安装github插件/node插件\njenkins配置环境变量\n\t执行echo $PATH\n\t得到环境变量（/home/admin/.nvm/versions/node/v10.15.0/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/admin/.local/bin:/home/admin/bin\n\tjenkins-系统管理-系统配置-全局属性-环境变量\n\t添加一条\n\t\tPATH\n\t\t/home/admin/.nvm/versions/node/v10.15.0/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/admin/.local/bin:/home/admin/bin\njenkin创建一个项目 类型github,填上自己的项目仓库地址。\n可以选择丢弃旧的构建，这样不会占空间。\n策略选择Log Rotation 不知道是什么，但是只能选这个。\n源码管理：选git,填仓库地址,验证，配置自己github的账户密码\nBranches to build ：填写需要监听的仓库分支。如：*/master\n构建触发器：选择GitHub hook trigger for GITScm polling。\n构建环境 选择provide node，选择已经安装（在系统工具中安装）的某版本node\n执行shell。填写需要执行的命令。这个时候命令行的目录是仓库里最新源码所在的目录。\n```\n# 依赖\nnpm install\nnpm install hexo-cli -g\n# 打包\nhexo g\n# 转移\nsudo cp -R ./public/* /var/www/scarsu\n```\njenkins用户添加sudo权限\n\tchmod u+w /etc/sudoers\n\tvi /etc/sudoers\n\t添加一行jenkins ALL=NOPASSWD:ALL\n配置github，仓库-settings-webhook-add hook\n\tPayload URL：http://scarsu.cn:8081/github-webhook/（jenkins地址/github-webhook）(结尾一定要加/，浪费我一下午时间！！)\n\tcontent-type：json\n\ttrigger：just push\n\tActice：check\n配置jenkins 系统配置-Github-高级选项-为 Github 指定另外一个 Hook URL，填写为http://scarsu.cn:8081/github-webhook/，保存\n回到jenkins，立即构建：success\n代码仓库push测试，构建成功\n\n\n\n\njenkins自动构建github-notionx\n```","slug":"jenkins_fe_ci","published":0,"updated":"2020-12-07T10:08:19.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88iev0005c8y6w5tzusi4","content":"<p><a href=\"https://www.jianshu.com/p/d6a6ecb31bd1?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d6a6ecb31bd1?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/26701038\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/26701038</a></p>\n<p><a href=\"https://www.mdnice.com/?outId=c0b5493e4e2442edaa81ac31020a3022\" target=\"_blank\" rel=\"noopener\">https://www.mdnice.com/?outId=c0b5493e4e2442edaa81ac31020a3022</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录配置，ssh，ftp</span><br><span class=\"line\"></span><br><span class=\"line\">装docker，docker compose</span><br><span class=\"line\"></span><br><span class=\"line\">(装数据库，redis，配docker)</span><br><span class=\"line\"></span><br><span class=\"line\">装nginx(/home/docker-compose/nginx)）（/etc/nginx/nginx.conf）(/root/project/NotionX/dist)</span><br><span class=\"line\">配置nginx代理 /etc/nginx/nginx.conf</span><br><span class=\"line\">nginx status页面账户 nginx/nginx</span><br><span class=\"line\">重启nginx服务 service nginx restart</span><br><span class=\"line\"></span><br><span class=\"line\">阿里云ecs配置防火墙（开启http端口）</span><br><span class=\"line\"></span><br><span class=\"line\">安装nvm</span><br><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br><span class=\"line\">安装node</span><br><span class=\"line\">nvm install v10.15.0</span><br><span class=\"line\">nvm use v10.15.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">装jenkins（v2.7.3）</span><br><span class=\"line\">root用户登录</span><br><span class=\"line\">yum install -y java</span><br><span class=\"line\">wget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm</span><br><span class=\"line\">rpm -ivh jenkins-2.7.3-1.1.noarch.rpm</span><br><span class=\"line\">修改配置 vi /etc/sysconfig/jenkins</span><br><span class=\"line\">vi /etc/sysconfig/jenkins </span><br><span class=\"line\">JENKINS_PORT=&quot;8081&quot; 保存</span><br><span class=\"line\">阿里云ecs防火墙添加 自定义tcp 8081端口</span><br><span class=\"line\">启动重启service jenkins start/stop/restart</span><br><span class=\"line\">打开网页 IP:8081</span><br><span class=\"line\">查看密码：cat /var/lib/jenkins/secrets/initialAdminPassword</span><br><span class=\"line\">ea5e853eab5e4b62bbf5a50daa9151ce</span><br><span class=\"line\">安装推荐插件，等待</span><br><span class=\"line\">创建管理员账户 jenkins 域9.大名</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">查看环境变量</span><br><span class=\"line\">echo $PATH</span><br><span class=\"line\">/root/.nvm/versions/node/v12.16.1/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">网易云服务</span><br><span class=\"line\">cd /srv</span><br><span class=\"line\">添加服务要调用的shell脚本文件</span><br><span class=\"line\">sudo vi  netcloudmusic.sh</span><br></pre></td></tr></table></figure>\n<p>#!/bin/sh<br>npx @nondanee/unblockneteasemusic -s -p 8080<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd /etc/systemd/system</span><br><span class=\"line\">添加自定义服务</span><br><span class=\"line\">sudo vi  netcloudmusic.service</span><br></pre></td></tr></table></figure></p>\n<p>[Unit]<br>Description=netcloudmusic</p>\n<p>[Service]<br>ExecStart=/bin/sh /srv/netcloudmusic.sh #启动脚本<br>Restart=no<br>User=root<br>Group=root<br>Environment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/.nvm/versions/node/v12.16.1/bin</p>\n<p>[Install]<br>WantedBy=multi-user.target<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给执行权限 chmod +x netcloudmusic.service</span><br><span class=\"line\">启动 systemctl start netcloudmusic</span><br><span class=\"line\">查看状态 systemctl status netcloudmusic.service</span><br><span class=\"line\">更改 service文件后重新加载systemctl daemon-reload</span><br><span class=\"line\">重启 systemctl restart netcloudmusic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jenkins自动构建github-scarsu.com</span><br><span class=\"line\">jenkins安装github插件/node插件</span><br><span class=\"line\">jenkins配置环境变量</span><br><span class=\"line\">\t执行echo $PATH</span><br><span class=\"line\">\t得到环境变量（/home/admin/.nvm/versions/node/v10.15.0/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/admin/.local/bin:/home/admin/bin</span><br><span class=\"line\">\tjenkins-系统管理-系统配置-全局属性-环境变量</span><br><span class=\"line\">\t添加一条</span><br><span class=\"line\">\t\tPATH</span><br><span class=\"line\">\t\t/home/admin/.nvm/versions/node/v10.15.0/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/admin/.local/bin:/home/admin/bin</span><br><span class=\"line\">jenkin创建一个项目 类型github,填上自己的项目仓库地址。</span><br><span class=\"line\">可以选择丢弃旧的构建，这样不会占空间。</span><br><span class=\"line\">策略选择Log Rotation 不知道是什么，但是只能选这个。</span><br><span class=\"line\">源码管理：选git,填仓库地址,验证，配置自己github的账户密码</span><br><span class=\"line\">Branches to build ：填写需要监听的仓库分支。如：*/master</span><br><span class=\"line\">构建触发器：选择GitHub hook trigger for GITScm polling。</span><br><span class=\"line\">构建环境 选择provide node，选择已经安装（在系统工具中安装）的某版本node</span><br><span class=\"line\">执行shell。填写需要执行的命令。这个时候命令行的目录是仓库里最新源码所在的目录。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>npm install<br>npm install hexo-cli -g</p>\n<h1 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h1><p>hexo g</p>\n<h1 id=\"转移\"><a href=\"#转移\" class=\"headerlink\" title=\"转移\"></a>转移</h1><p>sudo cp -R ./public/* /var/www/scarsu<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenkins用户添加sudo权限</span><br><span class=\"line\">\tchmod u+w /etc/sudoers</span><br><span class=\"line\">\tvi /etc/sudoers</span><br><span class=\"line\">\t添加一行jenkins ALL=NOPASSWD:ALL</span><br><span class=\"line\">配置github，仓库-settings-webhook-add hook</span><br><span class=\"line\">\tPayload URL：http://scarsu.cn:8081/github-webhook/（jenkins地址/github-webhook）(结尾一定要加/，浪费我一下午时间！！)</span><br><span class=\"line\">\tcontent-type：json</span><br><span class=\"line\">\ttrigger：just push</span><br><span class=\"line\">\tActice：check</span><br><span class=\"line\">配置jenkins 系统配置-Github-高级选项-为 Github 指定另外一个 Hook URL，填写为http://scarsu.cn:8081/github-webhook/，保存</span><br><span class=\"line\">回到jenkins，立即构建：success</span><br><span class=\"line\">代码仓库push测试，构建成功</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jenkins自动构建github-notionx</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.jianshu.com/p/d6a6ecb31bd1?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d6a6ecb31bd1?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/26701038\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/26701038</a></p>\n<p><a href=\"https://www.mdnice.com/?outId=c0b5493e4e2442edaa81ac31020a3022\" target=\"_blank\" rel=\"noopener\">https://www.mdnice.com/?outId=c0b5493e4e2442edaa81ac31020a3022</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录配置，ssh，ftp</span><br><span class=\"line\"></span><br><span class=\"line\">装docker，docker compose</span><br><span class=\"line\"></span><br><span class=\"line\">(装数据库，redis，配docker)</span><br><span class=\"line\"></span><br><span class=\"line\">装nginx(/home/docker-compose/nginx)）（/etc/nginx/nginx.conf）(/root/project/NotionX/dist)</span><br><span class=\"line\">配置nginx代理 /etc/nginx/nginx.conf</span><br><span class=\"line\">nginx status页面账户 nginx/nginx</span><br><span class=\"line\">重启nginx服务 service nginx restart</span><br><span class=\"line\"></span><br><span class=\"line\">阿里云ecs配置防火墙（开启http端口）</span><br><span class=\"line\"></span><br><span class=\"line\">安装nvm</span><br><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br><span class=\"line\">安装node</span><br><span class=\"line\">nvm install v10.15.0</span><br><span class=\"line\">nvm use v10.15.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">装jenkins（v2.7.3）</span><br><span class=\"line\">root用户登录</span><br><span class=\"line\">yum install -y java</span><br><span class=\"line\">wget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm</span><br><span class=\"line\">rpm -ivh jenkins-2.7.3-1.1.noarch.rpm</span><br><span class=\"line\">修改配置 vi /etc/sysconfig/jenkins</span><br><span class=\"line\">vi /etc/sysconfig/jenkins </span><br><span class=\"line\">JENKINS_PORT=&quot;8081&quot; 保存</span><br><span class=\"line\">阿里云ecs防火墙添加 自定义tcp 8081端口</span><br><span class=\"line\">启动重启service jenkins start/stop/restart</span><br><span class=\"line\">打开网页 IP:8081</span><br><span class=\"line\">查看密码：cat /var/lib/jenkins/secrets/initialAdminPassword</span><br><span class=\"line\">ea5e853eab5e4b62bbf5a50daa9151ce</span><br><span class=\"line\">安装推荐插件，等待</span><br><span class=\"line\">创建管理员账户 jenkins 域9.大名</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">查看环境变量</span><br><span class=\"line\">echo $PATH</span><br><span class=\"line\">/root/.nvm/versions/node/v12.16.1/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">网易云服务</span><br><span class=\"line\">cd /srv</span><br><span class=\"line\">添加服务要调用的shell脚本文件</span><br><span class=\"line\">sudo vi  netcloudmusic.sh</span><br></pre></td></tr></table></figure>\n<p>#!/bin/sh<br>npx @nondanee/unblockneteasemusic -s -p 8080<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cd /etc/systemd/system</span><br><span class=\"line\">添加自定义服务</span><br><span class=\"line\">sudo vi  netcloudmusic.service</span><br></pre></td></tr></table></figure></p>\n<p>[Unit]<br>Description=netcloudmusic</p>\n<p>[Service]<br>ExecStart=/bin/sh /srv/netcloudmusic.sh #启动脚本<br>Restart=no<br>User=root<br>Group=root<br>Environment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/.nvm/versions/node/v12.16.1/bin</p>\n<p>[Install]<br>WantedBy=multi-user.target<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给执行权限 chmod +x netcloudmusic.service</span><br><span class=\"line\">启动 systemctl start netcloudmusic</span><br><span class=\"line\">查看状态 systemctl status netcloudmusic.service</span><br><span class=\"line\">更改 service文件后重新加载systemctl daemon-reload</span><br><span class=\"line\">重启 systemctl restart netcloudmusic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jenkins自动构建github-scarsu.com</span><br><span class=\"line\">jenkins安装github插件/node插件</span><br><span class=\"line\">jenkins配置环境变量</span><br><span class=\"line\">\t执行echo $PATH</span><br><span class=\"line\">\t得到环境变量（/home/admin/.nvm/versions/node/v10.15.0/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/admin/.local/bin:/home/admin/bin</span><br><span class=\"line\">\tjenkins-系统管理-系统配置-全局属性-环境变量</span><br><span class=\"line\">\t添加一条</span><br><span class=\"line\">\t\tPATH</span><br><span class=\"line\">\t\t/home/admin/.nvm/versions/node/v10.15.0/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/admin/.local/bin:/home/admin/bin</span><br><span class=\"line\">jenkin创建一个项目 类型github,填上自己的项目仓库地址。</span><br><span class=\"line\">可以选择丢弃旧的构建，这样不会占空间。</span><br><span class=\"line\">策略选择Log Rotation 不知道是什么，但是只能选这个。</span><br><span class=\"line\">源码管理：选git,填仓库地址,验证，配置自己github的账户密码</span><br><span class=\"line\">Branches to build ：填写需要监听的仓库分支。如：*/master</span><br><span class=\"line\">构建触发器：选择GitHub hook trigger for GITScm polling。</span><br><span class=\"line\">构建环境 选择provide node，选择已经安装（在系统工具中安装）的某版本node</span><br><span class=\"line\">执行shell。填写需要执行的命令。这个时候命令行的目录是仓库里最新源码所在的目录。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><p>npm install<br>npm install hexo-cli -g</p>\n<h1 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h1><p>hexo g</p>\n<h1 id=\"转移\"><a href=\"#转移\" class=\"headerlink\" title=\"转移\"></a>转移</h1><p>sudo cp -R ./public/* /var/www/scarsu<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenkins用户添加sudo权限</span><br><span class=\"line\">\tchmod u+w /etc/sudoers</span><br><span class=\"line\">\tvi /etc/sudoers</span><br><span class=\"line\">\t添加一行jenkins ALL=NOPASSWD:ALL</span><br><span class=\"line\">配置github，仓库-settings-webhook-add hook</span><br><span class=\"line\">\tPayload URL：http://scarsu.cn:8081/github-webhook/（jenkins地址/github-webhook）(结尾一定要加/，浪费我一下午时间！！)</span><br><span class=\"line\">\tcontent-type：json</span><br><span class=\"line\">\ttrigger：just push</span><br><span class=\"line\">\tActice：check</span><br><span class=\"line\">配置jenkins 系统配置-Github-高级选项-为 Github 指定另外一个 Hook URL，填写为http://scarsu.cn:8081/github-webhook/，保存</span><br><span class=\"line\">回到jenkins，立即构建：success</span><br><span class=\"line\">代码仓库push测试，构建成功</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jenkins自动构建github-notionx</span><br></pre></td></tr></table></figure></p>\n"},{"title":"1995年JavaScript刚发布时的行业评价","date":"2020-12-04T16:00:00.000Z","description":"1995年JavaScript刚发布时的行业评价","toc":1,"top":0,"_content":"\nhttps://twitter.com/JavaScriptDaily/status/809071560107655168\n\nhttps://www.crockford.com/little.html\n\nhttps://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201205193455.png","source":"_drafts/javascript-comments-of-25-years-ago.md","raw":"---\ntitle: 1995年JavaScript刚发布时的行业评价\ncategories:\n    - 10技术 | 行业信息\ndate: 2020-12-05\ndescription: 1995年JavaScript刚发布时的行业评价\ntoc: 1\ntop: 0\n---\n\nhttps://twitter.com/JavaScriptDaily/status/809071560107655168\n\nhttps://www.crockford.com/little.html\n\nhttps://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201205193455.png","slug":"javascript-comments-of-25-years-ago","published":0,"updated":"2020-12-07T10:05:06.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88iex0006c8y6r0r65c02","content":"<p><a href=\"https://twitter.com/JavaScriptDaily/status/809071560107655168\" target=\"_blank\" rel=\"noopener\">https://twitter.com/JavaScriptDaily/status/809071560107655168</a></p>\n<p><a href=\"https://www.crockford.com/little.html\" target=\"_blank\" rel=\"noopener\">https://www.crockford.com/little.html</a></p>\n<p><a href=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201205193455.png\" target=\"_blank\" rel=\"noopener\">https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201205193455.png</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://twitter.com/JavaScriptDaily/status/809071560107655168\" target=\"_blank\" rel=\"noopener\">https://twitter.com/JavaScriptDaily/status/809071560107655168</a></p>\n<p><a href=\"https://www.crockford.com/little.html\" target=\"_blank\" rel=\"noopener\">https://www.crockford.com/little.html</a></p>\n<p><a href=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201205193455.png\" target=\"_blank\" rel=\"noopener\">https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201205193455.png</a></p>\n"},{"_content":"## 引言\n\nWhat are those strange and mysterious scripts titled \"[VM](XXXX \" and where do they come from?\n\n## what's vm(xxxx)\n\n[VM](scriptId) has no special meaning. It's a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.\n\n为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中\n","source":"_drafts/vm in devtools.md","raw":"## 引言\n\nWhat are those strange and mysterious scripts titled \"[VM](XXXX \" and where do they come from?\n\n## what's vm(xxxx)\n\n[VM](scriptId) has no special meaning. It's a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.\n\n为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中\n","slug":"vm in devtools","published":0,"date":"2020-04-08T00:43:01.215Z","updated":"2020-09-12T05:46:15.306Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88iey0007c8y6u4rsiyoy","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>What are those strange and mysterious scripts titled “[VM](XXXX “ and where do they come from?</p>\n<h2 id=\"what’s-vm-xxxx\"><a href=\"#what’s-vm-xxxx\" class=\"headerlink\" title=\"what’s vm(xxxx)\"></a>what’s vm(xxxx)</h2><p><a href=\"scriptId\">VM</a> has no special meaning. It’s a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.</p>\n<p>为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>What are those strange and mysterious scripts titled “[VM](XXXX “ and where do they come from?</p>\n<h2 id=\"what’s-vm-xxxx\"><a href=\"#what’s-vm-xxxx\" class=\"headerlink\" title=\"what’s vm(xxxx)\"></a>what’s vm(xxxx)</h2><p><a href=\"scriptId\">VM</a> has no special meaning. It’s a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.</p>\n<p>为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中</p>\n"},{"_content":"/* 自定义样式，实时生效，浏览器实时缓存 */\n\n/* 全局属性\n * 页边距 padding: 30px;\n * 全文字体 font-family: ptima-Regular;\n * 英文换行 word-break: break-all;\n */\n#write {\n  font-size:16px;\n  padding:10px;\n  max-width:680px;\n}\n\n/*图片下提示*/\n#write figcaption{\n  font-size:12px;\n}\n#write .imageflow-caption{\n  font-size:12px;\n}\n\n/* 段落，下方未标注标签参数均同此处\n * 上边距 margin-top: 5px;\n * 下边距 margin-bottom: 5px;\n * 行高 line-height: 26px;\n * 词间距 word-spacing: 3px;\n * 字间距 letter-spacing: 3px;\n * 对齐 text-align: left;\n * 颜色 color: #3e3e3e;\n * 字体大小 font-size: 16px;\n * 首行缩进 text-indent: 2em;\n */\n#write p {\n  font-size:16px;\n}\n\n/* 一级标题 */\n#write h1 {\n}\n\n/* 一级标题内容 */\n#write h1 .content {\n}\n\n/* 一级标题前缀 */\n#write h1 .prefix {\n}\n\n/* 一级标题后缀 */\n#write h1 .suffix{\n}\n\n/* 二级标题 */\n/* #write h2 {\n  \ttext-align:center;\n  \tposition:relative;\n    font-weight: bold;\n    color: black;\n    line-height: 1.1em;\n    padding-top: 12px;\n    padding-bottom: 12px;\n    margin:70px 30px 30px;\n    border: 1px solid #000;\n}\n\n#write h2:before{\n  content: ' ';\n  float: left;\n  display: block;\n  width: 90%;\n  border-top: 1px solid #000;\n  height: 1px;\n  line-height: 1px;\n  margin-left: -5px;\n  margin-top: -17px;\n}\n#write h2:after{\n  content: ' ';\n  float: right;\n  display: block;\n  width: 90%;\n  border-bottom: 1px solid #000;\n  height: 1px;\n  line-height: 1px;\n  margin-right: -5px;\n  margin-top: 16px;\n} */\n/* 二级标题内容 */\n/* #write h2 .content {\n  display: block;\n  -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\n}\n#write h2 strong {\n} */\n/* 二级标题前缀 */\n/* #write h2 .prefix {\n  display: block;\n  width: 3px;\n  margin: 0 0 0 5%;\n  height: 3px;\n  line-height: 3px;\n  overflow: hidden;\n  background-color: #000;\n  box-shadow:3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\n} */\n\n/* 二级标题后缀 */\n/* #write h2 .suffix {\n  display: block;\n  width: 3px;\n  margin: 0 0 0 95%;\n  height: 3px;\n  line-height: 3px;\n  overflow: hidden;\n  background-color: #000;\n  box-shadow:3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\n} */\n\n/* 三级标题 */\n#write h2 {\n  background-color:#000;\n  color:#fff;\n  padding:2px 10px;\n  width:fit-content;\n  font-size:17px;\n  margin:60px auto 10px;\n}\n#write h2 strong {\n  color:#fff;\n}\n\n/* 三级标题内容 */\n#write h2 .content {\n}\n\n/* 三级标题前缀 */\n#write h2 .prefix {\n}\n\n/* 三级标题后缀 */\n#write h2 .suffix {\n}\n\n/* 无序列表整体样式\n * list-style-type: square|circle|disc;\n */\n#write ul {\n  list-style-type: square;\n}\n/* 无序二级列表\n */\n#write ul li ul li{\n  list-style-type: circle;\n}\n\n/* 有序列表整体样式\n * list-style-type: upper-roman|lower-greek|lower-alpha;\n */\n#write ol {\n}\n\n/* 列表内容，不要设置li\n */\n#write li section {\n}\n\n/* 引用\n * 左边缘颜色 border-left-color: black;\n * 背景色 background: gray;\n */\n#write blockquote {\n  border-left: 3px solid rgba(0, 0, 0, 0.65);\n  border-right: 1px solid rgba(0, 0, 0, 0.65);\n  background: rgb(249, 249, 249);\n}\n\n/* 引用文字 */\n#write blockquote p {\n}\n\n/* 链接 \n * border-bottom: 1px solid #009688;\n */\n#write a {\n}\n\n/* 加粗 */\n#write strong {\n}\n\n/* 斜体 */\n#write em {\n}\n\n/* 加粗斜体 */\n#write em strong {\n}\n\n/* 删除线 */\n#write del {\n}\n\n/* 分隔线\n * 粗细、样式和颜色\n * border-top: 1px solid #3e3e3e;\n */\n#write hr {\n}\n\n/* 图片\n * 宽度 width: 80%;\n * 居中 margin: 0 auto;\n * 居左 margin: 0 0;\n */\n#write img {\n  box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px;\n  border-radius:4px;\n  margin-top:10px;\n}\n/* 行内代码 */\n#write p code, #write li code {\n  color:#ff6441;\n}\n\n/* 非微信代码块\n * 代码块不换行 display: -webkit-box !important;\n * 代码块换行 display: block;\n */\n#write pre.custom {\n  box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px;\n  max-width: 100%;\n  border-radius:4px;\n  margin: 10px auto 0 auto;\n}\n#write pre code {\n}\n\n/*\n * 表格内的单元格\n * 字体大小 font-size: 16px;\n * 边框 border: 1px solid #ccc;\n * 内边距 padding: 5px 10px;\n */\n#write table tr th,\n#write table tr td {\n  font-size:14px;\n}\n\n/* 脚注文字 */\n#write .footnote-word {\n}\n\n/* 脚注上标 */\n#write .footnote-ref {\n}\n\n/* \"参考资料\"四个字 \n * 内容 content: \"参考资料\";\n */\n#write .footnotes-sep {\n  font-size: 14px;\n  color: #888;\n  border-top: 1px solid #eee;\n  padding: 30px 0 10px 0px;\n  background-color: transparent;\n  margin: 0;\n  width: 100%;\n}\n#write .footnotes-sep:before {\n  content:'参考资料';\n}\n#write .footnotes{\n  border-left:5px solid #eee;\n  padding-left:10px;\n}\n\n/* 参考资料编号 */\n#write .footnote-num {\n  font-size:14px;\n  color:#999;\n}\n\n/* 参考资料文字 */\n#write .footnote-item p { \n  font-size:14px;\n  color:#999;\n}\n\n/* 参考资料解释 */\n#write .footnote-item p em {\n  font-size:14px;\n  color:#999;\n}\n\n/* 行间公式\n * 最大宽度 max-width: 300% !important;\n */\n#write .block-equation svg {\n}\n\n/* 行内公式\n */\n#write .inline-equation svg {  \n}\n/* 文章结尾 */\n#nice:after{\n  content:'- END -';\n  font-size:15px;\n  display:block;\n  text-align:center;\n  margin-top:50px;\n  color:#999;\n  border-bottom:1px solid #eee;\n}\n\n/*滑动幻灯片*/\n#write .imageflow-layer1 img{\n  margin:0;\n  box-shadow: none;\n  border-radius: 0;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n/* tables */\n.md-meta,.md-before, .md-after {\n\tcolor:#999;\n}\n\ntable {\n\tmargin-bottom: 1.5em;\n\t/*24 / 16*/\n\tfont-size: 1em;\n\t/* width: 100%; */\n}\nthead th,\ntfoot th {\n\tpadding: .25em .25em .25em .4em;\n\ttext-transform: uppercase;\n}\nth {\n\ttext-align: left;\n}\ntd {\n\tvertical-align: top;\n}","source":"_drafts/mdnice.css","raw":"/* 自定义样式，实时生效，浏览器实时缓存 */\n\n/* 全局属性\n * 页边距 padding: 30px;\n * 全文字体 font-family: ptima-Regular;\n * 英文换行 word-break: break-all;\n */\n#write {\n  font-size:16px;\n  padding:10px;\n  max-width:680px;\n}\n\n/*图片下提示*/\n#write figcaption{\n  font-size:12px;\n}\n#write .imageflow-caption{\n  font-size:12px;\n}\n\n/* 段落，下方未标注标签参数均同此处\n * 上边距 margin-top: 5px;\n * 下边距 margin-bottom: 5px;\n * 行高 line-height: 26px;\n * 词间距 word-spacing: 3px;\n * 字间距 letter-spacing: 3px;\n * 对齐 text-align: left;\n * 颜色 color: #3e3e3e;\n * 字体大小 font-size: 16px;\n * 首行缩进 text-indent: 2em;\n */\n#write p {\n  font-size:16px;\n}\n\n/* 一级标题 */\n#write h1 {\n}\n\n/* 一级标题内容 */\n#write h1 .content {\n}\n\n/* 一级标题前缀 */\n#write h1 .prefix {\n}\n\n/* 一级标题后缀 */\n#write h1 .suffix{\n}\n\n/* 二级标题 */\n/* #write h2 {\n  \ttext-align:center;\n  \tposition:relative;\n    font-weight: bold;\n    color: black;\n    line-height: 1.1em;\n    padding-top: 12px;\n    padding-bottom: 12px;\n    margin:70px 30px 30px;\n    border: 1px solid #000;\n}\n\n#write h2:before{\n  content: ' ';\n  float: left;\n  display: block;\n  width: 90%;\n  border-top: 1px solid #000;\n  height: 1px;\n  line-height: 1px;\n  margin-left: -5px;\n  margin-top: -17px;\n}\n#write h2:after{\n  content: ' ';\n  float: right;\n  display: block;\n  width: 90%;\n  border-bottom: 1px solid #000;\n  height: 1px;\n  line-height: 1px;\n  margin-right: -5px;\n  margin-top: 16px;\n} */\n/* 二级标题内容 */\n/* #write h2 .content {\n  display: block;\n  -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\n}\n#write h2 strong {\n} */\n/* 二级标题前缀 */\n/* #write h2 .prefix {\n  display: block;\n  width: 3px;\n  margin: 0 0 0 5%;\n  height: 3px;\n  line-height: 3px;\n  overflow: hidden;\n  background-color: #000;\n  box-shadow:3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\n} */\n\n/* 二级标题后缀 */\n/* #write h2 .suffix {\n  display: block;\n  width: 3px;\n  margin: 0 0 0 95%;\n  height: 3px;\n  line-height: 3px;\n  overflow: hidden;\n  background-color: #000;\n  box-shadow:3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\n} */\n\n/* 三级标题 */\n#write h2 {\n  background-color:#000;\n  color:#fff;\n  padding:2px 10px;\n  width:fit-content;\n  font-size:17px;\n  margin:60px auto 10px;\n}\n#write h2 strong {\n  color:#fff;\n}\n\n/* 三级标题内容 */\n#write h2 .content {\n}\n\n/* 三级标题前缀 */\n#write h2 .prefix {\n}\n\n/* 三级标题后缀 */\n#write h2 .suffix {\n}\n\n/* 无序列表整体样式\n * list-style-type: square|circle|disc;\n */\n#write ul {\n  list-style-type: square;\n}\n/* 无序二级列表\n */\n#write ul li ul li{\n  list-style-type: circle;\n}\n\n/* 有序列表整体样式\n * list-style-type: upper-roman|lower-greek|lower-alpha;\n */\n#write ol {\n}\n\n/* 列表内容，不要设置li\n */\n#write li section {\n}\n\n/* 引用\n * 左边缘颜色 border-left-color: black;\n * 背景色 background: gray;\n */\n#write blockquote {\n  border-left: 3px solid rgba(0, 0, 0, 0.65);\n  border-right: 1px solid rgba(0, 0, 0, 0.65);\n  background: rgb(249, 249, 249);\n}\n\n/* 引用文字 */\n#write blockquote p {\n}\n\n/* 链接 \n * border-bottom: 1px solid #009688;\n */\n#write a {\n}\n\n/* 加粗 */\n#write strong {\n}\n\n/* 斜体 */\n#write em {\n}\n\n/* 加粗斜体 */\n#write em strong {\n}\n\n/* 删除线 */\n#write del {\n}\n\n/* 分隔线\n * 粗细、样式和颜色\n * border-top: 1px solid #3e3e3e;\n */\n#write hr {\n}\n\n/* 图片\n * 宽度 width: 80%;\n * 居中 margin: 0 auto;\n * 居左 margin: 0 0;\n */\n#write img {\n  box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px;\n  border-radius:4px;\n  margin-top:10px;\n}\n/* 行内代码 */\n#write p code, #write li code {\n  color:#ff6441;\n}\n\n/* 非微信代码块\n * 代码块不换行 display: -webkit-box !important;\n * 代码块换行 display: block;\n */\n#write pre.custom {\n  box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px;\n  max-width: 100%;\n  border-radius:4px;\n  margin: 10px auto 0 auto;\n}\n#write pre code {\n}\n\n/*\n * 表格内的单元格\n * 字体大小 font-size: 16px;\n * 边框 border: 1px solid #ccc;\n * 内边距 padding: 5px 10px;\n */\n#write table tr th,\n#write table tr td {\n  font-size:14px;\n}\n\n/* 脚注文字 */\n#write .footnote-word {\n}\n\n/* 脚注上标 */\n#write .footnote-ref {\n}\n\n/* \"参考资料\"四个字 \n * 内容 content: \"参考资料\";\n */\n#write .footnotes-sep {\n  font-size: 14px;\n  color: #888;\n  border-top: 1px solid #eee;\n  padding: 30px 0 10px 0px;\n  background-color: transparent;\n  margin: 0;\n  width: 100%;\n}\n#write .footnotes-sep:before {\n  content:'参考资料';\n}\n#write .footnotes{\n  border-left:5px solid #eee;\n  padding-left:10px;\n}\n\n/* 参考资料编号 */\n#write .footnote-num {\n  font-size:14px;\n  color:#999;\n}\n\n/* 参考资料文字 */\n#write .footnote-item p { \n  font-size:14px;\n  color:#999;\n}\n\n/* 参考资料解释 */\n#write .footnote-item p em {\n  font-size:14px;\n  color:#999;\n}\n\n/* 行间公式\n * 最大宽度 max-width: 300% !important;\n */\n#write .block-equation svg {\n}\n\n/* 行内公式\n */\n#write .inline-equation svg {  \n}\n/* 文章结尾 */\n#nice:after{\n  content:'- END -';\n  font-size:15px;\n  display:block;\n  text-align:center;\n  margin-top:50px;\n  color:#999;\n  border-bottom:1px solid #eee;\n}\n\n/*滑动幻灯片*/\n#write .imageflow-layer1 img{\n  margin:0;\n  box-shadow: none;\n  border-radius: 0;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n/* tables */\n.md-meta,.md-before, .md-after {\n\tcolor:#999;\n}\n\ntable {\n\tmargin-bottom: 1.5em;\n\t/*24 / 16*/\n\tfont-size: 1em;\n\t/* width: 100%; */\n}\nthead th,\ntfoot th {\n\tpadding: .25em .25em .25em .4em;\n\ttext-transform: uppercase;\n}\nth {\n\ttext-align: left;\n}\ntd {\n\tvertical-align: top;\n}","slug":"mdnice","published":0,"date":"2020-09-17T10:19:22.703Z","updated":"2020-09-16T02:11:15.820Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88if2000ac8y6bh09v5wg","content":"/* 自定义样式，实时生效，浏览器实时缓存 */\n\n/* 全局属性\n * 页边距 padding: 30px;\n * 全文字体 font-family: ptima-Regular;\n * 英文换行 word-break: break-all;\n */\n#write {\n  font-size:16px;\n  padding:10px;\n  max-width:680px;\n}\n\n/*图片下提示*/\n#write figcaption{\n  font-size:12px;\n}\n#write .imageflow-caption{\n  font-size:12px;\n}\n\n/* 段落，下方未标注标签参数均同此处\n * 上边距 margin-top: 5px;\n * 下边距 margin-bottom: 5px;\n * 行高 line-height: 26px;\n * 词间距 word-spacing: 3px;\n * 字间距 letter-spacing: 3px;\n * 对齐 text-align: left;\n * 颜色 color: #3e3e3e;\n * 字体大小 font-size: 16px;\n * 首行缩进 text-indent: 2em;\n */\n#write p {\n  font-size:16px;\n}\n\n/* 一级标题 */\n#write h1 {\n}\n\n/* 一级标题内容 */\n#write h1 .content {\n}\n\n/* 一级标题前缀 */\n#write h1 .prefix {\n}\n\n/* 一级标题后缀 */\n#write h1 .suffix{\n}\n\n/* 二级标题 */\n/* #write h2 {\n  \ttext-align:center;\n  \tposition:relative;\n    font-weight: bold;\n    color: black;\n    line-height: 1.1em;\n    padding-top: 12px;\n    padding-bottom: 12px;\n    margin:70px 30px 30px;\n    border: 1px solid #000;\n}\n\n#write h2:before{\n  content: ' ';\n  float: left;\n  display: block;\n  width: 90%;\n  border-top: 1px solid #000;\n  height: 1px;\n  line-height: 1px;\n  margin-left: -5px;\n  margin-top: -17px;\n}\n#write h2:after{\n  content: ' ';\n  float: right;\n  display: block;\n  width: 90%;\n  border-bottom: 1px solid #000;\n  height: 1px;\n  line-height: 1px;\n  margin-right: -5px;\n  margin-top: 16px;\n} */\n/* 二级标题内容 */\n/* #write h2 .content {\n  display: block;\n  -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\n}\n#write h2 strong {\n} */\n/* 二级标题前缀 */\n/* #write h2 .prefix {\n  display: block;\n  width: 3px;\n  margin: 0 0 0 5%;\n  height: 3px;\n  line-height: 3px;\n  overflow: hidden;\n  background-color: #000;\n  box-shadow:3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\n} */\n\n/* 二级标题后缀 */\n/* #write h2 .suffix {\n  display: block;\n  width: 3px;\n  margin: 0 0 0 95%;\n  height: 3px;\n  line-height: 3px;\n  overflow: hidden;\n  background-color: #000;\n  box-shadow:3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\n} */\n\n/* 三级标题 */\n#write h2 {\n  background-color:#000;\n  color:#fff;\n  padding:2px 10px;\n  width:fit-content;\n  font-size:17px;\n  margin:60px auto 10px;\n}\n#write h2 strong {\n  color:#fff;\n}\n\n/* 三级标题内容 */\n#write h2 .content {\n}\n\n/* 三级标题前缀 */\n#write h2 .prefix {\n}\n\n/* 三级标题后缀 */\n#write h2 .suffix {\n}\n\n/* 无序列表整体样式\n * list-style-type: square|circle|disc;\n */\n#write ul {\n  list-style-type: square;\n}\n/* 无序二级列表\n */\n#write ul li ul li{\n  list-style-type: circle;\n}\n\n/* 有序列表整体样式\n * list-style-type: upper-roman|lower-greek|lower-alpha;\n */\n#write ol {\n}\n\n/* 列表内容，不要设置li\n */\n#write li section {\n}\n\n/* 引用\n * 左边缘颜色 border-left-color: black;\n * 背景色 background: gray;\n */\n#write blockquote {\n  border-left: 3px solid rgba(0, 0, 0, 0.65);\n  border-right: 1px solid rgba(0, 0, 0, 0.65);\n  background: rgb(249, 249, 249);\n}\n\n/* 引用文字 */\n#write blockquote p {\n}\n\n/* 链接 \n * border-bottom: 1px solid #009688;\n */\n#write a {\n}\n\n/* 加粗 */\n#write strong {\n}\n\n/* 斜体 */\n#write em {\n}\n\n/* 加粗斜体 */\n#write em strong {\n}\n\n/* 删除线 */\n#write del {\n}\n\n/* 分隔线\n * 粗细、样式和颜色\n * border-top: 1px solid #3e3e3e;\n */\n#write hr {\n}\n\n/* 图片\n * 宽度 width: 80%;\n * 居中 margin: 0 auto;\n * 居左 margin: 0 0;\n */\n#write img {\n  box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px;\n  border-radius:4px;\n  margin-top:10px;\n}\n/* 行内代码 */\n#write p code, #write li code {\n  color:#ff6441;\n}\n\n/* 非微信代码块\n * 代码块不换行 display: -webkit-box !important;\n * 代码块换行 display: block;\n */\n#write pre.custom {\n  box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px;\n  max-width: 100%;\n  border-radius:4px;\n  margin: 10px auto 0 auto;\n}\n#write pre code {\n}\n\n/*\n * 表格内的单元格\n * 字体大小 font-size: 16px;\n * 边框 border: 1px solid #ccc;\n * 内边距 padding: 5px 10px;\n */\n#write table tr th,\n#write table tr td {\n  font-size:14px;\n}\n\n/* 脚注文字 */\n#write .footnote-word {\n}\n\n/* 脚注上标 */\n#write .footnote-ref {\n}\n\n/* \"参考资料\"四个字 \n * 内容 content: \"参考资料\";\n */\n#write .footnotes-sep {\n  font-size: 14px;\n  color: #888;\n  border-top: 1px solid #eee;\n  padding: 30px 0 10px 0px;\n  background-color: transparent;\n  margin: 0;\n  width: 100%;\n}\n#write .footnotes-sep:before {\n  content:'参考资料';\n}\n#write .footnotes{\n  border-left:5px solid #eee;\n  padding-left:10px;\n}\n\n/* 参考资料编号 */\n#write .footnote-num {\n  font-size:14px;\n  color:#999;\n}\n\n/* 参考资料文字 */\n#write .footnote-item p { \n  font-size:14px;\n  color:#999;\n}\n\n/* 参考资料解释 */\n#write .footnote-item p em {\n  font-size:14px;\n  color:#999;\n}\n\n/* 行间公式\n * 最大宽度 max-width: 300% !important;\n */\n#write .block-equation svg {\n}\n\n/* 行内公式\n */\n#write .inline-equation svg {  \n}\n/* 文章结尾 */\n#nice:after{\n  content:'- END -';\n  font-size:15px;\n  display:block;\n  text-align:center;\n  margin-top:50px;\n  color:#999;\n  border-bottom:1px solid #eee;\n}\n\n/*滑动幻灯片*/\n#write .imageflow-layer1 img{\n  margin:0;\n  box-shadow: none;\n  border-radius: 0;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n/* tables */\n.md-meta,.md-before, .md-after {\n\tcolor:#999;\n}\n\ntable {\n\tmargin-bottom: 1.5em;\n\t/*24 / 16*/\n\tfont-size: 1em;\n\t/* width: 100%; */\n}\nthead th,\ntfoot th {\n\tpadding: .25em .25em .25em .4em;\n\ttext-transform: uppercase;\n}\nth {\n\ttext-align: left;\n}\ntd {\n\tvertical-align: top;\n}","site":{"data":{}},"excerpt":"","more":"/* 自定义样式，实时生效，浏览器实时缓存 */\n\n/* 全局属性\n * 页边距 padding: 30px;\n * 全文字体 font-family: ptima-Regular;\n * 英文换行 word-break: break-all;\n */\n#write {\n  font-size:16px;\n  padding:10px;\n  max-width:680px;\n}\n\n/*图片下提示*/\n#write figcaption{\n  font-size:12px;\n}\n#write .imageflow-caption{\n  font-size:12px;\n}\n\n/* 段落，下方未标注标签参数均同此处\n * 上边距 margin-top: 5px;\n * 下边距 margin-bottom: 5px;\n * 行高 line-height: 26px;\n * 词间距 word-spacing: 3px;\n * 字间距 letter-spacing: 3px;\n * 对齐 text-align: left;\n * 颜色 color: #3e3e3e;\n * 字体大小 font-size: 16px;\n * 首行缩进 text-indent: 2em;\n */\n#write p {\n  font-size:16px;\n}\n\n/* 一级标题 */\n#write h1 {\n}\n\n/* 一级标题内容 */\n#write h1 .content {\n}\n\n/* 一级标题前缀 */\n#write h1 .prefix {\n}\n\n/* 一级标题后缀 */\n#write h1 .suffix{\n}\n\n/* 二级标题 */\n/* #write h2 {\n  \ttext-align:center;\n  \tposition:relative;\n    font-weight: bold;\n    color: black;\n    line-height: 1.1em;\n    padding-top: 12px;\n    padding-bottom: 12px;\n    margin:70px 30px 30px;\n    border: 1px solid #000;\n}\n\n#write h2:before{\n  content: ' ';\n  float: left;\n  display: block;\n  width: 90%;\n  border-top: 1px solid #000;\n  height: 1px;\n  line-height: 1px;\n  margin-left: -5px;\n  margin-top: -17px;\n}\n#write h2:after{\n  content: ' ';\n  float: right;\n  display: block;\n  width: 90%;\n  border-bottom: 1px solid #000;\n  height: 1px;\n  line-height: 1px;\n  margin-right: -5px;\n  margin-top: 16px;\n} */\n/* 二级标题内容 */\n/* #write h2 .content {\n  display: block;\n  -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));\n}\n#write h2 strong {\n} */\n/* 二级标题前缀 */\n/* #write h2 .prefix {\n  display: block;\n  width: 3px;\n  margin: 0 0 0 5%;\n  height: 3px;\n  line-height: 3px;\n  overflow: hidden;\n  background-color: #000;\n  box-shadow:3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\n} */\n\n/* 二级标题后缀 */\n/* #write h2 .suffix {\n  display: block;\n  width: 3px;\n  margin: 0 0 0 95%;\n  height: 3px;\n  line-height: 3px;\n  overflow: hidden;\n  background-color: #000;\n  box-shadow:3px 0 #000,\n    0 3px #000,\n    -3px 0 #000,\n    0 -3px #000;\n} */\n\n/* 三级标题 */\n#write h2 {\n  background-color:#000;\n  color:#fff;\n  padding:2px 10px;\n  width:fit-content;\n  font-size:17px;\n  margin:60px auto 10px;\n}\n#write h2 strong {\n  color:#fff;\n}\n\n/* 三级标题内容 */\n#write h2 .content {\n}\n\n/* 三级标题前缀 */\n#write h2 .prefix {\n}\n\n/* 三级标题后缀 */\n#write h2 .suffix {\n}\n\n/* 无序列表整体样式\n * list-style-type: square|circle|disc;\n */\n#write ul {\n  list-style-type: square;\n}\n/* 无序二级列表\n */\n#write ul li ul li{\n  list-style-type: circle;\n}\n\n/* 有序列表整体样式\n * list-style-type: upper-roman|lower-greek|lower-alpha;\n */\n#write ol {\n}\n\n/* 列表内容，不要设置li\n */\n#write li section {\n}\n\n/* 引用\n * 左边缘颜色 border-left-color: black;\n * 背景色 background: gray;\n */\n#write blockquote {\n  border-left: 3px solid rgba(0, 0, 0, 0.65);\n  border-right: 1px solid rgba(0, 0, 0, 0.65);\n  background: rgb(249, 249, 249);\n}\n\n/* 引用文字 */\n#write blockquote p {\n}\n\n/* 链接 \n * border-bottom: 1px solid #009688;\n */\n#write a {\n}\n\n/* 加粗 */\n#write strong {\n}\n\n/* 斜体 */\n#write em {\n}\n\n/* 加粗斜体 */\n#write em strong {\n}\n\n/* 删除线 */\n#write del {\n}\n\n/* 分隔线\n * 粗细、样式和颜色\n * border-top: 1px solid #3e3e3e;\n */\n#write hr {\n}\n\n/* 图片\n * 宽度 width: 80%;\n * 居中 margin: 0 auto;\n * 居左 margin: 0 0;\n */\n#write img {\n  box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px;\n  border-radius:4px;\n  margin-top:10px;\n}\n/* 行内代码 */\n#write p code, #write li code {\n  color:#ff6441;\n}\n\n/* 非微信代码块\n * 代码块不换行 display: -webkit-box !important;\n * 代码块换行 display: block;\n */\n#write pre.custom {\n  box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px;\n  max-width: 100%;\n  border-radius:4px;\n  margin: 10px auto 0 auto;\n}\n#write pre code {\n}\n\n/*\n * 表格内的单元格\n * 字体大小 font-size: 16px;\n * 边框 border: 1px solid #ccc;\n * 内边距 padding: 5px 10px;\n */\n#write table tr th,\n#write table tr td {\n  font-size:14px;\n}\n\n/* 脚注文字 */\n#write .footnote-word {\n}\n\n/* 脚注上标 */\n#write .footnote-ref {\n}\n\n/* \"参考资料\"四个字 \n * 内容 content: \"参考资料\";\n */\n#write .footnotes-sep {\n  font-size: 14px;\n  color: #888;\n  border-top: 1px solid #eee;\n  padding: 30px 0 10px 0px;\n  background-color: transparent;\n  margin: 0;\n  width: 100%;\n}\n#write .footnotes-sep:before {\n  content:'参考资料';\n}\n#write .footnotes{\n  border-left:5px solid #eee;\n  padding-left:10px;\n}\n\n/* 参考资料编号 */\n#write .footnote-num {\n  font-size:14px;\n  color:#999;\n}\n\n/* 参考资料文字 */\n#write .footnote-item p { \n  font-size:14px;\n  color:#999;\n}\n\n/* 参考资料解释 */\n#write .footnote-item p em {\n  font-size:14px;\n  color:#999;\n}\n\n/* 行间公式\n * 最大宽度 max-width: 300% !important;\n */\n#write .block-equation svg {\n}\n\n/* 行内公式\n */\n#write .inline-equation svg {  \n}\n/* 文章结尾 */\n#nice:after{\n  content:'- END -';\n  font-size:15px;\n  display:block;\n  text-align:center;\n  margin-top:50px;\n  color:#999;\n  border-bottom:1px solid #eee;\n}\n\n/*滑动幻灯片*/\n#write .imageflow-layer1 img{\n  margin:0;\n  box-shadow: none;\n  border-radius: 0;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n/* tables */\n.md-meta,.md-before, .md-after {\n\tcolor:#999;\n}\n\ntable {\n\tmargin-bottom: 1.5em;\n\t/*24 / 16*/\n\tfont-size: 1em;\n\t/* width: 100%; */\n}\nthead th,\ntfoot th {\n\tpadding: .25em .25em .25em .4em;\n\ttext-transform: uppercase;\n}\nth {\n\ttext-align: left;\n}\ntd {\n\tvertical-align: top;\n}"},{"title":"【State of JS】2018年度javascript行业报告","date":"2018-12-30T16:00:00.000Z","description":"JavaScript生态圈总是在变化。新的库，新的框架，新的语言..这有时是有乐趣的，但有时也会让人感到压力。","toc":1,"top":0,"_content":"\n![](/images/stateofjs/000.png)\n\n# 数据来源\n\n来自 153 个不同的国家\n\n共 20,268 名 JavaScript 开发者参与调查\n\n中国占总数的 0.37%，共 75 个开发者\n\n(因此本调查报告整体上能反映全球范围的 Javascript 发展趋势，但对国内情况不具有代表性)\n\n**调查参与者 国家分布图：**\n\n![](/images/stateofjs/1.png)\n\n**调查参与者 薪资分布图：**\n\n![](/images/stateofjs/2.png)\n\n**调查参与者 开发经验分布图：**\n\n![](/images/stateofjs/3.png)\n\n**调查参与者 所属公司体量分布图：**\n\n![](/images/stateofjs/4.png)\n\n**调查参与者 性别分布图：**\n\n![](/images/stateofjs/5.png)\n\n# 调查结果\n\n## 1.JavaScript Flavors\n\n可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集\n\n![](/images/stateofjs/6.png)\n\n## 2.前端框架 Front-end Frameworks\n\n![](/images/stateofjs/7.png)\n\n## 3.数据层 Data Layer\n\n![](/images/stateofjs/8.png)\n\n## 4.后端框架 Back-end Frameworks\n\n![](/images/stateofjs/9.png)\n\n## 5.测试 Testing\n\n![](/images/stateofjs/10.png)\n\n## 6.移动端/客户端 Mobile & Desktop\n\n![](/images/stateofjs/11.png)\n\n## 7.js 开发者使用的其他语言 Other Languages\n\n![](/images/stateofjs/12.png)\n\n## 8.浏览器 API Browser APIs\n\n![](/images/stateofjs/13.png)\n\n## 9.构建工具 Build Tools\n\n![](/images/stateofjs/14.png)\n\n## 10.函数库 Utility Libraries\n\n![](/images/stateofjs/15.png)\n\n## 11.编辑器 Text Editors\n\n![](/images/stateofjs/16.png)\n\n## 12.js 开发者的使用感受+期望\n\n**“Javascript 正在往正确的方向发展”**\n\n![](/images/stateofjs/17.png)\n\n**“当下构建 Javascript app 过于复杂惹”**\n\n![](/images/stateofjs/18.png)\n\n**“Javascript 被过度使用”**\n\n![](/images/stateofjs/19.png)\n\n**“我喜欢构建 JavaScript 应用程序”**\n\n![](/images/stateofjs/20.png)\n\n**“我希望 JavaScript 成为我的主要编程语言”**\n\n![](/images/stateofjs/21.png)\n\n**“JavaScript 生态系统变化太快”**\n\n![](/images/stateofjs/22.png)\n\n**“这项调查太长惹！”**\n\n![](/images/stateofjs/23.png)\n\n# 年度之最\n\n-   **最满意: Jest**\n\n> 96.5%的使用者表示会再次使用\n\n-   **最感兴趣: GraphQL**\n\n> 听说过 GraphQL 的开发者中有 87.7%表示想要学习\n\n-   **最多提及: Vuex**\n\n> 在“other libraries”提问中最多被提及的库\n\n-   **最多使用: React**\n\n> 年度被使用最多的库，参与调查者中有 14417 位使用 React\n\n-   **最黑马: Reason**\n\n> Facebook 带来的 崭露头角的 新技术，也许会像 React 和 GraphQL 一样受欢迎?\n\n-   **最特别: VSCode**\n\n> 我们今年刚刚爱上并无法自拔的工具\n\n# 参赛选手信息\n\n### Javascript Flavors\n\n-   ES6\n\n> ECMA-262 标准的 Edition6(目前已经发布到 ECMA-262 2018/Edition 9)，是 javascript 的规范\n>\n> https://github.com/tc39/ecma262#ecmascript\n\n-   Typescript\n\n> 由微软开发的 添加了可选的静态类型和基于类的面向对象编程 的 JS 超集\n>\n> https://github.com/Microsoft/TypeScript\n\n-   Flow\n\n> JavaScript 添加静态类型检查器\n>\n> https://github.com/facebook/flow\n\n-   Reason\n\n> 简单,快速,类型安全,利用 JavaScript 和 OCaml 生态系统的库\n>\n> http://reasonml.github.io/\n\n-   Elm\n\n> 生成具有出色性能且没有运行时异常的 JavaScript 的语言。\n>\n> https://elm-lang.org/\n\n-   ClojureScript\n\n> ClojureScript 是将 Clojure 成 JavaScript 的编译器。\n>\n> https://clojurescript.org/\n\n### 前端框架\n\n-   React\n\n> React 是一个用于设计用户界面的开源 JavaScript 库。\n>\n> https://github.com/facebook/react\n\n-   Vue.js\n\n> 一套用于构建用户界面的渐进式框架\n>\n> https://cn.vuejs.org/\n\n-   Angular\n\n> 基于 TypeScript 的开源前端 Web 应用程序平台。\n>\n> https://angular.io/\n\n-   Preact\n\n> 3kB 大小的 使用相同的现代 API 的 React 快速替代方案，拥有组件和虚拟 DOM。\n>\n> https://github.com/developit/preact\n\n-   Ember\n\n> 用于创建大型的 Web 应用程序的 JavaScript 框架\n>\n> https://github.com/emberjs/ember.js\n\n-   Polymer\n\n> Web 组件库\n>\n> https://github.com/Polymer/polymer\n\n### 数据层\n\n-   Redux\n\n> JavaScript 应用程序的可预测状态容器\n>\n> https://github.com/reduxjs/redux\n\n-   GraphQL\n\n> 一种与后端服务相关联的查询语言和执行引擎\n>\n> https://github.com/facebook/graphql\n\n-   Apollo\n\n> 适用于每个 UI 框架和 GraphQL 服务器的功能齐全的 可用于生产的 缓存 GraphQL 客户端\n>\n> https://github.com/apollographql/apollo-client\n\n-   MobX\n\n> 简单，可扩展的状态管理\n>\n> https://github.com/mobxjs/mobx\n\n-   Relay/Relay Modern\n\n> Relay 是一个用于构建数据驱动的 React 应用程序的 JavaScript 框架\n>\n> https://github.com/facebook/relay\n\n### 后端框架\n\n-   Express\n\n> 快速简单的 Node 框架\n>\n> https://github.com/expressjs/express\n\n-   Next.js\n\n> 一个多功能 React 服务端框架\n>\n> https://nextjs.org\n\n-   Koa\n\n> 使用 ES2017 异步函数的 node.js 的中间件\n>\n> https://github.com/koajs/koa\n\n-   Meteor\n\n> JavaScript 应用程序平台\n>\n> https://github.com/meteor/meteor\n\n-   Sails\n\n> Node.js 的实时 MVC 框架\n>\n> https://github.com/balderdashy/sails\n\n-   FeathersJS\n\n> 适用于现代应用程序的 REST 和实时 API 层\n> https://github.com/feathersjs/feathers\n\n### Javascript 测试工具\n\n-   Jest\n\n> 令人愉快的 JavaScript 测试工具\n>\n> https://jestjs.io/\n\n-   Mocha\n\n> node.js 和浏览器的简单，灵活，有趣的 javascript 测试框架\n>\n> https://github.com/mochajs/mocha\n\n-   Jasmine\n\n> 适用于浏览器和 node.js 的简单 JavaScript 测试框架\n>\n> https://github.com/jasmine/jasmine\n\n-   Enzyme\n\n> 用于 React 的 JavaScript 测试实用程序\n>\n> https://github.com/airbnb/enzyme\n\n-   Karma\n\n> 健壮的 Javascript 测试工具\n>\n> https://github.com/karma-runner/karma\n\n-   Storybook\n\n> 用于交互式 UI 组件：React，React Native，Vue，Angular，Ember 的开发和测试工具\n>\n> https://github.com/storybooks/storybook\n\n-   Ava\n\n> 未来的 JavaScript 测试工具\n>\n> https://github.com/avajs/ava\n\n### 移动端/客户端\n\n-   Electron\n\n> 使用 JavaScript，HTML 和 CSS 构建跨平台桌面应用程序\n>\n> https://github.com/electron/electron\n\n-   React Native\n\n> 使用 React 构建应用程序的框架\n>\n> https://github.com/facebook/react-native\n\n-   Native Apps\n\n> 原生客户端 App 语言：Java, Kotlin, Objective-C, or Swift 等\n\n-   Cordova\n\n> 移动应用程序开发框架\n>\n> https://cordova.apache.org/\n\n-   Ionic\n\n> 使用开放式 Web 技术构建的原生和渐进式 Web 应用\n>\n> https://github.com/ionic-team/ionic\n\n-   NativeScript\n\n> 用于使用 JavaScript 构建移动端应用程序的开源框架。使用 Web 技能，如 Angular 和 Vue.js，FlexBox 和 CSS，并在 iOS 和 Android 上获得原生 UI 和性能\n>\n> https://github.com/NativeScript/NativeScript\n","source":"_posts/2018_javascript_report.md","raw":"---\ntitle: 【State of JS】2018年度javascript行业报告\ncategories:\n    - 10技术 | 行业信息\ntags:\n    - stateOfJs\ndate: 2018-12-31\ndescription: JavaScript生态圈总是在变化。新的库，新的框架，新的语言..这有时是有乐趣的，但有时也会让人感到压力。\ntoc: 1\ntop: 0\n---\n\n![](/images/stateofjs/000.png)\n\n# 数据来源\n\n来自 153 个不同的国家\n\n共 20,268 名 JavaScript 开发者参与调查\n\n中国占总数的 0.37%，共 75 个开发者\n\n(因此本调查报告整体上能反映全球范围的 Javascript 发展趋势，但对国内情况不具有代表性)\n\n**调查参与者 国家分布图：**\n\n![](/images/stateofjs/1.png)\n\n**调查参与者 薪资分布图：**\n\n![](/images/stateofjs/2.png)\n\n**调查参与者 开发经验分布图：**\n\n![](/images/stateofjs/3.png)\n\n**调查参与者 所属公司体量分布图：**\n\n![](/images/stateofjs/4.png)\n\n**调查参与者 性别分布图：**\n\n![](/images/stateofjs/5.png)\n\n# 调查结果\n\n## 1.JavaScript Flavors\n\n可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集\n\n![](/images/stateofjs/6.png)\n\n## 2.前端框架 Front-end Frameworks\n\n![](/images/stateofjs/7.png)\n\n## 3.数据层 Data Layer\n\n![](/images/stateofjs/8.png)\n\n## 4.后端框架 Back-end Frameworks\n\n![](/images/stateofjs/9.png)\n\n## 5.测试 Testing\n\n![](/images/stateofjs/10.png)\n\n## 6.移动端/客户端 Mobile & Desktop\n\n![](/images/stateofjs/11.png)\n\n## 7.js 开发者使用的其他语言 Other Languages\n\n![](/images/stateofjs/12.png)\n\n## 8.浏览器 API Browser APIs\n\n![](/images/stateofjs/13.png)\n\n## 9.构建工具 Build Tools\n\n![](/images/stateofjs/14.png)\n\n## 10.函数库 Utility Libraries\n\n![](/images/stateofjs/15.png)\n\n## 11.编辑器 Text Editors\n\n![](/images/stateofjs/16.png)\n\n## 12.js 开发者的使用感受+期望\n\n**“Javascript 正在往正确的方向发展”**\n\n![](/images/stateofjs/17.png)\n\n**“当下构建 Javascript app 过于复杂惹”**\n\n![](/images/stateofjs/18.png)\n\n**“Javascript 被过度使用”**\n\n![](/images/stateofjs/19.png)\n\n**“我喜欢构建 JavaScript 应用程序”**\n\n![](/images/stateofjs/20.png)\n\n**“我希望 JavaScript 成为我的主要编程语言”**\n\n![](/images/stateofjs/21.png)\n\n**“JavaScript 生态系统变化太快”**\n\n![](/images/stateofjs/22.png)\n\n**“这项调查太长惹！”**\n\n![](/images/stateofjs/23.png)\n\n# 年度之最\n\n-   **最满意: Jest**\n\n> 96.5%的使用者表示会再次使用\n\n-   **最感兴趣: GraphQL**\n\n> 听说过 GraphQL 的开发者中有 87.7%表示想要学习\n\n-   **最多提及: Vuex**\n\n> 在“other libraries”提问中最多被提及的库\n\n-   **最多使用: React**\n\n> 年度被使用最多的库，参与调查者中有 14417 位使用 React\n\n-   **最黑马: Reason**\n\n> Facebook 带来的 崭露头角的 新技术，也许会像 React 和 GraphQL 一样受欢迎?\n\n-   **最特别: VSCode**\n\n> 我们今年刚刚爱上并无法自拔的工具\n\n# 参赛选手信息\n\n### Javascript Flavors\n\n-   ES6\n\n> ECMA-262 标准的 Edition6(目前已经发布到 ECMA-262 2018/Edition 9)，是 javascript 的规范\n>\n> https://github.com/tc39/ecma262#ecmascript\n\n-   Typescript\n\n> 由微软开发的 添加了可选的静态类型和基于类的面向对象编程 的 JS 超集\n>\n> https://github.com/Microsoft/TypeScript\n\n-   Flow\n\n> JavaScript 添加静态类型检查器\n>\n> https://github.com/facebook/flow\n\n-   Reason\n\n> 简单,快速,类型安全,利用 JavaScript 和 OCaml 生态系统的库\n>\n> http://reasonml.github.io/\n\n-   Elm\n\n> 生成具有出色性能且没有运行时异常的 JavaScript 的语言。\n>\n> https://elm-lang.org/\n\n-   ClojureScript\n\n> ClojureScript 是将 Clojure 成 JavaScript 的编译器。\n>\n> https://clojurescript.org/\n\n### 前端框架\n\n-   React\n\n> React 是一个用于设计用户界面的开源 JavaScript 库。\n>\n> https://github.com/facebook/react\n\n-   Vue.js\n\n> 一套用于构建用户界面的渐进式框架\n>\n> https://cn.vuejs.org/\n\n-   Angular\n\n> 基于 TypeScript 的开源前端 Web 应用程序平台。\n>\n> https://angular.io/\n\n-   Preact\n\n> 3kB 大小的 使用相同的现代 API 的 React 快速替代方案，拥有组件和虚拟 DOM。\n>\n> https://github.com/developit/preact\n\n-   Ember\n\n> 用于创建大型的 Web 应用程序的 JavaScript 框架\n>\n> https://github.com/emberjs/ember.js\n\n-   Polymer\n\n> Web 组件库\n>\n> https://github.com/Polymer/polymer\n\n### 数据层\n\n-   Redux\n\n> JavaScript 应用程序的可预测状态容器\n>\n> https://github.com/reduxjs/redux\n\n-   GraphQL\n\n> 一种与后端服务相关联的查询语言和执行引擎\n>\n> https://github.com/facebook/graphql\n\n-   Apollo\n\n> 适用于每个 UI 框架和 GraphQL 服务器的功能齐全的 可用于生产的 缓存 GraphQL 客户端\n>\n> https://github.com/apollographql/apollo-client\n\n-   MobX\n\n> 简单，可扩展的状态管理\n>\n> https://github.com/mobxjs/mobx\n\n-   Relay/Relay Modern\n\n> Relay 是一个用于构建数据驱动的 React 应用程序的 JavaScript 框架\n>\n> https://github.com/facebook/relay\n\n### 后端框架\n\n-   Express\n\n> 快速简单的 Node 框架\n>\n> https://github.com/expressjs/express\n\n-   Next.js\n\n> 一个多功能 React 服务端框架\n>\n> https://nextjs.org\n\n-   Koa\n\n> 使用 ES2017 异步函数的 node.js 的中间件\n>\n> https://github.com/koajs/koa\n\n-   Meteor\n\n> JavaScript 应用程序平台\n>\n> https://github.com/meteor/meteor\n\n-   Sails\n\n> Node.js 的实时 MVC 框架\n>\n> https://github.com/balderdashy/sails\n\n-   FeathersJS\n\n> 适用于现代应用程序的 REST 和实时 API 层\n> https://github.com/feathersjs/feathers\n\n### Javascript 测试工具\n\n-   Jest\n\n> 令人愉快的 JavaScript 测试工具\n>\n> https://jestjs.io/\n\n-   Mocha\n\n> node.js 和浏览器的简单，灵活，有趣的 javascript 测试框架\n>\n> https://github.com/mochajs/mocha\n\n-   Jasmine\n\n> 适用于浏览器和 node.js 的简单 JavaScript 测试框架\n>\n> https://github.com/jasmine/jasmine\n\n-   Enzyme\n\n> 用于 React 的 JavaScript 测试实用程序\n>\n> https://github.com/airbnb/enzyme\n\n-   Karma\n\n> 健壮的 Javascript 测试工具\n>\n> https://github.com/karma-runner/karma\n\n-   Storybook\n\n> 用于交互式 UI 组件：React，React Native，Vue，Angular，Ember 的开发和测试工具\n>\n> https://github.com/storybooks/storybook\n\n-   Ava\n\n> 未来的 JavaScript 测试工具\n>\n> https://github.com/avajs/ava\n\n### 移动端/客户端\n\n-   Electron\n\n> 使用 JavaScript，HTML 和 CSS 构建跨平台桌面应用程序\n>\n> https://github.com/electron/electron\n\n-   React Native\n\n> 使用 React 构建应用程序的框架\n>\n> https://github.com/facebook/react-native\n\n-   Native Apps\n\n> 原生客户端 App 语言：Java, Kotlin, Objective-C, or Swift 等\n\n-   Cordova\n\n> 移动应用程序开发框架\n>\n> https://cordova.apache.org/\n\n-   Ionic\n\n> 使用开放式 Web 技术构建的原生和渐进式 Web 应用\n>\n> https://github.com/ionic-team/ionic\n\n-   NativeScript\n\n> 用于使用 JavaScript 构建移动端应用程序的开源框架。使用 Web 技能，如 Angular 和 Vue.js，FlexBox 和 CSS，并在 iOS 和 Android 上获得原生 UI 和性能\n>\n> https://github.com/NativeScript/NativeScript\n","slug":"2018_javascript_report","published":1,"updated":"2021-01-22T09:59:16.977Z","_id":"ckir88if6000ec8y653nxnc39","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/stateofjs/000.png\" alt></p>\n<h1 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h1><p>来自 153 个不同的国家</p>\n<p>共 20,268 名 JavaScript 开发者参与调查</p>\n<p>中国占总数的 0.37%，共 75 个开发者</p>\n<p>(因此本调查报告整体上能反映全球范围的 Javascript 发展趋势，但对国内情况不具有代表性)</p>\n<p><strong>调查参与者 国家分布图：</strong></p>\n<p><img src=\"/images/stateofjs/1.png\" alt></p>\n<p><strong>调查参与者 薪资分布图：</strong></p>\n<p><img src=\"/images/stateofjs/2.png\" alt></p>\n<p><strong>调查参与者 开发经验分布图：</strong></p>\n<p><img src=\"/images/stateofjs/3.png\" alt></p>\n<p><strong>调查参与者 所属公司体量分布图：</strong></p>\n<p><img src=\"/images/stateofjs/4.png\" alt></p>\n<p><strong>调查参与者 性别分布图：</strong></p>\n<p><img src=\"/images/stateofjs/5.png\" alt></p>\n<h1 id=\"调查结果\"><a href=\"#调查结果\" class=\"headerlink\" title=\"调查结果\"></a>调查结果</h1><h2 id=\"1-JavaScript-Flavors\"><a href=\"#1-JavaScript-Flavors\" class=\"headerlink\" title=\"1.JavaScript Flavors\"></a>1.JavaScript Flavors</h2><p>可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集</p>\n<p><img src=\"/images/stateofjs/6.png\" alt></p>\n<h2 id=\"2-前端框架-Front-end-Frameworks\"><a href=\"#2-前端框架-Front-end-Frameworks\" class=\"headerlink\" title=\"2.前端框架 Front-end Frameworks\"></a>2.前端框架 Front-end Frameworks</h2><p><img src=\"/images/stateofjs/7.png\" alt></p>\n<h2 id=\"3-数据层-Data-Layer\"><a href=\"#3-数据层-Data-Layer\" class=\"headerlink\" title=\"3.数据层 Data Layer\"></a>3.数据层 Data Layer</h2><p><img src=\"/images/stateofjs/8.png\" alt></p>\n<h2 id=\"4-后端框架-Back-end-Frameworks\"><a href=\"#4-后端框架-Back-end-Frameworks\" class=\"headerlink\" title=\"4.后端框架 Back-end Frameworks\"></a>4.后端框架 Back-end Frameworks</h2><p><img src=\"/images/stateofjs/9.png\" alt></p>\n<h2 id=\"5-测试-Testing\"><a href=\"#5-测试-Testing\" class=\"headerlink\" title=\"5.测试 Testing\"></a>5.测试 Testing</h2><p><img src=\"/images/stateofjs/10.png\" alt></p>\n<h2 id=\"6-移动端-客户端-Mobile-amp-Desktop\"><a href=\"#6-移动端-客户端-Mobile-amp-Desktop\" class=\"headerlink\" title=\"6.移动端/客户端 Mobile &amp; Desktop\"></a>6.移动端/客户端 Mobile &amp; Desktop</h2><p><img src=\"/images/stateofjs/11.png\" alt></p>\n<h2 id=\"7-js-开发者使用的其他语言-Other-Languages\"><a href=\"#7-js-开发者使用的其他语言-Other-Languages\" class=\"headerlink\" title=\"7.js 开发者使用的其他语言 Other Languages\"></a>7.js 开发者使用的其他语言 Other Languages</h2><p><img src=\"/images/stateofjs/12.png\" alt></p>\n<h2 id=\"8-浏览器-API-Browser-APIs\"><a href=\"#8-浏览器-API-Browser-APIs\" class=\"headerlink\" title=\"8.浏览器 API Browser APIs\"></a>8.浏览器 API Browser APIs</h2><p><img src=\"/images/stateofjs/13.png\" alt></p>\n<h2 id=\"9-构建工具-Build-Tools\"><a href=\"#9-构建工具-Build-Tools\" class=\"headerlink\" title=\"9.构建工具 Build Tools\"></a>9.构建工具 Build Tools</h2><p><img src=\"/images/stateofjs/14.png\" alt></p>\n<h2 id=\"10-函数库-Utility-Libraries\"><a href=\"#10-函数库-Utility-Libraries\" class=\"headerlink\" title=\"10.函数库 Utility Libraries\"></a>10.函数库 Utility Libraries</h2><p><img src=\"/images/stateofjs/15.png\" alt></p>\n<h2 id=\"11-编辑器-Text-Editors\"><a href=\"#11-编辑器-Text-Editors\" class=\"headerlink\" title=\"11.编辑器 Text Editors\"></a>11.编辑器 Text Editors</h2><p><img src=\"/images/stateofjs/16.png\" alt></p>\n<h2 id=\"12-js-开发者的使用感受-期望\"><a href=\"#12-js-开发者的使用感受-期望\" class=\"headerlink\" title=\"12.js 开发者的使用感受+期望\"></a>12.js 开发者的使用感受+期望</h2><p><strong>“Javascript 正在往正确的方向发展”</strong></p>\n<p><img src=\"/images/stateofjs/17.png\" alt></p>\n<p><strong>“当下构建 Javascript app 过于复杂惹”</strong></p>\n<p><img src=\"/images/stateofjs/18.png\" alt></p>\n<p><strong>“Javascript 被过度使用”</strong></p>\n<p><img src=\"/images/stateofjs/19.png\" alt></p>\n<p><strong>“我喜欢构建 JavaScript 应用程序”</strong></p>\n<p><img src=\"/images/stateofjs/20.png\" alt></p>\n<p><strong>“我希望 JavaScript 成为我的主要编程语言”</strong></p>\n<p><img src=\"/images/stateofjs/21.png\" alt></p>\n<p><strong>“JavaScript 生态系统变化太快”</strong></p>\n<p><img src=\"/images/stateofjs/22.png\" alt></p>\n<p><strong>“这项调查太长惹！”</strong></p>\n<p><img src=\"/images/stateofjs/23.png\" alt></p>\n<h1 id=\"年度之最\"><a href=\"#年度之最\" class=\"headerlink\" title=\"年度之最\"></a>年度之最</h1><ul>\n<li><strong>最满意: Jest</strong></li>\n</ul>\n<blockquote>\n<p>96.5%的使用者表示会再次使用</p>\n</blockquote>\n<ul>\n<li><strong>最感兴趣: GraphQL</strong></li>\n</ul>\n<blockquote>\n<p>听说过 GraphQL 的开发者中有 87.7%表示想要学习</p>\n</blockquote>\n<ul>\n<li><strong>最多提及: Vuex</strong></li>\n</ul>\n<blockquote>\n<p>在“other libraries”提问中最多被提及的库</p>\n</blockquote>\n<ul>\n<li><strong>最多使用: React</strong></li>\n</ul>\n<blockquote>\n<p>年度被使用最多的库，参与调查者中有 14417 位使用 React</p>\n</blockquote>\n<ul>\n<li><strong>最黑马: Reason</strong></li>\n</ul>\n<blockquote>\n<p>Facebook 带来的 崭露头角的 新技术，也许会像 React 和 GraphQL 一样受欢迎?</p>\n</blockquote>\n<ul>\n<li><strong>最特别: VSCode</strong></li>\n</ul>\n<blockquote>\n<p>我们今年刚刚爱上并无法自拔的工具</p>\n</blockquote>\n<h1 id=\"参赛选手信息\"><a href=\"#参赛选手信息\" class=\"headerlink\" title=\"参赛选手信息\"></a>参赛选手信息</h1><h3 id=\"Javascript-Flavors\"><a href=\"#Javascript-Flavors\" class=\"headerlink\" title=\"Javascript Flavors\"></a>Javascript Flavors</h3><ul>\n<li>ES6</li>\n</ul>\n<blockquote>\n<p>ECMA-262 标准的 Edition6(目前已经发布到 ECMA-262 2018/Edition 9)，是 javascript 的规范</p>\n<p><a href=\"https://github.com/tc39/ecma262#ecmascript\" target=\"_blank\" rel=\"noopener\">https://github.com/tc39/ecma262#ecmascript</a></p>\n</blockquote>\n<ul>\n<li>Typescript</li>\n</ul>\n<blockquote>\n<p>由微软开发的 添加了可选的静态类型和基于类的面向对象编程 的 JS 超集</p>\n<p><a href=\"https://github.com/Microsoft/TypeScript\" target=\"_blank\" rel=\"noopener\">https://github.com/Microsoft/TypeScript</a></p>\n</blockquote>\n<ul>\n<li>Flow</li>\n</ul>\n<blockquote>\n<p>JavaScript 添加静态类型检查器</p>\n<p><a href=\"https://github.com/facebook/flow\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/flow</a></p>\n</blockquote>\n<ul>\n<li>Reason</li>\n</ul>\n<blockquote>\n<p>简单,快速,类型安全,利用 JavaScript 和 OCaml 生态系统的库</p>\n<p><a href=\"http://reasonml.github.io/\" target=\"_blank\" rel=\"noopener\">http://reasonml.github.io/</a></p>\n</blockquote>\n<ul>\n<li>Elm</li>\n</ul>\n<blockquote>\n<p>生成具有出色性能且没有运行时异常的 JavaScript 的语言。</p>\n<p><a href=\"https://elm-lang.org/\" target=\"_blank\" rel=\"noopener\">https://elm-lang.org/</a></p>\n</blockquote>\n<ul>\n<li>ClojureScript</li>\n</ul>\n<blockquote>\n<p>ClojureScript 是将 Clojure 成 JavaScript 的编译器。</p>\n<p><a href=\"https://clojurescript.org/\" target=\"_blank\" rel=\"noopener\">https://clojurescript.org/</a></p>\n</blockquote>\n<h3 id=\"前端框架\"><a href=\"#前端框架\" class=\"headerlink\" title=\"前端框架\"></a>前端框架</h3><ul>\n<li>React</li>\n</ul>\n<blockquote>\n<p>React 是一个用于设计用户界面的开源 JavaScript 库。</p>\n<p><a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react</a></p>\n</blockquote>\n<ul>\n<li>Vue.js</li>\n</ul>\n<blockquote>\n<p>一套用于构建用户界面的渐进式框架</p>\n<p><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/</a></p>\n</blockquote>\n<ul>\n<li>Angular</li>\n</ul>\n<blockquote>\n<p>基于 TypeScript 的开源前端 Web 应用程序平台。</p>\n<p><a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">https://angular.io/</a></p>\n</blockquote>\n<ul>\n<li>Preact</li>\n</ul>\n<blockquote>\n<p>3kB 大小的 使用相同的现代 API 的 React 快速替代方案，拥有组件和虚拟 DOM。</p>\n<p><a href=\"https://github.com/developit/preact\" target=\"_blank\" rel=\"noopener\">https://github.com/developit/preact</a></p>\n</blockquote>\n<ul>\n<li>Ember</li>\n</ul>\n<blockquote>\n<p>用于创建大型的 Web 应用程序的 JavaScript 框架</p>\n<p><a href=\"https://github.com/emberjs/ember.js\" target=\"_blank\" rel=\"noopener\">https://github.com/emberjs/ember.js</a></p>\n</blockquote>\n<ul>\n<li>Polymer</li>\n</ul>\n<blockquote>\n<p>Web 组件库</p>\n<p><a href=\"https://github.com/Polymer/polymer\" target=\"_blank\" rel=\"noopener\">https://github.com/Polymer/polymer</a></p>\n</blockquote>\n<h3 id=\"数据层\"><a href=\"#数据层\" class=\"headerlink\" title=\"数据层\"></a>数据层</h3><ul>\n<li>Redux</li>\n</ul>\n<blockquote>\n<p>JavaScript 应用程序的可预测状态容器</p>\n<p><a href=\"https://github.com/reduxjs/redux\" target=\"_blank\" rel=\"noopener\">https://github.com/reduxjs/redux</a></p>\n</blockquote>\n<ul>\n<li>GraphQL</li>\n</ul>\n<blockquote>\n<p>一种与后端服务相关联的查询语言和执行引擎</p>\n<p><a href=\"https://github.com/facebook/graphql\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/graphql</a></p>\n</blockquote>\n<ul>\n<li>Apollo</li>\n</ul>\n<blockquote>\n<p>适用于每个 UI 框架和 GraphQL 服务器的功能齐全的 可用于生产的 缓存 GraphQL 客户端</p>\n<p><a href=\"https://github.com/apollographql/apollo-client\" target=\"_blank\" rel=\"noopener\">https://github.com/apollographql/apollo-client</a></p>\n</blockquote>\n<ul>\n<li>MobX</li>\n</ul>\n<blockquote>\n<p>简单，可扩展的状态管理</p>\n<p><a href=\"https://github.com/mobxjs/mobx\" target=\"_blank\" rel=\"noopener\">https://github.com/mobxjs/mobx</a></p>\n</blockquote>\n<ul>\n<li>Relay/Relay Modern</li>\n</ul>\n<blockquote>\n<p>Relay 是一个用于构建数据驱动的 React 应用程序的 JavaScript 框架</p>\n<p><a href=\"https://github.com/facebook/relay\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/relay</a></p>\n</blockquote>\n<h3 id=\"后端框架\"><a href=\"#后端框架\" class=\"headerlink\" title=\"后端框架\"></a>后端框架</h3><ul>\n<li>Express</li>\n</ul>\n<blockquote>\n<p>快速简单的 Node 框架</p>\n<p><a href=\"https://github.com/expressjs/express\" target=\"_blank\" rel=\"noopener\">https://github.com/expressjs/express</a></p>\n</blockquote>\n<ul>\n<li>Next.js</li>\n</ul>\n<blockquote>\n<p>一个多功能 React 服务端框架</p>\n<p><a href=\"https://nextjs.org\" target=\"_blank\" rel=\"noopener\">https://nextjs.org</a></p>\n</blockquote>\n<ul>\n<li>Koa</li>\n</ul>\n<blockquote>\n<p>使用 ES2017 异步函数的 node.js 的中间件</p>\n<p><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"noopener\">https://github.com/koajs/koa</a></p>\n</blockquote>\n<ul>\n<li>Meteor</li>\n</ul>\n<blockquote>\n<p>JavaScript 应用程序平台</p>\n<p><a href=\"https://github.com/meteor/meteor\" target=\"_blank\" rel=\"noopener\">https://github.com/meteor/meteor</a></p>\n</blockquote>\n<ul>\n<li>Sails</li>\n</ul>\n<blockquote>\n<p>Node.js 的实时 MVC 框架</p>\n<p><a href=\"https://github.com/balderdashy/sails\" target=\"_blank\" rel=\"noopener\">https://github.com/balderdashy/sails</a></p>\n</blockquote>\n<ul>\n<li>FeathersJS</li>\n</ul>\n<blockquote>\n<p>适用于现代应用程序的 REST 和实时 API 层<br><a href=\"https://github.com/feathersjs/feathers\" target=\"_blank\" rel=\"noopener\">https://github.com/feathersjs/feathers</a></p>\n</blockquote>\n<h3 id=\"Javascript-测试工具\"><a href=\"#Javascript-测试工具\" class=\"headerlink\" title=\"Javascript 测试工具\"></a>Javascript 测试工具</h3><ul>\n<li>Jest</li>\n</ul>\n<blockquote>\n<p>令人愉快的 JavaScript 测试工具</p>\n<p><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/</a></p>\n</blockquote>\n<ul>\n<li>Mocha</li>\n</ul>\n<blockquote>\n<p>node.js 和浏览器的简单，灵活，有趣的 javascript 测试框架</p>\n<p><a href=\"https://github.com/mochajs/mocha\" target=\"_blank\" rel=\"noopener\">https://github.com/mochajs/mocha</a></p>\n</blockquote>\n<ul>\n<li>Jasmine</li>\n</ul>\n<blockquote>\n<p>适用于浏览器和 node.js 的简单 JavaScript 测试框架</p>\n<p><a href=\"https://github.com/jasmine/jasmine\" target=\"_blank\" rel=\"noopener\">https://github.com/jasmine/jasmine</a></p>\n</blockquote>\n<ul>\n<li>Enzyme</li>\n</ul>\n<blockquote>\n<p>用于 React 的 JavaScript 测试实用程序</p>\n<p><a href=\"https://github.com/airbnb/enzyme\" target=\"_blank\" rel=\"noopener\">https://github.com/airbnb/enzyme</a></p>\n</blockquote>\n<ul>\n<li>Karma</li>\n</ul>\n<blockquote>\n<p>健壮的 Javascript 测试工具</p>\n<p><a href=\"https://github.com/karma-runner/karma\" target=\"_blank\" rel=\"noopener\">https://github.com/karma-runner/karma</a></p>\n</blockquote>\n<ul>\n<li>Storybook</li>\n</ul>\n<blockquote>\n<p>用于交互式 UI 组件：React，React Native，Vue，Angular，Ember 的开发和测试工具</p>\n<p><a href=\"https://github.com/storybooks/storybook\" target=\"_blank\" rel=\"noopener\">https://github.com/storybooks/storybook</a></p>\n</blockquote>\n<ul>\n<li>Ava</li>\n</ul>\n<blockquote>\n<p>未来的 JavaScript 测试工具</p>\n<p><a href=\"https://github.com/avajs/ava\" target=\"_blank\" rel=\"noopener\">https://github.com/avajs/ava</a></p>\n</blockquote>\n<h3 id=\"移动端-客户端\"><a href=\"#移动端-客户端\" class=\"headerlink\" title=\"移动端/客户端\"></a>移动端/客户端</h3><ul>\n<li>Electron</li>\n</ul>\n<blockquote>\n<p>使用 JavaScript，HTML 和 CSS 构建跨平台桌面应用程序</p>\n<p><a href=\"https://github.com/electron/electron\" target=\"_blank\" rel=\"noopener\">https://github.com/electron/electron</a></p>\n</blockquote>\n<ul>\n<li>React Native</li>\n</ul>\n<blockquote>\n<p>使用 React 构建应用程序的框架</p>\n<p><a href=\"https://github.com/facebook/react-native\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-native</a></p>\n</blockquote>\n<ul>\n<li>Native Apps</li>\n</ul>\n<blockquote>\n<p>原生客户端 App 语言：Java, Kotlin, Objective-C, or Swift 等</p>\n</blockquote>\n<ul>\n<li>Cordova</li>\n</ul>\n<blockquote>\n<p>移动应用程序开发框架</p>\n<p><a href=\"https://cordova.apache.org/\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/</a></p>\n</blockquote>\n<ul>\n<li>Ionic</li>\n</ul>\n<blockquote>\n<p>使用开放式 Web 技术构建的原生和渐进式 Web 应用</p>\n<p><a href=\"https://github.com/ionic-team/ionic\" target=\"_blank\" rel=\"noopener\">https://github.com/ionic-team/ionic</a></p>\n</blockquote>\n<ul>\n<li>NativeScript</li>\n</ul>\n<blockquote>\n<p>用于使用 JavaScript 构建移动端应用程序的开源框架。使用 Web 技能，如 Angular 和 Vue.js，FlexBox 和 CSS，并在 iOS 和 Android 上获得原生 UI 和性能</p>\n<p><a href=\"https://github.com/NativeScript/NativeScript\" target=\"_blank\" rel=\"noopener\">https://github.com/NativeScript/NativeScript</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/stateofjs/000.png\" alt></p>\n<h1 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h1><p>来自 153 个不同的国家</p>\n<p>共 20,268 名 JavaScript 开发者参与调查</p>\n<p>中国占总数的 0.37%，共 75 个开发者</p>\n<p>(因此本调查报告整体上能反映全球范围的 Javascript 发展趋势，但对国内情况不具有代表性)</p>\n<p><strong>调查参与者 国家分布图：</strong></p>\n<p><img src=\"/images/stateofjs/1.png\" alt></p>\n<p><strong>调查参与者 薪资分布图：</strong></p>\n<p><img src=\"/images/stateofjs/2.png\" alt></p>\n<p><strong>调查参与者 开发经验分布图：</strong></p>\n<p><img src=\"/images/stateofjs/3.png\" alt></p>\n<p><strong>调查参与者 所属公司体量分布图：</strong></p>\n<p><img src=\"/images/stateofjs/4.png\" alt></p>\n<p><strong>调查参与者 性别分布图：</strong></p>\n<p><img src=\"/images/stateofjs/5.png\" alt></p>\n<h1 id=\"调查结果\"><a href=\"#调查结果\" class=\"headerlink\" title=\"调查结果\"></a>调查结果</h1><h2 id=\"1-JavaScript-Flavors\"><a href=\"#1-JavaScript-Flavors\" class=\"headerlink\" title=\"1.JavaScript Flavors\"></a>1.JavaScript Flavors</h2><p>可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集</p>\n<p><img src=\"/images/stateofjs/6.png\" alt></p>\n<h2 id=\"2-前端框架-Front-end-Frameworks\"><a href=\"#2-前端框架-Front-end-Frameworks\" class=\"headerlink\" title=\"2.前端框架 Front-end Frameworks\"></a>2.前端框架 Front-end Frameworks</h2><p><img src=\"/images/stateofjs/7.png\" alt></p>\n<h2 id=\"3-数据层-Data-Layer\"><a href=\"#3-数据层-Data-Layer\" class=\"headerlink\" title=\"3.数据层 Data Layer\"></a>3.数据层 Data Layer</h2><p><img src=\"/images/stateofjs/8.png\" alt></p>\n<h2 id=\"4-后端框架-Back-end-Frameworks\"><a href=\"#4-后端框架-Back-end-Frameworks\" class=\"headerlink\" title=\"4.后端框架 Back-end Frameworks\"></a>4.后端框架 Back-end Frameworks</h2><p><img src=\"/images/stateofjs/9.png\" alt></p>\n<h2 id=\"5-测试-Testing\"><a href=\"#5-测试-Testing\" class=\"headerlink\" title=\"5.测试 Testing\"></a>5.测试 Testing</h2><p><img src=\"/images/stateofjs/10.png\" alt></p>\n<h2 id=\"6-移动端-客户端-Mobile-amp-Desktop\"><a href=\"#6-移动端-客户端-Mobile-amp-Desktop\" class=\"headerlink\" title=\"6.移动端/客户端 Mobile &amp; Desktop\"></a>6.移动端/客户端 Mobile &amp; Desktop</h2><p><img src=\"/images/stateofjs/11.png\" alt></p>\n<h2 id=\"7-js-开发者使用的其他语言-Other-Languages\"><a href=\"#7-js-开发者使用的其他语言-Other-Languages\" class=\"headerlink\" title=\"7.js 开发者使用的其他语言 Other Languages\"></a>7.js 开发者使用的其他语言 Other Languages</h2><p><img src=\"/images/stateofjs/12.png\" alt></p>\n<h2 id=\"8-浏览器-API-Browser-APIs\"><a href=\"#8-浏览器-API-Browser-APIs\" class=\"headerlink\" title=\"8.浏览器 API Browser APIs\"></a>8.浏览器 API Browser APIs</h2><p><img src=\"/images/stateofjs/13.png\" alt></p>\n<h2 id=\"9-构建工具-Build-Tools\"><a href=\"#9-构建工具-Build-Tools\" class=\"headerlink\" title=\"9.构建工具 Build Tools\"></a>9.构建工具 Build Tools</h2><p><img src=\"/images/stateofjs/14.png\" alt></p>\n<h2 id=\"10-函数库-Utility-Libraries\"><a href=\"#10-函数库-Utility-Libraries\" class=\"headerlink\" title=\"10.函数库 Utility Libraries\"></a>10.函数库 Utility Libraries</h2><p><img src=\"/images/stateofjs/15.png\" alt></p>\n<h2 id=\"11-编辑器-Text-Editors\"><a href=\"#11-编辑器-Text-Editors\" class=\"headerlink\" title=\"11.编辑器 Text Editors\"></a>11.编辑器 Text Editors</h2><p><img src=\"/images/stateofjs/16.png\" alt></p>\n<h2 id=\"12-js-开发者的使用感受-期望\"><a href=\"#12-js-开发者的使用感受-期望\" class=\"headerlink\" title=\"12.js 开发者的使用感受+期望\"></a>12.js 开发者的使用感受+期望</h2><p><strong>“Javascript 正在往正确的方向发展”</strong></p>\n<p><img src=\"/images/stateofjs/17.png\" alt></p>\n<p><strong>“当下构建 Javascript app 过于复杂惹”</strong></p>\n<p><img src=\"/images/stateofjs/18.png\" alt></p>\n<p><strong>“Javascript 被过度使用”</strong></p>\n<p><img src=\"/images/stateofjs/19.png\" alt></p>\n<p><strong>“我喜欢构建 JavaScript 应用程序”</strong></p>\n<p><img src=\"/images/stateofjs/20.png\" alt></p>\n<p><strong>“我希望 JavaScript 成为我的主要编程语言”</strong></p>\n<p><img src=\"/images/stateofjs/21.png\" alt></p>\n<p><strong>“JavaScript 生态系统变化太快”</strong></p>\n<p><img src=\"/images/stateofjs/22.png\" alt></p>\n<p><strong>“这项调查太长惹！”</strong></p>\n<p><img src=\"/images/stateofjs/23.png\" alt></p>\n<h1 id=\"年度之最\"><a href=\"#年度之最\" class=\"headerlink\" title=\"年度之最\"></a>年度之最</h1><ul>\n<li><strong>最满意: Jest</strong></li>\n</ul>\n<blockquote>\n<p>96.5%的使用者表示会再次使用</p>\n</blockquote>\n<ul>\n<li><strong>最感兴趣: GraphQL</strong></li>\n</ul>\n<blockquote>\n<p>听说过 GraphQL 的开发者中有 87.7%表示想要学习</p>\n</blockquote>\n<ul>\n<li><strong>最多提及: Vuex</strong></li>\n</ul>\n<blockquote>\n<p>在“other libraries”提问中最多被提及的库</p>\n</blockquote>\n<ul>\n<li><strong>最多使用: React</strong></li>\n</ul>\n<blockquote>\n<p>年度被使用最多的库，参与调查者中有 14417 位使用 React</p>\n</blockquote>\n<ul>\n<li><strong>最黑马: Reason</strong></li>\n</ul>\n<blockquote>\n<p>Facebook 带来的 崭露头角的 新技术，也许会像 React 和 GraphQL 一样受欢迎?</p>\n</blockquote>\n<ul>\n<li><strong>最特别: VSCode</strong></li>\n</ul>\n<blockquote>\n<p>我们今年刚刚爱上并无法自拔的工具</p>\n</blockquote>\n<h1 id=\"参赛选手信息\"><a href=\"#参赛选手信息\" class=\"headerlink\" title=\"参赛选手信息\"></a>参赛选手信息</h1><h3 id=\"Javascript-Flavors\"><a href=\"#Javascript-Flavors\" class=\"headerlink\" title=\"Javascript Flavors\"></a>Javascript Flavors</h3><ul>\n<li>ES6</li>\n</ul>\n<blockquote>\n<p>ECMA-262 标准的 Edition6(目前已经发布到 ECMA-262 2018/Edition 9)，是 javascript 的规范</p>\n<p><a href=\"https://github.com/tc39/ecma262#ecmascript\" target=\"_blank\" rel=\"noopener\">https://github.com/tc39/ecma262#ecmascript</a></p>\n</blockquote>\n<ul>\n<li>Typescript</li>\n</ul>\n<blockquote>\n<p>由微软开发的 添加了可选的静态类型和基于类的面向对象编程 的 JS 超集</p>\n<p><a href=\"https://github.com/Microsoft/TypeScript\" target=\"_blank\" rel=\"noopener\">https://github.com/Microsoft/TypeScript</a></p>\n</blockquote>\n<ul>\n<li>Flow</li>\n</ul>\n<blockquote>\n<p>JavaScript 添加静态类型检查器</p>\n<p><a href=\"https://github.com/facebook/flow\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/flow</a></p>\n</blockquote>\n<ul>\n<li>Reason</li>\n</ul>\n<blockquote>\n<p>简单,快速,类型安全,利用 JavaScript 和 OCaml 生态系统的库</p>\n<p><a href=\"http://reasonml.github.io/\" target=\"_blank\" rel=\"noopener\">http://reasonml.github.io/</a></p>\n</blockquote>\n<ul>\n<li>Elm</li>\n</ul>\n<blockquote>\n<p>生成具有出色性能且没有运行时异常的 JavaScript 的语言。</p>\n<p><a href=\"https://elm-lang.org/\" target=\"_blank\" rel=\"noopener\">https://elm-lang.org/</a></p>\n</blockquote>\n<ul>\n<li>ClojureScript</li>\n</ul>\n<blockquote>\n<p>ClojureScript 是将 Clojure 成 JavaScript 的编译器。</p>\n<p><a href=\"https://clojurescript.org/\" target=\"_blank\" rel=\"noopener\">https://clojurescript.org/</a></p>\n</blockquote>\n<h3 id=\"前端框架\"><a href=\"#前端框架\" class=\"headerlink\" title=\"前端框架\"></a>前端框架</h3><ul>\n<li>React</li>\n</ul>\n<blockquote>\n<p>React 是一个用于设计用户界面的开源 JavaScript 库。</p>\n<p><a href=\"https://github.com/facebook/react\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react</a></p>\n</blockquote>\n<ul>\n<li>Vue.js</li>\n</ul>\n<blockquote>\n<p>一套用于构建用户界面的渐进式框架</p>\n<p><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/</a></p>\n</blockquote>\n<ul>\n<li>Angular</li>\n</ul>\n<blockquote>\n<p>基于 TypeScript 的开源前端 Web 应用程序平台。</p>\n<p><a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">https://angular.io/</a></p>\n</blockquote>\n<ul>\n<li>Preact</li>\n</ul>\n<blockquote>\n<p>3kB 大小的 使用相同的现代 API 的 React 快速替代方案，拥有组件和虚拟 DOM。</p>\n<p><a href=\"https://github.com/developit/preact\" target=\"_blank\" rel=\"noopener\">https://github.com/developit/preact</a></p>\n</blockquote>\n<ul>\n<li>Ember</li>\n</ul>\n<blockquote>\n<p>用于创建大型的 Web 应用程序的 JavaScript 框架</p>\n<p><a href=\"https://github.com/emberjs/ember.js\" target=\"_blank\" rel=\"noopener\">https://github.com/emberjs/ember.js</a></p>\n</blockquote>\n<ul>\n<li>Polymer</li>\n</ul>\n<blockquote>\n<p>Web 组件库</p>\n<p><a href=\"https://github.com/Polymer/polymer\" target=\"_blank\" rel=\"noopener\">https://github.com/Polymer/polymer</a></p>\n</blockquote>\n<h3 id=\"数据层\"><a href=\"#数据层\" class=\"headerlink\" title=\"数据层\"></a>数据层</h3><ul>\n<li>Redux</li>\n</ul>\n<blockquote>\n<p>JavaScript 应用程序的可预测状态容器</p>\n<p><a href=\"https://github.com/reduxjs/redux\" target=\"_blank\" rel=\"noopener\">https://github.com/reduxjs/redux</a></p>\n</blockquote>\n<ul>\n<li>GraphQL</li>\n</ul>\n<blockquote>\n<p>一种与后端服务相关联的查询语言和执行引擎</p>\n<p><a href=\"https://github.com/facebook/graphql\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/graphql</a></p>\n</blockquote>\n<ul>\n<li>Apollo</li>\n</ul>\n<blockquote>\n<p>适用于每个 UI 框架和 GraphQL 服务器的功能齐全的 可用于生产的 缓存 GraphQL 客户端</p>\n<p><a href=\"https://github.com/apollographql/apollo-client\" target=\"_blank\" rel=\"noopener\">https://github.com/apollographql/apollo-client</a></p>\n</blockquote>\n<ul>\n<li>MobX</li>\n</ul>\n<blockquote>\n<p>简单，可扩展的状态管理</p>\n<p><a href=\"https://github.com/mobxjs/mobx\" target=\"_blank\" rel=\"noopener\">https://github.com/mobxjs/mobx</a></p>\n</blockquote>\n<ul>\n<li>Relay/Relay Modern</li>\n</ul>\n<blockquote>\n<p>Relay 是一个用于构建数据驱动的 React 应用程序的 JavaScript 框架</p>\n<p><a href=\"https://github.com/facebook/relay\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/relay</a></p>\n</blockquote>\n<h3 id=\"后端框架\"><a href=\"#后端框架\" class=\"headerlink\" title=\"后端框架\"></a>后端框架</h3><ul>\n<li>Express</li>\n</ul>\n<blockquote>\n<p>快速简单的 Node 框架</p>\n<p><a href=\"https://github.com/expressjs/express\" target=\"_blank\" rel=\"noopener\">https://github.com/expressjs/express</a></p>\n</blockquote>\n<ul>\n<li>Next.js</li>\n</ul>\n<blockquote>\n<p>一个多功能 React 服务端框架</p>\n<p><a href=\"https://nextjs.org\" target=\"_blank\" rel=\"noopener\">https://nextjs.org</a></p>\n</blockquote>\n<ul>\n<li>Koa</li>\n</ul>\n<blockquote>\n<p>使用 ES2017 异步函数的 node.js 的中间件</p>\n<p><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"noopener\">https://github.com/koajs/koa</a></p>\n</blockquote>\n<ul>\n<li>Meteor</li>\n</ul>\n<blockquote>\n<p>JavaScript 应用程序平台</p>\n<p><a href=\"https://github.com/meteor/meteor\" target=\"_blank\" rel=\"noopener\">https://github.com/meteor/meteor</a></p>\n</blockquote>\n<ul>\n<li>Sails</li>\n</ul>\n<blockquote>\n<p>Node.js 的实时 MVC 框架</p>\n<p><a href=\"https://github.com/balderdashy/sails\" target=\"_blank\" rel=\"noopener\">https://github.com/balderdashy/sails</a></p>\n</blockquote>\n<ul>\n<li>FeathersJS</li>\n</ul>\n<blockquote>\n<p>适用于现代应用程序的 REST 和实时 API 层<br><a href=\"https://github.com/feathersjs/feathers\" target=\"_blank\" rel=\"noopener\">https://github.com/feathersjs/feathers</a></p>\n</blockquote>\n<h3 id=\"Javascript-测试工具\"><a href=\"#Javascript-测试工具\" class=\"headerlink\" title=\"Javascript 测试工具\"></a>Javascript 测试工具</h3><ul>\n<li>Jest</li>\n</ul>\n<blockquote>\n<p>令人愉快的 JavaScript 测试工具</p>\n<p><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/</a></p>\n</blockquote>\n<ul>\n<li>Mocha</li>\n</ul>\n<blockquote>\n<p>node.js 和浏览器的简单，灵活，有趣的 javascript 测试框架</p>\n<p><a href=\"https://github.com/mochajs/mocha\" target=\"_blank\" rel=\"noopener\">https://github.com/mochajs/mocha</a></p>\n</blockquote>\n<ul>\n<li>Jasmine</li>\n</ul>\n<blockquote>\n<p>适用于浏览器和 node.js 的简单 JavaScript 测试框架</p>\n<p><a href=\"https://github.com/jasmine/jasmine\" target=\"_blank\" rel=\"noopener\">https://github.com/jasmine/jasmine</a></p>\n</blockquote>\n<ul>\n<li>Enzyme</li>\n</ul>\n<blockquote>\n<p>用于 React 的 JavaScript 测试实用程序</p>\n<p><a href=\"https://github.com/airbnb/enzyme\" target=\"_blank\" rel=\"noopener\">https://github.com/airbnb/enzyme</a></p>\n</blockquote>\n<ul>\n<li>Karma</li>\n</ul>\n<blockquote>\n<p>健壮的 Javascript 测试工具</p>\n<p><a href=\"https://github.com/karma-runner/karma\" target=\"_blank\" rel=\"noopener\">https://github.com/karma-runner/karma</a></p>\n</blockquote>\n<ul>\n<li>Storybook</li>\n</ul>\n<blockquote>\n<p>用于交互式 UI 组件：React，React Native，Vue，Angular，Ember 的开发和测试工具</p>\n<p><a href=\"https://github.com/storybooks/storybook\" target=\"_blank\" rel=\"noopener\">https://github.com/storybooks/storybook</a></p>\n</blockquote>\n<ul>\n<li>Ava</li>\n</ul>\n<blockquote>\n<p>未来的 JavaScript 测试工具</p>\n<p><a href=\"https://github.com/avajs/ava\" target=\"_blank\" rel=\"noopener\">https://github.com/avajs/ava</a></p>\n</blockquote>\n<h3 id=\"移动端-客户端\"><a href=\"#移动端-客户端\" class=\"headerlink\" title=\"移动端/客户端\"></a>移动端/客户端</h3><ul>\n<li>Electron</li>\n</ul>\n<blockquote>\n<p>使用 JavaScript，HTML 和 CSS 构建跨平台桌面应用程序</p>\n<p><a href=\"https://github.com/electron/electron\" target=\"_blank\" rel=\"noopener\">https://github.com/electron/electron</a></p>\n</blockquote>\n<ul>\n<li>React Native</li>\n</ul>\n<blockquote>\n<p>使用 React 构建应用程序的框架</p>\n<p><a href=\"https://github.com/facebook/react-native\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-native</a></p>\n</blockquote>\n<ul>\n<li>Native Apps</li>\n</ul>\n<blockquote>\n<p>原生客户端 App 语言：Java, Kotlin, Objective-C, or Swift 等</p>\n</blockquote>\n<ul>\n<li>Cordova</li>\n</ul>\n<blockquote>\n<p>移动应用程序开发框架</p>\n<p><a href=\"https://cordova.apache.org/\" target=\"_blank\" rel=\"noopener\">https://cordova.apache.org/</a></p>\n</blockquote>\n<ul>\n<li>Ionic</li>\n</ul>\n<blockquote>\n<p>使用开放式 Web 技术构建的原生和渐进式 Web 应用</p>\n<p><a href=\"https://github.com/ionic-team/ionic\" target=\"_blank\" rel=\"noopener\">https://github.com/ionic-team/ionic</a></p>\n</blockquote>\n<ul>\n<li>NativeScript</li>\n</ul>\n<blockquote>\n<p>用于使用 JavaScript 构建移动端应用程序的开源框架。使用 Web 技能，如 Angular 和 Vue.js，FlexBox 和 CSS，并在 iOS 和 Android 上获得原生 UI 和性能</p>\n<p><a href=\"https://github.com/NativeScript/NativeScript\" target=\"_blank\" rel=\"noopener\">https://github.com/NativeScript/NativeScript</a></p>\n</blockquote>\n"},{"title":"【信息源聚合】2019年度Javascript社区","date":"2019-12-29T16:00:00.000Z","description":"根据stateOfJs2019调查中，20000余名JS开发者的数据整理而来","toc":1,"top":0,"_content":"\n# 2019年度Javascript社区-信息源聚合\n\n- **排名有先后，依据是[StateOfJs调查](https://2019.stateofjs.com/resources/)**\n- 整理了一份可以在浏览器直接导入的👉<a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">书签文件</a>\n\n## Blogs & Magazines\n- [CSS Tricks](https://css-tricks.com/)\n- [Dev.to](https://dev.to/)\n- [JavaScript Weekly](https://javascriptweekly.com/)\n- [Smashing Magazine](https://www.smashingmagazine.com/)\n- [David Walsh Blog](https://davidwalsh.name/)\n- [SitePoint](https://www.sitepoint.com/)\n- [CoDrops](https://tympanus.net/codrops/)\n- [Daily JS](https://medium.com/dailyjs)\n- [Best Of JS](https://bestofjs.org/)\n- [Echo JS](https://echojs.com/)\n- [Medium](https://medium.com/)\n- [Kent C. Dodds](https://kentcdodds.com/blog/)\n- [Twitter](https://twitter.com)\n- [Overreacted](https://overreacted.io/)\n- [Reddit](https://reddit.com)\n- [Hacker News](https://news.ycombinator.com/)\n- [Alligator.io](https://alligator.io/)\n- [Habr](https://habr.com/en/)  \n- [freeCodeCamp](https://learn.freecodecamp.one/)\n- [2ality](https://2ality.com/)\n- [Scotch](https://scotch.io)\n- [Node Weekly](https://nodeweekly.com/)\n- [Hackernoon](https://hackernoon.com/)\n- [The Ember Times](https://the-emberjs-times.ongoodbits.com/)\n- [React Status](https://react.statuscode.com/)\n- [Frontend Focus](https://frontendfoc.us/)\n- [Angular In Depth](https://indepth.dev/)\n- [Web.dev](https://web.dev/)\n- [Web Development Reading List](https://wdrl.info/)\n- [ESNext News](http://esnextnews.com/)\n- [The Changelog](https://changelog.com/)\n- [Pony Foo](https://ponyfoo.com/)\n- [Robin Wieruch](https://www.robinwieruch.de/)\n- [Wes Bos](https://wesbos.com/)\n\n## Sites & Courses\n- [Stack Overflow](https://stackoverflow.com/)\n- [MDN](https://developer.mozilla.org/en-US/)   \n- [W3Schools](https://www.w3schools.com/)\n- [freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp)\n- [Wes Bos](https://wesbos.com/)\n- [Codecademy](https://www.codecademy.com/)\n- [Level Up Tutorials](https://www.leveluptutorials.com/)\n- [Design+Code](https://designcode.io/)\n- [Udemy](https://www.udemy.com/) \n- [Egghead.io](https://egghead.io/)\n- [Frontend Masters](https://frontendmasters.com/)\n- [YouTube](https://youtube.com)\n- [Vue Mastery](https://www.vuemastery.com/)\n- [Platzi](https://platzi.com/)\n- [Vue School](https://vueschool.io/)\n- [Laracasts](https://laracasts.com/)\n- [Traversy Media](https://www.traversymedia.com/)\n- [Medium](https://medium.com/)\n- [Udacity](https://www.udacity.com/)\n- [Kent C. Dodds](https://kentcdodds.com/blog/)\n- [Testing JavaScript](https://testingjavascript.com/)\n- [Lynda](https://www.lynda.com/) \n- [Academind](academind)\n- [LinkedIn Learning](https://www.linkedin.com/learning/)\n- [Treehouse](https://teamtreehouse.com/)\n- [Scrimba](https://scrimba.com/)\n- [JavaScript.info](https://javascript.info/)\n- [Tyle McGinnis](https://tylermcginnis.com/)\n- [Reddit](https://reddit.com)\n- [Ultimate Courses](https://ultimatecourses.com/)\n- [caniuse](https://caniuse.com)\n- [Overreacted](https://overreacted.io/)\n- [devdocs.io](https://devdocs.io)\n\n## Podcasts\n- [Syntax](https://syntax.fm/)\n- [The Changelog](https://changelog.com/)\n- [Front End Happy Hour](https://frontendhappyhour.com/)\n- [JavaScript Jabber](https://devchat.tv/js-jabber/)\n- [Full Stack Radio](http://www.fullstackradio.com/)\n- [Shop Talk Show](https://shoptalkshow.com/)\n- [JS Party](https://changelog.com/jsparty)\n- [CodePen Radio](https://blog.codepen.io/radio/)\n- [JAMStack Radio](https://www.heavybit.com/library/podcasts/jamstack-radio/)\n- [Modern Web](https://modernweb.podbean.com/)\n- [The Web Platform Podcast](https://thewebplatformpodcast.com/)\n- [CodePen](https://codepen.io/)\n- [React Podcast](https://reactpodcast.com/)\n- [Software Engineering Daily](https://softwareengineeringdaily.com/)\n- [Ladybug Podcast](https://ladybug.dev/)\n- [Real Talk JavaScript](https://realtalkjavascript.simplecast.com/)\n- [The Undefined Podcast](https://undefined.fm/)\n- [Веб-стандарты](https://web-standards.ru/)\n- [Elm Slack](https://elmlang.herokuapp.com/)\n- [Soft Skills Engineering Podcast](https://softskills.audio/)\n- [Frontend Weekend](https://frontendweekend.ml/)\n- [Elm Town](https://elmtown.simplecast.fm/)\n- [The Odin Project](https://www.theodinproject.com/)\n- [Developer Tea](https://developertea.simplecast.fm/)\n- [Command Line Heroes](https://www.redhat.com/en/command-line-heroes)\n- [Adventures in Angular](https://devchat.tv/adv-in-angular/)\n- [Toolsday](https://spec.fm/podcasts/toolsday)\n- [Coding Blocks](https://www.codingblocks.net/)\n- [Egghead.io](https://egghead.io/)\n- [Kent C. Dodds](https://kentcdodds.com/blog/)\n- [EmberMap](https://embermap.com/)\n- [.NET Rocks](https://www.dotnetrocks.com/)\n- [Views on Vue](https://devchat.tv/views-on-vue/)\n- [Reason Town](https://player.fm/series/reason-town)\n- [Hipsters Ponto Tech](https://hipsters.tech/)\n- [DevMode.fm](https://devmode.fm/)\n- [Fun Fun Function](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q)","source":"_posts/2019_javascript_sources.md","raw":"---\ntitle: 【信息源聚合】2019年度Javascript社区\ncategories:\n    - 10技术 | JavaScript # 一级分类\ntags:\n    - stateOfJs\ndate: 2019-12-30\ndescription: 根据stateOfJs2019调查中，20000余名JS开发者的数据整理而来\ntoc: 1\ntop: 0\n---\n\n# 2019年度Javascript社区-信息源聚合\n\n- **排名有先后，依据是[StateOfJs调查](https://2019.stateofjs.com/resources/)**\n- 整理了一份可以在浏览器直接导入的👉<a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">书签文件</a>\n\n## Blogs & Magazines\n- [CSS Tricks](https://css-tricks.com/)\n- [Dev.to](https://dev.to/)\n- [JavaScript Weekly](https://javascriptweekly.com/)\n- [Smashing Magazine](https://www.smashingmagazine.com/)\n- [David Walsh Blog](https://davidwalsh.name/)\n- [SitePoint](https://www.sitepoint.com/)\n- [CoDrops](https://tympanus.net/codrops/)\n- [Daily JS](https://medium.com/dailyjs)\n- [Best Of JS](https://bestofjs.org/)\n- [Echo JS](https://echojs.com/)\n- [Medium](https://medium.com/)\n- [Kent C. Dodds](https://kentcdodds.com/blog/)\n- [Twitter](https://twitter.com)\n- [Overreacted](https://overreacted.io/)\n- [Reddit](https://reddit.com)\n- [Hacker News](https://news.ycombinator.com/)\n- [Alligator.io](https://alligator.io/)\n- [Habr](https://habr.com/en/)  \n- [freeCodeCamp](https://learn.freecodecamp.one/)\n- [2ality](https://2ality.com/)\n- [Scotch](https://scotch.io)\n- [Node Weekly](https://nodeweekly.com/)\n- [Hackernoon](https://hackernoon.com/)\n- [The Ember Times](https://the-emberjs-times.ongoodbits.com/)\n- [React Status](https://react.statuscode.com/)\n- [Frontend Focus](https://frontendfoc.us/)\n- [Angular In Depth](https://indepth.dev/)\n- [Web.dev](https://web.dev/)\n- [Web Development Reading List](https://wdrl.info/)\n- [ESNext News](http://esnextnews.com/)\n- [The Changelog](https://changelog.com/)\n- [Pony Foo](https://ponyfoo.com/)\n- [Robin Wieruch](https://www.robinwieruch.de/)\n- [Wes Bos](https://wesbos.com/)\n\n## Sites & Courses\n- [Stack Overflow](https://stackoverflow.com/)\n- [MDN](https://developer.mozilla.org/en-US/)   \n- [W3Schools](https://www.w3schools.com/)\n- [freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp)\n- [Wes Bos](https://wesbos.com/)\n- [Codecademy](https://www.codecademy.com/)\n- [Level Up Tutorials](https://www.leveluptutorials.com/)\n- [Design+Code](https://designcode.io/)\n- [Udemy](https://www.udemy.com/) \n- [Egghead.io](https://egghead.io/)\n- [Frontend Masters](https://frontendmasters.com/)\n- [YouTube](https://youtube.com)\n- [Vue Mastery](https://www.vuemastery.com/)\n- [Platzi](https://platzi.com/)\n- [Vue School](https://vueschool.io/)\n- [Laracasts](https://laracasts.com/)\n- [Traversy Media](https://www.traversymedia.com/)\n- [Medium](https://medium.com/)\n- [Udacity](https://www.udacity.com/)\n- [Kent C. Dodds](https://kentcdodds.com/blog/)\n- [Testing JavaScript](https://testingjavascript.com/)\n- [Lynda](https://www.lynda.com/) \n- [Academind](academind)\n- [LinkedIn Learning](https://www.linkedin.com/learning/)\n- [Treehouse](https://teamtreehouse.com/)\n- [Scrimba](https://scrimba.com/)\n- [JavaScript.info](https://javascript.info/)\n- [Tyle McGinnis](https://tylermcginnis.com/)\n- [Reddit](https://reddit.com)\n- [Ultimate Courses](https://ultimatecourses.com/)\n- [caniuse](https://caniuse.com)\n- [Overreacted](https://overreacted.io/)\n- [devdocs.io](https://devdocs.io)\n\n## Podcasts\n- [Syntax](https://syntax.fm/)\n- [The Changelog](https://changelog.com/)\n- [Front End Happy Hour](https://frontendhappyhour.com/)\n- [JavaScript Jabber](https://devchat.tv/js-jabber/)\n- [Full Stack Radio](http://www.fullstackradio.com/)\n- [Shop Talk Show](https://shoptalkshow.com/)\n- [JS Party](https://changelog.com/jsparty)\n- [CodePen Radio](https://blog.codepen.io/radio/)\n- [JAMStack Radio](https://www.heavybit.com/library/podcasts/jamstack-radio/)\n- [Modern Web](https://modernweb.podbean.com/)\n- [The Web Platform Podcast](https://thewebplatformpodcast.com/)\n- [CodePen](https://codepen.io/)\n- [React Podcast](https://reactpodcast.com/)\n- [Software Engineering Daily](https://softwareengineeringdaily.com/)\n- [Ladybug Podcast](https://ladybug.dev/)\n- [Real Talk JavaScript](https://realtalkjavascript.simplecast.com/)\n- [The Undefined Podcast](https://undefined.fm/)\n- [Веб-стандарты](https://web-standards.ru/)\n- [Elm Slack](https://elmlang.herokuapp.com/)\n- [Soft Skills Engineering Podcast](https://softskills.audio/)\n- [Frontend Weekend](https://frontendweekend.ml/)\n- [Elm Town](https://elmtown.simplecast.fm/)\n- [The Odin Project](https://www.theodinproject.com/)\n- [Developer Tea](https://developertea.simplecast.fm/)\n- [Command Line Heroes](https://www.redhat.com/en/command-line-heroes)\n- [Adventures in Angular](https://devchat.tv/adv-in-angular/)\n- [Toolsday](https://spec.fm/podcasts/toolsday)\n- [Coding Blocks](https://www.codingblocks.net/)\n- [Egghead.io](https://egghead.io/)\n- [Kent C. Dodds](https://kentcdodds.com/blog/)\n- [EmberMap](https://embermap.com/)\n- [.NET Rocks](https://www.dotnetrocks.com/)\n- [Views on Vue](https://devchat.tv/views-on-vue/)\n- [Reason Town](https://player.fm/series/reason-town)\n- [Hipsters Ponto Tech](https://hipsters.tech/)\n- [DevMode.fm](https://devmode.fm/)\n- [Fun Fun Function](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q)","slug":"2019_javascript_sources","published":1,"updated":"2021-01-22T09:59:28.013Z","_id":"ckir88if7000hc8y6ie7s6ab0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2019年度Javascript社区-信息源聚合\"><a href=\"#2019年度Javascript社区-信息源聚合\" class=\"headerlink\" title=\"2019年度Javascript社区-信息源聚合\"></a>2019年度Javascript社区-信息源聚合</h1><ul>\n<li><strong>排名有先后，依据是<a href=\"https://2019.stateofjs.com/resources/\" target=\"_blank\" rel=\"noopener\">StateOfJs调查</a></strong></li>\n<li>整理了一份可以在浏览器直接导入的👉<a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">书签文件</a></li>\n</ul>\n<h2 id=\"Blogs-amp-Magazines\"><a href=\"#Blogs-amp-Magazines\" class=\"headerlink\" title=\"Blogs &amp; Magazines\"></a>Blogs &amp; Magazines</h2><ul>\n<li><a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"noopener\">CSS Tricks</a></li>\n<li><a href=\"https://dev.to/\" target=\"_blank\" rel=\"noopener\">Dev.to</a></li>\n<li><a href=\"https://javascriptweekly.com/\" target=\"_blank\" rel=\"noopener\">JavaScript Weekly</a></li>\n<li><a href=\"https://www.smashingmagazine.com/\" target=\"_blank\" rel=\"noopener\">Smashing Magazine</a></li>\n<li><a href=\"https://davidwalsh.name/\" target=\"_blank\" rel=\"noopener\">David Walsh Blog</a></li>\n<li><a href=\"https://www.sitepoint.com/\" target=\"_blank\" rel=\"noopener\">SitePoint</a></li>\n<li><a href=\"https://tympanus.net/codrops/\" target=\"_blank\" rel=\"noopener\">CoDrops</a></li>\n<li><a href=\"https://medium.com/dailyjs\" target=\"_blank\" rel=\"noopener\">Daily JS</a></li>\n<li><a href=\"https://bestofjs.org/\" target=\"_blank\" rel=\"noopener\">Best Of JS</a></li>\n<li><a href=\"https://echojs.com/\" target=\"_blank\" rel=\"noopener\">Echo JS</a></li>\n<li><a href=\"https://medium.com/\" target=\"_blank\" rel=\"noopener\">Medium</a></li>\n<li><a href=\"https://kentcdodds.com/blog/\" target=\"_blank\" rel=\"noopener\">Kent C. Dodds</a></li>\n<li><a href=\"https://twitter.com\" target=\"_blank\" rel=\"noopener\">Twitter</a></li>\n<li><a href=\"https://overreacted.io/\" target=\"_blank\" rel=\"noopener\">Overreacted</a></li>\n<li><a href=\"https://reddit.com\" target=\"_blank\" rel=\"noopener\">Reddit</a></li>\n<li><a href=\"https://news.ycombinator.com/\" target=\"_blank\" rel=\"noopener\">Hacker News</a></li>\n<li><a href=\"https://alligator.io/\" target=\"_blank\" rel=\"noopener\">Alligator.io</a></li>\n<li><a href=\"https://habr.com/en/\" target=\"_blank\" rel=\"noopener\">Habr</a>  </li>\n<li><a href=\"https://learn.freecodecamp.one/\" target=\"_blank\" rel=\"noopener\">freeCodeCamp</a></li>\n<li><a href=\"https://2ality.com/\" target=\"_blank\" rel=\"noopener\">2ality</a></li>\n<li><a href=\"https://scotch.io\" target=\"_blank\" rel=\"noopener\">Scotch</a></li>\n<li><a href=\"https://nodeweekly.com/\" target=\"_blank\" rel=\"noopener\">Node Weekly</a></li>\n<li><a href=\"https://hackernoon.com/\" target=\"_blank\" rel=\"noopener\">Hackernoon</a></li>\n<li><a href=\"https://the-emberjs-times.ongoodbits.com/\" target=\"_blank\" rel=\"noopener\">The Ember Times</a></li>\n<li><a href=\"https://react.statuscode.com/\" target=\"_blank\" rel=\"noopener\">React Status</a></li>\n<li><a href=\"https://frontendfoc.us/\" target=\"_blank\" rel=\"noopener\">Frontend Focus</a></li>\n<li><a href=\"https://indepth.dev/\" target=\"_blank\" rel=\"noopener\">Angular In Depth</a></li>\n<li><a href=\"https://web.dev/\" target=\"_blank\" rel=\"noopener\">Web.dev</a></li>\n<li><a href=\"https://wdrl.info/\" target=\"_blank\" rel=\"noopener\">Web Development Reading List</a></li>\n<li><a href=\"http://esnextnews.com/\" target=\"_blank\" rel=\"noopener\">ESNext News</a></li>\n<li><a href=\"https://changelog.com/\" target=\"_blank\" rel=\"noopener\">The Changelog</a></li>\n<li><a href=\"https://ponyfoo.com/\" target=\"_blank\" rel=\"noopener\">Pony Foo</a></li>\n<li><a href=\"https://www.robinwieruch.de/\" target=\"_blank\" rel=\"noopener\">Robin Wieruch</a></li>\n<li><a href=\"https://wesbos.com/\" target=\"_blank\" rel=\"noopener\">Wes Bos</a></li>\n</ul>\n<h2 id=\"Sites-amp-Courses\"><a href=\"#Sites-amp-Courses\" class=\"headerlink\" title=\"Sites &amp; Courses\"></a>Sites &amp; Courses</h2><ul>\n<li><a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/\" target=\"_blank\" rel=\"noopener\">MDN</a>   </li>\n<li><a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"noopener\">W3Schools</a></li>\n<li><a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" target=\"_blank\" rel=\"noopener\">freeCodeCamp</a></li>\n<li><a href=\"https://wesbos.com/\" target=\"_blank\" rel=\"noopener\">Wes Bos</a></li>\n<li><a href=\"https://www.codecademy.com/\" target=\"_blank\" rel=\"noopener\">Codecademy</a></li>\n<li><a href=\"https://www.leveluptutorials.com/\" target=\"_blank\" rel=\"noopener\">Level Up Tutorials</a></li>\n<li><a href=\"https://designcode.io/\" target=\"_blank\" rel=\"noopener\">Design+Code</a></li>\n<li><a href=\"https://www.udemy.com/\" target=\"_blank\" rel=\"noopener\">Udemy</a> </li>\n<li><a href=\"https://egghead.io/\" target=\"_blank\" rel=\"noopener\">Egghead.io</a></li>\n<li><a href=\"https://frontendmasters.com/\" target=\"_blank\" rel=\"noopener\">Frontend Masters</a></li>\n<li><a href=\"https://youtube.com\" target=\"_blank\" rel=\"noopener\">YouTube</a></li>\n<li><a href=\"https://www.vuemastery.com/\" target=\"_blank\" rel=\"noopener\">Vue Mastery</a></li>\n<li><a href=\"https://platzi.com/\" target=\"_blank\" rel=\"noopener\">Platzi</a></li>\n<li><a href=\"https://vueschool.io/\" target=\"_blank\" rel=\"noopener\">Vue School</a></li>\n<li><a href=\"https://laracasts.com/\" target=\"_blank\" rel=\"noopener\">Laracasts</a></li>\n<li><a href=\"https://www.traversymedia.com/\" target=\"_blank\" rel=\"noopener\">Traversy Media</a></li>\n<li><a href=\"https://medium.com/\" target=\"_blank\" rel=\"noopener\">Medium</a></li>\n<li><a href=\"https://www.udacity.com/\" target=\"_blank\" rel=\"noopener\">Udacity</a></li>\n<li><a href=\"https://kentcdodds.com/blog/\" target=\"_blank\" rel=\"noopener\">Kent C. Dodds</a></li>\n<li><a href=\"https://testingjavascript.com/\" target=\"_blank\" rel=\"noopener\">Testing JavaScript</a></li>\n<li><a href=\"https://www.lynda.com/\" target=\"_blank\" rel=\"noopener\">Lynda</a> </li>\n<li><a href=\"academind\">Academind</a></li>\n<li><a href=\"https://www.linkedin.com/learning/\" target=\"_blank\" rel=\"noopener\">LinkedIn Learning</a></li>\n<li><a href=\"https://teamtreehouse.com/\" target=\"_blank\" rel=\"noopener\">Treehouse</a></li>\n<li><a href=\"https://scrimba.com/\" target=\"_blank\" rel=\"noopener\">Scrimba</a></li>\n<li><a href=\"https://javascript.info/\" target=\"_blank\" rel=\"noopener\">JavaScript.info</a></li>\n<li><a href=\"https://tylermcginnis.com/\" target=\"_blank\" rel=\"noopener\">Tyle McGinnis</a></li>\n<li><a href=\"https://reddit.com\" target=\"_blank\" rel=\"noopener\">Reddit</a></li>\n<li><a href=\"https://ultimatecourses.com/\" target=\"_blank\" rel=\"noopener\">Ultimate Courses</a></li>\n<li><a href=\"https://caniuse.com\" target=\"_blank\" rel=\"noopener\">caniuse</a></li>\n<li><a href=\"https://overreacted.io/\" target=\"_blank\" rel=\"noopener\">Overreacted</a></li>\n<li><a href=\"https://devdocs.io\" target=\"_blank\" rel=\"noopener\">devdocs.io</a></li>\n</ul>\n<h2 id=\"Podcasts\"><a href=\"#Podcasts\" class=\"headerlink\" title=\"Podcasts\"></a>Podcasts</h2><ul>\n<li><a href=\"https://syntax.fm/\" target=\"_blank\" rel=\"noopener\">Syntax</a></li>\n<li><a href=\"https://changelog.com/\" target=\"_blank\" rel=\"noopener\">The Changelog</a></li>\n<li><a href=\"https://frontendhappyhour.com/\" target=\"_blank\" rel=\"noopener\">Front End Happy Hour</a></li>\n<li><a href=\"https://devchat.tv/js-jabber/\" target=\"_blank\" rel=\"noopener\">JavaScript Jabber</a></li>\n<li><a href=\"http://www.fullstackradio.com/\" target=\"_blank\" rel=\"noopener\">Full Stack Radio</a></li>\n<li><a href=\"https://shoptalkshow.com/\" target=\"_blank\" rel=\"noopener\">Shop Talk Show</a></li>\n<li><a href=\"https://changelog.com/jsparty\" target=\"_blank\" rel=\"noopener\">JS Party</a></li>\n<li><a href=\"https://blog.codepen.io/radio/\" target=\"_blank\" rel=\"noopener\">CodePen Radio</a></li>\n<li><a href=\"https://www.heavybit.com/library/podcasts/jamstack-radio/\" target=\"_blank\" rel=\"noopener\">JAMStack Radio</a></li>\n<li><a href=\"https://modernweb.podbean.com/\" target=\"_blank\" rel=\"noopener\">Modern Web</a></li>\n<li><a href=\"https://thewebplatformpodcast.com/\" target=\"_blank\" rel=\"noopener\">The Web Platform Podcast</a></li>\n<li><a href=\"https://codepen.io/\" target=\"_blank\" rel=\"noopener\">CodePen</a></li>\n<li><a href=\"https://reactpodcast.com/\" target=\"_blank\" rel=\"noopener\">React Podcast</a></li>\n<li><a href=\"https://softwareengineeringdaily.com/\" target=\"_blank\" rel=\"noopener\">Software Engineering Daily</a></li>\n<li><a href=\"https://ladybug.dev/\" target=\"_blank\" rel=\"noopener\">Ladybug Podcast</a></li>\n<li><a href=\"https://realtalkjavascript.simplecast.com/\" target=\"_blank\" rel=\"noopener\">Real Talk JavaScript</a></li>\n<li><a href=\"https://undefined.fm/\" target=\"_blank\" rel=\"noopener\">The Undefined Podcast</a></li>\n<li><a href=\"https://web-standards.ru/\" target=\"_blank\" rel=\"noopener\">Веб-стандарты</a></li>\n<li><a href=\"https://elmlang.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">Elm Slack</a></li>\n<li><a href=\"https://softskills.audio/\" target=\"_blank\" rel=\"noopener\">Soft Skills Engineering Podcast</a></li>\n<li><a href=\"https://frontendweekend.ml/\" target=\"_blank\" rel=\"noopener\">Frontend Weekend</a></li>\n<li><a href=\"https://elmtown.simplecast.fm/\" target=\"_blank\" rel=\"noopener\">Elm Town</a></li>\n<li><a href=\"https://www.theodinproject.com/\" target=\"_blank\" rel=\"noopener\">The Odin Project</a></li>\n<li><a href=\"https://developertea.simplecast.fm/\" target=\"_blank\" rel=\"noopener\">Developer Tea</a></li>\n<li><a href=\"https://www.redhat.com/en/command-line-heroes\" target=\"_blank\" rel=\"noopener\">Command Line Heroes</a></li>\n<li><a href=\"https://devchat.tv/adv-in-angular/\" target=\"_blank\" rel=\"noopener\">Adventures in Angular</a></li>\n<li><a href=\"https://spec.fm/podcasts/toolsday\" target=\"_blank\" rel=\"noopener\">Toolsday</a></li>\n<li><a href=\"https://www.codingblocks.net/\" target=\"_blank\" rel=\"noopener\">Coding Blocks</a></li>\n<li><a href=\"https://egghead.io/\" target=\"_blank\" rel=\"noopener\">Egghead.io</a></li>\n<li><a href=\"https://kentcdodds.com/blog/\" target=\"_blank\" rel=\"noopener\">Kent C. Dodds</a></li>\n<li><a href=\"https://embermap.com/\" target=\"_blank\" rel=\"noopener\">EmberMap</a></li>\n<li><a href=\"https://www.dotnetrocks.com/\" target=\"_blank\" rel=\"noopener\">.NET Rocks</a></li>\n<li><a href=\"https://devchat.tv/views-on-vue/\" target=\"_blank\" rel=\"noopener\">Views on Vue</a></li>\n<li><a href=\"https://player.fm/series/reason-town\" target=\"_blank\" rel=\"noopener\">Reason Town</a></li>\n<li><a href=\"https://hipsters.tech/\" target=\"_blank\" rel=\"noopener\">Hipsters Ponto Tech</a></li>\n<li><a href=\"https://devmode.fm/\" target=\"_blank\" rel=\"noopener\">DevMode.fm</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q\" target=\"_blank\" rel=\"noopener\">Fun Fun Function</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2019年度Javascript社区-信息源聚合\"><a href=\"#2019年度Javascript社区-信息源聚合\" class=\"headerlink\" title=\"2019年度Javascript社区-信息源聚合\"></a>2019年度Javascript社区-信息源聚合</h1><ul>\n<li><strong>排名有先后，依据是<a href=\"https://2019.stateofjs.com/resources/\" target=\"_blank\" rel=\"noopener\">StateOfJs调查</a></strong></li>\n<li>整理了一份可以在浏览器直接导入的👉<a href=\"/asset/js_sources_bookmark.html\" download=\"js_sources_bookmark.html\">书签文件</a></li>\n</ul>\n<h2 id=\"Blogs-amp-Magazines\"><a href=\"#Blogs-amp-Magazines\" class=\"headerlink\" title=\"Blogs &amp; Magazines\"></a>Blogs &amp; Magazines</h2><ul>\n<li><a href=\"https://css-tricks.com/\" target=\"_blank\" rel=\"noopener\">CSS Tricks</a></li>\n<li><a href=\"https://dev.to/\" target=\"_blank\" rel=\"noopener\">Dev.to</a></li>\n<li><a href=\"https://javascriptweekly.com/\" target=\"_blank\" rel=\"noopener\">JavaScript Weekly</a></li>\n<li><a href=\"https://www.smashingmagazine.com/\" target=\"_blank\" rel=\"noopener\">Smashing Magazine</a></li>\n<li><a href=\"https://davidwalsh.name/\" target=\"_blank\" rel=\"noopener\">David Walsh Blog</a></li>\n<li><a href=\"https://www.sitepoint.com/\" target=\"_blank\" rel=\"noopener\">SitePoint</a></li>\n<li><a href=\"https://tympanus.net/codrops/\" target=\"_blank\" rel=\"noopener\">CoDrops</a></li>\n<li><a href=\"https://medium.com/dailyjs\" target=\"_blank\" rel=\"noopener\">Daily JS</a></li>\n<li><a href=\"https://bestofjs.org/\" target=\"_blank\" rel=\"noopener\">Best Of JS</a></li>\n<li><a href=\"https://echojs.com/\" target=\"_blank\" rel=\"noopener\">Echo JS</a></li>\n<li><a href=\"https://medium.com/\" target=\"_blank\" rel=\"noopener\">Medium</a></li>\n<li><a href=\"https://kentcdodds.com/blog/\" target=\"_blank\" rel=\"noopener\">Kent C. Dodds</a></li>\n<li><a href=\"https://twitter.com\" target=\"_blank\" rel=\"noopener\">Twitter</a></li>\n<li><a href=\"https://overreacted.io/\" target=\"_blank\" rel=\"noopener\">Overreacted</a></li>\n<li><a href=\"https://reddit.com\" target=\"_blank\" rel=\"noopener\">Reddit</a></li>\n<li><a href=\"https://news.ycombinator.com/\" target=\"_blank\" rel=\"noopener\">Hacker News</a></li>\n<li><a href=\"https://alligator.io/\" target=\"_blank\" rel=\"noopener\">Alligator.io</a></li>\n<li><a href=\"https://habr.com/en/\" target=\"_blank\" rel=\"noopener\">Habr</a>  </li>\n<li><a href=\"https://learn.freecodecamp.one/\" target=\"_blank\" rel=\"noopener\">freeCodeCamp</a></li>\n<li><a href=\"https://2ality.com/\" target=\"_blank\" rel=\"noopener\">2ality</a></li>\n<li><a href=\"https://scotch.io\" target=\"_blank\" rel=\"noopener\">Scotch</a></li>\n<li><a href=\"https://nodeweekly.com/\" target=\"_blank\" rel=\"noopener\">Node Weekly</a></li>\n<li><a href=\"https://hackernoon.com/\" target=\"_blank\" rel=\"noopener\">Hackernoon</a></li>\n<li><a href=\"https://the-emberjs-times.ongoodbits.com/\" target=\"_blank\" rel=\"noopener\">The Ember Times</a></li>\n<li><a href=\"https://react.statuscode.com/\" target=\"_blank\" rel=\"noopener\">React Status</a></li>\n<li><a href=\"https://frontendfoc.us/\" target=\"_blank\" rel=\"noopener\">Frontend Focus</a></li>\n<li><a href=\"https://indepth.dev/\" target=\"_blank\" rel=\"noopener\">Angular In Depth</a></li>\n<li><a href=\"https://web.dev/\" target=\"_blank\" rel=\"noopener\">Web.dev</a></li>\n<li><a href=\"https://wdrl.info/\" target=\"_blank\" rel=\"noopener\">Web Development Reading List</a></li>\n<li><a href=\"http://esnextnews.com/\" target=\"_blank\" rel=\"noopener\">ESNext News</a></li>\n<li><a href=\"https://changelog.com/\" target=\"_blank\" rel=\"noopener\">The Changelog</a></li>\n<li><a href=\"https://ponyfoo.com/\" target=\"_blank\" rel=\"noopener\">Pony Foo</a></li>\n<li><a href=\"https://www.robinwieruch.de/\" target=\"_blank\" rel=\"noopener\">Robin Wieruch</a></li>\n<li><a href=\"https://wesbos.com/\" target=\"_blank\" rel=\"noopener\">Wes Bos</a></li>\n</ul>\n<h2 id=\"Sites-amp-Courses\"><a href=\"#Sites-amp-Courses\" class=\"headerlink\" title=\"Sites &amp; Courses\"></a>Sites &amp; Courses</h2><ul>\n<li><a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/\" target=\"_blank\" rel=\"noopener\">MDN</a>   </li>\n<li><a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"noopener\">W3Schools</a></li>\n<li><a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" target=\"_blank\" rel=\"noopener\">freeCodeCamp</a></li>\n<li><a href=\"https://wesbos.com/\" target=\"_blank\" rel=\"noopener\">Wes Bos</a></li>\n<li><a href=\"https://www.codecademy.com/\" target=\"_blank\" rel=\"noopener\">Codecademy</a></li>\n<li><a href=\"https://www.leveluptutorials.com/\" target=\"_blank\" rel=\"noopener\">Level Up Tutorials</a></li>\n<li><a href=\"https://designcode.io/\" target=\"_blank\" rel=\"noopener\">Design+Code</a></li>\n<li><a href=\"https://www.udemy.com/\" target=\"_blank\" rel=\"noopener\">Udemy</a> </li>\n<li><a href=\"https://egghead.io/\" target=\"_blank\" rel=\"noopener\">Egghead.io</a></li>\n<li><a href=\"https://frontendmasters.com/\" target=\"_blank\" rel=\"noopener\">Frontend Masters</a></li>\n<li><a href=\"https://youtube.com\" target=\"_blank\" rel=\"noopener\">YouTube</a></li>\n<li><a href=\"https://www.vuemastery.com/\" target=\"_blank\" rel=\"noopener\">Vue Mastery</a></li>\n<li><a href=\"https://platzi.com/\" target=\"_blank\" rel=\"noopener\">Platzi</a></li>\n<li><a href=\"https://vueschool.io/\" target=\"_blank\" rel=\"noopener\">Vue School</a></li>\n<li><a href=\"https://laracasts.com/\" target=\"_blank\" rel=\"noopener\">Laracasts</a></li>\n<li><a href=\"https://www.traversymedia.com/\" target=\"_blank\" rel=\"noopener\">Traversy Media</a></li>\n<li><a href=\"https://medium.com/\" target=\"_blank\" rel=\"noopener\">Medium</a></li>\n<li><a href=\"https://www.udacity.com/\" target=\"_blank\" rel=\"noopener\">Udacity</a></li>\n<li><a href=\"https://kentcdodds.com/blog/\" target=\"_blank\" rel=\"noopener\">Kent C. Dodds</a></li>\n<li><a href=\"https://testingjavascript.com/\" target=\"_blank\" rel=\"noopener\">Testing JavaScript</a></li>\n<li><a href=\"https://www.lynda.com/\" target=\"_blank\" rel=\"noopener\">Lynda</a> </li>\n<li><a href=\"academind\">Academind</a></li>\n<li><a href=\"https://www.linkedin.com/learning/\" target=\"_blank\" rel=\"noopener\">LinkedIn Learning</a></li>\n<li><a href=\"https://teamtreehouse.com/\" target=\"_blank\" rel=\"noopener\">Treehouse</a></li>\n<li><a href=\"https://scrimba.com/\" target=\"_blank\" rel=\"noopener\">Scrimba</a></li>\n<li><a href=\"https://javascript.info/\" target=\"_blank\" rel=\"noopener\">JavaScript.info</a></li>\n<li><a href=\"https://tylermcginnis.com/\" target=\"_blank\" rel=\"noopener\">Tyle McGinnis</a></li>\n<li><a href=\"https://reddit.com\" target=\"_blank\" rel=\"noopener\">Reddit</a></li>\n<li><a href=\"https://ultimatecourses.com/\" target=\"_blank\" rel=\"noopener\">Ultimate Courses</a></li>\n<li><a href=\"https://caniuse.com\" target=\"_blank\" rel=\"noopener\">caniuse</a></li>\n<li><a href=\"https://overreacted.io/\" target=\"_blank\" rel=\"noopener\">Overreacted</a></li>\n<li><a href=\"https://devdocs.io\" target=\"_blank\" rel=\"noopener\">devdocs.io</a></li>\n</ul>\n<h2 id=\"Podcasts\"><a href=\"#Podcasts\" class=\"headerlink\" title=\"Podcasts\"></a>Podcasts</h2><ul>\n<li><a href=\"https://syntax.fm/\" target=\"_blank\" rel=\"noopener\">Syntax</a></li>\n<li><a href=\"https://changelog.com/\" target=\"_blank\" rel=\"noopener\">The Changelog</a></li>\n<li><a href=\"https://frontendhappyhour.com/\" target=\"_blank\" rel=\"noopener\">Front End Happy Hour</a></li>\n<li><a href=\"https://devchat.tv/js-jabber/\" target=\"_blank\" rel=\"noopener\">JavaScript Jabber</a></li>\n<li><a href=\"http://www.fullstackradio.com/\" target=\"_blank\" rel=\"noopener\">Full Stack Radio</a></li>\n<li><a href=\"https://shoptalkshow.com/\" target=\"_blank\" rel=\"noopener\">Shop Talk Show</a></li>\n<li><a href=\"https://changelog.com/jsparty\" target=\"_blank\" rel=\"noopener\">JS Party</a></li>\n<li><a href=\"https://blog.codepen.io/radio/\" target=\"_blank\" rel=\"noopener\">CodePen Radio</a></li>\n<li><a href=\"https://www.heavybit.com/library/podcasts/jamstack-radio/\" target=\"_blank\" rel=\"noopener\">JAMStack Radio</a></li>\n<li><a href=\"https://modernweb.podbean.com/\" target=\"_blank\" rel=\"noopener\">Modern Web</a></li>\n<li><a href=\"https://thewebplatformpodcast.com/\" target=\"_blank\" rel=\"noopener\">The Web Platform Podcast</a></li>\n<li><a href=\"https://codepen.io/\" target=\"_blank\" rel=\"noopener\">CodePen</a></li>\n<li><a href=\"https://reactpodcast.com/\" target=\"_blank\" rel=\"noopener\">React Podcast</a></li>\n<li><a href=\"https://softwareengineeringdaily.com/\" target=\"_blank\" rel=\"noopener\">Software Engineering Daily</a></li>\n<li><a href=\"https://ladybug.dev/\" target=\"_blank\" rel=\"noopener\">Ladybug Podcast</a></li>\n<li><a href=\"https://realtalkjavascript.simplecast.com/\" target=\"_blank\" rel=\"noopener\">Real Talk JavaScript</a></li>\n<li><a href=\"https://undefined.fm/\" target=\"_blank\" rel=\"noopener\">The Undefined Podcast</a></li>\n<li><a href=\"https://web-standards.ru/\" target=\"_blank\" rel=\"noopener\">Веб-стандарты</a></li>\n<li><a href=\"https://elmlang.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">Elm Slack</a></li>\n<li><a href=\"https://softskills.audio/\" target=\"_blank\" rel=\"noopener\">Soft Skills Engineering Podcast</a></li>\n<li><a href=\"https://frontendweekend.ml/\" target=\"_blank\" rel=\"noopener\">Frontend Weekend</a></li>\n<li><a href=\"https://elmtown.simplecast.fm/\" target=\"_blank\" rel=\"noopener\">Elm Town</a></li>\n<li><a href=\"https://www.theodinproject.com/\" target=\"_blank\" rel=\"noopener\">The Odin Project</a></li>\n<li><a href=\"https://developertea.simplecast.fm/\" target=\"_blank\" rel=\"noopener\">Developer Tea</a></li>\n<li><a href=\"https://www.redhat.com/en/command-line-heroes\" target=\"_blank\" rel=\"noopener\">Command Line Heroes</a></li>\n<li><a href=\"https://devchat.tv/adv-in-angular/\" target=\"_blank\" rel=\"noopener\">Adventures in Angular</a></li>\n<li><a href=\"https://spec.fm/podcasts/toolsday\" target=\"_blank\" rel=\"noopener\">Toolsday</a></li>\n<li><a href=\"https://www.codingblocks.net/\" target=\"_blank\" rel=\"noopener\">Coding Blocks</a></li>\n<li><a href=\"https://egghead.io/\" target=\"_blank\" rel=\"noopener\">Egghead.io</a></li>\n<li><a href=\"https://kentcdodds.com/blog/\" target=\"_blank\" rel=\"noopener\">Kent C. Dodds</a></li>\n<li><a href=\"https://embermap.com/\" target=\"_blank\" rel=\"noopener\">EmberMap</a></li>\n<li><a href=\"https://www.dotnetrocks.com/\" target=\"_blank\" rel=\"noopener\">.NET Rocks</a></li>\n<li><a href=\"https://devchat.tv/views-on-vue/\" target=\"_blank\" rel=\"noopener\">Views on Vue</a></li>\n<li><a href=\"https://player.fm/series/reason-town\" target=\"_blank\" rel=\"noopener\">Reason Town</a></li>\n<li><a href=\"https://hipsters.tech/\" target=\"_blank\" rel=\"noopener\">Hipsters Ponto Tech</a></li>\n<li><a href=\"https://devmode.fm/\" target=\"_blank\" rel=\"noopener\">DevMode.fm</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q\" target=\"_blank\" rel=\"noopener\">Fun Fun Function</a></li>\n</ul>\n"},{"title":"【State of JS】2019年度javascript行业报告","date":"2019-12-30T16:00:00.000Z","description":"stateofjs团队曾以为Javascript生态圈已经趋于稳定，2018是他们的最后一次行业调查，但事实是，Javascript仍没有停下变化的脚步","toc":1,"top":0,"_content":"## 作者前言\n- [stateofjs网址](https://2019.stateofjs.com)\n- 2018年，我第一次关注stateofjs调查，目的是通过真实数据，更真实广泛的了解Javascript生态圈的变化，便于自己对于主流技术的了解和**自检**。\n- 2018的调查，20,268参与者中，只有75位中国地区开发者，比例是0.37%。\n- 今年，我也参与到了调查当中，提供了一份我的数据。\n- 今年总共有21,717位开发者参与调查，其中有247位中国地区的开发者，比例是1.3%。\n- 中国地区开发者比例，说明这个调查并不能反映中国地区的Javascript真实发展状况，但是比例的增加从侧面说明了中国开发者正在向国际靠拢，希望有越来越多的中国开发者能跨越国界，走向世界技术圈\n- ⭐今年的报告，有一项新增的数据，引起了我的关注，就是**Javascript开发者信息源**，这是我根据报告数据整理出来的[Javascript开发者信息源聚合链接](https://www.scarsu.com/2019_javascript_sources)，这项数据有助于我们时刻关注Javascript社区的主流信息\n\n\n## 数据来源\n**今年增加了一项参与调查途径的分布图**\n个人认为，这一项数据，对于我们了解前端主流信息源和社交渠道有一定的参考价值\n![](/images/stateofjs/201908.png)\n\n**调查参与者 国家分布图：**\n\n![](/images/stateofjs/201903.png)\n\n**调查参与者 薪资分布图：**\n\n![](/images/stateofjs/201904.png)\n\n**调查参与者 开发经验分布图：**\n\n![](/images/stateofjs/201905.png)\n\n**调查参与者 所属公司体量分布图：**\n\n![](/images/stateofjs/201906.png)\n\n**调查参与者 性别分布图：**\n\n![](/images/stateofjs/201907.png)\n\n## 概览\n\n![](/images/stateofjs/201901.png)\n\n![](/images/stateofjs/201902.png)\n\n\n## JavaScript 特性\n- 这是今年新增的一项数据\n- Javascript是一个不停更新的语言，每年都有新的Ecmascript版本发布，从箭头函数到解构，过去几年中添加的新特性现在已成为我们编写JavaScript不可或缺的一部分。\n- 因此，从今年开始，除了开发Javascript使用的工具外，增加了这项数据：JavaScript编写方式：所使用的模式，语法和特性\n\n### 语法\n\n![箭头函数、解构、扩展运算符](/images/stateofjs/201909.png)\n\n### 语言\n\n![代理、异步promise、修饰器](/images/stateofjs/201911.png)\n\n### 数据结构\n\n![](/images/stateofjs/201912.png)\n\n### 浏览器API\n\n![fetch、i18n、websocket、localstorage...](/images/stateofjs/201910.png)\n\n### 其他特性\n\n![PWA、WASM](/images/stateofjs/201913.png)\n\n\n## JavaScript Flavors\n\n\n可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集\n\n![](/images/stateofjs/201914.png)\n\n\n## 前端框架 Front-end Frameworks\n\n![](/images/stateofjs/201915.png)\n\n## 数据层 Data Layer\n\n![](/images/stateofjs/201916.png)\n\n## 后端框架 Back-end Frameworks\n\n![](/images/stateofjs/201917.png)\n\n## 测试 Testing\n\n![](/images/stateofjs/201918.png)\n\n## 移动端/客户端 Mobile & Desktop\n\n![](/images/stateofjs/201919.png)\n\n## 函数库 Utility Libraries\n\n![](/images/stateofjs/201920.png)\n\n![](/images/stateofjs/201921.png)\n\n## 编辑器 Text Editors\n\n![](/images/stateofjs/201922.png)\n\n![](/images/stateofjs/201923.png)\n\n## js 开发者使用的浏览器\n\n![](/images/stateofjs/201924.png)\n\n![](/images/stateofjs/201925.png)\n\n## 构建工具 Build Tools\n\n![](/images/stateofjs/201926.png)\n\n![](/images/stateofjs/201927.png)\n\n## js 开发者使用的其他语言 Other Languages\n\n![](/images/stateofjs/201928.png)\n\n![](/images/stateofjs/201929.png)\n\n## 信息源（NEW*）\n- 这是新年调查新增的一项数据\n- 这项数据显示了调查者依赖的信息源,包括博客和杂志、网站和课程、播客\n- [点击此处查看这些信息源的链接](https://www.scarsu.com/2019_javascript_sources)\n\n![](/images/stateofjs/201930.png)\n![](/images/stateofjs/201931.png)\n![](/images/stateofjs/201932.png)\n![](/images/stateofjs/201933.png)\n![](/images/stateofjs/201934.png)\n![](/images/stateofjs/201935.png)\n\n## 开发者的感受\n\n**“Javascript 正在往正确的方向发展”**\n\n![](/images/stateofjs/201936.png)\n\n**“当下构建 Javascript app 过于复杂惹”**\n\n![](/images/stateofjs/201937.png)\n\n**“Javascript 被过度使用”**\n\n![](/images/stateofjs/201938.png)\n\n**“我喜欢构建 JavaScript 应用程序”**\n\n![](/images/stateofjs/201939.png)\n\n**“我希望 JavaScript 成为我的主要编程语言”**\n\n![](/images/stateofjs/201940.png)\n\n**“JavaScript 生态系统变化太快”**\n\n![](/images/stateofjs/201941.png)\n\n## 年度之最\n\n-   **被采用最多的特性: Arrow Function**\n\n> 箭头函数是本年度使用最多的JavaScript功能，拥有97.8％的用户使用它。\n> \\> promise \\> 扩展运算符\n\n-   **使用最多的技术: React**\n\n> React是今年使用最多的技术，拥有16099个用户。\n> \\> Express \\> Redux\n\n-   **满意度最高: Jest**\n\n> 有96.4％的用户愿意再次使用它，Jest再次证明了它不是在开玩笑。\n> \\> GraphQL \\> Cypress\n\n-   **最感兴趣: GraphQL**\n\n> 听说过GraphQL的开发人员中有89.6％希望学习它。 那是很重要的兴趣！\n> \\> Jest \\> Apollo\n\n-   **最广泛的信息源: Stack Overflow**\n\n> 拥有17942个用户的Stack Overflow是今年使用最多的资源。\n> \\> MDN \\> CSS Tricks\n\n-   **黑马奖: Svelte**\n\n> 斯维尔特（Svelte）在今年的调查中首次亮相，我们迫不及待想知道它的去向\n> \\> Next.js \\> Stencil\n\n## 总结\nstateofjs团队在总结中说：\n> You know how you sometimes start tweaking a few lines of code here and there, then realize a couple functions could use some refactoring, and then one things leading to another you find yourself a few days later in the process of setting up a brand new stack complete with a database and GraphQL API?\n> \n> This is what happened to us this year. And while it resulted in quite a few stressful evenings as we tried to wrap this up and release the State of JavaScript 2019 results in, well, 2019; it also means we now have a much more powerful and flexible stack to collect and analyze data going forward.\n\n“你有时候会在这里那里调整几行代码,然后发现有几个函数可以重构,然后一个变更引发另一个变更，几天后你发现重构的过程中，用上了数据库和GraphQL API，建立了一个全新的技术栈...”\n\n这是今年发生在他们身上的故事，使用数据库和GraphQL重构，使得整个stateofjs项目的开发、数据收集、数据分析等工作，更加灵活、更加强大。\n他们的重构将有助于分析所有那些掀起波澜的新工具的发展历程，例如 Svelte，Stencil，Nest 或 Flutter...\n\n无论前端社区不断向你扔出多少奇怪名字的库，跟紧stateofjs的调查，及时自检，总归不会掉队😘😆","source":"_posts/2019_javascript_report.md","raw":"---\ntitle: 【State of JS】2019年度javascript行业报告\ncategories:\n    - 10技术 | 行业信息\ntags:\n    - stateOfJs\ndate: 2019-12-31\ndescription: stateofjs团队曾以为Javascript生态圈已经趋于稳定，2018是他们的最后一次行业调查，但事实是，Javascript仍没有停下变化的脚步\ntoc: 1\ntop: 0\n---\n## 作者前言\n- [stateofjs网址](https://2019.stateofjs.com)\n- 2018年，我第一次关注stateofjs调查，目的是通过真实数据，更真实广泛的了解Javascript生态圈的变化，便于自己对于主流技术的了解和**自检**。\n- 2018的调查，20,268参与者中，只有75位中国地区开发者，比例是0.37%。\n- 今年，我也参与到了调查当中，提供了一份我的数据。\n- 今年总共有21,717位开发者参与调查，其中有247位中国地区的开发者，比例是1.3%。\n- 中国地区开发者比例，说明这个调查并不能反映中国地区的Javascript真实发展状况，但是比例的增加从侧面说明了中国开发者正在向国际靠拢，希望有越来越多的中国开发者能跨越国界，走向世界技术圈\n- ⭐今年的报告，有一项新增的数据，引起了我的关注，就是**Javascript开发者信息源**，这是我根据报告数据整理出来的[Javascript开发者信息源聚合链接](https://www.scarsu.com/2019_javascript_sources)，这项数据有助于我们时刻关注Javascript社区的主流信息\n\n\n## 数据来源\n**今年增加了一项参与调查途径的分布图**\n个人认为，这一项数据，对于我们了解前端主流信息源和社交渠道有一定的参考价值\n![](/images/stateofjs/201908.png)\n\n**调查参与者 国家分布图：**\n\n![](/images/stateofjs/201903.png)\n\n**调查参与者 薪资分布图：**\n\n![](/images/stateofjs/201904.png)\n\n**调查参与者 开发经验分布图：**\n\n![](/images/stateofjs/201905.png)\n\n**调查参与者 所属公司体量分布图：**\n\n![](/images/stateofjs/201906.png)\n\n**调查参与者 性别分布图：**\n\n![](/images/stateofjs/201907.png)\n\n## 概览\n\n![](/images/stateofjs/201901.png)\n\n![](/images/stateofjs/201902.png)\n\n\n## JavaScript 特性\n- 这是今年新增的一项数据\n- Javascript是一个不停更新的语言，每年都有新的Ecmascript版本发布，从箭头函数到解构，过去几年中添加的新特性现在已成为我们编写JavaScript不可或缺的一部分。\n- 因此，从今年开始，除了开发Javascript使用的工具外，增加了这项数据：JavaScript编写方式：所使用的模式，语法和特性\n\n### 语法\n\n![箭头函数、解构、扩展运算符](/images/stateofjs/201909.png)\n\n### 语言\n\n![代理、异步promise、修饰器](/images/stateofjs/201911.png)\n\n### 数据结构\n\n![](/images/stateofjs/201912.png)\n\n### 浏览器API\n\n![fetch、i18n、websocket、localstorage...](/images/stateofjs/201910.png)\n\n### 其他特性\n\n![PWA、WASM](/images/stateofjs/201913.png)\n\n\n## JavaScript Flavors\n\n\n可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集\n\n![](/images/stateofjs/201914.png)\n\n\n## 前端框架 Front-end Frameworks\n\n![](/images/stateofjs/201915.png)\n\n## 数据层 Data Layer\n\n![](/images/stateofjs/201916.png)\n\n## 后端框架 Back-end Frameworks\n\n![](/images/stateofjs/201917.png)\n\n## 测试 Testing\n\n![](/images/stateofjs/201918.png)\n\n## 移动端/客户端 Mobile & Desktop\n\n![](/images/stateofjs/201919.png)\n\n## 函数库 Utility Libraries\n\n![](/images/stateofjs/201920.png)\n\n![](/images/stateofjs/201921.png)\n\n## 编辑器 Text Editors\n\n![](/images/stateofjs/201922.png)\n\n![](/images/stateofjs/201923.png)\n\n## js 开发者使用的浏览器\n\n![](/images/stateofjs/201924.png)\n\n![](/images/stateofjs/201925.png)\n\n## 构建工具 Build Tools\n\n![](/images/stateofjs/201926.png)\n\n![](/images/stateofjs/201927.png)\n\n## js 开发者使用的其他语言 Other Languages\n\n![](/images/stateofjs/201928.png)\n\n![](/images/stateofjs/201929.png)\n\n## 信息源（NEW*）\n- 这是新年调查新增的一项数据\n- 这项数据显示了调查者依赖的信息源,包括博客和杂志、网站和课程、播客\n- [点击此处查看这些信息源的链接](https://www.scarsu.com/2019_javascript_sources)\n\n![](/images/stateofjs/201930.png)\n![](/images/stateofjs/201931.png)\n![](/images/stateofjs/201932.png)\n![](/images/stateofjs/201933.png)\n![](/images/stateofjs/201934.png)\n![](/images/stateofjs/201935.png)\n\n## 开发者的感受\n\n**“Javascript 正在往正确的方向发展”**\n\n![](/images/stateofjs/201936.png)\n\n**“当下构建 Javascript app 过于复杂惹”**\n\n![](/images/stateofjs/201937.png)\n\n**“Javascript 被过度使用”**\n\n![](/images/stateofjs/201938.png)\n\n**“我喜欢构建 JavaScript 应用程序”**\n\n![](/images/stateofjs/201939.png)\n\n**“我希望 JavaScript 成为我的主要编程语言”**\n\n![](/images/stateofjs/201940.png)\n\n**“JavaScript 生态系统变化太快”**\n\n![](/images/stateofjs/201941.png)\n\n## 年度之最\n\n-   **被采用最多的特性: Arrow Function**\n\n> 箭头函数是本年度使用最多的JavaScript功能，拥有97.8％的用户使用它。\n> \\> promise \\> 扩展运算符\n\n-   **使用最多的技术: React**\n\n> React是今年使用最多的技术，拥有16099个用户。\n> \\> Express \\> Redux\n\n-   **满意度最高: Jest**\n\n> 有96.4％的用户愿意再次使用它，Jest再次证明了它不是在开玩笑。\n> \\> GraphQL \\> Cypress\n\n-   **最感兴趣: GraphQL**\n\n> 听说过GraphQL的开发人员中有89.6％希望学习它。 那是很重要的兴趣！\n> \\> Jest \\> Apollo\n\n-   **最广泛的信息源: Stack Overflow**\n\n> 拥有17942个用户的Stack Overflow是今年使用最多的资源。\n> \\> MDN \\> CSS Tricks\n\n-   **黑马奖: Svelte**\n\n> 斯维尔特（Svelte）在今年的调查中首次亮相，我们迫不及待想知道它的去向\n> \\> Next.js \\> Stencil\n\n## 总结\nstateofjs团队在总结中说：\n> You know how you sometimes start tweaking a few lines of code here and there, then realize a couple functions could use some refactoring, and then one things leading to another you find yourself a few days later in the process of setting up a brand new stack complete with a database and GraphQL API?\n> \n> This is what happened to us this year. And while it resulted in quite a few stressful evenings as we tried to wrap this up and release the State of JavaScript 2019 results in, well, 2019; it also means we now have a much more powerful and flexible stack to collect and analyze data going forward.\n\n“你有时候会在这里那里调整几行代码,然后发现有几个函数可以重构,然后一个变更引发另一个变更，几天后你发现重构的过程中，用上了数据库和GraphQL API，建立了一个全新的技术栈...”\n\n这是今年发生在他们身上的故事，使用数据库和GraphQL重构，使得整个stateofjs项目的开发、数据收集、数据分析等工作，更加灵活、更加强大。\n他们的重构将有助于分析所有那些掀起波澜的新工具的发展历程，例如 Svelte，Stencil，Nest 或 Flutter...\n\n无论前端社区不断向你扔出多少奇怪名字的库，跟紧stateofjs的调查，及时自检，总归不会掉队😘😆","slug":"2019_javascript_report","published":1,"updated":"2021-01-22T09:59:20.154Z","_id":"ckir88ifa000jc8y6xaw3eq0u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"作者前言\"><a href=\"#作者前言\" class=\"headerlink\" title=\"作者前言\"></a>作者前言</h2><ul>\n<li><a href=\"https://2019.stateofjs.com\" target=\"_blank\" rel=\"noopener\">stateofjs网址</a></li>\n<li>2018年，我第一次关注stateofjs调查，目的是通过真实数据，更真实广泛的了解Javascript生态圈的变化，便于自己对于主流技术的了解和<strong>自检</strong>。</li>\n<li>2018的调查，20,268参与者中，只有75位中国地区开发者，比例是0.37%。</li>\n<li>今年，我也参与到了调查当中，提供了一份我的数据。</li>\n<li>今年总共有21,717位开发者参与调查，其中有247位中国地区的开发者，比例是1.3%。</li>\n<li>中国地区开发者比例，说明这个调查并不能反映中国地区的Javascript真实发展状况，但是比例的增加从侧面说明了中国开发者正在向国际靠拢，希望有越来越多的中国开发者能跨越国界，走向世界技术圈</li>\n<li>⭐今年的报告，有一项新增的数据，引起了我的关注，就是<strong>Javascript开发者信息源</strong>，这是我根据报告数据整理出来的<a href=\"https://www.scarsu.com/2019_javascript_sources\">Javascript开发者信息源聚合链接</a>，这项数据有助于我们时刻关注Javascript社区的主流信息</li>\n</ul>\n<h2 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h2><p><strong>今年增加了一项参与调查途径的分布图</strong><br>个人认为，这一项数据，对于我们了解前端主流信息源和社交渠道有一定的参考价值<br><img src=\"/images/stateofjs/201908.png\" alt></p>\n<p><strong>调查参与者 国家分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201903.png\" alt></p>\n<p><strong>调查参与者 薪资分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201904.png\" alt></p>\n<p><strong>调查参与者 开发经验分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201905.png\" alt></p>\n<p><strong>调查参与者 所属公司体量分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201906.png\" alt></p>\n<p><strong>调查参与者 性别分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201907.png\" alt></p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p><img src=\"/images/stateofjs/201901.png\" alt></p>\n<p><img src=\"/images/stateofjs/201902.png\" alt></p>\n<h2 id=\"JavaScript-特性\"><a href=\"#JavaScript-特性\" class=\"headerlink\" title=\"JavaScript 特性\"></a>JavaScript 特性</h2><ul>\n<li>这是今年新增的一项数据</li>\n<li>Javascript是一个不停更新的语言，每年都有新的Ecmascript版本发布，从箭头函数到解构，过去几年中添加的新特性现在已成为我们编写JavaScript不可或缺的一部分。</li>\n<li>因此，从今年开始，除了开发Javascript使用的工具外，增加了这项数据：JavaScript编写方式：所使用的模式，语法和特性</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><img src=\"/images/stateofjs/201909.png\" alt=\"箭头函数、解构、扩展运算符\"></p>\n<h3 id=\"语言\"><a href=\"#语言\" class=\"headerlink\" title=\"语言\"></a>语言</h3><p><img src=\"/images/stateofjs/201911.png\" alt=\"代理、异步promise、修饰器\"></p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p><img src=\"/images/stateofjs/201912.png\" alt></p>\n<h3 id=\"浏览器API\"><a href=\"#浏览器API\" class=\"headerlink\" title=\"浏览器API\"></a>浏览器API</h3><p><img src=\"/images/stateofjs/201910.png\" alt=\"fetch、i18n、websocket、localstorage...\"></p>\n<h3 id=\"其他特性\"><a href=\"#其他特性\" class=\"headerlink\" title=\"其他特性\"></a>其他特性</h3><p><img src=\"/images/stateofjs/201913.png\" alt=\"PWA、WASM\"></p>\n<h2 id=\"JavaScript-Flavors\"><a href=\"#JavaScript-Flavors\" class=\"headerlink\" title=\"JavaScript Flavors\"></a>JavaScript Flavors</h2><p>可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集</p>\n<p><img src=\"/images/stateofjs/201914.png\" alt></p>\n<h2 id=\"前端框架-Front-end-Frameworks\"><a href=\"#前端框架-Front-end-Frameworks\" class=\"headerlink\" title=\"前端框架 Front-end Frameworks\"></a>前端框架 Front-end Frameworks</h2><p><img src=\"/images/stateofjs/201915.png\" alt></p>\n<h2 id=\"数据层-Data-Layer\"><a href=\"#数据层-Data-Layer\" class=\"headerlink\" title=\"数据层 Data Layer\"></a>数据层 Data Layer</h2><p><img src=\"/images/stateofjs/201916.png\" alt></p>\n<h2 id=\"后端框架-Back-end-Frameworks\"><a href=\"#后端框架-Back-end-Frameworks\" class=\"headerlink\" title=\"后端框架 Back-end Frameworks\"></a>后端框架 Back-end Frameworks</h2><p><img src=\"/images/stateofjs/201917.png\" alt></p>\n<h2 id=\"测试-Testing\"><a href=\"#测试-Testing\" class=\"headerlink\" title=\"测试 Testing\"></a>测试 Testing</h2><p><img src=\"/images/stateofjs/201918.png\" alt></p>\n<h2 id=\"移动端-客户端-Mobile-amp-Desktop\"><a href=\"#移动端-客户端-Mobile-amp-Desktop\" class=\"headerlink\" title=\"移动端/客户端 Mobile &amp; Desktop\"></a>移动端/客户端 Mobile &amp; Desktop</h2><p><img src=\"/images/stateofjs/201919.png\" alt></p>\n<h2 id=\"函数库-Utility-Libraries\"><a href=\"#函数库-Utility-Libraries\" class=\"headerlink\" title=\"函数库 Utility Libraries\"></a>函数库 Utility Libraries</h2><p><img src=\"/images/stateofjs/201920.png\" alt></p>\n<p><img src=\"/images/stateofjs/201921.png\" alt></p>\n<h2 id=\"编辑器-Text-Editors\"><a href=\"#编辑器-Text-Editors\" class=\"headerlink\" title=\"编辑器 Text Editors\"></a>编辑器 Text Editors</h2><p><img src=\"/images/stateofjs/201922.png\" alt></p>\n<p><img src=\"/images/stateofjs/201923.png\" alt></p>\n<h2 id=\"js-开发者使用的浏览器\"><a href=\"#js-开发者使用的浏览器\" class=\"headerlink\" title=\"js 开发者使用的浏览器\"></a>js 开发者使用的浏览器</h2><p><img src=\"/images/stateofjs/201924.png\" alt></p>\n<p><img src=\"/images/stateofjs/201925.png\" alt></p>\n<h2 id=\"构建工具-Build-Tools\"><a href=\"#构建工具-Build-Tools\" class=\"headerlink\" title=\"构建工具 Build Tools\"></a>构建工具 Build Tools</h2><p><img src=\"/images/stateofjs/201926.png\" alt></p>\n<p><img src=\"/images/stateofjs/201927.png\" alt></p>\n<h2 id=\"js-开发者使用的其他语言-Other-Languages\"><a href=\"#js-开发者使用的其他语言-Other-Languages\" class=\"headerlink\" title=\"js 开发者使用的其他语言 Other Languages\"></a>js 开发者使用的其他语言 Other Languages</h2><p><img src=\"/images/stateofjs/201928.png\" alt></p>\n<p><img src=\"/images/stateofjs/201929.png\" alt></p>\n<h2 id=\"信息源（NEW-）\"><a href=\"#信息源（NEW-）\" class=\"headerlink\" title=\"信息源（NEW*）\"></a>信息源（NEW*）</h2><ul>\n<li>这是新年调查新增的一项数据</li>\n<li>这项数据显示了调查者依赖的信息源,包括博客和杂志、网站和课程、播客</li>\n<li><a href=\"https://www.scarsu.com/2019_javascript_sources\">点击此处查看这些信息源的链接</a></li>\n</ul>\n<p><img src=\"/images/stateofjs/201930.png\" alt><br><img src=\"/images/stateofjs/201931.png\" alt><br><img src=\"/images/stateofjs/201932.png\" alt><br><img src=\"/images/stateofjs/201933.png\" alt><br><img src=\"/images/stateofjs/201934.png\" alt><br><img src=\"/images/stateofjs/201935.png\" alt></p>\n<h2 id=\"开发者的感受\"><a href=\"#开发者的感受\" class=\"headerlink\" title=\"开发者的感受\"></a>开发者的感受</h2><p><strong>“Javascript 正在往正确的方向发展”</strong></p>\n<p><img src=\"/images/stateofjs/201936.png\" alt></p>\n<p><strong>“当下构建 Javascript app 过于复杂惹”</strong></p>\n<p><img src=\"/images/stateofjs/201937.png\" alt></p>\n<p><strong>“Javascript 被过度使用”</strong></p>\n<p><img src=\"/images/stateofjs/201938.png\" alt></p>\n<p><strong>“我喜欢构建 JavaScript 应用程序”</strong></p>\n<p><img src=\"/images/stateofjs/201939.png\" alt></p>\n<p><strong>“我希望 JavaScript 成为我的主要编程语言”</strong></p>\n<p><img src=\"/images/stateofjs/201940.png\" alt></p>\n<p><strong>“JavaScript 生态系统变化太快”</strong></p>\n<p><img src=\"/images/stateofjs/201941.png\" alt></p>\n<h2 id=\"年度之最\"><a href=\"#年度之最\" class=\"headerlink\" title=\"年度之最\"></a>年度之最</h2><ul>\n<li><strong>被采用最多的特性: Arrow Function</strong></li>\n</ul>\n<blockquote>\n<p>箭头函数是本年度使用最多的JavaScript功能，拥有97.8％的用户使用它。<br>> promise > 扩展运算符</p>\n</blockquote>\n<ul>\n<li><strong>使用最多的技术: React</strong></li>\n</ul>\n<blockquote>\n<p>React是今年使用最多的技术，拥有16099个用户。<br>> Express > Redux</p>\n</blockquote>\n<ul>\n<li><strong>满意度最高: Jest</strong></li>\n</ul>\n<blockquote>\n<p>有96.4％的用户愿意再次使用它，Jest再次证明了它不是在开玩笑。<br>> GraphQL > Cypress</p>\n</blockquote>\n<ul>\n<li><strong>最感兴趣: GraphQL</strong></li>\n</ul>\n<blockquote>\n<p>听说过GraphQL的开发人员中有89.6％希望学习它。 那是很重要的兴趣！<br>> Jest > Apollo</p>\n</blockquote>\n<ul>\n<li><strong>最广泛的信息源: Stack Overflow</strong></li>\n</ul>\n<blockquote>\n<p>拥有17942个用户的Stack Overflow是今年使用最多的资源。<br>> MDN > CSS Tricks</p>\n</blockquote>\n<ul>\n<li><strong>黑马奖: Svelte</strong></li>\n</ul>\n<blockquote>\n<p>斯维尔特（Svelte）在今年的调查中首次亮相，我们迫不及待想知道它的去向<br>> Next.js > Stencil</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>stateofjs团队在总结中说：</p>\n<blockquote>\n<p>You know how you sometimes start tweaking a few lines of code here and there, then realize a couple functions could use some refactoring, and then one things leading to another you find yourself a few days later in the process of setting up a brand new stack complete with a database and GraphQL API?</p>\n<p>This is what happened to us this year. And while it resulted in quite a few stressful evenings as we tried to wrap this up and release the State of JavaScript 2019 results in, well, 2019; it also means we now have a much more powerful and flexible stack to collect and analyze data going forward.</p>\n</blockquote>\n<p>“你有时候会在这里那里调整几行代码,然后发现有几个函数可以重构,然后一个变更引发另一个变更，几天后你发现重构的过程中，用上了数据库和GraphQL API，建立了一个全新的技术栈…”</p>\n<p>这是今年发生在他们身上的故事，使用数据库和GraphQL重构，使得整个stateofjs项目的开发、数据收集、数据分析等工作，更加灵活、更加强大。<br>他们的重构将有助于分析所有那些掀起波澜的新工具的发展历程，例如 Svelte，Stencil，Nest 或 Flutter…</p>\n<p>无论前端社区不断向你扔出多少奇怪名字的库，跟紧stateofjs的调查，及时自检，总归不会掉队😘😆</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"作者前言\"><a href=\"#作者前言\" class=\"headerlink\" title=\"作者前言\"></a>作者前言</h2><ul>\n<li><a href=\"https://2019.stateofjs.com\" target=\"_blank\" rel=\"noopener\">stateofjs网址</a></li>\n<li>2018年，我第一次关注stateofjs调查，目的是通过真实数据，更真实广泛的了解Javascript生态圈的变化，便于自己对于主流技术的了解和<strong>自检</strong>。</li>\n<li>2018的调查，20,268参与者中，只有75位中国地区开发者，比例是0.37%。</li>\n<li>今年，我也参与到了调查当中，提供了一份我的数据。</li>\n<li>今年总共有21,717位开发者参与调查，其中有247位中国地区的开发者，比例是1.3%。</li>\n<li>中国地区开发者比例，说明这个调查并不能反映中国地区的Javascript真实发展状况，但是比例的增加从侧面说明了中国开发者正在向国际靠拢，希望有越来越多的中国开发者能跨越国界，走向世界技术圈</li>\n<li>⭐今年的报告，有一项新增的数据，引起了我的关注，就是<strong>Javascript开发者信息源</strong>，这是我根据报告数据整理出来的<a href=\"https://www.scarsu.com/2019_javascript_sources\">Javascript开发者信息源聚合链接</a>，这项数据有助于我们时刻关注Javascript社区的主流信息</li>\n</ul>\n<h2 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h2><p><strong>今年增加了一项参与调查途径的分布图</strong><br>个人认为，这一项数据，对于我们了解前端主流信息源和社交渠道有一定的参考价值<br><img src=\"/images/stateofjs/201908.png\" alt></p>\n<p><strong>调查参与者 国家分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201903.png\" alt></p>\n<p><strong>调查参与者 薪资分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201904.png\" alt></p>\n<p><strong>调查参与者 开发经验分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201905.png\" alt></p>\n<p><strong>调查参与者 所属公司体量分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201906.png\" alt></p>\n<p><strong>调查参与者 性别分布图：</strong></p>\n<p><img src=\"/images/stateofjs/201907.png\" alt></p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p><img src=\"/images/stateofjs/201901.png\" alt></p>\n<p><img src=\"/images/stateofjs/201902.png\" alt></p>\n<h2 id=\"JavaScript-特性\"><a href=\"#JavaScript-特性\" class=\"headerlink\" title=\"JavaScript 特性\"></a>JavaScript 特性</h2><ul>\n<li>这是今年新增的一项数据</li>\n<li>Javascript是一个不停更新的语言，每年都有新的Ecmascript版本发布，从箭头函数到解构，过去几年中添加的新特性现在已成为我们编写JavaScript不可或缺的一部分。</li>\n<li>因此，从今年开始，除了开发Javascript使用的工具外，增加了这项数据：JavaScript编写方式：所使用的模式，语法和特性</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><img src=\"/images/stateofjs/201909.png\" alt=\"箭头函数、解构、扩展运算符\"></p>\n<h3 id=\"语言\"><a href=\"#语言\" class=\"headerlink\" title=\"语言\"></a>语言</h3><p><img src=\"/images/stateofjs/201911.png\" alt=\"代理、异步promise、修饰器\"></p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p><img src=\"/images/stateofjs/201912.png\" alt></p>\n<h3 id=\"浏览器API\"><a href=\"#浏览器API\" class=\"headerlink\" title=\"浏览器API\"></a>浏览器API</h3><p><img src=\"/images/stateofjs/201910.png\" alt=\"fetch、i18n、websocket、localstorage...\"></p>\n<h3 id=\"其他特性\"><a href=\"#其他特性\" class=\"headerlink\" title=\"其他特性\"></a>其他特性</h3><p><img src=\"/images/stateofjs/201913.png\" alt=\"PWA、WASM\"></p>\n<h2 id=\"JavaScript-Flavors\"><a href=\"#JavaScript-Flavors\" class=\"headerlink\" title=\"JavaScript Flavors\"></a>JavaScript Flavors</h2><p>可以编译成 javasript 代码 的 各种语言/语法规范/javascript 超集</p>\n<p><img src=\"/images/stateofjs/201914.png\" alt></p>\n<h2 id=\"前端框架-Front-end-Frameworks\"><a href=\"#前端框架-Front-end-Frameworks\" class=\"headerlink\" title=\"前端框架 Front-end Frameworks\"></a>前端框架 Front-end Frameworks</h2><p><img src=\"/images/stateofjs/201915.png\" alt></p>\n<h2 id=\"数据层-Data-Layer\"><a href=\"#数据层-Data-Layer\" class=\"headerlink\" title=\"数据层 Data Layer\"></a>数据层 Data Layer</h2><p><img src=\"/images/stateofjs/201916.png\" alt></p>\n<h2 id=\"后端框架-Back-end-Frameworks\"><a href=\"#后端框架-Back-end-Frameworks\" class=\"headerlink\" title=\"后端框架 Back-end Frameworks\"></a>后端框架 Back-end Frameworks</h2><p><img src=\"/images/stateofjs/201917.png\" alt></p>\n<h2 id=\"测试-Testing\"><a href=\"#测试-Testing\" class=\"headerlink\" title=\"测试 Testing\"></a>测试 Testing</h2><p><img src=\"/images/stateofjs/201918.png\" alt></p>\n<h2 id=\"移动端-客户端-Mobile-amp-Desktop\"><a href=\"#移动端-客户端-Mobile-amp-Desktop\" class=\"headerlink\" title=\"移动端/客户端 Mobile &amp; Desktop\"></a>移动端/客户端 Mobile &amp; Desktop</h2><p><img src=\"/images/stateofjs/201919.png\" alt></p>\n<h2 id=\"函数库-Utility-Libraries\"><a href=\"#函数库-Utility-Libraries\" class=\"headerlink\" title=\"函数库 Utility Libraries\"></a>函数库 Utility Libraries</h2><p><img src=\"/images/stateofjs/201920.png\" alt></p>\n<p><img src=\"/images/stateofjs/201921.png\" alt></p>\n<h2 id=\"编辑器-Text-Editors\"><a href=\"#编辑器-Text-Editors\" class=\"headerlink\" title=\"编辑器 Text Editors\"></a>编辑器 Text Editors</h2><p><img src=\"/images/stateofjs/201922.png\" alt></p>\n<p><img src=\"/images/stateofjs/201923.png\" alt></p>\n<h2 id=\"js-开发者使用的浏览器\"><a href=\"#js-开发者使用的浏览器\" class=\"headerlink\" title=\"js 开发者使用的浏览器\"></a>js 开发者使用的浏览器</h2><p><img src=\"/images/stateofjs/201924.png\" alt></p>\n<p><img src=\"/images/stateofjs/201925.png\" alt></p>\n<h2 id=\"构建工具-Build-Tools\"><a href=\"#构建工具-Build-Tools\" class=\"headerlink\" title=\"构建工具 Build Tools\"></a>构建工具 Build Tools</h2><p><img src=\"/images/stateofjs/201926.png\" alt></p>\n<p><img src=\"/images/stateofjs/201927.png\" alt></p>\n<h2 id=\"js-开发者使用的其他语言-Other-Languages\"><a href=\"#js-开发者使用的其他语言-Other-Languages\" class=\"headerlink\" title=\"js 开发者使用的其他语言 Other Languages\"></a>js 开发者使用的其他语言 Other Languages</h2><p><img src=\"/images/stateofjs/201928.png\" alt></p>\n<p><img src=\"/images/stateofjs/201929.png\" alt></p>\n<h2 id=\"信息源（NEW-）\"><a href=\"#信息源（NEW-）\" class=\"headerlink\" title=\"信息源（NEW*）\"></a>信息源（NEW*）</h2><ul>\n<li>这是新年调查新增的一项数据</li>\n<li>这项数据显示了调查者依赖的信息源,包括博客和杂志、网站和课程、播客</li>\n<li><a href=\"https://www.scarsu.com/2019_javascript_sources\">点击此处查看这些信息源的链接</a></li>\n</ul>\n<p><img src=\"/images/stateofjs/201930.png\" alt><br><img src=\"/images/stateofjs/201931.png\" alt><br><img src=\"/images/stateofjs/201932.png\" alt><br><img src=\"/images/stateofjs/201933.png\" alt><br><img src=\"/images/stateofjs/201934.png\" alt><br><img src=\"/images/stateofjs/201935.png\" alt></p>\n<h2 id=\"开发者的感受\"><a href=\"#开发者的感受\" class=\"headerlink\" title=\"开发者的感受\"></a>开发者的感受</h2><p><strong>“Javascript 正在往正确的方向发展”</strong></p>\n<p><img src=\"/images/stateofjs/201936.png\" alt></p>\n<p><strong>“当下构建 Javascript app 过于复杂惹”</strong></p>\n<p><img src=\"/images/stateofjs/201937.png\" alt></p>\n<p><strong>“Javascript 被过度使用”</strong></p>\n<p><img src=\"/images/stateofjs/201938.png\" alt></p>\n<p><strong>“我喜欢构建 JavaScript 应用程序”</strong></p>\n<p><img src=\"/images/stateofjs/201939.png\" alt></p>\n<p><strong>“我希望 JavaScript 成为我的主要编程语言”</strong></p>\n<p><img src=\"/images/stateofjs/201940.png\" alt></p>\n<p><strong>“JavaScript 生态系统变化太快”</strong></p>\n<p><img src=\"/images/stateofjs/201941.png\" alt></p>\n<h2 id=\"年度之最\"><a href=\"#年度之最\" class=\"headerlink\" title=\"年度之最\"></a>年度之最</h2><ul>\n<li><strong>被采用最多的特性: Arrow Function</strong></li>\n</ul>\n<blockquote>\n<p>箭头函数是本年度使用最多的JavaScript功能，拥有97.8％的用户使用它。<br>> promise > 扩展运算符</p>\n</blockquote>\n<ul>\n<li><strong>使用最多的技术: React</strong></li>\n</ul>\n<blockquote>\n<p>React是今年使用最多的技术，拥有16099个用户。<br>> Express > Redux</p>\n</blockquote>\n<ul>\n<li><strong>满意度最高: Jest</strong></li>\n</ul>\n<blockquote>\n<p>有96.4％的用户愿意再次使用它，Jest再次证明了它不是在开玩笑。<br>> GraphQL > Cypress</p>\n</blockquote>\n<ul>\n<li><strong>最感兴趣: GraphQL</strong></li>\n</ul>\n<blockquote>\n<p>听说过GraphQL的开发人员中有89.6％希望学习它。 那是很重要的兴趣！<br>> Jest > Apollo</p>\n</blockquote>\n<ul>\n<li><strong>最广泛的信息源: Stack Overflow</strong></li>\n</ul>\n<blockquote>\n<p>拥有17942个用户的Stack Overflow是今年使用最多的资源。<br>> MDN > CSS Tricks</p>\n</blockquote>\n<ul>\n<li><strong>黑马奖: Svelte</strong></li>\n</ul>\n<blockquote>\n<p>斯维尔特（Svelte）在今年的调查中首次亮相，我们迫不及待想知道它的去向<br>> Next.js > Stencil</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>stateofjs团队在总结中说：</p>\n<blockquote>\n<p>You know how you sometimes start tweaking a few lines of code here and there, then realize a couple functions could use some refactoring, and then one things leading to another you find yourself a few days later in the process of setting up a brand new stack complete with a database and GraphQL API?</p>\n<p>This is what happened to us this year. And while it resulted in quite a few stressful evenings as we tried to wrap this up and release the State of JavaScript 2019 results in, well, 2019; it also means we now have a much more powerful and flexible stack to collect and analyze data going forward.</p>\n</blockquote>\n<p>“你有时候会在这里那里调整几行代码,然后发现有几个函数可以重构,然后一个变更引发另一个变更，几天后你发现重构的过程中，用上了数据库和GraphQL API，建立了一个全新的技术栈…”</p>\n<p>这是今年发生在他们身上的故事，使用数据库和GraphQL重构，使得整个stateofjs项目的开发、数据收集、数据分析等工作，更加灵活、更加强大。<br>他们的重构将有助于分析所有那些掀起波澜的新工具的发展历程，例如 Svelte，Stencil，Nest 或 Flutter…</p>\n<p>无论前端社区不断向你扔出多少奇怪名字的库，跟紧stateofjs的调查，及时自检，总归不会掉队😘😆</p>\n"},{"title":"《4点起床》：舒适而高效的作息方式","date":"2020-05-20T16:00:00.000Z","description":"这是一本我用两周地铁通勤时间看完的书，虽然这本书没什么系统性，废话也比较多，但是看完这本书，确实对我的生活有所影响，让我养成了早睡早起的习惯，这篇文章总结一下书中的(我认为的)精华。","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133333.png","_content":"\n![](/images/read/3-8lifestyle.jpg)\n\n## `REM` 睡眠\n\n[**REM : rapid eye movement**](https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E5%8B%95%E7%9C%BC%E6%9C%9F),快速眼动睡眠，是人睡眠周期的一个阶段。\n\n`REM`即`快速眼动睡眠`睡眠阶段中，身体肌肉放松，单紧闭的眼皮下眼球在来回运动，这个阶段是联系'清醒状态'和'意识体温低下的睡眠状态'的桥梁，为人们“睡醒”做了准备。\n\n`Non-REM`、`NREM`是`非快速眼动睡眠`，这个阶段是大脑休息的时间，也就是深度睡眠阶段，这个阶段是睡眠中最重要的阶段，也是睡眠效率最高的阶段。\n\n## 睡眠周期\n通常一个成年人的睡眠是这样的：\n- `NREM`与`REM`交替出现，交替一次称为一个`睡眠周期`\n- 两种循环往复，每夜通常有 `4~5个睡眠周期`，每个周期90~110分钟。\n\n国际睡眠医学将`一个睡眠周期`分为五个阶段：\n- 入睡期\n- 浅睡期\n- 熟睡期\n- 深睡期\n- 快速眼动期：\n\n![Sleep Cycle](/images/read/rem.png)\n\n上图是对一个睡眠周期的近似描述，`W`是Wake清醒状态，`R`是`REM`，`N`代表`NREM`非快速眼动睡眠,`N3`代表最深度的睡眠。\n\n由图中可以看出，一个90分钟的睡眠周期中，`深度睡眠`大约占到了整个睡眠周期的一半以上。\n\n## 依照睡眠周期来休息\n\n我们在深睡阶段是轻易叫不醒的，如果在深睡阶段被吵醒，身体和大脑从深度睡眠中被突然拉出，通常会使身体和大脑**产生不适**，即使睡眠时间总和很长，也会有没睡好的感觉。\n\n相反，如果在浅睡眠阶段，清晨的阳光照射、晨起的鸟叫都能轻易的把我们从快速眼动期唤醒，由于大脑已经经历过处在睡眠周期中间的深度睡眠，得到了休息，这个时候的清醒，身体和大脑都会**感到舒适**。\n\n因此，按照睡眠周期的模式来休息至关重要。\n\n当然，每个人的睡眠周期不可能都是严格的90分钟，因此也要掌握好自己的身体规律。\n\n比如你入睡后一段时候，**开始翻身**或者**容易被吵醒**，这个时候很大概率就是你处在**睡眠周期末尾**的`快速眼动阶段`。\n\n掌握自己身体的睡眠周期，同时让自己处于可以自然醒的环境，例如靠近窗边睡眠，让大自然的声音光线带着身体自然醒，就可以得到最**舒适高效**的睡眠。\n\n高效的睡眠也就意味着可以在拥有舒适睡眠的同时，缩短睡眠时间，**可利用的时间**也就增多了，这就是书中作者所提倡的观点。\n\n## `3-8作息`\n\n前面睡眠周期介绍了如何利用缩短睡眠时间，来提升可利用时间，而`3-8作息法`要介绍的，是在相同睡眠时间的情况下，如何**提升可利用时间的效率**。\n\n答案就是**早起**。\n\n`3-8作息法`是指：将一天时间分为3块，上午8小时，下午8小时，晚上8小时。也就是4点起床，下午8点休息。\n\n## 为什么要早起\n\n其实`3-8`模式，强调的起早，是让晚上的时间去置换早上的时间。\n\n那么为什么要早起呢，书中用大量的篇幅介绍了早起的好处。\n\n例如，从生理学的角度来说，人的身体会分泌两种令人“精力充沛”的荷尔蒙，**肾上腺素、肾上腺皮质类脂醇**，这两种荷尔蒙在早上分泌的量比晚上分泌的多，大概是3倍左右，因此早上大脑的**效率**比晚上的高，早上的大脑更加清醒，经历更加旺盛。\n\n另一方面，**日出而作，日落而息**是人类进化几千年形成的习惯，只是到了现代，人们在夜里可以做的事情越来越多，加班的情况也越来越多，很多人的睡眠时间越来越晚，甚至有些自由工作制的公司里，很多人都是`11-12`的作息方式，在正午起床，在月影朦胧时才睡去，这是违背大自然和人体规律的。\n\n当你利用睡眠周期规律，养成早睡早起的习惯后，会发现一些**美妙**的事情，比深夜的手机、视频、夜宵、电脑、小说更加精彩，比如：\n- 光线、鸟叫带来的自然醒的舒适\n- 清晨你所在城市的样貌，和形形色色早起的人\n- 适宜的晨间光照，和空气中适宜的湿度\n- 在空空荡荡的地铁上安然看书的舒适\n- ...\n\n## 早起能做什么\n\n之前发朋友圈晒了一张等首发地铁的图片，有朋友问，“起那么早干什么？”\n\n![起那么早干什么?](/images/read/morning.png)\n\n其实，一切你想做的事情，都可以放在早上完成(除了看星星看月亮这种)。\n\n书中举了很多例子，比如\n- 悠闲的享受早餐\n- 散步、运动(运动有助于缓解压力)\n- 冲热水澡\n- 晨间社交\n- 看书学习\n- 发展副业\n- 发展兴趣爱好，做内因驱动的事情\n- ...\n\n## 找不到自己早起想做的事？\n\n书中还有一个观点令我印象深刻，如果你找不到自己想做的事情呢？\n\n就不需要早起，或者陷入迷茫吗？\n\n我把作者的答案摘录在这里，希望对找不到追求的人，能有所启发：\n\n> 我究竟想做什么呢？\n> \n> 当然，我们可以埋头苦干，让自己没时间胡思乱想。但我建议大家多去受点刺激。\n> 学习、信息、人......这些都是刺激。\n> 接受的刺激越多，自然会产生这样那样的憧憬：“我想成为那样的人！”“我想做那样的工作！”\n> 有些人能找到明确的目标，有些人则会发现目标的模糊轮廓。\n> \n> 无论你属于上述哪种情况，都能在不断接受刺激（我把它称为“打击”）的过程中，逐渐将自己的目标具象化，这才是重中之重。\n\n--------------------------------\n<small>人的一生也许都在自我探索</small>","source":"_posts/3-8lifestyle.md","raw":"---\ntitle: 《4点起床》：舒适而高效的作息方式\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2020-05-21\ndescription: 这是一本我用两周地铁通勤时间看完的书，虽然这本书没什么系统性，废话也比较多，但是看完这本书，确实对我的生活有所影响，让我养成了早睡早起的习惯，这篇文章总结一下书中的(我认为的)精华。\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133333.png\n---\n\n![](/images/read/3-8lifestyle.jpg)\n\n## `REM` 睡眠\n\n[**REM : rapid eye movement**](https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E5%8B%95%E7%9C%BC%E6%9C%9F),快速眼动睡眠，是人睡眠周期的一个阶段。\n\n`REM`即`快速眼动睡眠`睡眠阶段中，身体肌肉放松，单紧闭的眼皮下眼球在来回运动，这个阶段是联系'清醒状态'和'意识体温低下的睡眠状态'的桥梁，为人们“睡醒”做了准备。\n\n`Non-REM`、`NREM`是`非快速眼动睡眠`，这个阶段是大脑休息的时间，也就是深度睡眠阶段，这个阶段是睡眠中最重要的阶段，也是睡眠效率最高的阶段。\n\n## 睡眠周期\n通常一个成年人的睡眠是这样的：\n- `NREM`与`REM`交替出现，交替一次称为一个`睡眠周期`\n- 两种循环往复，每夜通常有 `4~5个睡眠周期`，每个周期90~110分钟。\n\n国际睡眠医学将`一个睡眠周期`分为五个阶段：\n- 入睡期\n- 浅睡期\n- 熟睡期\n- 深睡期\n- 快速眼动期：\n\n![Sleep Cycle](/images/read/rem.png)\n\n上图是对一个睡眠周期的近似描述，`W`是Wake清醒状态，`R`是`REM`，`N`代表`NREM`非快速眼动睡眠,`N3`代表最深度的睡眠。\n\n由图中可以看出，一个90分钟的睡眠周期中，`深度睡眠`大约占到了整个睡眠周期的一半以上。\n\n## 依照睡眠周期来休息\n\n我们在深睡阶段是轻易叫不醒的，如果在深睡阶段被吵醒，身体和大脑从深度睡眠中被突然拉出，通常会使身体和大脑**产生不适**，即使睡眠时间总和很长，也会有没睡好的感觉。\n\n相反，如果在浅睡眠阶段，清晨的阳光照射、晨起的鸟叫都能轻易的把我们从快速眼动期唤醒，由于大脑已经经历过处在睡眠周期中间的深度睡眠，得到了休息，这个时候的清醒，身体和大脑都会**感到舒适**。\n\n因此，按照睡眠周期的模式来休息至关重要。\n\n当然，每个人的睡眠周期不可能都是严格的90分钟，因此也要掌握好自己的身体规律。\n\n比如你入睡后一段时候，**开始翻身**或者**容易被吵醒**，这个时候很大概率就是你处在**睡眠周期末尾**的`快速眼动阶段`。\n\n掌握自己身体的睡眠周期，同时让自己处于可以自然醒的环境，例如靠近窗边睡眠，让大自然的声音光线带着身体自然醒，就可以得到最**舒适高效**的睡眠。\n\n高效的睡眠也就意味着可以在拥有舒适睡眠的同时，缩短睡眠时间，**可利用的时间**也就增多了，这就是书中作者所提倡的观点。\n\n## `3-8作息`\n\n前面睡眠周期介绍了如何利用缩短睡眠时间，来提升可利用时间，而`3-8作息法`要介绍的，是在相同睡眠时间的情况下，如何**提升可利用时间的效率**。\n\n答案就是**早起**。\n\n`3-8作息法`是指：将一天时间分为3块，上午8小时，下午8小时，晚上8小时。也就是4点起床，下午8点休息。\n\n## 为什么要早起\n\n其实`3-8`模式，强调的起早，是让晚上的时间去置换早上的时间。\n\n那么为什么要早起呢，书中用大量的篇幅介绍了早起的好处。\n\n例如，从生理学的角度来说，人的身体会分泌两种令人“精力充沛”的荷尔蒙，**肾上腺素、肾上腺皮质类脂醇**，这两种荷尔蒙在早上分泌的量比晚上分泌的多，大概是3倍左右，因此早上大脑的**效率**比晚上的高，早上的大脑更加清醒，经历更加旺盛。\n\n另一方面，**日出而作，日落而息**是人类进化几千年形成的习惯，只是到了现代，人们在夜里可以做的事情越来越多，加班的情况也越来越多，很多人的睡眠时间越来越晚，甚至有些自由工作制的公司里，很多人都是`11-12`的作息方式，在正午起床，在月影朦胧时才睡去，这是违背大自然和人体规律的。\n\n当你利用睡眠周期规律，养成早睡早起的习惯后，会发现一些**美妙**的事情，比深夜的手机、视频、夜宵、电脑、小说更加精彩，比如：\n- 光线、鸟叫带来的自然醒的舒适\n- 清晨你所在城市的样貌，和形形色色早起的人\n- 适宜的晨间光照，和空气中适宜的湿度\n- 在空空荡荡的地铁上安然看书的舒适\n- ...\n\n## 早起能做什么\n\n之前发朋友圈晒了一张等首发地铁的图片，有朋友问，“起那么早干什么？”\n\n![起那么早干什么?](/images/read/morning.png)\n\n其实，一切你想做的事情，都可以放在早上完成(除了看星星看月亮这种)。\n\n书中举了很多例子，比如\n- 悠闲的享受早餐\n- 散步、运动(运动有助于缓解压力)\n- 冲热水澡\n- 晨间社交\n- 看书学习\n- 发展副业\n- 发展兴趣爱好，做内因驱动的事情\n- ...\n\n## 找不到自己早起想做的事？\n\n书中还有一个观点令我印象深刻，如果你找不到自己想做的事情呢？\n\n就不需要早起，或者陷入迷茫吗？\n\n我把作者的答案摘录在这里，希望对找不到追求的人，能有所启发：\n\n> 我究竟想做什么呢？\n> \n> 当然，我们可以埋头苦干，让自己没时间胡思乱想。但我建议大家多去受点刺激。\n> 学习、信息、人......这些都是刺激。\n> 接受的刺激越多，自然会产生这样那样的憧憬：“我想成为那样的人！”“我想做那样的工作！”\n> 有些人能找到明确的目标，有些人则会发现目标的模糊轮廓。\n> \n> 无论你属于上述哪种情况，都能在不断接受刺激（我把它称为“打击”）的过程中，逐渐将自己的目标具象化，这才是重中之重。\n\n--------------------------------\n<small>人的一生也许都在自我探索</small>","slug":"3-8lifestyle","published":1,"updated":"2021-04-21T06:53:37.270Z","_id":"ckir88ifb000mc8y6cujj97z8","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/read/3-8lifestyle.jpg\" alt></p>\n<h2 id=\"REM-睡眠\"><a href=\"#REM-睡眠\" class=\"headerlink\" title=\"REM 睡眠\"></a><code>REM</code> 睡眠</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E5%8B%95%E7%9C%BC%E6%9C%9F\" target=\"_blank\" rel=\"noopener\"><strong>REM : rapid eye movement</strong></a>,快速眼动睡眠，是人睡眠周期的一个阶段。</p>\n<p><code>REM</code>即<code>快速眼动睡眠</code>睡眠阶段中，身体肌肉放松，单紧闭的眼皮下眼球在来回运动，这个阶段是联系’清醒状态’和’意识体温低下的睡眠状态’的桥梁，为人们“睡醒”做了准备。</p>\n<p><code>Non-REM</code>、<code>NREM</code>是<code>非快速眼动睡眠</code>，这个阶段是大脑休息的时间，也就是深度睡眠阶段，这个阶段是睡眠中最重要的阶段，也是睡眠效率最高的阶段。</p>\n<h2 id=\"睡眠周期\"><a href=\"#睡眠周期\" class=\"headerlink\" title=\"睡眠周期\"></a>睡眠周期</h2><p>通常一个成年人的睡眠是这样的：</p>\n<ul>\n<li><code>NREM</code>与<code>REM</code>交替出现，交替一次称为一个<code>睡眠周期</code></li>\n<li>两种循环往复，每夜通常有 <code>4~5个睡眠周期</code>，每个周期90~110分钟。</li>\n</ul>\n<p>国际睡眠医学将<code>一个睡眠周期</code>分为五个阶段：</p>\n<ul>\n<li>入睡期</li>\n<li>浅睡期</li>\n<li>熟睡期</li>\n<li>深睡期</li>\n<li>快速眼动期：</li>\n</ul>\n<p><img src=\"/images/read/rem.png\" alt=\"Sleep Cycle\"></p>\n<p>上图是对一个睡眠周期的近似描述，<code>W</code>是Wake清醒状态，<code>R</code>是<code>REM</code>，<code>N</code>代表<code>NREM</code>非快速眼动睡眠,<code>N3</code>代表最深度的睡眠。</p>\n<p>由图中可以看出，一个90分钟的睡眠周期中，<code>深度睡眠</code>大约占到了整个睡眠周期的一半以上。</p>\n<h2 id=\"依照睡眠周期来休息\"><a href=\"#依照睡眠周期来休息\" class=\"headerlink\" title=\"依照睡眠周期来休息\"></a>依照睡眠周期来休息</h2><p>我们在深睡阶段是轻易叫不醒的，如果在深睡阶段被吵醒，身体和大脑从深度睡眠中被突然拉出，通常会使身体和大脑<strong>产生不适</strong>，即使睡眠时间总和很长，也会有没睡好的感觉。</p>\n<p>相反，如果在浅睡眠阶段，清晨的阳光照射、晨起的鸟叫都能轻易的把我们从快速眼动期唤醒，由于大脑已经经历过处在睡眠周期中间的深度睡眠，得到了休息，这个时候的清醒，身体和大脑都会<strong>感到舒适</strong>。</p>\n<p>因此，按照睡眠周期的模式来休息至关重要。</p>\n<p>当然，每个人的睡眠周期不可能都是严格的90分钟，因此也要掌握好自己的身体规律。</p>\n<p>比如你入睡后一段时候，<strong>开始翻身</strong>或者<strong>容易被吵醒</strong>，这个时候很大概率就是你处在<strong>睡眠周期末尾</strong>的<code>快速眼动阶段</code>。</p>\n<p>掌握自己身体的睡眠周期，同时让自己处于可以自然醒的环境，例如靠近窗边睡眠，让大自然的声音光线带着身体自然醒，就可以得到最<strong>舒适高效</strong>的睡眠。</p>\n<p>高效的睡眠也就意味着可以在拥有舒适睡眠的同时，缩短睡眠时间，<strong>可利用的时间</strong>也就增多了，这就是书中作者所提倡的观点。</p>\n<h2 id=\"3-8作息\"><a href=\"#3-8作息\" class=\"headerlink\" title=\"3-8作息\"></a><code>3-8作息</code></h2><p>前面睡眠周期介绍了如何利用缩短睡眠时间，来提升可利用时间，而<code>3-8作息法</code>要介绍的，是在相同睡眠时间的情况下，如何<strong>提升可利用时间的效率</strong>。</p>\n<p>答案就是<strong>早起</strong>。</p>\n<p><code>3-8作息法</code>是指：将一天时间分为3块，上午8小时，下午8小时，晚上8小时。也就是4点起床，下午8点休息。</p>\n<h2 id=\"为什么要早起\"><a href=\"#为什么要早起\" class=\"headerlink\" title=\"为什么要早起\"></a>为什么要早起</h2><p>其实<code>3-8</code>模式，强调的起早，是让晚上的时间去置换早上的时间。</p>\n<p>那么为什么要早起呢，书中用大量的篇幅介绍了早起的好处。</p>\n<p>例如，从生理学的角度来说，人的身体会分泌两种令人“精力充沛”的荷尔蒙，<strong>肾上腺素、肾上腺皮质类脂醇</strong>，这两种荷尔蒙在早上分泌的量比晚上分泌的多，大概是3倍左右，因此早上大脑的<strong>效率</strong>比晚上的高，早上的大脑更加清醒，经历更加旺盛。</p>\n<p>另一方面，<strong>日出而作，日落而息</strong>是人类进化几千年形成的习惯，只是到了现代，人们在夜里可以做的事情越来越多，加班的情况也越来越多，很多人的睡眠时间越来越晚，甚至有些自由工作制的公司里，很多人都是<code>11-12</code>的作息方式，在正午起床，在月影朦胧时才睡去，这是违背大自然和人体规律的。</p>\n<p>当你利用睡眠周期规律，养成早睡早起的习惯后，会发现一些<strong>美妙</strong>的事情，比深夜的手机、视频、夜宵、电脑、小说更加精彩，比如：</p>\n<ul>\n<li>光线、鸟叫带来的自然醒的舒适</li>\n<li>清晨你所在城市的样貌，和形形色色早起的人</li>\n<li>适宜的晨间光照，和空气中适宜的湿度</li>\n<li>在空空荡荡的地铁上安然看书的舒适</li>\n<li>…</li>\n</ul>\n<h2 id=\"早起能做什么\"><a href=\"#早起能做什么\" class=\"headerlink\" title=\"早起能做什么\"></a>早起能做什么</h2><p>之前发朋友圈晒了一张等首发地铁的图片，有朋友问，“起那么早干什么？”</p>\n<p><img src=\"/images/read/morning.png\" alt=\"起那么早干什么?\"></p>\n<p>其实，一切你想做的事情，都可以放在早上完成(除了看星星看月亮这种)。</p>\n<p>书中举了很多例子，比如</p>\n<ul>\n<li>悠闲的享受早餐</li>\n<li>散步、运动(运动有助于缓解压力)</li>\n<li>冲热水澡</li>\n<li>晨间社交</li>\n<li>看书学习</li>\n<li>发展副业</li>\n<li>发展兴趣爱好，做内因驱动的事情</li>\n<li>…</li>\n</ul>\n<h2 id=\"找不到自己早起想做的事？\"><a href=\"#找不到自己早起想做的事？\" class=\"headerlink\" title=\"找不到自己早起想做的事？\"></a>找不到自己早起想做的事？</h2><p>书中还有一个观点令我印象深刻，如果你找不到自己想做的事情呢？</p>\n<p>就不需要早起，或者陷入迷茫吗？</p>\n<p>我把作者的答案摘录在这里，希望对找不到追求的人，能有所启发：</p>\n<blockquote>\n<p>我究竟想做什么呢？</p>\n<p>当然，我们可以埋头苦干，让自己没时间胡思乱想。但我建议大家多去受点刺激。<br>学习、信息、人……这些都是刺激。<br>接受的刺激越多，自然会产生这样那样的憧憬：“我想成为那样的人！”“我想做那样的工作！”<br>有些人能找到明确的目标，有些人则会发现目标的模糊轮廓。</p>\n<p>无论你属于上述哪种情况，都能在不断接受刺激（我把它称为“打击”）的过程中，逐渐将自己的目标具象化，这才是重中之重。</p>\n</blockquote>\n<hr>\n<p><small>人的一生也许都在自我探索</small></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/read/3-8lifestyle.jpg\" alt></p>\n<h2 id=\"REM-睡眠\"><a href=\"#REM-睡眠\" class=\"headerlink\" title=\"REM 睡眠\"></a><code>REM</code> 睡眠</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E5%8B%95%E7%9C%BC%E6%9C%9F\" target=\"_blank\" rel=\"noopener\"><strong>REM : rapid eye movement</strong></a>,快速眼动睡眠，是人睡眠周期的一个阶段。</p>\n<p><code>REM</code>即<code>快速眼动睡眠</code>睡眠阶段中，身体肌肉放松，单紧闭的眼皮下眼球在来回运动，这个阶段是联系’清醒状态’和’意识体温低下的睡眠状态’的桥梁，为人们“睡醒”做了准备。</p>\n<p><code>Non-REM</code>、<code>NREM</code>是<code>非快速眼动睡眠</code>，这个阶段是大脑休息的时间，也就是深度睡眠阶段，这个阶段是睡眠中最重要的阶段，也是睡眠效率最高的阶段。</p>\n<h2 id=\"睡眠周期\"><a href=\"#睡眠周期\" class=\"headerlink\" title=\"睡眠周期\"></a>睡眠周期</h2><p>通常一个成年人的睡眠是这样的：</p>\n<ul>\n<li><code>NREM</code>与<code>REM</code>交替出现，交替一次称为一个<code>睡眠周期</code></li>\n<li>两种循环往复，每夜通常有 <code>4~5个睡眠周期</code>，每个周期90~110分钟。</li>\n</ul>\n<p>国际睡眠医学将<code>一个睡眠周期</code>分为五个阶段：</p>\n<ul>\n<li>入睡期</li>\n<li>浅睡期</li>\n<li>熟睡期</li>\n<li>深睡期</li>\n<li>快速眼动期：</li>\n</ul>\n<p><img src=\"/images/read/rem.png\" alt=\"Sleep Cycle\"></p>\n<p>上图是对一个睡眠周期的近似描述，<code>W</code>是Wake清醒状态，<code>R</code>是<code>REM</code>，<code>N</code>代表<code>NREM</code>非快速眼动睡眠,<code>N3</code>代表最深度的睡眠。</p>\n<p>由图中可以看出，一个90分钟的睡眠周期中，<code>深度睡眠</code>大约占到了整个睡眠周期的一半以上。</p>\n<h2 id=\"依照睡眠周期来休息\"><a href=\"#依照睡眠周期来休息\" class=\"headerlink\" title=\"依照睡眠周期来休息\"></a>依照睡眠周期来休息</h2><p>我们在深睡阶段是轻易叫不醒的，如果在深睡阶段被吵醒，身体和大脑从深度睡眠中被突然拉出，通常会使身体和大脑<strong>产生不适</strong>，即使睡眠时间总和很长，也会有没睡好的感觉。</p>\n<p>相反，如果在浅睡眠阶段，清晨的阳光照射、晨起的鸟叫都能轻易的把我们从快速眼动期唤醒，由于大脑已经经历过处在睡眠周期中间的深度睡眠，得到了休息，这个时候的清醒，身体和大脑都会<strong>感到舒适</strong>。</p>\n<p>因此，按照睡眠周期的模式来休息至关重要。</p>\n<p>当然，每个人的睡眠周期不可能都是严格的90分钟，因此也要掌握好自己的身体规律。</p>\n<p>比如你入睡后一段时候，<strong>开始翻身</strong>或者<strong>容易被吵醒</strong>，这个时候很大概率就是你处在<strong>睡眠周期末尾</strong>的<code>快速眼动阶段</code>。</p>\n<p>掌握自己身体的睡眠周期，同时让自己处于可以自然醒的环境，例如靠近窗边睡眠，让大自然的声音光线带着身体自然醒，就可以得到最<strong>舒适高效</strong>的睡眠。</p>\n<p>高效的睡眠也就意味着可以在拥有舒适睡眠的同时，缩短睡眠时间，<strong>可利用的时间</strong>也就增多了，这就是书中作者所提倡的观点。</p>\n<h2 id=\"3-8作息\"><a href=\"#3-8作息\" class=\"headerlink\" title=\"3-8作息\"></a><code>3-8作息</code></h2><p>前面睡眠周期介绍了如何利用缩短睡眠时间，来提升可利用时间，而<code>3-8作息法</code>要介绍的，是在相同睡眠时间的情况下，如何<strong>提升可利用时间的效率</strong>。</p>\n<p>答案就是<strong>早起</strong>。</p>\n<p><code>3-8作息法</code>是指：将一天时间分为3块，上午8小时，下午8小时，晚上8小时。也就是4点起床，下午8点休息。</p>\n<h2 id=\"为什么要早起\"><a href=\"#为什么要早起\" class=\"headerlink\" title=\"为什么要早起\"></a>为什么要早起</h2><p>其实<code>3-8</code>模式，强调的起早，是让晚上的时间去置换早上的时间。</p>\n<p>那么为什么要早起呢，书中用大量的篇幅介绍了早起的好处。</p>\n<p>例如，从生理学的角度来说，人的身体会分泌两种令人“精力充沛”的荷尔蒙，<strong>肾上腺素、肾上腺皮质类脂醇</strong>，这两种荷尔蒙在早上分泌的量比晚上分泌的多，大概是3倍左右，因此早上大脑的<strong>效率</strong>比晚上的高，早上的大脑更加清醒，经历更加旺盛。</p>\n<p>另一方面，<strong>日出而作，日落而息</strong>是人类进化几千年形成的习惯，只是到了现代，人们在夜里可以做的事情越来越多，加班的情况也越来越多，很多人的睡眠时间越来越晚，甚至有些自由工作制的公司里，很多人都是<code>11-12</code>的作息方式，在正午起床，在月影朦胧时才睡去，这是违背大自然和人体规律的。</p>\n<p>当你利用睡眠周期规律，养成早睡早起的习惯后，会发现一些<strong>美妙</strong>的事情，比深夜的手机、视频、夜宵、电脑、小说更加精彩，比如：</p>\n<ul>\n<li>光线、鸟叫带来的自然醒的舒适</li>\n<li>清晨你所在城市的样貌，和形形色色早起的人</li>\n<li>适宜的晨间光照，和空气中适宜的湿度</li>\n<li>在空空荡荡的地铁上安然看书的舒适</li>\n<li>…</li>\n</ul>\n<h2 id=\"早起能做什么\"><a href=\"#早起能做什么\" class=\"headerlink\" title=\"早起能做什么\"></a>早起能做什么</h2><p>之前发朋友圈晒了一张等首发地铁的图片，有朋友问，“起那么早干什么？”</p>\n<p><img src=\"/images/read/morning.png\" alt=\"起那么早干什么?\"></p>\n<p>其实，一切你想做的事情，都可以放在早上完成(除了看星星看月亮这种)。</p>\n<p>书中举了很多例子，比如</p>\n<ul>\n<li>悠闲的享受早餐</li>\n<li>散步、运动(运动有助于缓解压力)</li>\n<li>冲热水澡</li>\n<li>晨间社交</li>\n<li>看书学习</li>\n<li>发展副业</li>\n<li>发展兴趣爱好，做内因驱动的事情</li>\n<li>…</li>\n</ul>\n<h2 id=\"找不到自己早起想做的事？\"><a href=\"#找不到自己早起想做的事？\" class=\"headerlink\" title=\"找不到自己早起想做的事？\"></a>找不到自己早起想做的事？</h2><p>书中还有一个观点令我印象深刻，如果你找不到自己想做的事情呢？</p>\n<p>就不需要早起，或者陷入迷茫吗？</p>\n<p>我把作者的答案摘录在这里，希望对找不到追求的人，能有所启发：</p>\n<blockquote>\n<p>我究竟想做什么呢？</p>\n<p>当然，我们可以埋头苦干，让自己没时间胡思乱想。但我建议大家多去受点刺激。<br>学习、信息、人……这些都是刺激。<br>接受的刺激越多，自然会产生这样那样的憧憬：“我想成为那样的人！”“我想做那样的工作！”<br>有些人能找到明确的目标，有些人则会发现目标的模糊轮廓。</p>\n<p>无论你属于上述哪种情况，都能在不断接受刺激（我把它称为“打击”）的过程中，逐渐将自己的目标具象化，这才是重中之重。</p>\n</blockquote>\n<hr>\n<p><small>人的一生也许都在自我探索</small></p>\n"},{"title":"【360FED课程】——CSS","date":"2018-09-06T16:00:00.000Z","description":"大佬为什么是大佬？","toc":1,"top":0,"_content":"\n# css\n\ncascading stylesheet\n级联样式表\n\n# Level 版本\n\n-   CSS Level 1（废弃\n-   CSS Level 2 (CSS 2.2 完整规范)\n-   CSS Level 3（在 2.2 的基础上增加新模块特性\n    -   Color Module Level 3\n    -   Selectors Level 3\n    -   Media Queries\n    -   Fonts Level 3\n\n# 选择器\n\n## 简单\n\n-   通配 \\*\n-   标签 E\n-   类 .class\n-   id #id\n\n## 属性选择器 [ ]\n\n```css\n/* 具有某个属性 */\n[disabled]\n\n/* 属性为指定的值 */\n[type=\"checkbox\"]\n\n/* 属性值包含某个字符串 */\n[href*=\"example\"]\n\n/* 属性值以某个字符串开头 */\n[href^=\"http:\"]\n\n/* 属性值以某个字符串结束 */\n[href$=\"jpg\"]\n\n/* 属性值以空格分割后包含某个字符串 */\n[lang~＝\"zh-cn\"]/* class选择器的实现机制 */\n```\n\n## 伪类\n\n```css\n/* 动态性伪类，根据状态选择 */\na:link    { ... }       /* 未访问过的链接 */\na:visited { ... }       /* 已访问过的链接 */\n\na:hover   { ... }       /* 鼠标移到链接上的样式 */\na:active  { ... }       /* 鼠标在连接上按下时的样式 */\na:focus   { ... }       /* 获得焦点时的样式 */\n\ninput:disabled { ... }  /* 禁用时的样式 */\ninput:checked { ... }   /* 选中时的样式 */\n                        /*利用:checked来做某些toggle组件状态转换*/\n\n/* 结构性伪类 */\n:first-child\n:last-child\n:nth-child(2n+1)\n\n:first-of-type\n:last-of-type\ndiv:nth-of-type(2n+1)   /*对nth-child()增加类型限制*/\n\n:empty\n```\n\n## 组合性选择器\n\n-   后代 E F\n-   父子 E>F\n-   兄弟 E~F\n-   相邻兄弟 E+F\n\n# 伪元素\n\n-   ::before\n-   ::after\n-   ::first-letter\n-   ::first-line\n\n# 优先级/特异度 Specificity\n\n-   !important > 内联 > id > （伪）类 > （伪）元素\n-   覆盖：同样优先级：后面写的覆盖前面写的\n-   复合选择器：从优先级高的选择器 的 数量 开始比较\n\n# 样式来源\n\n-   页面开发者\n-   用户设置（浏览器可以指定一个本地 CSS 文件，打开所有页面时自动加载\n-   浏览器预设\n    -   [Mozilla Firefox 预设样式](https://dxr.mozilla.org/mozilla-central/source/layout/style/res/html.css)\n    -   [Google Chrome 预设样式](https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css)\n-   优先级： 开发者 > 用户设置 > 浏览器预设\n-   加了!important 的优先级：用户 important > 开发者 important > 开发者 > 用户设置 > 浏览器预设\n\n# 默认值策略 Defaulting\n\n## 继承\n\n某些属性若不指定值，会自动继承父元素的 ！！！【计算值】\n\n## 显示继承\n\n```css\nhtml {\n    box-sizing: border-box;\n}\n* {\n    box-sizing: inherit;\n    /* 优点是有某一块都要设置为content-box时，只需要设置其最外层元素，不需要全设置 */\n}\n#xxx {\n    box-sizing: content-box;\n}\n```\n\n## 初始值 initial\n\n-   CSS 中，每个属性都有一个初始值\n-   background-color 的初始值为 transparent\n-   margin-left 的初始值为 0，font-size 是 16px，line-height 是 1.2，但根据 font-family 而不同\n-   可以显式重置为初始值，比如 background-color: initial\n-   可以上 mdn 查初始值\n\n# CSS 求值过程\n\n## 一个令人疑惑的很皮的 CSS 求值例子\n\n```html\n<article>\n    <h1>卡尔斯巴德洞窟</h1>\n    <p>\n        卡尔斯巴德洞窟（Carlsbad Caverns）是美国的一座国家公园，\n        位于新墨西哥州东南部。游客可以通过天然入口徒步进入，也可以\n        通过电梯直接到达230米的洞穴深处。\n    </p>\n</article>\n\n<style>\n    body {\n        margin: 0;\n    }\n    article {\n        line-height: 150%;\n    }\n    h1 {\n        font-size: 40px; /*最终实际的line-height值为24px*/\n    }\n    p {\n        font-size: 14px; /*最终实际的line-height值为24px*/\n    }\n</style>\n\n<style>\n    body {\n        margin: 0;\n    }\n    article {\n        line-height: 1.5;\n    }\n    h1 {\n        font-size: 40px; /*最终实际的line-height值为60px*/\n    }\n    p {\n        font-size: 14px; /*最终实际的line-height值为21px*/\n    }\n</style>\n\n<!--\n    原因：\n    设为150%时，子元素继承前，父元素的line-height=150%会先被计算（resolving），得到一个绝对值，被计算为16px(默认的font-size值)*1.5=24px，子元素继承到的值是24px\n\n    设为1.5时，子元素继承前，父元素在执行resolving时，1.5是绝对值，不会被转换，所以子元素继承到值1.5，后面再根据自己的font-size*1.5计算line-height\n\n    总结：子元素继承到的是父元素的 计算值（一个绝对值）\n-->\n```\n\n## CSS 求值详细过程\n\n-   filtering：有效选择器 有效属性值 符合 media ，筛选出所有**声明值 Declared Values**\n-   cascading：选出优先级最高的一条声明，得到**层叠值 Cascaded Value**\n-   defaulting：当层叠值为空时，用 继承 | 初始值，得到**指定值 Specified Value**\n-   resolving：将相对值、关键字转化为绝对值，如 em 转换为 px，%被转换为 px，相对路径转换为绝对路径，得到**计算值 Computed Value**\n-   formatting:将计算值进一步转换，比如百分比、关键字转换为绝对值，得到**使用值 Used Value**\n-   constraining：将小数像素转为整数，得到**实际值**\n\n# CSS 排版原理\n\n## 盒模型\n\n### content-box：\n\n-   margin\n-   border\n-   padding\n-   content（width height）\n\n### border-box\n\n-   margin\n-   border （width = border + padding + content_width）\n-   padding\n-   content\n\n## height 100%（一般不用\n\n-   高度百分数，是相对于父元素的高度\n-   若父元素无高度，则百分比高度不生效\n-   用 vw vh 设置相对于屏幕的百分比高度，100vh 即 100%屏幕高度\n\n## padding 100%\n\n-   padding 百分比值，不论是 padding top、left，都是相对于**父元素宽度**\n-   应用：做固定宽高比的盒子.\n\n## margin 折叠\n\n上下相邻元素的间距会取其 margin 中较大值。\n\n## border：四条边不同颜色\n\n-   实际相邻的 border 交界处，是斜切的。\n-   当元素的 width height 为 0 时，会得到四个三角形\n\n# background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);\n\n# 视觉格式化模型\n\n## Viewport 视口\n\n浏览器的可视区域，所有元素都在 viewport 内\n\n## 块级元素(Block-level Elements)\n\n-   会被格式化成块状的元素\n-   例如 p、div、section 等\n-   将 display 设置为 block、list-item、table 会使元素变为块级\n\n## 行内元素(Inline-level Elements)\n\n-   不会为其内容生成块级框\n-   让其内容分布在多行中\n-   display 设置为 inline、inline-block、inline-table 会使元素变为行级\n\n---\n\n    “因为大佬比你知道的多”\n","source":"_posts/360fe_02_css.md","raw":"---\ntitle: 【360FED课程】——CSS\ncategories:\n    - 10技术 | CSS # 一级分类\ntags:\ndate: 2018-09-07\ndescription: 大佬为什么是大佬？\ntoc: 1\ntop: 0\n---\n\n# css\n\ncascading stylesheet\n级联样式表\n\n# Level 版本\n\n-   CSS Level 1（废弃\n-   CSS Level 2 (CSS 2.2 完整规范)\n-   CSS Level 3（在 2.2 的基础上增加新模块特性\n    -   Color Module Level 3\n    -   Selectors Level 3\n    -   Media Queries\n    -   Fonts Level 3\n\n# 选择器\n\n## 简单\n\n-   通配 \\*\n-   标签 E\n-   类 .class\n-   id #id\n\n## 属性选择器 [ ]\n\n```css\n/* 具有某个属性 */\n[disabled]\n\n/* 属性为指定的值 */\n[type=\"checkbox\"]\n\n/* 属性值包含某个字符串 */\n[href*=\"example\"]\n\n/* 属性值以某个字符串开头 */\n[href^=\"http:\"]\n\n/* 属性值以某个字符串结束 */\n[href$=\"jpg\"]\n\n/* 属性值以空格分割后包含某个字符串 */\n[lang~＝\"zh-cn\"]/* class选择器的实现机制 */\n```\n\n## 伪类\n\n```css\n/* 动态性伪类，根据状态选择 */\na:link    { ... }       /* 未访问过的链接 */\na:visited { ... }       /* 已访问过的链接 */\n\na:hover   { ... }       /* 鼠标移到链接上的样式 */\na:active  { ... }       /* 鼠标在连接上按下时的样式 */\na:focus   { ... }       /* 获得焦点时的样式 */\n\ninput:disabled { ... }  /* 禁用时的样式 */\ninput:checked { ... }   /* 选中时的样式 */\n                        /*利用:checked来做某些toggle组件状态转换*/\n\n/* 结构性伪类 */\n:first-child\n:last-child\n:nth-child(2n+1)\n\n:first-of-type\n:last-of-type\ndiv:nth-of-type(2n+1)   /*对nth-child()增加类型限制*/\n\n:empty\n```\n\n## 组合性选择器\n\n-   后代 E F\n-   父子 E>F\n-   兄弟 E~F\n-   相邻兄弟 E+F\n\n# 伪元素\n\n-   ::before\n-   ::after\n-   ::first-letter\n-   ::first-line\n\n# 优先级/特异度 Specificity\n\n-   !important > 内联 > id > （伪）类 > （伪）元素\n-   覆盖：同样优先级：后面写的覆盖前面写的\n-   复合选择器：从优先级高的选择器 的 数量 开始比较\n\n# 样式来源\n\n-   页面开发者\n-   用户设置（浏览器可以指定一个本地 CSS 文件，打开所有页面时自动加载\n-   浏览器预设\n    -   [Mozilla Firefox 预设样式](https://dxr.mozilla.org/mozilla-central/source/layout/style/res/html.css)\n    -   [Google Chrome 预设样式](https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css)\n-   优先级： 开发者 > 用户设置 > 浏览器预设\n-   加了!important 的优先级：用户 important > 开发者 important > 开发者 > 用户设置 > 浏览器预设\n\n# 默认值策略 Defaulting\n\n## 继承\n\n某些属性若不指定值，会自动继承父元素的 ！！！【计算值】\n\n## 显示继承\n\n```css\nhtml {\n    box-sizing: border-box;\n}\n* {\n    box-sizing: inherit;\n    /* 优点是有某一块都要设置为content-box时，只需要设置其最外层元素，不需要全设置 */\n}\n#xxx {\n    box-sizing: content-box;\n}\n```\n\n## 初始值 initial\n\n-   CSS 中，每个属性都有一个初始值\n-   background-color 的初始值为 transparent\n-   margin-left 的初始值为 0，font-size 是 16px，line-height 是 1.2，但根据 font-family 而不同\n-   可以显式重置为初始值，比如 background-color: initial\n-   可以上 mdn 查初始值\n\n# CSS 求值过程\n\n## 一个令人疑惑的很皮的 CSS 求值例子\n\n```html\n<article>\n    <h1>卡尔斯巴德洞窟</h1>\n    <p>\n        卡尔斯巴德洞窟（Carlsbad Caverns）是美国的一座国家公园，\n        位于新墨西哥州东南部。游客可以通过天然入口徒步进入，也可以\n        通过电梯直接到达230米的洞穴深处。\n    </p>\n</article>\n\n<style>\n    body {\n        margin: 0;\n    }\n    article {\n        line-height: 150%;\n    }\n    h1 {\n        font-size: 40px; /*最终实际的line-height值为24px*/\n    }\n    p {\n        font-size: 14px; /*最终实际的line-height值为24px*/\n    }\n</style>\n\n<style>\n    body {\n        margin: 0;\n    }\n    article {\n        line-height: 1.5;\n    }\n    h1 {\n        font-size: 40px; /*最终实际的line-height值为60px*/\n    }\n    p {\n        font-size: 14px; /*最终实际的line-height值为21px*/\n    }\n</style>\n\n<!--\n    原因：\n    设为150%时，子元素继承前，父元素的line-height=150%会先被计算（resolving），得到一个绝对值，被计算为16px(默认的font-size值)*1.5=24px，子元素继承到的值是24px\n\n    设为1.5时，子元素继承前，父元素在执行resolving时，1.5是绝对值，不会被转换，所以子元素继承到值1.5，后面再根据自己的font-size*1.5计算line-height\n\n    总结：子元素继承到的是父元素的 计算值（一个绝对值）\n-->\n```\n\n## CSS 求值详细过程\n\n-   filtering：有效选择器 有效属性值 符合 media ，筛选出所有**声明值 Declared Values**\n-   cascading：选出优先级最高的一条声明，得到**层叠值 Cascaded Value**\n-   defaulting：当层叠值为空时，用 继承 | 初始值，得到**指定值 Specified Value**\n-   resolving：将相对值、关键字转化为绝对值，如 em 转换为 px，%被转换为 px，相对路径转换为绝对路径，得到**计算值 Computed Value**\n-   formatting:将计算值进一步转换，比如百分比、关键字转换为绝对值，得到**使用值 Used Value**\n-   constraining：将小数像素转为整数，得到**实际值**\n\n# CSS 排版原理\n\n## 盒模型\n\n### content-box：\n\n-   margin\n-   border\n-   padding\n-   content（width height）\n\n### border-box\n\n-   margin\n-   border （width = border + padding + content_width）\n-   padding\n-   content\n\n## height 100%（一般不用\n\n-   高度百分数，是相对于父元素的高度\n-   若父元素无高度，则百分比高度不生效\n-   用 vw vh 设置相对于屏幕的百分比高度，100vh 即 100%屏幕高度\n\n## padding 100%\n\n-   padding 百分比值，不论是 padding top、left，都是相对于**父元素宽度**\n-   应用：做固定宽高比的盒子.\n\n## margin 折叠\n\n上下相邻元素的间距会取其 margin 中较大值。\n\n## border：四条边不同颜色\n\n-   实际相邻的 border 交界处，是斜切的。\n-   当元素的 width height 为 0 时，会得到四个三角形\n\n# background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);\n\n# 视觉格式化模型\n\n## Viewport 视口\n\n浏览器的可视区域，所有元素都在 viewport 内\n\n## 块级元素(Block-level Elements)\n\n-   会被格式化成块状的元素\n-   例如 p、div、section 等\n-   将 display 设置为 block、list-item、table 会使元素变为块级\n\n## 行内元素(Inline-level Elements)\n\n-   不会为其内容生成块级框\n-   让其内容分布在多行中\n-   display 设置为 inline、inline-block、inline-table 会使元素变为行级\n\n---\n\n    “因为大佬比你知道的多”\n","slug":"360fe_02_css","published":1,"updated":"2021-01-22T09:59:00.801Z","_id":"ckir88ifc000nc8y6hdunfi6s","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h1><p>cascading stylesheet<br>级联样式表</p>\n<h1 id=\"Level-版本\"><a href=\"#Level-版本\" class=\"headerlink\" title=\"Level 版本\"></a>Level 版本</h1><ul>\n<li>CSS Level 1（废弃</li>\n<li>CSS Level 2 (CSS 2.2 完整规范)</li>\n<li>CSS Level 3（在 2.2 的基础上增加新模块特性<ul>\n<li>Color Module Level 3</li>\n<li>Selectors Level 3</li>\n<li>Media Queries</li>\n<li>Fonts Level 3</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><h2 id=\"简单\"><a href=\"#简单\" class=\"headerlink\" title=\"简单\"></a>简单</h2><ul>\n<li>通配 *</li>\n<li>标签 E</li>\n<li>类 .class</li>\n<li>id #id</li>\n</ul>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器 [ ]\"></a>属性选择器 [ ]</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 具有某个属性 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[disabled]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性为指定的值 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[type=<span class=\"string\">\"checkbox\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值包含某个字符串 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href*=<span class=\"string\">\"example\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以某个字符串开头 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href^=<span class=\"string\">\"http:\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以某个字符串结束 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href$=<span class=\"string\">\"jpg\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以空格分割后包含某个字符串 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[lang~＝<span class=\"string\">\"zh-cn\"</span>]</span><span class=\"comment\">/* class选择器的实现机制 */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 动态性伪类，根据状态选择 */</span></span><br><span class=\"line\">a:link    &#123; ... &#125;       /* 未访问过的链接 */</span><br><span class=\"line\">a:visited &#123; ... &#125;       /* 已访问过的链接 */</span><br><span class=\"line\"></span><br><span class=\"line\">a:hover   &#123; ... &#125;       /* 鼠标移到链接上的样式 */</span><br><span class=\"line\">a:active  &#123; ... &#125;       /* 鼠标在连接上按下时的样式 */</span><br><span class=\"line\">a:focus   &#123; ... &#125;       /* 获得焦点时的样式 */</span><br><span class=\"line\"></span><br><span class=\"line\">input:disabled &#123; ... &#125;  /* 禁用时的样式 */</span><br><span class=\"line\">input:checked &#123; ... &#125;   /* 选中时的样式 */</span><br><span class=\"line\">                        <span class=\"comment\">/*利用:checked来做某些toggle组件状态转换*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 结构性伪类 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:first-child</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:last-child</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:nth-child(2n+1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:first-of-type</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:last-of-type</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-of-type(2n+1)</span>   <span class=\"comment\">/*对nth-child()增加类型限制*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:empty</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"组合性选择器\"><a href=\"#组合性选择器\" class=\"headerlink\" title=\"组合性选择器\"></a>组合性选择器</h2><ul>\n<li>后代 E F</li>\n<li>父子 E&gt;F</li>\n<li>兄弟 E~F</li>\n<li>相邻兄弟 E+F</li>\n</ul>\n<h1 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h1><ul>\n<li>::before</li>\n<li>::after</li>\n<li>::first-letter</li>\n<li>::first-line</li>\n</ul>\n<h1 id=\"优先级-特异度-Specificity\"><a href=\"#优先级-特异度-Specificity\" class=\"headerlink\" title=\"优先级/特异度 Specificity\"></a>优先级/特异度 Specificity</h1><ul>\n<li>!important &gt; 内联 &gt; id &gt; （伪）类 &gt; （伪）元素</li>\n<li>覆盖：同样优先级：后面写的覆盖前面写的</li>\n<li>复合选择器：从优先级高的选择器 的 数量 开始比较</li>\n</ul>\n<h1 id=\"样式来源\"><a href=\"#样式来源\" class=\"headerlink\" title=\"样式来源\"></a>样式来源</h1><ul>\n<li>页面开发者</li>\n<li>用户设置（浏览器可以指定一个本地 CSS 文件，打开所有页面时自动加载</li>\n<li>浏览器预设<ul>\n<li><a href=\"https://dxr.mozilla.org/mozilla-central/source/layout/style/res/html.css\" target=\"_blank\" rel=\"noopener\">Mozilla Firefox 预设样式</a></li>\n<li><a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css\" target=\"_blank\" rel=\"noopener\">Google Chrome 预设样式</a></li>\n</ul>\n</li>\n<li>优先级： 开发者 &gt; 用户设置 &gt; 浏览器预设</li>\n<li>加了!important 的优先级：用户 important &gt; 开发者 important &gt; 开发者 &gt; 用户设置 &gt; 浏览器预设</li>\n</ul>\n<h1 id=\"默认值策略-Defaulting\"><a href=\"#默认值策略-Defaulting\" class=\"headerlink\" title=\"默认值策略 Defaulting\"></a>默认值策略 Defaulting</h1><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>某些属性若不指定值，会自动继承父元素的 ！！！【计算值】</p>\n<h2 id=\"显示继承\"><a href=\"#显示继承\" class=\"headerlink\" title=\"显示继承\"></a>显示继承</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: inherit;</span><br><span class=\"line\">    <span class=\"comment\">/* 优点是有某一块都要设置为content-box时，只需要设置其最外层元素，不需要全设置 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#xxx</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始值-initial\"><a href=\"#初始值-initial\" class=\"headerlink\" title=\"初始值 initial\"></a>初始值 initial</h2><ul>\n<li>CSS 中，每个属性都有一个初始值</li>\n<li>background-color 的初始值为 transparent</li>\n<li>margin-left 的初始值为 0，font-size 是 16px，line-height 是 1.2，但根据 font-family 而不同</li>\n<li>可以显式重置为初始值，比如 background-color: initial</li>\n<li>可以上 mdn 查初始值</li>\n</ul>\n<h1 id=\"CSS-求值过程\"><a href=\"#CSS-求值过程\" class=\"headerlink\" title=\"CSS 求值过程\"></a>CSS 求值过程</h1><h2 id=\"一个令人疑惑的很皮的-CSS-求值例子\"><a href=\"#一个令人疑惑的很皮的-CSS-求值例子\" class=\"headerlink\" title=\"一个令人疑惑的很皮的 CSS 求值例子\"></a>一个令人疑惑的很皮的 CSS 求值例子</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>卡尔斯巴德洞窟<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        卡尔斯巴德洞窟（Carlsbad Caverns）是美国的一座国家公园，</span><br><span class=\"line\">        位于新墨西哥州东南部。游客可以通过天然入口徒步进入，也可以</span><br><span class=\"line\">        通过电梯直接到达230米的洞穴深处。</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    article &#123;</span><br><span class=\"line\">        line-height: 150%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 40<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为24px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为24px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    article &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.5</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 40<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为60px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为21px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    原因：</span></span><br><span class=\"line\"><span class=\"comment\">    设为150%时，子元素继承前，父元素的line-height=150%会先被计算（resolving），得到一个绝对值，被计算为16px(默认的font-size值)*1.5=24px，子元素继承到的值是24px</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    设为1.5时，子元素继承前，父元素在执行resolving时，1.5是绝对值，不会被转换，所以子元素继承到值1.5，后面再根据自己的font-size*1.5计算line-height</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    总结：子元素继承到的是父元素的 计算值（一个绝对值）</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-求值详细过程\"><a href=\"#CSS-求值详细过程\" class=\"headerlink\" title=\"CSS 求值详细过程\"></a>CSS 求值详细过程</h2><ul>\n<li>filtering：有效选择器 有效属性值 符合 media ，筛选出所有<strong>声明值 Declared Values</strong></li>\n<li>cascading：选出优先级最高的一条声明，得到<strong>层叠值 Cascaded Value</strong></li>\n<li>defaulting：当层叠值为空时，用 继承 | 初始值，得到<strong>指定值 Specified Value</strong></li>\n<li>resolving：将相对值、关键字转化为绝对值，如 em 转换为 px，%被转换为 px，相对路径转换为绝对路径，得到<strong>计算值 Computed Value</strong></li>\n<li>formatting:将计算值进一步转换，比如百分比、关键字转换为绝对值，得到<strong>使用值 Used Value</strong></li>\n<li>constraining：将小数像素转为整数，得到<strong>实际值</strong></li>\n</ul>\n<h1 id=\"CSS-排版原理\"><a href=\"#CSS-排版原理\" class=\"headerlink\" title=\"CSS 排版原理\"></a>CSS 排版原理</h1><h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><h3 id=\"content-box：\"><a href=\"#content-box：\" class=\"headerlink\" title=\"content-box：\"></a>content-box：</h3><ul>\n<li>margin</li>\n<li>border</li>\n<li>padding</li>\n<li>content（width height）</li>\n</ul>\n<h3 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h3><ul>\n<li>margin</li>\n<li>border （width = border + padding + content_width）</li>\n<li>padding</li>\n<li>content</li>\n</ul>\n<h2 id=\"height-100-（一般不用\"><a href=\"#height-100-（一般不用\" class=\"headerlink\" title=\"height 100%（一般不用\"></a>height 100%（一般不用</h2><ul>\n<li>高度百分数，是相对于父元素的高度</li>\n<li>若父元素无高度，则百分比高度不生效</li>\n<li>用 vw vh 设置相对于屏幕的百分比高度，100vh 即 100%屏幕高度</li>\n</ul>\n<h2 id=\"padding-100\"><a href=\"#padding-100\" class=\"headerlink\" title=\"padding 100%\"></a>padding 100%</h2><ul>\n<li>padding 百分比值，不论是 padding top、left，都是相对于<strong>父元素宽度</strong></li>\n<li>应用：做固定宽高比的盒子.</li>\n</ul>\n<h2 id=\"margin-折叠\"><a href=\"#margin-折叠\" class=\"headerlink\" title=\"margin 折叠\"></a>margin 折叠</h2><p>上下相邻元素的间距会取其 margin 中较大值。</p>\n<h2 id=\"border：四条边不同颜色\"><a href=\"#border：四条边不同颜色\" class=\"headerlink\" title=\"border：四条边不同颜色\"></a>border：四条边不同颜色</h2><ul>\n<li>实际相邻的 border 交界处，是斜切的。</li>\n<li>当元素的 width height 为 0 时，会得到四个三角形</li>\n</ul>\n<h1 id=\"background-repeating-conic-gradient-black-0-60deg-yellow-0-120deg\"><a href=\"#background-repeating-conic-gradient-black-0-60deg-yellow-0-120deg\" class=\"headerlink\" title=\"background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);\"></a>background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);</h1><h1 id=\"视觉格式化模型\"><a href=\"#视觉格式化模型\" class=\"headerlink\" title=\"视觉格式化模型\"></a>视觉格式化模型</h1><h2 id=\"Viewport-视口\"><a href=\"#Viewport-视口\" class=\"headerlink\" title=\"Viewport 视口\"></a>Viewport 视口</h2><p>浏览器的可视区域，所有元素都在 viewport 内</p>\n<h2 id=\"块级元素-Block-level-Elements\"><a href=\"#块级元素-Block-level-Elements\" class=\"headerlink\" title=\"块级元素(Block-level Elements)\"></a>块级元素(Block-level Elements)</h2><ul>\n<li>会被格式化成块状的元素</li>\n<li>例如 p、div、section 等</li>\n<li>将 display 设置为 block、list-item、table 会使元素变为块级</li>\n</ul>\n<h2 id=\"行内元素-Inline-level-Elements\"><a href=\"#行内元素-Inline-level-Elements\" class=\"headerlink\" title=\"行内元素(Inline-level Elements)\"></a>行内元素(Inline-level Elements)</h2><ul>\n<li>不会为其内容生成块级框</li>\n<li>让其内容分布在多行中</li>\n<li>display 设置为 inline、inline-block、inline-table 会使元素变为行级</li>\n</ul>\n<hr>\n<pre><code>“因为大佬比你知道的多”\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h1><p>cascading stylesheet<br>级联样式表</p>\n<h1 id=\"Level-版本\"><a href=\"#Level-版本\" class=\"headerlink\" title=\"Level 版本\"></a>Level 版本</h1><ul>\n<li>CSS Level 1（废弃</li>\n<li>CSS Level 2 (CSS 2.2 完整规范)</li>\n<li>CSS Level 3（在 2.2 的基础上增加新模块特性<ul>\n<li>Color Module Level 3</li>\n<li>Selectors Level 3</li>\n<li>Media Queries</li>\n<li>Fonts Level 3</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><h2 id=\"简单\"><a href=\"#简单\" class=\"headerlink\" title=\"简单\"></a>简单</h2><ul>\n<li>通配 *</li>\n<li>标签 E</li>\n<li>类 .class</li>\n<li>id #id</li>\n</ul>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器 [ ]\"></a>属性选择器 [ ]</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 具有某个属性 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[disabled]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性为指定的值 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[type=<span class=\"string\">\"checkbox\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值包含某个字符串 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href*=<span class=\"string\">\"example\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以某个字符串开头 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href^=<span class=\"string\">\"http:\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以某个字符串结束 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[href$=<span class=\"string\">\"jpg\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 属性值以空格分割后包含某个字符串 */</span></span><br><span class=\"line\"><span class=\"selector-attr\">[lang~＝<span class=\"string\">\"zh-cn\"</span>]</span><span class=\"comment\">/* class选择器的实现机制 */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 动态性伪类，根据状态选择 */</span></span><br><span class=\"line\">a:link    &#123; ... &#125;       /* 未访问过的链接 */</span><br><span class=\"line\">a:visited &#123; ... &#125;       /* 已访问过的链接 */</span><br><span class=\"line\"></span><br><span class=\"line\">a:hover   &#123; ... &#125;       /* 鼠标移到链接上的样式 */</span><br><span class=\"line\">a:active  &#123; ... &#125;       /* 鼠标在连接上按下时的样式 */</span><br><span class=\"line\">a:focus   &#123; ... &#125;       /* 获得焦点时的样式 */</span><br><span class=\"line\"></span><br><span class=\"line\">input:disabled &#123; ... &#125;  /* 禁用时的样式 */</span><br><span class=\"line\">input:checked &#123; ... &#125;   /* 选中时的样式 */</span><br><span class=\"line\">                        <span class=\"comment\">/*利用:checked来做某些toggle组件状态转换*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 结构性伪类 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:first-child</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:last-child</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:nth-child(2n+1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:first-of-type</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:last-of-type</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-of-type(2n+1)</span>   <span class=\"comment\">/*对nth-child()增加类型限制*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:empty</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"组合性选择器\"><a href=\"#组合性选择器\" class=\"headerlink\" title=\"组合性选择器\"></a>组合性选择器</h2><ul>\n<li>后代 E F</li>\n<li>父子 E&gt;F</li>\n<li>兄弟 E~F</li>\n<li>相邻兄弟 E+F</li>\n</ul>\n<h1 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h1><ul>\n<li>::before</li>\n<li>::after</li>\n<li>::first-letter</li>\n<li>::first-line</li>\n</ul>\n<h1 id=\"优先级-特异度-Specificity\"><a href=\"#优先级-特异度-Specificity\" class=\"headerlink\" title=\"优先级/特异度 Specificity\"></a>优先级/特异度 Specificity</h1><ul>\n<li>!important &gt; 内联 &gt; id &gt; （伪）类 &gt; （伪）元素</li>\n<li>覆盖：同样优先级：后面写的覆盖前面写的</li>\n<li>复合选择器：从优先级高的选择器 的 数量 开始比较</li>\n</ul>\n<h1 id=\"样式来源\"><a href=\"#样式来源\" class=\"headerlink\" title=\"样式来源\"></a>样式来源</h1><ul>\n<li>页面开发者</li>\n<li>用户设置（浏览器可以指定一个本地 CSS 文件，打开所有页面时自动加载</li>\n<li>浏览器预设<ul>\n<li><a href=\"https://dxr.mozilla.org/mozilla-central/source/layout/style/res/html.css\" target=\"_blank\" rel=\"noopener\">Mozilla Firefox 预设样式</a></li>\n<li><a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css\" target=\"_blank\" rel=\"noopener\">Google Chrome 预设样式</a></li>\n</ul>\n</li>\n<li>优先级： 开发者 &gt; 用户设置 &gt; 浏览器预设</li>\n<li>加了!important 的优先级：用户 important &gt; 开发者 important &gt; 开发者 &gt; 用户设置 &gt; 浏览器预设</li>\n</ul>\n<h1 id=\"默认值策略-Defaulting\"><a href=\"#默认值策略-Defaulting\" class=\"headerlink\" title=\"默认值策略 Defaulting\"></a>默认值策略 Defaulting</h1><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>某些属性若不指定值，会自动继承父元素的 ！！！【计算值】</p>\n<h2 id=\"显示继承\"><a href=\"#显示继承\" class=\"headerlink\" title=\"显示继承\"></a>显示继承</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: inherit;</span><br><span class=\"line\">    <span class=\"comment\">/* 优点是有某一块都要设置为content-box时，只需要设置其最外层元素，不需要全设置 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#xxx</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始值-initial\"><a href=\"#初始值-initial\" class=\"headerlink\" title=\"初始值 initial\"></a>初始值 initial</h2><ul>\n<li>CSS 中，每个属性都有一个初始值</li>\n<li>background-color 的初始值为 transparent</li>\n<li>margin-left 的初始值为 0，font-size 是 16px，line-height 是 1.2，但根据 font-family 而不同</li>\n<li>可以显式重置为初始值，比如 background-color: initial</li>\n<li>可以上 mdn 查初始值</li>\n</ul>\n<h1 id=\"CSS-求值过程\"><a href=\"#CSS-求值过程\" class=\"headerlink\" title=\"CSS 求值过程\"></a>CSS 求值过程</h1><h2 id=\"一个令人疑惑的很皮的-CSS-求值例子\"><a href=\"#一个令人疑惑的很皮的-CSS-求值例子\" class=\"headerlink\" title=\"一个令人疑惑的很皮的 CSS 求值例子\"></a>一个令人疑惑的很皮的 CSS 求值例子</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>卡尔斯巴德洞窟<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        卡尔斯巴德洞窟（Carlsbad Caverns）是美国的一座国家公园，</span><br><span class=\"line\">        位于新墨西哥州东南部。游客可以通过天然入口徒步进入，也可以</span><br><span class=\"line\">        通过电梯直接到达230米的洞穴深处。</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    article &#123;</span><br><span class=\"line\">        line-height: 150%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 40<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为24px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为24px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    article &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.5</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h1 &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 40<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为60px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p &#123;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">font-size</span>: 14<span class=\"selector-tag\">px</span>; <span class=\"comment\">/*最终实际的line-height值为21px*/</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    原因：</span></span><br><span class=\"line\"><span class=\"comment\">    设为150%时，子元素继承前，父元素的line-height=150%会先被计算（resolving），得到一个绝对值，被计算为16px(默认的font-size值)*1.5=24px，子元素继承到的值是24px</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    设为1.5时，子元素继承前，父元素在执行resolving时，1.5是绝对值，不会被转换，所以子元素继承到值1.5，后面再根据自己的font-size*1.5计算line-height</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    总结：子元素继承到的是父元素的 计算值（一个绝对值）</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-求值详细过程\"><a href=\"#CSS-求值详细过程\" class=\"headerlink\" title=\"CSS 求值详细过程\"></a>CSS 求值详细过程</h2><ul>\n<li>filtering：有效选择器 有效属性值 符合 media ，筛选出所有<strong>声明值 Declared Values</strong></li>\n<li>cascading：选出优先级最高的一条声明，得到<strong>层叠值 Cascaded Value</strong></li>\n<li>defaulting：当层叠值为空时，用 继承 | 初始值，得到<strong>指定值 Specified Value</strong></li>\n<li>resolving：将相对值、关键字转化为绝对值，如 em 转换为 px，%被转换为 px，相对路径转换为绝对路径，得到<strong>计算值 Computed Value</strong></li>\n<li>formatting:将计算值进一步转换，比如百分比、关键字转换为绝对值，得到<strong>使用值 Used Value</strong></li>\n<li>constraining：将小数像素转为整数，得到<strong>实际值</strong></li>\n</ul>\n<h1 id=\"CSS-排版原理\"><a href=\"#CSS-排版原理\" class=\"headerlink\" title=\"CSS 排版原理\"></a>CSS 排版原理</h1><h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><h3 id=\"content-box：\"><a href=\"#content-box：\" class=\"headerlink\" title=\"content-box：\"></a>content-box：</h3><ul>\n<li>margin</li>\n<li>border</li>\n<li>padding</li>\n<li>content（width height）</li>\n</ul>\n<h3 id=\"border-box\"><a href=\"#border-box\" class=\"headerlink\" title=\"border-box\"></a>border-box</h3><ul>\n<li>margin</li>\n<li>border （width = border + padding + content_width）</li>\n<li>padding</li>\n<li>content</li>\n</ul>\n<h2 id=\"height-100-（一般不用\"><a href=\"#height-100-（一般不用\" class=\"headerlink\" title=\"height 100%（一般不用\"></a>height 100%（一般不用</h2><ul>\n<li>高度百分数，是相对于父元素的高度</li>\n<li>若父元素无高度，则百分比高度不生效</li>\n<li>用 vw vh 设置相对于屏幕的百分比高度，100vh 即 100%屏幕高度</li>\n</ul>\n<h2 id=\"padding-100\"><a href=\"#padding-100\" class=\"headerlink\" title=\"padding 100%\"></a>padding 100%</h2><ul>\n<li>padding 百分比值，不论是 padding top、left，都是相对于<strong>父元素宽度</strong></li>\n<li>应用：做固定宽高比的盒子.</li>\n</ul>\n<h2 id=\"margin-折叠\"><a href=\"#margin-折叠\" class=\"headerlink\" title=\"margin 折叠\"></a>margin 折叠</h2><p>上下相邻元素的间距会取其 margin 中较大值。</p>\n<h2 id=\"border：四条边不同颜色\"><a href=\"#border：四条边不同颜色\" class=\"headerlink\" title=\"border：四条边不同颜色\"></a>border：四条边不同颜色</h2><ul>\n<li>实际相邻的 border 交界处，是斜切的。</li>\n<li>当元素的 width height 为 0 时，会得到四个三角形</li>\n</ul>\n<h1 id=\"background-repeating-conic-gradient-black-0-60deg-yellow-0-120deg\"><a href=\"#background-repeating-conic-gradient-black-0-60deg-yellow-0-120deg\" class=\"headerlink\" title=\"background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);\"></a>background: repeating-conic-gradient(black 0 60deg, yellow 0 120deg);</h1><h1 id=\"视觉格式化模型\"><a href=\"#视觉格式化模型\" class=\"headerlink\" title=\"视觉格式化模型\"></a>视觉格式化模型</h1><h2 id=\"Viewport-视口\"><a href=\"#Viewport-视口\" class=\"headerlink\" title=\"Viewport 视口\"></a>Viewport 视口</h2><p>浏览器的可视区域，所有元素都在 viewport 内</p>\n<h2 id=\"块级元素-Block-level-Elements\"><a href=\"#块级元素-Block-level-Elements\" class=\"headerlink\" title=\"块级元素(Block-level Elements)\"></a>块级元素(Block-level Elements)</h2><ul>\n<li>会被格式化成块状的元素</li>\n<li>例如 p、div、section 等</li>\n<li>将 display 设置为 block、list-item、table 会使元素变为块级</li>\n</ul>\n<h2 id=\"行内元素-Inline-level-Elements\"><a href=\"#行内元素-Inline-level-Elements\" class=\"headerlink\" title=\"行内元素(Inline-level Elements)\"></a>行内元素(Inline-level Elements)</h2><ul>\n<li>不会为其内容生成块级框</li>\n<li>让其内容分布在多行中</li>\n<li>display 设置为 inline、inline-block、inline-table 会使元素变为行级</li>\n</ul>\n<hr>\n<pre><code>“因为大佬比你知道的多”\n</code></pre>"},{"title":"【360FED课程】HTML","date":"2018-09-01T16:00:00.000Z","description":"这么穷为什么还花钱买HTML学？","toc":1,"top":0,"_content":"\n# 1. 前端做什么\n\n用 web 标准技术 html css js svg http 等\n\n做界面与交互\n\n功能+美观+无障碍+安全+兼容+性能+体验\n\n# 2. 知识图谱/技术栈\n\n## 2.1. 语言\n\n-   js\n-   html\n-   css\n-   php\n\n## 2.2. 行业标准\n\n-   DOM\n-   ES2018\n-   HTTP\n-   JSON\n-   XML\n\n## 2.3. 框架\n\n-   React.js\n-   Angular.js\n-   jQuery\n-   Vue.js\n-   lodash\n\n## 2.4. 兼容性\n\n-   IE 等浏览器\n-   CSS3 新特性\n-   HTML5 新特性\n-   ES2018\n-   移动端\n\n## 2.5. 编程思想\n\n-   函数式编程\n-   面向对象\n-   设计模式\n\n## 2.6. 调试\n\n-   浏览器\n-   Fiddler http\n\n## 2.7. 工程化\n\n-   npm\n-   webpack\n-   postcss\n\n## 2.8. 安全性\n\n-   XSS\n-   CSRF\n-   加密解密\n-   编解码\n\n## 2.9. 性能\n\n-   优化规则\n-   开发者工具\n-   浏览器原理\n\n## 2.10. 团队协作\n\n-   git/svn\n-   编码规范/eslint\n-   文档管理\n\n## 2.11. 交互设计\n\n# 3. 前端边界\n\nnode、electron、react native、webRTC、WebGL、WEBAssembly\n\n# 4. HTML\n\n## 4.1. doctype\n\n-   指定文档使用的标准和版本；\n-   浏览器根据 doctype 决定使用哪种渲染模式；\n-   没写会以怪异模式渲染（盒模型不同等待）\n-   渲染模式\n\n## 4.2. 语义化\n\n-   元素、属性、属性值都有特定含义，应该遵循语义来写 HTML\n-   可读性、可维护性、搜索引擎优化、无障碍性\n\n## 4.3. 标签\n\n### 4.3.1. flow 流式元素：\n\n-   heading 标题\n-   sectioning 章节\n-   phrasing 段落内容 p h\n-   Embedded 嵌入式内容 audio canvas\n-   interactive 可交互性内容 button a\n-   metadata 元数据元素 base link meta noscript script style title\n\n### 4.3.2. 看规范\n\n## 4.4. HTML 扩展\n\n### 4.4.1. meta 标签（增加元数据\n\n```HTML\n<!-- 编码 -->\n<meta charset=\"utf-8\">\n\n<!-- 指定http header -->\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'\">\n\n<!-- seo优化 -->\n<meta name=\"keywords\" content=\"关键词\">\n<meta name=\"description\" content=\"页面介绍\">\n\n<!-- 移动设备的viewport 初始缩放比例，视口宽度 -->\n<meta name=\"viewport\" content=\"initial-scale=1\">\n\n<!-- 关闭IOS电话号码识别 -->\n<meta name=\"format-detection\" content=\"telphone=no\">\n\n<!-- 360等双核浏览器 指定渲染内核 -->\n<meta name=\"renderer\" content=\"webkit\">\n\n<!-- 指定IE渲染模式 -->\n<meta name=\"X-UA-Compatibla\" content=\"IE=Edge\">\n```\n\n### 4.4.2. data-\\*属性（规范内-自定义的属性）\n\n```HTML\n  datasetAPI\n    <el data-id=\"\"/>\n    el.dataset.id\n```\n\n### 4.4.3. link\n\n-   rel 属性（relation 关系，外部资源与当前页面的关系）\n\n```html\n<!-- 引入css -->\n<link rel=\"stylesheet\" href=\"\" />\n\n<!--\n    浏览器性能优化：dns预解析rel=dns-prefetch、资源预加载rel=prefetch、预渲染 rel=prerender\n-->\n<link rel=\"dns-prefetch\" href=\"\" /> <link rel=\"prefetch\" href=\"\" />\n<link rel=\"prerender\" href=\"\" />\n\n<!-- favicon：rel=icon -->\n<link rel=\"icon\" type=\"image/png\" href=\"\" />\n\n<!-- RSS：rel=alternate -->\n<link rel=\"alternate\" type=\"application/rss+xml\" href=\"\" />\n```\n\n### 4.4.4. JSON-LD\n\nLD：linkdata 链接的数据 (直接在页面嵌 json 数据)\n\n```js\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"Person\",\n  \"name\": \"John Doe\",\n  \"jobTitle\": \"Graduate research assistant\",\n  \"affiliation\": \"University of Dreams\",\n  \"additionalName\": \"Johnny\",\n  \"url\": \"http://www.example.com\",\n  \"address\": {\n    \"@type\": \"PostalAddress\",\n    \"streetAddress\": \"1234 Peach Drive\",\n    \"addressLocality\": \"Wonderland\",\n    \"addressRegion\": \"Georgia\"\n  }\n}\n//  应用例如分享页面时的数据\n//  搜索引擎能识别等等\n//  分享链接带有一些标题图片等信息\n</script>\n```\n\n## 4.5. Web 无障碍/Accessibility\n\n-   一些 Web 开发者规范：\n    -   WCAG2.0\n    -   ARIA\n-   提升无障碍性\n    -   img alt\n    -   noscript\n    -   input 和 label 对应\n    -   图片验证码与语音验证码\n    -   文字背景对比度\n    -   键盘可操作（tab modal focus）\n\n## 4.6. 工具\n\n-   [W3C Validator（检查 html 合法性）](http://validator.w3.org/)\n-   emmet（插件）\n-   markdown（适合写文档）\n\n## 4.7. 参考链接\n\n-   [HTML: The Living Standard](https://html.spec.whatwg.org/dev/)\n-   [Activating Browser Modes with Doctype](https://hsivonen.fi/doctype/)\n-   [Accessibility](https://www.w3.org/standards/webdesign/accessibility)\n-   Web Content Accessibility Guidelines 2.0\n-   [HTML5 Doctor: Semantics](http://html5doctor.com/element-index/)\n\n## 全局属性\n\n### class id style\n\n### title\n\n（兼容性最好的 tooltip😂）\n\n### tabindex\n\ntab 键控制次序\n\n### lang\n\n语言代码（利于语义化机器理解）（语言代码参考手册http://www.runoob.com/tags/html-language-codes.html）\n\n### dir\n\n文本方向（rtl ltr auto）\n\n### accesskey\n\n元素的键盘访问快捷键（例值为'h'则不同浏览器不同 OS 有不同的操作方式，例 chrome 是 alt + 'h'）\n\n## （HTML5 全局属性）\n\n### data-\\*属性\n\n属性名不要包含大写字母，在 data- 后必须至少有一个字符。\n该属性可以是任何字符串\n\n```\nel.getAttribute(\"data-xx\")\n```\n\n### hidden\n\n不需要属性值，隐藏元素，原理是 display:none\n\n### contenteditable\n\n元素是否可编辑\n\n### contextmenu\n\n（说是目前只有 firefox 支持，亲测没效果\n\n```\n<p contextmenu=\"mymenu\"></p>\n<menu id=\"mymenu\">\n    <command label=\"xxx\" onclick=\"fn()\"/>\n    <command label=\"xxx\" onclick=\"fn()\"/>\n</menu>\n```\n\n### draggable：(与 HTML5drag 结合用)\n\n```javascript\n\n<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n<p id=\"drag1\" draggable=\"true\" ondragstart=\"drag(event)\">这是一段可移动的段落。可把该段落拖入上下的矩形。</p>\n<div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n\nfunction allowDrop(ev){\n\tev.preventDefault();\n}\nfunction drag(ev){\n\tev.dataTransfer.setData(\"Text\",ev.target.id);\n}\nfunction drop(ev){\n\tvar data=ev.dataTransfer.getData(\"Text\");\n\tev.target.appendChild(document.getElementById(data));\n\tev.preventDefault();\n}\n\n```\n\n### dropzone 属性:\n\n规定当被拖动的数据在拖放到元素上时，是否被复制### 动或链接,无浏览器支持\n\n### sppelcheck：\n\n对元素的文本进行拼写检查\n\n### translate 属性：\n\n规定元素内容是否要翻译，=yes|no\n\n# 遗留\n\n表单元素 属性 datalist select 下拉多选 input 的 multiple 属性 button 的 type 属性默认值\nvideo 不能嵌套 img\np 不能嵌套 div\nfigure dfn cite 标签\n\n---\n\n    “因为你永远不知道你不知道的有多少”\n","source":"_posts/360fe_01_html.md","raw":"---\ntitle: 【360FED课程】HTML\ncategories:\n    - 10技术 | HTML # 一级分类\ntags:\n    - 360fed\ndate: 2018-09-02\ndescription: 这么穷为什么还花钱买HTML学？\ntoc: 1\ntop: 0\n---\n\n# 1. 前端做什么\n\n用 web 标准技术 html css js svg http 等\n\n做界面与交互\n\n功能+美观+无障碍+安全+兼容+性能+体验\n\n# 2. 知识图谱/技术栈\n\n## 2.1. 语言\n\n-   js\n-   html\n-   css\n-   php\n\n## 2.2. 行业标准\n\n-   DOM\n-   ES2018\n-   HTTP\n-   JSON\n-   XML\n\n## 2.3. 框架\n\n-   React.js\n-   Angular.js\n-   jQuery\n-   Vue.js\n-   lodash\n\n## 2.4. 兼容性\n\n-   IE 等浏览器\n-   CSS3 新特性\n-   HTML5 新特性\n-   ES2018\n-   移动端\n\n## 2.5. 编程思想\n\n-   函数式编程\n-   面向对象\n-   设计模式\n\n## 2.6. 调试\n\n-   浏览器\n-   Fiddler http\n\n## 2.7. 工程化\n\n-   npm\n-   webpack\n-   postcss\n\n## 2.8. 安全性\n\n-   XSS\n-   CSRF\n-   加密解密\n-   编解码\n\n## 2.9. 性能\n\n-   优化规则\n-   开发者工具\n-   浏览器原理\n\n## 2.10. 团队协作\n\n-   git/svn\n-   编码规范/eslint\n-   文档管理\n\n## 2.11. 交互设计\n\n# 3. 前端边界\n\nnode、electron、react native、webRTC、WebGL、WEBAssembly\n\n# 4. HTML\n\n## 4.1. doctype\n\n-   指定文档使用的标准和版本；\n-   浏览器根据 doctype 决定使用哪种渲染模式；\n-   没写会以怪异模式渲染（盒模型不同等待）\n-   渲染模式\n\n## 4.2. 语义化\n\n-   元素、属性、属性值都有特定含义，应该遵循语义来写 HTML\n-   可读性、可维护性、搜索引擎优化、无障碍性\n\n## 4.3. 标签\n\n### 4.3.1. flow 流式元素：\n\n-   heading 标题\n-   sectioning 章节\n-   phrasing 段落内容 p h\n-   Embedded 嵌入式内容 audio canvas\n-   interactive 可交互性内容 button a\n-   metadata 元数据元素 base link meta noscript script style title\n\n### 4.3.2. 看规范\n\n## 4.4. HTML 扩展\n\n### 4.4.1. meta 标签（增加元数据\n\n```HTML\n<!-- 编码 -->\n<meta charset=\"utf-8\">\n\n<!-- 指定http header -->\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'\">\n\n<!-- seo优化 -->\n<meta name=\"keywords\" content=\"关键词\">\n<meta name=\"description\" content=\"页面介绍\">\n\n<!-- 移动设备的viewport 初始缩放比例，视口宽度 -->\n<meta name=\"viewport\" content=\"initial-scale=1\">\n\n<!-- 关闭IOS电话号码识别 -->\n<meta name=\"format-detection\" content=\"telphone=no\">\n\n<!-- 360等双核浏览器 指定渲染内核 -->\n<meta name=\"renderer\" content=\"webkit\">\n\n<!-- 指定IE渲染模式 -->\n<meta name=\"X-UA-Compatibla\" content=\"IE=Edge\">\n```\n\n### 4.4.2. data-\\*属性（规范内-自定义的属性）\n\n```HTML\n  datasetAPI\n    <el data-id=\"\"/>\n    el.dataset.id\n```\n\n### 4.4.3. link\n\n-   rel 属性（relation 关系，外部资源与当前页面的关系）\n\n```html\n<!-- 引入css -->\n<link rel=\"stylesheet\" href=\"\" />\n\n<!--\n    浏览器性能优化：dns预解析rel=dns-prefetch、资源预加载rel=prefetch、预渲染 rel=prerender\n-->\n<link rel=\"dns-prefetch\" href=\"\" /> <link rel=\"prefetch\" href=\"\" />\n<link rel=\"prerender\" href=\"\" />\n\n<!-- favicon：rel=icon -->\n<link rel=\"icon\" type=\"image/png\" href=\"\" />\n\n<!-- RSS：rel=alternate -->\n<link rel=\"alternate\" type=\"application/rss+xml\" href=\"\" />\n```\n\n### 4.4.4. JSON-LD\n\nLD：linkdata 链接的数据 (直接在页面嵌 json 数据)\n\n```js\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"Person\",\n  \"name\": \"John Doe\",\n  \"jobTitle\": \"Graduate research assistant\",\n  \"affiliation\": \"University of Dreams\",\n  \"additionalName\": \"Johnny\",\n  \"url\": \"http://www.example.com\",\n  \"address\": {\n    \"@type\": \"PostalAddress\",\n    \"streetAddress\": \"1234 Peach Drive\",\n    \"addressLocality\": \"Wonderland\",\n    \"addressRegion\": \"Georgia\"\n  }\n}\n//  应用例如分享页面时的数据\n//  搜索引擎能识别等等\n//  分享链接带有一些标题图片等信息\n</script>\n```\n\n## 4.5. Web 无障碍/Accessibility\n\n-   一些 Web 开发者规范：\n    -   WCAG2.0\n    -   ARIA\n-   提升无障碍性\n    -   img alt\n    -   noscript\n    -   input 和 label 对应\n    -   图片验证码与语音验证码\n    -   文字背景对比度\n    -   键盘可操作（tab modal focus）\n\n## 4.6. 工具\n\n-   [W3C Validator（检查 html 合法性）](http://validator.w3.org/)\n-   emmet（插件）\n-   markdown（适合写文档）\n\n## 4.7. 参考链接\n\n-   [HTML: The Living Standard](https://html.spec.whatwg.org/dev/)\n-   [Activating Browser Modes with Doctype](https://hsivonen.fi/doctype/)\n-   [Accessibility](https://www.w3.org/standards/webdesign/accessibility)\n-   Web Content Accessibility Guidelines 2.0\n-   [HTML5 Doctor: Semantics](http://html5doctor.com/element-index/)\n\n## 全局属性\n\n### class id style\n\n### title\n\n（兼容性最好的 tooltip😂）\n\n### tabindex\n\ntab 键控制次序\n\n### lang\n\n语言代码（利于语义化机器理解）（语言代码参考手册http://www.runoob.com/tags/html-language-codes.html）\n\n### dir\n\n文本方向（rtl ltr auto）\n\n### accesskey\n\n元素的键盘访问快捷键（例值为'h'则不同浏览器不同 OS 有不同的操作方式，例 chrome 是 alt + 'h'）\n\n## （HTML5 全局属性）\n\n### data-\\*属性\n\n属性名不要包含大写字母，在 data- 后必须至少有一个字符。\n该属性可以是任何字符串\n\n```\nel.getAttribute(\"data-xx\")\n```\n\n### hidden\n\n不需要属性值，隐藏元素，原理是 display:none\n\n### contenteditable\n\n元素是否可编辑\n\n### contextmenu\n\n（说是目前只有 firefox 支持，亲测没效果\n\n```\n<p contextmenu=\"mymenu\"></p>\n<menu id=\"mymenu\">\n    <command label=\"xxx\" onclick=\"fn()\"/>\n    <command label=\"xxx\" onclick=\"fn()\"/>\n</menu>\n```\n\n### draggable：(与 HTML5drag 结合用)\n\n```javascript\n\n<div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n<p id=\"drag1\" draggable=\"true\" ondragstart=\"drag(event)\">这是一段可移动的段落。可把该段落拖入上下的矩形。</p>\n<div id=\"div2\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n\nfunction allowDrop(ev){\n\tev.preventDefault();\n}\nfunction drag(ev){\n\tev.dataTransfer.setData(\"Text\",ev.target.id);\n}\nfunction drop(ev){\n\tvar data=ev.dataTransfer.getData(\"Text\");\n\tev.target.appendChild(document.getElementById(data));\n\tev.preventDefault();\n}\n\n```\n\n### dropzone 属性:\n\n规定当被拖动的数据在拖放到元素上时，是否被复制### 动或链接,无浏览器支持\n\n### sppelcheck：\n\n对元素的文本进行拼写检查\n\n### translate 属性：\n\n规定元素内容是否要翻译，=yes|no\n\n# 遗留\n\n表单元素 属性 datalist select 下拉多选 input 的 multiple 属性 button 的 type 属性默认值\nvideo 不能嵌套 img\np 不能嵌套 div\nfigure dfn cite 标签\n\n---\n\n    “因为你永远不知道你不知道的有多少”\n","slug":"360fe_01_html","published":1,"updated":"2021-01-22T09:58:55.755Z","_id":"ckir88iff000sc8y6zgdo5hx7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-前端做什么\"><a href=\"#1-前端做什么\" class=\"headerlink\" title=\"1. 前端做什么\"></a>1. 前端做什么</h1><p>用 web 标准技术 html css js svg http 等</p>\n<p>做界面与交互</p>\n<p>功能+美观+无障碍+安全+兼容+性能+体验</p>\n<h1 id=\"2-知识图谱-技术栈\"><a href=\"#2-知识图谱-技术栈\" class=\"headerlink\" title=\"2. 知识图谱/技术栈\"></a>2. 知识图谱/技术栈</h1><h2 id=\"2-1-语言\"><a href=\"#2-1-语言\" class=\"headerlink\" title=\"2.1. 语言\"></a>2.1. 语言</h2><ul>\n<li>js</li>\n<li>html</li>\n<li>css</li>\n<li>php</li>\n</ul>\n<h2 id=\"2-2-行业标准\"><a href=\"#2-2-行业标准\" class=\"headerlink\" title=\"2.2. 行业标准\"></a>2.2. 行业标准</h2><ul>\n<li>DOM</li>\n<li>ES2018</li>\n<li>HTTP</li>\n<li>JSON</li>\n<li>XML</li>\n</ul>\n<h2 id=\"2-3-框架\"><a href=\"#2-3-框架\" class=\"headerlink\" title=\"2.3. 框架\"></a>2.3. 框架</h2><ul>\n<li>React.js</li>\n<li>Angular.js</li>\n<li>jQuery</li>\n<li>Vue.js</li>\n<li>lodash</li>\n</ul>\n<h2 id=\"2-4-兼容性\"><a href=\"#2-4-兼容性\" class=\"headerlink\" title=\"2.4. 兼容性\"></a>2.4. 兼容性</h2><ul>\n<li>IE 等浏览器</li>\n<li>CSS3 新特性</li>\n<li>HTML5 新特性</li>\n<li>ES2018</li>\n<li>移动端</li>\n</ul>\n<h2 id=\"2-5-编程思想\"><a href=\"#2-5-编程思想\" class=\"headerlink\" title=\"2.5. 编程思想\"></a>2.5. 编程思想</h2><ul>\n<li>函数式编程</li>\n<li>面向对象</li>\n<li>设计模式</li>\n</ul>\n<h2 id=\"2-6-调试\"><a href=\"#2-6-调试\" class=\"headerlink\" title=\"2.6. 调试\"></a>2.6. 调试</h2><ul>\n<li>浏览器</li>\n<li>Fiddler http</li>\n</ul>\n<h2 id=\"2-7-工程化\"><a href=\"#2-7-工程化\" class=\"headerlink\" title=\"2.7. 工程化\"></a>2.7. 工程化</h2><ul>\n<li>npm</li>\n<li>webpack</li>\n<li>postcss</li>\n</ul>\n<h2 id=\"2-8-安全性\"><a href=\"#2-8-安全性\" class=\"headerlink\" title=\"2.8. 安全性\"></a>2.8. 安全性</h2><ul>\n<li>XSS</li>\n<li>CSRF</li>\n<li>加密解密</li>\n<li>编解码</li>\n</ul>\n<h2 id=\"2-9-性能\"><a href=\"#2-9-性能\" class=\"headerlink\" title=\"2.9. 性能\"></a>2.9. 性能</h2><ul>\n<li>优化规则</li>\n<li>开发者工具</li>\n<li>浏览器原理</li>\n</ul>\n<h2 id=\"2-10-团队协作\"><a href=\"#2-10-团队协作\" class=\"headerlink\" title=\"2.10. 团队协作\"></a>2.10. 团队协作</h2><ul>\n<li>git/svn</li>\n<li>编码规范/eslint</li>\n<li>文档管理</li>\n</ul>\n<h2 id=\"2-11-交互设计\"><a href=\"#2-11-交互设计\" class=\"headerlink\" title=\"2.11. 交互设计\"></a>2.11. 交互设计</h2><h1 id=\"3-前端边界\"><a href=\"#3-前端边界\" class=\"headerlink\" title=\"3. 前端边界\"></a>3. 前端边界</h1><p>node、electron、react native、webRTC、WebGL、WEBAssembly</p>\n<h1 id=\"4-HTML\"><a href=\"#4-HTML\" class=\"headerlink\" title=\"4. HTML\"></a>4. HTML</h1><h2 id=\"4-1-doctype\"><a href=\"#4-1-doctype\" class=\"headerlink\" title=\"4.1. doctype\"></a>4.1. doctype</h2><ul>\n<li>指定文档使用的标准和版本；</li>\n<li>浏览器根据 doctype 决定使用哪种渲染模式；</li>\n<li>没写会以怪异模式渲染（盒模型不同等待）</li>\n<li>渲染模式</li>\n</ul>\n<h2 id=\"4-2-语义化\"><a href=\"#4-2-语义化\" class=\"headerlink\" title=\"4.2. 语义化\"></a>4.2. 语义化</h2><ul>\n<li>元素、属性、属性值都有特定含义，应该遵循语义来写 HTML</li>\n<li>可读性、可维护性、搜索引擎优化、无障碍性</li>\n</ul>\n<h2 id=\"4-3-标签\"><a href=\"#4-3-标签\" class=\"headerlink\" title=\"4.3. 标签\"></a>4.3. 标签</h2><h3 id=\"4-3-1-flow-流式元素：\"><a href=\"#4-3-1-flow-流式元素：\" class=\"headerlink\" title=\"4.3.1. flow 流式元素：\"></a>4.3.1. flow 流式元素：</h3><ul>\n<li>heading 标题</li>\n<li>sectioning 章节</li>\n<li>phrasing 段落内容 p h</li>\n<li>Embedded 嵌入式内容 audio canvas</li>\n<li>interactive 可交互性内容 button a</li>\n<li>metadata 元数据元素 base link meta noscript script style title</li>\n</ul>\n<h3 id=\"4-3-2-看规范\"><a href=\"#4-3-2-看规范\" class=\"headerlink\" title=\"4.3.2. 看规范\"></a>4.3.2. 看规范</h3><h2 id=\"4-4-HTML-扩展\"><a href=\"#4-4-HTML-扩展\" class=\"headerlink\" title=\"4.4. HTML 扩展\"></a>4.4. HTML 扩展</h2><h3 id=\"4-4-1-meta-标签（增加元数据\"><a href=\"#4-4-1-meta-标签（增加元数据\" class=\"headerlink\" title=\"4.4.1. meta 标签（增加元数据\"></a>4.4.1. meta 标签（增加元数据</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 编码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定http header --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Security-Policy\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"script-src 'self'\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- seo优化 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"关键词\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"页面介绍\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 移动设备的viewport 初始缩放比例，视口宽度 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 关闭IOS电话号码识别 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telphone=no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 360等双核浏览器 指定渲染内核 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定IE渲染模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"X-UA-Compatibla\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-2-data-属性（规范内-自定义的属性）\"><a href=\"#4-4-2-data-属性（规范内-自定义的属性）\" class=\"headerlink\" title=\"4.4.2. data-*属性（规范内-自定义的属性）\"></a>4.4.2. data-*属性（规范内-自定义的属性）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datasetAPI</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\">  el.dataset.id</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-3-link\"><a href=\"#4-4-3-link\" class=\"headerlink\" title=\"4.4.3. link\"></a>4.4.3. link</h3><ul>\n<li>rel 属性（relation 关系，外部资源与当前页面的关系）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入css --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    浏览器性能优化：dns预解析rel=dns-prefetch、资源预加载rel=prefetch、预渲染 rel=prerender</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prerender\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- favicon：rel=icon --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/png\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- RSS：rel=alternate --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"alternate\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/rss+xml\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-4-JSON-LD\"><a href=\"#4-4-4-JSON-LD\" class=\"headerlink\" title=\"4.4.4. JSON-LD\"></a>4.4.4. JSON-LD</h3><p>LD：linkdata 链接的数据 (直接在页面嵌 json 数据)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"application/ld+json\"</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"@context\"</span>: <span class=\"string\">\"http://schema.org\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"@type\"</span>: <span class=\"string\">\"Person\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"jobTitle\"</span>: <span class=\"string\">\"Graduate research assistant\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"affiliation\"</span>: <span class=\"string\">\"University of Dreams\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"additionalName\"</span>: <span class=\"string\">\"Johnny\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>: <span class=\"string\">\"http://www.example.com\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"address\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"@type\"</span>: <span class=\"string\">\"PostalAddress\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"streetAddress\"</span>: <span class=\"string\">\"1234 Peach Drive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"addressLocality\"</span>: <span class=\"string\">\"Wonderland\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"addressRegion\"</span>: <span class=\"string\">\"Georgia\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  应用例如分享页面时的数据</span></span><br><span class=\"line\"><span class=\"comment\">//  搜索引擎能识别等等</span></span><br><span class=\"line\"><span class=\"comment\">//  分享链接带有一些标题图片等信息</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-5-Web-无障碍-Accessibility\"><a href=\"#4-5-Web-无障碍-Accessibility\" class=\"headerlink\" title=\"4.5. Web 无障碍/Accessibility\"></a>4.5. Web 无障碍/Accessibility</h2><ul>\n<li>一些 Web 开发者规范：<ul>\n<li>WCAG2.0</li>\n<li>ARIA</li>\n</ul>\n</li>\n<li>提升无障碍性<ul>\n<li>img alt</li>\n<li>noscript</li>\n<li>input 和 label 对应</li>\n<li>图片验证码与语音验证码</li>\n<li>文字背景对比度</li>\n<li>键盘可操作（tab modal focus）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-6-工具\"><a href=\"#4-6-工具\" class=\"headerlink\" title=\"4.6. 工具\"></a>4.6. 工具</h2><ul>\n<li><a href=\"http://validator.w3.org/\" target=\"_blank\" rel=\"noopener\">W3C Validator（检查 html 合法性）</a></li>\n<li>emmet（插件）</li>\n<li>markdown（适合写文档）</li>\n</ul>\n<h2 id=\"4-7-参考链接\"><a href=\"#4-7-参考链接\" class=\"headerlink\" title=\"4.7. 参考链接\"></a>4.7. 参考链接</h2><ul>\n<li><a href=\"https://html.spec.whatwg.org/dev/\" target=\"_blank\" rel=\"noopener\">HTML: The Living Standard</a></li>\n<li><a href=\"https://hsivonen.fi/doctype/\" target=\"_blank\" rel=\"noopener\">Activating Browser Modes with Doctype</a></li>\n<li><a href=\"https://www.w3.org/standards/webdesign/accessibility\" target=\"_blank\" rel=\"noopener\">Accessibility</a></li>\n<li>Web Content Accessibility Guidelines 2.0</li>\n<li><a href=\"http://html5doctor.com/element-index/\" target=\"_blank\" rel=\"noopener\">HTML5 Doctor: Semantics</a></li>\n</ul>\n<h2 id=\"全局属性\"><a href=\"#全局属性\" class=\"headerlink\" title=\"全局属性\"></a>全局属性</h2><h3 id=\"class-id-style\"><a href=\"#class-id-style\" class=\"headerlink\" title=\"class id style\"></a>class id style</h3><h3 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h3><p>（兼容性最好的 tooltip😂）</p>\n<h3 id=\"tabindex\"><a href=\"#tabindex\" class=\"headerlink\" title=\"tabindex\"></a>tabindex</h3><p>tab 键控制次序</p>\n<h3 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\"lang\"></a>lang</h3><p>语言代码（利于语义化机器理解）（语言代码参考手册<a href=\"http://www.runoob.com/tags/html-language-codes.html）\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/tags/html-language-codes.html）</a></p>\n<h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h3><p>文本方向（rtl ltr auto）</p>\n<h3 id=\"accesskey\"><a href=\"#accesskey\" class=\"headerlink\" title=\"accesskey\"></a>accesskey</h3><p>元素的键盘访问快捷键（例值为’h’则不同浏览器不同 OS 有不同的操作方式，例 chrome 是 alt + ‘h’）</p>\n<h2 id=\"（HTML5-全局属性）\"><a href=\"#（HTML5-全局属性）\" class=\"headerlink\" title=\"（HTML5 全局属性）\"></a>（HTML5 全局属性）</h2><h3 id=\"data-属性\"><a href=\"#data-属性\" class=\"headerlink\" title=\"data-*属性\"></a>data-*属性</h3><p>属性名不要包含大写字母，在 data- 后必须至少有一个字符。<br>该属性可以是任何字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el.getAttribute(&quot;data-xx&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"hidden\"><a href=\"#hidden\" class=\"headerlink\" title=\"hidden\"></a>hidden</h3><p>不需要属性值，隐藏元素，原理是 display:none</p>\n<h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><p>元素是否可编辑</p>\n<h3 id=\"contextmenu\"><a href=\"#contextmenu\" class=\"headerlink\" title=\"contextmenu\"></a>contextmenu</h3><p>（说是目前只有 firefox 支持，亲测没效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p contextmenu=&quot;mymenu&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;menu id=&quot;mymenu&quot;&gt;</span><br><span class=\"line\">    &lt;command label=&quot;xxx&quot; onclick=&quot;fn()&quot;/&gt;</span><br><span class=\"line\">    &lt;command label=&quot;xxx&quot; onclick=&quot;fn()&quot;/&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"draggable：-与-HTML5drag-结合用\"><a href=\"#draggable：-与-HTML5drag-结合用\" class=\"headerlink\" title=\"draggable：(与 HTML5drag 结合用)\"></a>draggable：(与 HTML5drag 结合用)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"div1\"</span> ondrop=<span class=\"string\">\"drop(event)\"</span> ondragover=<span class=\"string\">\"allowDrop(event)\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p id=\"drag1\" draggable=\"true\" ondragstart=\"drag(event)\"&gt;这是一段可移动的段落。可把该段落拖入上下的矩形。&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"div2\"</span> ondrop=<span class=\"string\">\"drop(event)\"</span> ondragover=<span class=\"string\">\"allowDrop(event)\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function allowDrop(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.preventDefault();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function drag(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.dataTransfer.setData(\"Text\",ev.target.id);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function drop(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tvar data=ev.dataTransfer.getData(\"Text\");</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.target.appendChild(document.getElementById(data));</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.preventDefault();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"dropzone-属性\"><a href=\"#dropzone-属性\" class=\"headerlink\" title=\"dropzone 属性:\"></a>dropzone 属性:</h3><p>规定当被拖动的数据在拖放到元素上时，是否被复制### 动或链接,无浏览器支持</p>\n<h3 id=\"sppelcheck：\"><a href=\"#sppelcheck：\" class=\"headerlink\" title=\"sppelcheck：\"></a>sppelcheck：</h3><p>对元素的文本进行拼写检查</p>\n<h3 id=\"translate-属性：\"><a href=\"#translate-属性：\" class=\"headerlink\" title=\"translate 属性：\"></a>translate 属性：</h3><p>规定元素内容是否要翻译，=yes|no</p>\n<h1 id=\"遗留\"><a href=\"#遗留\" class=\"headerlink\" title=\"遗留\"></a>遗留</h1><p>表单元素 属性 datalist select 下拉多选 input 的 multiple 属性 button 的 type 属性默认值<br>video 不能嵌套 img<br>p 不能嵌套 div<br>figure dfn cite 标签</p>\n<hr>\n<pre><code>“因为你永远不知道你不知道的有多少”\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-前端做什么\"><a href=\"#1-前端做什么\" class=\"headerlink\" title=\"1. 前端做什么\"></a>1. 前端做什么</h1><p>用 web 标准技术 html css js svg http 等</p>\n<p>做界面与交互</p>\n<p>功能+美观+无障碍+安全+兼容+性能+体验</p>\n<h1 id=\"2-知识图谱-技术栈\"><a href=\"#2-知识图谱-技术栈\" class=\"headerlink\" title=\"2. 知识图谱/技术栈\"></a>2. 知识图谱/技术栈</h1><h2 id=\"2-1-语言\"><a href=\"#2-1-语言\" class=\"headerlink\" title=\"2.1. 语言\"></a>2.1. 语言</h2><ul>\n<li>js</li>\n<li>html</li>\n<li>css</li>\n<li>php</li>\n</ul>\n<h2 id=\"2-2-行业标准\"><a href=\"#2-2-行业标准\" class=\"headerlink\" title=\"2.2. 行业标准\"></a>2.2. 行业标准</h2><ul>\n<li>DOM</li>\n<li>ES2018</li>\n<li>HTTP</li>\n<li>JSON</li>\n<li>XML</li>\n</ul>\n<h2 id=\"2-3-框架\"><a href=\"#2-3-框架\" class=\"headerlink\" title=\"2.3. 框架\"></a>2.3. 框架</h2><ul>\n<li>React.js</li>\n<li>Angular.js</li>\n<li>jQuery</li>\n<li>Vue.js</li>\n<li>lodash</li>\n</ul>\n<h2 id=\"2-4-兼容性\"><a href=\"#2-4-兼容性\" class=\"headerlink\" title=\"2.4. 兼容性\"></a>2.4. 兼容性</h2><ul>\n<li>IE 等浏览器</li>\n<li>CSS3 新特性</li>\n<li>HTML5 新特性</li>\n<li>ES2018</li>\n<li>移动端</li>\n</ul>\n<h2 id=\"2-5-编程思想\"><a href=\"#2-5-编程思想\" class=\"headerlink\" title=\"2.5. 编程思想\"></a>2.5. 编程思想</h2><ul>\n<li>函数式编程</li>\n<li>面向对象</li>\n<li>设计模式</li>\n</ul>\n<h2 id=\"2-6-调试\"><a href=\"#2-6-调试\" class=\"headerlink\" title=\"2.6. 调试\"></a>2.6. 调试</h2><ul>\n<li>浏览器</li>\n<li>Fiddler http</li>\n</ul>\n<h2 id=\"2-7-工程化\"><a href=\"#2-7-工程化\" class=\"headerlink\" title=\"2.7. 工程化\"></a>2.7. 工程化</h2><ul>\n<li>npm</li>\n<li>webpack</li>\n<li>postcss</li>\n</ul>\n<h2 id=\"2-8-安全性\"><a href=\"#2-8-安全性\" class=\"headerlink\" title=\"2.8. 安全性\"></a>2.8. 安全性</h2><ul>\n<li>XSS</li>\n<li>CSRF</li>\n<li>加密解密</li>\n<li>编解码</li>\n</ul>\n<h2 id=\"2-9-性能\"><a href=\"#2-9-性能\" class=\"headerlink\" title=\"2.9. 性能\"></a>2.9. 性能</h2><ul>\n<li>优化规则</li>\n<li>开发者工具</li>\n<li>浏览器原理</li>\n</ul>\n<h2 id=\"2-10-团队协作\"><a href=\"#2-10-团队协作\" class=\"headerlink\" title=\"2.10. 团队协作\"></a>2.10. 团队协作</h2><ul>\n<li>git/svn</li>\n<li>编码规范/eslint</li>\n<li>文档管理</li>\n</ul>\n<h2 id=\"2-11-交互设计\"><a href=\"#2-11-交互设计\" class=\"headerlink\" title=\"2.11. 交互设计\"></a>2.11. 交互设计</h2><h1 id=\"3-前端边界\"><a href=\"#3-前端边界\" class=\"headerlink\" title=\"3. 前端边界\"></a>3. 前端边界</h1><p>node、electron、react native、webRTC、WebGL、WEBAssembly</p>\n<h1 id=\"4-HTML\"><a href=\"#4-HTML\" class=\"headerlink\" title=\"4. HTML\"></a>4. HTML</h1><h2 id=\"4-1-doctype\"><a href=\"#4-1-doctype\" class=\"headerlink\" title=\"4.1. doctype\"></a>4.1. doctype</h2><ul>\n<li>指定文档使用的标准和版本；</li>\n<li>浏览器根据 doctype 决定使用哪种渲染模式；</li>\n<li>没写会以怪异模式渲染（盒模型不同等待）</li>\n<li>渲染模式</li>\n</ul>\n<h2 id=\"4-2-语义化\"><a href=\"#4-2-语义化\" class=\"headerlink\" title=\"4.2. 语义化\"></a>4.2. 语义化</h2><ul>\n<li>元素、属性、属性值都有特定含义，应该遵循语义来写 HTML</li>\n<li>可读性、可维护性、搜索引擎优化、无障碍性</li>\n</ul>\n<h2 id=\"4-3-标签\"><a href=\"#4-3-标签\" class=\"headerlink\" title=\"4.3. 标签\"></a>4.3. 标签</h2><h3 id=\"4-3-1-flow-流式元素：\"><a href=\"#4-3-1-flow-流式元素：\" class=\"headerlink\" title=\"4.3.1. flow 流式元素：\"></a>4.3.1. flow 流式元素：</h3><ul>\n<li>heading 标题</li>\n<li>sectioning 章节</li>\n<li>phrasing 段落内容 p h</li>\n<li>Embedded 嵌入式内容 audio canvas</li>\n<li>interactive 可交互性内容 button a</li>\n<li>metadata 元数据元素 base link meta noscript script style title</li>\n</ul>\n<h3 id=\"4-3-2-看规范\"><a href=\"#4-3-2-看规范\" class=\"headerlink\" title=\"4.3.2. 看规范\"></a>4.3.2. 看规范</h3><h2 id=\"4-4-HTML-扩展\"><a href=\"#4-4-HTML-扩展\" class=\"headerlink\" title=\"4.4. HTML 扩展\"></a>4.4. HTML 扩展</h2><h3 id=\"4-4-1-meta-标签（增加元数据\"><a href=\"#4-4-1-meta-标签（增加元数据\" class=\"headerlink\" title=\"4.4.1. meta 标签（增加元数据\"></a>4.4.1. meta 标签（增加元数据</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 编码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定http header --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Security-Policy\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"script-src 'self'\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- seo优化 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"关键词\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"页面介绍\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 移动设备的viewport 初始缩放比例，视口宽度 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 关闭IOS电话号码识别 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telphone=no\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 360等双核浏览器 指定渲染内核 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定IE渲染模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"X-UA-Compatibla\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-2-data-属性（规范内-自定义的属性）\"><a href=\"#4-4-2-data-属性（规范内-自定义的属性）\" class=\"headerlink\" title=\"4.4.2. data-*属性（规范内-自定义的属性）\"></a>4.4.2. data-*属性（规范内-自定义的属性）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datasetAPI</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"\"</span>/&gt;</span></span><br><span class=\"line\">  el.dataset.id</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-3-link\"><a href=\"#4-4-3-link\" class=\"headerlink\" title=\"4.4.3. link\"></a>4.4.3. link</h3><ul>\n<li>rel 属性（relation 关系，外部资源与当前页面的关系）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入css --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    浏览器性能优化：dns预解析rel=dns-prefetch、资源预加载rel=prefetch、预渲染 rel=prerender</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prerender\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- favicon：rel=icon --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/png\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- RSS：rel=alternate --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"alternate\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/rss+xml\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-4-JSON-LD\"><a href=\"#4-4-4-JSON-LD\" class=\"headerlink\" title=\"4.4.4. JSON-LD\"></a>4.4.4. JSON-LD</h3><p>LD：linkdata 链接的数据 (直接在页面嵌 json 数据)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"application/ld+json\"</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"@context\"</span>: <span class=\"string\">\"http://schema.org\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"@type\"</span>: <span class=\"string\">\"Person\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"John Doe\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"jobTitle\"</span>: <span class=\"string\">\"Graduate research assistant\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"affiliation\"</span>: <span class=\"string\">\"University of Dreams\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"additionalName\"</span>: <span class=\"string\">\"Johnny\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>: <span class=\"string\">\"http://www.example.com\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"address\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"@type\"</span>: <span class=\"string\">\"PostalAddress\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"streetAddress\"</span>: <span class=\"string\">\"1234 Peach Drive\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"addressLocality\"</span>: <span class=\"string\">\"Wonderland\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"addressRegion\"</span>: <span class=\"string\">\"Georgia\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  应用例如分享页面时的数据</span></span><br><span class=\"line\"><span class=\"comment\">//  搜索引擎能识别等等</span></span><br><span class=\"line\"><span class=\"comment\">//  分享链接带有一些标题图片等信息</span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-5-Web-无障碍-Accessibility\"><a href=\"#4-5-Web-无障碍-Accessibility\" class=\"headerlink\" title=\"4.5. Web 无障碍/Accessibility\"></a>4.5. Web 无障碍/Accessibility</h2><ul>\n<li>一些 Web 开发者规范：<ul>\n<li>WCAG2.0</li>\n<li>ARIA</li>\n</ul>\n</li>\n<li>提升无障碍性<ul>\n<li>img alt</li>\n<li>noscript</li>\n<li>input 和 label 对应</li>\n<li>图片验证码与语音验证码</li>\n<li>文字背景对比度</li>\n<li>键盘可操作（tab modal focus）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-6-工具\"><a href=\"#4-6-工具\" class=\"headerlink\" title=\"4.6. 工具\"></a>4.6. 工具</h2><ul>\n<li><a href=\"http://validator.w3.org/\" target=\"_blank\" rel=\"noopener\">W3C Validator（检查 html 合法性）</a></li>\n<li>emmet（插件）</li>\n<li>markdown（适合写文档）</li>\n</ul>\n<h2 id=\"4-7-参考链接\"><a href=\"#4-7-参考链接\" class=\"headerlink\" title=\"4.7. 参考链接\"></a>4.7. 参考链接</h2><ul>\n<li><a href=\"https://html.spec.whatwg.org/dev/\" target=\"_blank\" rel=\"noopener\">HTML: The Living Standard</a></li>\n<li><a href=\"https://hsivonen.fi/doctype/\" target=\"_blank\" rel=\"noopener\">Activating Browser Modes with Doctype</a></li>\n<li><a href=\"https://www.w3.org/standards/webdesign/accessibility\" target=\"_blank\" rel=\"noopener\">Accessibility</a></li>\n<li>Web Content Accessibility Guidelines 2.0</li>\n<li><a href=\"http://html5doctor.com/element-index/\" target=\"_blank\" rel=\"noopener\">HTML5 Doctor: Semantics</a></li>\n</ul>\n<h2 id=\"全局属性\"><a href=\"#全局属性\" class=\"headerlink\" title=\"全局属性\"></a>全局属性</h2><h3 id=\"class-id-style\"><a href=\"#class-id-style\" class=\"headerlink\" title=\"class id style\"></a>class id style</h3><h3 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h3><p>（兼容性最好的 tooltip😂）</p>\n<h3 id=\"tabindex\"><a href=\"#tabindex\" class=\"headerlink\" title=\"tabindex\"></a>tabindex</h3><p>tab 键控制次序</p>\n<h3 id=\"lang\"><a href=\"#lang\" class=\"headerlink\" title=\"lang\"></a>lang</h3><p>语言代码（利于语义化机器理解）（语言代码参考手册<a href=\"http://www.runoob.com/tags/html-language-codes.html）\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/tags/html-language-codes.html）</a></p>\n<h3 id=\"dir\"><a href=\"#dir\" class=\"headerlink\" title=\"dir\"></a>dir</h3><p>文本方向（rtl ltr auto）</p>\n<h3 id=\"accesskey\"><a href=\"#accesskey\" class=\"headerlink\" title=\"accesskey\"></a>accesskey</h3><p>元素的键盘访问快捷键（例值为’h’则不同浏览器不同 OS 有不同的操作方式，例 chrome 是 alt + ‘h’）</p>\n<h2 id=\"（HTML5-全局属性）\"><a href=\"#（HTML5-全局属性）\" class=\"headerlink\" title=\"（HTML5 全局属性）\"></a>（HTML5 全局属性）</h2><h3 id=\"data-属性\"><a href=\"#data-属性\" class=\"headerlink\" title=\"data-*属性\"></a>data-*属性</h3><p>属性名不要包含大写字母，在 data- 后必须至少有一个字符。<br>该属性可以是任何字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el.getAttribute(&quot;data-xx&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"hidden\"><a href=\"#hidden\" class=\"headerlink\" title=\"hidden\"></a>hidden</h3><p>不需要属性值，隐藏元素，原理是 display:none</p>\n<h3 id=\"contenteditable\"><a href=\"#contenteditable\" class=\"headerlink\" title=\"contenteditable\"></a>contenteditable</h3><p>元素是否可编辑</p>\n<h3 id=\"contextmenu\"><a href=\"#contextmenu\" class=\"headerlink\" title=\"contextmenu\"></a>contextmenu</h3><p>（说是目前只有 firefox 支持，亲测没效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p contextmenu=&quot;mymenu&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;menu id=&quot;mymenu&quot;&gt;</span><br><span class=\"line\">    &lt;command label=&quot;xxx&quot; onclick=&quot;fn()&quot;/&gt;</span><br><span class=\"line\">    &lt;command label=&quot;xxx&quot; onclick=&quot;fn()&quot;/&gt;</span><br><span class=\"line\">&lt;/menu&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"draggable：-与-HTML5drag-结合用\"><a href=\"#draggable：-与-HTML5drag-结合用\" class=\"headerlink\" title=\"draggable：(与 HTML5drag 结合用)\"></a>draggable：(与 HTML5drag 结合用)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"div1\"</span> ondrop=<span class=\"string\">\"drop(event)\"</span> ondragover=<span class=\"string\">\"allowDrop(event)\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;p id=\"drag1\" draggable=\"true\" ondragstart=\"drag(event)\"&gt;这是一段可移动的段落。可把该段落拖入上下的矩形。&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"div2\"</span> ondrop=<span class=\"string\">\"drop(event)\"</span> ondragover=<span class=\"string\">\"allowDrop(event)\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function allowDrop(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.preventDefault();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function drag(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.dataTransfer.setData(\"Text\",ev.target.id);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">function drop(ev)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tvar data=ev.dataTransfer.getData(\"Text\");</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.target.appendChild(document.getElementById(data));</span></span><br><span class=\"line\"><span class=\"regexp\">\tev.preventDefault();</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"dropzone-属性\"><a href=\"#dropzone-属性\" class=\"headerlink\" title=\"dropzone 属性:\"></a>dropzone 属性:</h3><p>规定当被拖动的数据在拖放到元素上时，是否被复制### 动或链接,无浏览器支持</p>\n<h3 id=\"sppelcheck：\"><a href=\"#sppelcheck：\" class=\"headerlink\" title=\"sppelcheck：\"></a>sppelcheck：</h3><p>对元素的文本进行拼写检查</p>\n<h3 id=\"translate-属性：\"><a href=\"#translate-属性：\" class=\"headerlink\" title=\"translate 属性：\"></a>translate 属性：</h3><p>规定元素内容是否要翻译，=yes|no</p>\n<h1 id=\"遗留\"><a href=\"#遗留\" class=\"headerlink\" title=\"遗留\"></a>遗留</h1><p>表单元素 属性 datalist select 下拉多选 input 的 multiple 属性 button 的 type 属性默认值<br>video 不能嵌套 img<br>p 不能嵌套 div<br>figure dfn cite 标签</p>\n<hr>\n<pre><code>“因为你永远不知道你不知道的有多少”\n</code></pre>"},{"title":"Animate.css","date":"2018-01-31T16:00:00.000Z","description":"Animate.css是一个来自国外的 CSS3 动画库。","toc":1,"top":0,"_content":"\n## 功能\n\n-   它预设了抖动（shake）\n-   闪烁（flash）\n-   弹跳（bounce）\n-   翻转（flip）\n-   旋转（rotateIn/rotateOut）\n-   淡入淡出（fadeIn/fadeOut）\n-   等多达 60 多种动画效果\n\n## 浏览器兼容：\n\n    只兼容支持 CSS3 animate 属性的浏览器，\n    分别是：IE10+、Firefox、Chrome、Opera、Safari。\n\n## 引入文件\n\n    <link rel=\"stylesheet\" href=\"animate.min.css\">\n\n## 官网\n\n    [Animate.css](https://daneden.github.io/animate.css/)\n\n    [Github](https://github.com/daneden/animate.css)\n\n## 使用\n\n```\n\t<h1 class=\"animated infinite bounce delay-2s\">Example</h1>\n```\n\n-   首先给元素加上 animated 类\n-   第二个 infinate 使动画无限播放，可选\n-   第三个 bounce 是具体的动画效果名称，[全部动效演示](https://daneden.github.io/animate.css/)\n-   第四个 delay-2s 是动效延迟播放 2s，可选\n\n## 通过 Js,Jq 给元素添加 class：\n\n```\n\t$(function(){\n    \t$('#dowebok').addClass('animated bounce');\n\t});\n```\n\n## 更改 animate.css 的默认设置：\n\n```\n\t#dowebok {\n\t    animate-duration: 2s;    //动画持续时间\n\t    animate-delay: 1s;    //动画延迟时间\n\t    animate-iteration-count: 2;    //动画执行次数\n\t}\n\t//兼容各种浏览器代码，需要添加各浏览器前缀：\n\t#dowebok{\n          -webkit-animation-duration: 3s;\n          -webkit-animation-delay: 4s;\n          -webkit-animation-iteration-count: 5;\n\n          -moz-animation-duration: 3s;\n          -moz-animation-delay: 4s;\n          -moz-animation-iteration-count: 5;\n\n          -o-animation-duration: 3s;\n          -o-animation-delay: 4s;\n          -0-animation-iteration-count: 5;\n\n          -ms-animation-duration: 3s;\n          -ms-animation-delay: 4s;\n          -ms-animation-iteration-count:5;\n\n          animation-duration: 3s;\n          animation-delay: 4s;\n          animation-iteration-count: 5;\n\t}\n```\n\n## 动画结束触发函数：\n\n```js\n\t$(\".test\").click(function(){\n          $(this).addClass('animated fadeOut');\n\t});\n\tvar animateEnd=(function(el){\n\t    var animations={\n\t        animation:'animationend',\n\t        OAnimation:'oAnimationEnd',\n\t        MozAnimation:'mozAnimationEnd'\n\t        WebktiAnimation:'webkitAnimationEnd'\n\t    }\n\t    for(var i in animations){\n\t        if(el.style[i]!==undefined){\n\t            return animations[i]\n\t        }\n\t    }\n\t})(document.createElement('div'));//通过任意元素检测浏览器内核类型\n\t$('.test').one(animateEnd, doSomething);\n\t//$.one():为元素的特定事件绑定一个一次性的事件处理函数。\n```\n\n## 将以上过程整合为 Jq 扩展函数\n\n```\njq自定义函数\n$.fn.extend({\n    animateCss: function (animationName, callback) {\n        var animationEnd = (function (el) {\n            var animations = {\n                animation: 'animationend',\n                OAnimation: 'oAnimationEnd',\n                MozAnimation: 'mozAnimationEnd',\n                WebkitAnimation: 'webkitAnimationEnd',\n            };\n            for (var t in animations) {\n                if (el.style[t] !== undefined) {\n                    return animations[t];\n                }\n            }\n        })(document.createElement('div'));\n        this.addClass('animated ' + animationName).one(animationEnd, function () {\n            //某些动画效果执行完后元素不可见又需要这个元素（实际遇过这个问题）\n            //eg.淡出、向左滑动等等，\n\t        //可能需要将 class 删除\n            $(this).removeClass('animated ' + animationName);\n            if (typeof callback === 'function') callback();\n        });\n        return this;\n    },\n});\n$('#yourElement').animateCss('bounce');\n$('#yourElement').animateCss('bounce', function () {\n    // 事件结束触发的函数\n});\n```\n\n---\n\n    为什么不自己写动画？\n    别人比你写的好啊小辣鸡。\n","source":"_posts/Animate.css.md","raw":"---\ntitle: Animate.css\ncategories:\n    - 10技术 | CSS # 一级分类\ntags:\ndate: 2018-02-01\ndescription: Animate.css是一个来自国外的 CSS3 动画库。\ntoc: 1\ntop: 0\n---\n\n## 功能\n\n-   它预设了抖动（shake）\n-   闪烁（flash）\n-   弹跳（bounce）\n-   翻转（flip）\n-   旋转（rotateIn/rotateOut）\n-   淡入淡出（fadeIn/fadeOut）\n-   等多达 60 多种动画效果\n\n## 浏览器兼容：\n\n    只兼容支持 CSS3 animate 属性的浏览器，\n    分别是：IE10+、Firefox、Chrome、Opera、Safari。\n\n## 引入文件\n\n    <link rel=\"stylesheet\" href=\"animate.min.css\">\n\n## 官网\n\n    [Animate.css](https://daneden.github.io/animate.css/)\n\n    [Github](https://github.com/daneden/animate.css)\n\n## 使用\n\n```\n\t<h1 class=\"animated infinite bounce delay-2s\">Example</h1>\n```\n\n-   首先给元素加上 animated 类\n-   第二个 infinate 使动画无限播放，可选\n-   第三个 bounce 是具体的动画效果名称，[全部动效演示](https://daneden.github.io/animate.css/)\n-   第四个 delay-2s 是动效延迟播放 2s，可选\n\n## 通过 Js,Jq 给元素添加 class：\n\n```\n\t$(function(){\n    \t$('#dowebok').addClass('animated bounce');\n\t});\n```\n\n## 更改 animate.css 的默认设置：\n\n```\n\t#dowebok {\n\t    animate-duration: 2s;    //动画持续时间\n\t    animate-delay: 1s;    //动画延迟时间\n\t    animate-iteration-count: 2;    //动画执行次数\n\t}\n\t//兼容各种浏览器代码，需要添加各浏览器前缀：\n\t#dowebok{\n          -webkit-animation-duration: 3s;\n          -webkit-animation-delay: 4s;\n          -webkit-animation-iteration-count: 5;\n\n          -moz-animation-duration: 3s;\n          -moz-animation-delay: 4s;\n          -moz-animation-iteration-count: 5;\n\n          -o-animation-duration: 3s;\n          -o-animation-delay: 4s;\n          -0-animation-iteration-count: 5;\n\n          -ms-animation-duration: 3s;\n          -ms-animation-delay: 4s;\n          -ms-animation-iteration-count:5;\n\n          animation-duration: 3s;\n          animation-delay: 4s;\n          animation-iteration-count: 5;\n\t}\n```\n\n## 动画结束触发函数：\n\n```js\n\t$(\".test\").click(function(){\n          $(this).addClass('animated fadeOut');\n\t});\n\tvar animateEnd=(function(el){\n\t    var animations={\n\t        animation:'animationend',\n\t        OAnimation:'oAnimationEnd',\n\t        MozAnimation:'mozAnimationEnd'\n\t        WebktiAnimation:'webkitAnimationEnd'\n\t    }\n\t    for(var i in animations){\n\t        if(el.style[i]!==undefined){\n\t            return animations[i]\n\t        }\n\t    }\n\t})(document.createElement('div'));//通过任意元素检测浏览器内核类型\n\t$('.test').one(animateEnd, doSomething);\n\t//$.one():为元素的特定事件绑定一个一次性的事件处理函数。\n```\n\n## 将以上过程整合为 Jq 扩展函数\n\n```\njq自定义函数\n$.fn.extend({\n    animateCss: function (animationName, callback) {\n        var animationEnd = (function (el) {\n            var animations = {\n                animation: 'animationend',\n                OAnimation: 'oAnimationEnd',\n                MozAnimation: 'mozAnimationEnd',\n                WebkitAnimation: 'webkitAnimationEnd',\n            };\n            for (var t in animations) {\n                if (el.style[t] !== undefined) {\n                    return animations[t];\n                }\n            }\n        })(document.createElement('div'));\n        this.addClass('animated ' + animationName).one(animationEnd, function () {\n            //某些动画效果执行完后元素不可见又需要这个元素（实际遇过这个问题）\n            //eg.淡出、向左滑动等等，\n\t        //可能需要将 class 删除\n            $(this).removeClass('animated ' + animationName);\n            if (typeof callback === 'function') callback();\n        });\n        return this;\n    },\n});\n$('#yourElement').animateCss('bounce');\n$('#yourElement').animateCss('bounce', function () {\n    // 事件结束触发的函数\n});\n```\n\n---\n\n    为什么不自己写动画？\n    别人比你写的好啊小辣鸡。\n","slug":"Animate.css","published":1,"updated":"2020-09-03T07:00:54.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ifg000uc8y6jutdylha","content":"<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li>它预设了抖动（shake）</li>\n<li>闪烁（flash）</li>\n<li>弹跳（bounce）</li>\n<li>翻转（flip）</li>\n<li>旋转（rotateIn/rotateOut）</li>\n<li>淡入淡出（fadeIn/fadeOut）</li>\n<li>等多达 60 多种动画效果</li>\n</ul>\n<h2 id=\"浏览器兼容：\"><a href=\"#浏览器兼容：\" class=\"headerlink\" title=\"浏览器兼容：\"></a>浏览器兼容：</h2><pre><code>只兼容支持 CSS3 animate 属性的浏览器，\n分别是：IE10+、Firefox、Chrome、Opera、Safari。\n</code></pre><h2 id=\"引入文件\"><a href=\"#引入文件\" class=\"headerlink\" title=\"引入文件\"></a>引入文件</h2><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;animate.min.css&quot;&gt;\n</code></pre><h2 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h2><pre><code>[Animate.css](https://daneden.github.io/animate.css/)\n\n[Github](https://github.com/daneden/animate.css)\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 class=&quot;animated infinite bounce delay-2s&quot;&gt;Example&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首先给元素加上 animated 类</li>\n<li>第二个 infinate 使动画无限播放，可选</li>\n<li>第三个 bounce 是具体的动画效果名称，<a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"noopener\">全部动效演示</a></li>\n<li>第四个 delay-2s 是动效延迟播放 2s，可选</li>\n</ul>\n<h2 id=\"通过-Js-Jq-给元素添加-class：\"><a href=\"#通过-Js-Jq-给元素添加-class：\" class=\"headerlink\" title=\"通过 Js,Jq 给元素添加 class：\"></a>通过 Js,Jq 给元素添加 class：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function()&#123;</span><br><span class=\"line\">   \t$(&apos;#dowebok&apos;).addClass(&apos;animated bounce&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更改-animate-css-的默认设置：\"><a href=\"#更改-animate-css-的默认设置：\" class=\"headerlink\" title=\"更改 animate.css 的默认设置：\"></a>更改 animate.css 的默认设置：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dowebok &#123;</span><br><span class=\"line\">    animate-duration: 2s;    //动画持续时间</span><br><span class=\"line\">    animate-delay: 1s;    //动画延迟时间</span><br><span class=\"line\">    animate-iteration-count: 2;    //动画执行次数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//兼容各种浏览器代码，需要添加各浏览器前缀：</span><br><span class=\"line\">#dowebok&#123;</span><br><span class=\"line\">         -webkit-animation-duration: 3s;</span><br><span class=\"line\">         -webkit-animation-delay: 4s;</span><br><span class=\"line\">         -webkit-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -moz-animation-duration: 3s;</span><br><span class=\"line\">         -moz-animation-delay: 4s;</span><br><span class=\"line\">         -moz-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -o-animation-duration: 3s;</span><br><span class=\"line\">         -o-animation-delay: 4s;</span><br><span class=\"line\">         -0-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -ms-animation-duration: 3s;</span><br><span class=\"line\">         -ms-animation-delay: 4s;</span><br><span class=\"line\">         -ms-animation-iteration-count:5;</span><br><span class=\"line\"></span><br><span class=\"line\">         animation-duration: 3s;</span><br><span class=\"line\">         animation-delay: 4s;</span><br><span class=\"line\">         animation-iteration-count: 5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动画结束触发函数：\"><a href=\"#动画结束触发函数：\" class=\"headerlink\" title=\"动画结束触发函数：\"></a>动画结束触发函数：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\".test\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'animated fadeOut'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> animateEnd=(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> animations=&#123;</span><br><span class=\"line\">        animation:<span class=\"string\">'animationend'</span>,</span><br><span class=\"line\">        OAnimation:<span class=\"string\">'oAnimationEnd'</span>,</span><br><span class=\"line\">        MozAnimation:<span class=\"string\">'mozAnimationEnd'</span></span><br><span class=\"line\">        WebktiAnimation:<span class=\"string\">'webkitAnimationEnd'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> animations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(el.style[i]!==<span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> animations[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>));<span class=\"comment\">//通过任意元素检测浏览器内核类型</span></span><br><span class=\"line\">$(<span class=\"string\">'.test'</span>).one(animateEnd, doSomething);</span><br><span class=\"line\"><span class=\"comment\">//$.one():为元素的特定事件绑定一个一次性的事件处理函数。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将以上过程整合为-Jq-扩展函数\"><a href=\"#将以上过程整合为-Jq-扩展函数\" class=\"headerlink\" title=\"将以上过程整合为 Jq 扩展函数\"></a>将以上过程整合为 Jq 扩展函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jq自定义函数</span><br><span class=\"line\">$.fn.extend(&#123;</span><br><span class=\"line\">    animateCss: function (animationName, callback) &#123;</span><br><span class=\"line\">        var animationEnd = (function (el) &#123;</span><br><span class=\"line\">            var animations = &#123;</span><br><span class=\"line\">                animation: &apos;animationend&apos;,</span><br><span class=\"line\">                OAnimation: &apos;oAnimationEnd&apos;,</span><br><span class=\"line\">                MozAnimation: &apos;mozAnimationEnd&apos;,</span><br><span class=\"line\">                WebkitAnimation: &apos;webkitAnimationEnd&apos;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            for (var t in animations) &#123;</span><br><span class=\"line\">                if (el.style[t] !== undefined) &#123;</span><br><span class=\"line\">                    return animations[t];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)(document.createElement(&apos;div&apos;));</span><br><span class=\"line\">        this.addClass(&apos;animated &apos; + animationName).one(animationEnd, function () &#123;</span><br><span class=\"line\">            //某些动画效果执行完后元素不可见又需要这个元素（实际遇过这个问题）</span><br><span class=\"line\">            //eg.淡出、向左滑动等等，</span><br><span class=\"line\">\t        //可能需要将 class 删除</span><br><span class=\"line\">            $(this).removeClass(&apos;animated &apos; + animationName);</span><br><span class=\"line\">            if (typeof callback === &apos;function&apos;) callback();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&apos;#yourElement&apos;).animateCss(&apos;bounce&apos;);</span><br><span class=\"line\">$(&apos;#yourElement&apos;).animateCss(&apos;bounce&apos;, function () &#123;</span><br><span class=\"line\">    // 事件结束触发的函数</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>为什么不自己写动画？\n别人比你写的好啊小辣鸡。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li>它预设了抖动（shake）</li>\n<li>闪烁（flash）</li>\n<li>弹跳（bounce）</li>\n<li>翻转（flip）</li>\n<li>旋转（rotateIn/rotateOut）</li>\n<li>淡入淡出（fadeIn/fadeOut）</li>\n<li>等多达 60 多种动画效果</li>\n</ul>\n<h2 id=\"浏览器兼容：\"><a href=\"#浏览器兼容：\" class=\"headerlink\" title=\"浏览器兼容：\"></a>浏览器兼容：</h2><pre><code>只兼容支持 CSS3 animate 属性的浏览器，\n分别是：IE10+、Firefox、Chrome、Opera、Safari。\n</code></pre><h2 id=\"引入文件\"><a href=\"#引入文件\" class=\"headerlink\" title=\"引入文件\"></a>引入文件</h2><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;animate.min.css&quot;&gt;\n</code></pre><h2 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h2><pre><code>[Animate.css](https://daneden.github.io/animate.css/)\n\n[Github](https://github.com/daneden/animate.css)\n</code></pre><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1 class=&quot;animated infinite bounce delay-2s&quot;&gt;Example&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首先给元素加上 animated 类</li>\n<li>第二个 infinate 使动画无限播放，可选</li>\n<li>第三个 bounce 是具体的动画效果名称，<a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"noopener\">全部动效演示</a></li>\n<li>第四个 delay-2s 是动效延迟播放 2s，可选</li>\n</ul>\n<h2 id=\"通过-Js-Jq-给元素添加-class：\"><a href=\"#通过-Js-Jq-给元素添加-class：\" class=\"headerlink\" title=\"通过 Js,Jq 给元素添加 class：\"></a>通过 Js,Jq 给元素添加 class：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(function()&#123;</span><br><span class=\"line\">   \t$(&apos;#dowebok&apos;).addClass(&apos;animated bounce&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更改-animate-css-的默认设置：\"><a href=\"#更改-animate-css-的默认设置：\" class=\"headerlink\" title=\"更改 animate.css 的默认设置：\"></a>更改 animate.css 的默认设置：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dowebok &#123;</span><br><span class=\"line\">    animate-duration: 2s;    //动画持续时间</span><br><span class=\"line\">    animate-delay: 1s;    //动画延迟时间</span><br><span class=\"line\">    animate-iteration-count: 2;    //动画执行次数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//兼容各种浏览器代码，需要添加各浏览器前缀：</span><br><span class=\"line\">#dowebok&#123;</span><br><span class=\"line\">         -webkit-animation-duration: 3s;</span><br><span class=\"line\">         -webkit-animation-delay: 4s;</span><br><span class=\"line\">         -webkit-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -moz-animation-duration: 3s;</span><br><span class=\"line\">         -moz-animation-delay: 4s;</span><br><span class=\"line\">         -moz-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -o-animation-duration: 3s;</span><br><span class=\"line\">         -o-animation-delay: 4s;</span><br><span class=\"line\">         -0-animation-iteration-count: 5;</span><br><span class=\"line\"></span><br><span class=\"line\">         -ms-animation-duration: 3s;</span><br><span class=\"line\">         -ms-animation-delay: 4s;</span><br><span class=\"line\">         -ms-animation-iteration-count:5;</span><br><span class=\"line\"></span><br><span class=\"line\">         animation-duration: 3s;</span><br><span class=\"line\">         animation-delay: 4s;</span><br><span class=\"line\">         animation-iteration-count: 5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动画结束触发函数：\"><a href=\"#动画结束触发函数：\" class=\"headerlink\" title=\"动画结束触发函数：\"></a>动画结束触发函数：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\".test\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'animated fadeOut'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> animateEnd=(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> animations=&#123;</span><br><span class=\"line\">        animation:<span class=\"string\">'animationend'</span>,</span><br><span class=\"line\">        OAnimation:<span class=\"string\">'oAnimationEnd'</span>,</span><br><span class=\"line\">        MozAnimation:<span class=\"string\">'mozAnimationEnd'</span></span><br><span class=\"line\">        WebktiAnimation:<span class=\"string\">'webkitAnimationEnd'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> animations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(el.style[i]!==<span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> animations[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>));<span class=\"comment\">//通过任意元素检测浏览器内核类型</span></span><br><span class=\"line\">$(<span class=\"string\">'.test'</span>).one(animateEnd, doSomething);</span><br><span class=\"line\"><span class=\"comment\">//$.one():为元素的特定事件绑定一个一次性的事件处理函数。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将以上过程整合为-Jq-扩展函数\"><a href=\"#将以上过程整合为-Jq-扩展函数\" class=\"headerlink\" title=\"将以上过程整合为 Jq 扩展函数\"></a>将以上过程整合为 Jq 扩展函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jq自定义函数</span><br><span class=\"line\">$.fn.extend(&#123;</span><br><span class=\"line\">    animateCss: function (animationName, callback) &#123;</span><br><span class=\"line\">        var animationEnd = (function (el) &#123;</span><br><span class=\"line\">            var animations = &#123;</span><br><span class=\"line\">                animation: &apos;animationend&apos;,</span><br><span class=\"line\">                OAnimation: &apos;oAnimationEnd&apos;,</span><br><span class=\"line\">                MozAnimation: &apos;mozAnimationEnd&apos;,</span><br><span class=\"line\">                WebkitAnimation: &apos;webkitAnimationEnd&apos;,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            for (var t in animations) &#123;</span><br><span class=\"line\">                if (el.style[t] !== undefined) &#123;</span><br><span class=\"line\">                    return animations[t];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)(document.createElement(&apos;div&apos;));</span><br><span class=\"line\">        this.addClass(&apos;animated &apos; + animationName).one(animationEnd, function () &#123;</span><br><span class=\"line\">            //某些动画效果执行完后元素不可见又需要这个元素（实际遇过这个问题）</span><br><span class=\"line\">            //eg.淡出、向左滑动等等，</span><br><span class=\"line\">\t        //可能需要将 class 删除</span><br><span class=\"line\">            $(this).removeClass(&apos;animated &apos; + animationName);</span><br><span class=\"line\">            if (typeof callback === &apos;function&apos;) callback();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        return this;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(&apos;#yourElement&apos;).animateCss(&apos;bounce&apos;);</span><br><span class=\"line\">$(&apos;#yourElement&apos;).animateCss(&apos;bounce&apos;, function () &#123;</span><br><span class=\"line\">    // 事件结束触发的函数</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>为什么不自己写动画？\n别人比你写的好啊小辣鸡。\n</code></pre>"},{"title":"《断舍离》：物品的价值在于使用而不在于拥有","date":"2019-08-04T16:00:00.000Z","description":"在极简极致的生活中了解自我，认识自我，找到自己真正想做的事情。","toc":1,"top":0,"_content":"\n## 断舍离是什么\n断舍离是一种，通过收拾物品来了解自己，整理自己，让人生更舒适的方法\n\n## ‌如何做到断舍离\n- 断（行为）:断绝要进入自己家里/生活里/脑海里的 不需要的东西\n- 舍（行为）:舍弃自己的世界里既有的破烂（clutter）\n- 离（状态）:脱离对物品的执念，使自己处于游刃有余的自在空间\n\n## ‌用湖泊比喻生活\n- 断:对上游留下来的东西进行筛选，对生活入口有把控/筛选能力\n- 舍:让不需要的东西流出\n\n这样才能让生活保持新鲜，清静。\n\n## ‌断舍离的灵魂一问\n`自己` `当下` 是否需要？\n\n- 断舍离的主角:自己\n- 断舍离的时间轴:当下\n\n## ‌断舍离vs收纳\n断舍离是对进入/留存在自己世界中的物品进行筛选（先）\n\n收纳是对已有物品的整理（后）\n\n通过先达到断舍离的状态，让自己的生活从加法走向减法，让自己陷于收纳整理的时间更少，让生活更轻松自在\n\n## ‌为什么我们的生活里满是杂物\n- 捡便宜，通过消费满足物欲，这也新奇，那也想买，买来新鲜感一过就闲置（物欲泛滥，对物品有执念）\n- 执念于过去，念旧，舍不得（时间轴错位）\n- 囤积癖，对未来过度忧虑，“万一以后会用到”，但实际概率很小（时间轴错位）\n- 不想收拾不想改变（懒）\n\n## ‌断舍离是令人愉悦的\n通过断舍物品，完成自我发现，自我肯定的过程\n\n## 物品的真正价值\n任何物品都需要被使用，这才是它本身价值的体现。我们需要的东西其实并没有那么多，而留在身边的应该是`最少量最好用`的。\n\n## ‌“拥有物品”是个伪命题\n人的生命是有限的，一切有形的东西都是虚幻的，人心也是不断变化的。\n\n物品只应该是我们追求人生幸福感的工具，而不是一种拥有/维护/收纳/处理的累赘。\n\n因此“物品被使用的时候才是发挥价值的时候”，物品当下应该在需要他的地方，而不应该是闲置。\n\n## 七、五、一总量限制原则\n`七`:柜子等`看不见的`收纳物品装备只能放满七成，空出来的三成空间成为物品出入的通道，这样会让人有收拾整齐的欲望和心情。\n\n`五`:`看得见的收纳`只放五成，主要作用于看得见的位置，比如置物架，茶几等等，比如商场高级的商品，摆放位置较零散。\n\n`一`:通常用于装饰墙之类的，例如美术馆的画展，名画都单独挂在一面墙，显示了这幅画的重要性，营造了高端的感觉。\n\n`总量限制替换原则`：当收纳超出`七五一原则`时，就需要考虑限制总量不变，替换现有的物品或者限制新入的物品\n\n## ‌单一动作原则\n收纳，要让（经常使用的）物品依赖尽量少的动作就能拿出来\n\n## ‌自立原则\n收纳尽量避免堆叠，立体放置可以让下面的/里面的物品更便于取出\n\n\n\n","source":"_posts/Danshari.md","raw":"---\ntitle: 《断舍离》：物品的价值在于使用而不在于拥有\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2019-08-05\ndescription: 在极简极致的生活中了解自我，认识自我，找到自己真正想做的事情。\ntoc: 1\ntop: 0\n---\n\n## 断舍离是什么\n断舍离是一种，通过收拾物品来了解自己，整理自己，让人生更舒适的方法\n\n## ‌如何做到断舍离\n- 断（行为）:断绝要进入自己家里/生活里/脑海里的 不需要的东西\n- 舍（行为）:舍弃自己的世界里既有的破烂（clutter）\n- 离（状态）:脱离对物品的执念，使自己处于游刃有余的自在空间\n\n## ‌用湖泊比喻生活\n- 断:对上游留下来的东西进行筛选，对生活入口有把控/筛选能力\n- 舍:让不需要的东西流出\n\n这样才能让生活保持新鲜，清静。\n\n## ‌断舍离的灵魂一问\n`自己` `当下` 是否需要？\n\n- 断舍离的主角:自己\n- 断舍离的时间轴:当下\n\n## ‌断舍离vs收纳\n断舍离是对进入/留存在自己世界中的物品进行筛选（先）\n\n收纳是对已有物品的整理（后）\n\n通过先达到断舍离的状态，让自己的生活从加法走向减法，让自己陷于收纳整理的时间更少，让生活更轻松自在\n\n## ‌为什么我们的生活里满是杂物\n- 捡便宜，通过消费满足物欲，这也新奇，那也想买，买来新鲜感一过就闲置（物欲泛滥，对物品有执念）\n- 执念于过去，念旧，舍不得（时间轴错位）\n- 囤积癖，对未来过度忧虑，“万一以后会用到”，但实际概率很小（时间轴错位）\n- 不想收拾不想改变（懒）\n\n## ‌断舍离是令人愉悦的\n通过断舍物品，完成自我发现，自我肯定的过程\n\n## 物品的真正价值\n任何物品都需要被使用，这才是它本身价值的体现。我们需要的东西其实并没有那么多，而留在身边的应该是`最少量最好用`的。\n\n## ‌“拥有物品”是个伪命题\n人的生命是有限的，一切有形的东西都是虚幻的，人心也是不断变化的。\n\n物品只应该是我们追求人生幸福感的工具，而不是一种拥有/维护/收纳/处理的累赘。\n\n因此“物品被使用的时候才是发挥价值的时候”，物品当下应该在需要他的地方，而不应该是闲置。\n\n## 七、五、一总量限制原则\n`七`:柜子等`看不见的`收纳物品装备只能放满七成，空出来的三成空间成为物品出入的通道，这样会让人有收拾整齐的欲望和心情。\n\n`五`:`看得见的收纳`只放五成，主要作用于看得见的位置，比如置物架，茶几等等，比如商场高级的商品，摆放位置较零散。\n\n`一`:通常用于装饰墙之类的，例如美术馆的画展，名画都单独挂在一面墙，显示了这幅画的重要性，营造了高端的感觉。\n\n`总量限制替换原则`：当收纳超出`七五一原则`时，就需要考虑限制总量不变，替换现有的物品或者限制新入的物品\n\n## ‌单一动作原则\n收纳，要让（经常使用的）物品依赖尽量少的动作就能拿出来\n\n## ‌自立原则\n收纳尽量避免堆叠，立体放置可以让下面的/里面的物品更便于取出\n\n\n\n","slug":"Danshari","published":1,"updated":"2021-04-21T06:53:37.262Z","_id":"ckir88ifi000zc8y6rmkxl20h","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"断舍离是什么\"><a href=\"#断舍离是什么\" class=\"headerlink\" title=\"断舍离是什么\"></a>断舍离是什么</h2><p>断舍离是一种，通过收拾物品来了解自己，整理自己，让人生更舒适的方法</p>\n<h2 id=\"‌如何做到断舍离\"><a href=\"#‌如何做到断舍离\" class=\"headerlink\" title=\"‌如何做到断舍离\"></a>‌如何做到断舍离</h2><ul>\n<li>断（行为）:断绝要进入自己家里/生活里/脑海里的 不需要的东西</li>\n<li>舍（行为）:舍弃自己的世界里既有的破烂（clutter）</li>\n<li>离（状态）:脱离对物品的执念，使自己处于游刃有余的自在空间</li>\n</ul>\n<h2 id=\"‌用湖泊比喻生活\"><a href=\"#‌用湖泊比喻生活\" class=\"headerlink\" title=\"‌用湖泊比喻生活\"></a>‌用湖泊比喻生活</h2><ul>\n<li>断:对上游留下来的东西进行筛选，对生活入口有把控/筛选能力</li>\n<li>舍:让不需要的东西流出</li>\n</ul>\n<p>这样才能让生活保持新鲜，清静。</p>\n<h2 id=\"‌断舍离的灵魂一问\"><a href=\"#‌断舍离的灵魂一问\" class=\"headerlink\" title=\"‌断舍离的灵魂一问\"></a>‌断舍离的灵魂一问</h2><p><code>自己</code> <code>当下</code> 是否需要？</p>\n<ul>\n<li>断舍离的主角:自己</li>\n<li>断舍离的时间轴:当下</li>\n</ul>\n<h2 id=\"‌断舍离vs收纳\"><a href=\"#‌断舍离vs收纳\" class=\"headerlink\" title=\"‌断舍离vs收纳\"></a>‌断舍离vs收纳</h2><p>断舍离是对进入/留存在自己世界中的物品进行筛选（先）</p>\n<p>收纳是对已有物品的整理（后）</p>\n<p>通过先达到断舍离的状态，让自己的生活从加法走向减法，让自己陷于收纳整理的时间更少，让生活更轻松自在</p>\n<h2 id=\"‌为什么我们的生活里满是杂物\"><a href=\"#‌为什么我们的生活里满是杂物\" class=\"headerlink\" title=\"‌为什么我们的生活里满是杂物\"></a>‌为什么我们的生活里满是杂物</h2><ul>\n<li>捡便宜，通过消费满足物欲，这也新奇，那也想买，买来新鲜感一过就闲置（物欲泛滥，对物品有执念）</li>\n<li>执念于过去，念旧，舍不得（时间轴错位）</li>\n<li>囤积癖，对未来过度忧虑，“万一以后会用到”，但实际概率很小（时间轴错位）</li>\n<li>不想收拾不想改变（懒）</li>\n</ul>\n<h2 id=\"‌断舍离是令人愉悦的\"><a href=\"#‌断舍离是令人愉悦的\" class=\"headerlink\" title=\"‌断舍离是令人愉悦的\"></a>‌断舍离是令人愉悦的</h2><p>通过断舍物品，完成自我发现，自我肯定的过程</p>\n<h2 id=\"物品的真正价值\"><a href=\"#物品的真正价值\" class=\"headerlink\" title=\"物品的真正价值\"></a>物品的真正价值</h2><p>任何物品都需要被使用，这才是它本身价值的体现。我们需要的东西其实并没有那么多，而留在身边的应该是<code>最少量最好用</code>的。</p>\n<h2 id=\"‌“拥有物品”是个伪命题\"><a href=\"#‌“拥有物品”是个伪命题\" class=\"headerlink\" title=\"‌“拥有物品”是个伪命题\"></a>‌“拥有物品”是个伪命题</h2><p>人的生命是有限的，一切有形的东西都是虚幻的，人心也是不断变化的。</p>\n<p>物品只应该是我们追求人生幸福感的工具，而不是一种拥有/维护/收纳/处理的累赘。</p>\n<p>因此“物品被使用的时候才是发挥价值的时候”，物品当下应该在需要他的地方，而不应该是闲置。</p>\n<h2 id=\"七、五、一总量限制原则\"><a href=\"#七、五、一总量限制原则\" class=\"headerlink\" title=\"七、五、一总量限制原则\"></a>七、五、一总量限制原则</h2><p><code>七</code>:柜子等<code>看不见的</code>收纳物品装备只能放满七成，空出来的三成空间成为物品出入的通道，这样会让人有收拾整齐的欲望和心情。</p>\n<p><code>五</code>:<code>看得见的收纳</code>只放五成，主要作用于看得见的位置，比如置物架，茶几等等，比如商场高级的商品，摆放位置较零散。</p>\n<p><code>一</code>:通常用于装饰墙之类的，例如美术馆的画展，名画都单独挂在一面墙，显示了这幅画的重要性，营造了高端的感觉。</p>\n<p><code>总量限制替换原则</code>：当收纳超出<code>七五一原则</code>时，就需要考虑限制总量不变，替换现有的物品或者限制新入的物品</p>\n<h2 id=\"‌单一动作原则\"><a href=\"#‌单一动作原则\" class=\"headerlink\" title=\"‌单一动作原则\"></a>‌单一动作原则</h2><p>收纳，要让（经常使用的）物品依赖尽量少的动作就能拿出来</p>\n<h2 id=\"‌自立原则\"><a href=\"#‌自立原则\" class=\"headerlink\" title=\"‌自立原则\"></a>‌自立原则</h2><p>收纳尽量避免堆叠，立体放置可以让下面的/里面的物品更便于取出</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"断舍离是什么\"><a href=\"#断舍离是什么\" class=\"headerlink\" title=\"断舍离是什么\"></a>断舍离是什么</h2><p>断舍离是一种，通过收拾物品来了解自己，整理自己，让人生更舒适的方法</p>\n<h2 id=\"‌如何做到断舍离\"><a href=\"#‌如何做到断舍离\" class=\"headerlink\" title=\"‌如何做到断舍离\"></a>‌如何做到断舍离</h2><ul>\n<li>断（行为）:断绝要进入自己家里/生活里/脑海里的 不需要的东西</li>\n<li>舍（行为）:舍弃自己的世界里既有的破烂（clutter）</li>\n<li>离（状态）:脱离对物品的执念，使自己处于游刃有余的自在空间</li>\n</ul>\n<h2 id=\"‌用湖泊比喻生活\"><a href=\"#‌用湖泊比喻生活\" class=\"headerlink\" title=\"‌用湖泊比喻生活\"></a>‌用湖泊比喻生活</h2><ul>\n<li>断:对上游留下来的东西进行筛选，对生活入口有把控/筛选能力</li>\n<li>舍:让不需要的东西流出</li>\n</ul>\n<p>这样才能让生活保持新鲜，清静。</p>\n<h2 id=\"‌断舍离的灵魂一问\"><a href=\"#‌断舍离的灵魂一问\" class=\"headerlink\" title=\"‌断舍离的灵魂一问\"></a>‌断舍离的灵魂一问</h2><p><code>自己</code> <code>当下</code> 是否需要？</p>\n<ul>\n<li>断舍离的主角:自己</li>\n<li>断舍离的时间轴:当下</li>\n</ul>\n<h2 id=\"‌断舍离vs收纳\"><a href=\"#‌断舍离vs收纳\" class=\"headerlink\" title=\"‌断舍离vs收纳\"></a>‌断舍离vs收纳</h2><p>断舍离是对进入/留存在自己世界中的物品进行筛选（先）</p>\n<p>收纳是对已有物品的整理（后）</p>\n<p>通过先达到断舍离的状态，让自己的生活从加法走向减法，让自己陷于收纳整理的时间更少，让生活更轻松自在</p>\n<h2 id=\"‌为什么我们的生活里满是杂物\"><a href=\"#‌为什么我们的生活里满是杂物\" class=\"headerlink\" title=\"‌为什么我们的生活里满是杂物\"></a>‌为什么我们的生活里满是杂物</h2><ul>\n<li>捡便宜，通过消费满足物欲，这也新奇，那也想买，买来新鲜感一过就闲置（物欲泛滥，对物品有执念）</li>\n<li>执念于过去，念旧，舍不得（时间轴错位）</li>\n<li>囤积癖，对未来过度忧虑，“万一以后会用到”，但实际概率很小（时间轴错位）</li>\n<li>不想收拾不想改变（懒）</li>\n</ul>\n<h2 id=\"‌断舍离是令人愉悦的\"><a href=\"#‌断舍离是令人愉悦的\" class=\"headerlink\" title=\"‌断舍离是令人愉悦的\"></a>‌断舍离是令人愉悦的</h2><p>通过断舍物品，完成自我发现，自我肯定的过程</p>\n<h2 id=\"物品的真正价值\"><a href=\"#物品的真正价值\" class=\"headerlink\" title=\"物品的真正价值\"></a>物品的真正价值</h2><p>任何物品都需要被使用，这才是它本身价值的体现。我们需要的东西其实并没有那么多，而留在身边的应该是<code>最少量最好用</code>的。</p>\n<h2 id=\"‌“拥有物品”是个伪命题\"><a href=\"#‌“拥有物品”是个伪命题\" class=\"headerlink\" title=\"‌“拥有物品”是个伪命题\"></a>‌“拥有物品”是个伪命题</h2><p>人的生命是有限的，一切有形的东西都是虚幻的，人心也是不断变化的。</p>\n<p>物品只应该是我们追求人生幸福感的工具，而不是一种拥有/维护/收纳/处理的累赘。</p>\n<p>因此“物品被使用的时候才是发挥价值的时候”，物品当下应该在需要他的地方，而不应该是闲置。</p>\n<h2 id=\"七、五、一总量限制原则\"><a href=\"#七、五、一总量限制原则\" class=\"headerlink\" title=\"七、五、一总量限制原则\"></a>七、五、一总量限制原则</h2><p><code>七</code>:柜子等<code>看不见的</code>收纳物品装备只能放满七成，空出来的三成空间成为物品出入的通道，这样会让人有收拾整齐的欲望和心情。</p>\n<p><code>五</code>:<code>看得见的收纳</code>只放五成，主要作用于看得见的位置，比如置物架，茶几等等，比如商场高级的商品，摆放位置较零散。</p>\n<p><code>一</code>:通常用于装饰墙之类的，例如美术馆的画展，名画都单独挂在一面墙，显示了这幅画的重要性，营造了高端的感觉。</p>\n<p><code>总量限制替换原则</code>：当收纳超出<code>七五一原则</code>时，就需要考虑限制总量不变，替换现有的物品或者限制新入的物品</p>\n<h2 id=\"‌单一动作原则\"><a href=\"#‌单一动作原则\" class=\"headerlink\" title=\"‌单一动作原则\"></a>‌单一动作原则</h2><p>收纳，要让（经常使用的）物品依赖尽量少的动作就能拿出来</p>\n<h2 id=\"‌自立原则\"><a href=\"#‌自立原则\" class=\"headerlink\" title=\"‌自立原则\"></a>‌自立原则</h2><p>收纳尽量避免堆叠，立体放置可以让下面的/里面的物品更便于取出</p>\n"},{"title":"ES6编程风格&最佳实践","date":"2019-11-05T16:00:00.000Z","description":"遵守一定的规范和统一的风格写代码，是程序猿的基本素养😺","toc":1,"top":0,"_content":"\n## 块级作用域\n- `let`完全取代`var`\n- let和const**优先const**:\n  - 函数式编程思想，运算不改变值，只是新建值\n  - 防止了无意间修改变量值所导致的错误\n  - 有利于将来的分布式运算\n  - JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率\n\n## 字符串\n- 静态一律用单引号/反引号\n- 动态使用反引号\n- **不使用双引号**\n\n## 解构赋值\n- 从数组取值给变量时，优先用**数组解构**\n- 函数参数是对象属性，优先用**对象解构**\n- 函数有多个返回值时，优先用**对象解构**\n\n## 对象\n- 单行定义的对象，最后一个成员不以逗号结尾；多行定义的对象，最后一个成员要以逗号结尾\n- 对象尽量静态化，一旦定义就不要随意添加属性。非要加，就用 **Object.assign** 方法\n- 对象有动态属性名：用属性名表达式 **[表达式]** \n- 对象的属性和方法，尽量用**简洁表达式**，易于书写和描述\n\n## 数组\n- 拷贝数组：用 **...** 扩展运算符\n- 类数组对象转数组：用**Array.from**方法\n\n## 函数\n- 立即执行函数：用箭头函数\n- 匿名函数：用箭头函数\n- 简单的、单行的、不会复用的函数：用箭头函数\n- 用箭头函数取代**Function.prototype.bind**\n- 不再用 `_this/that/self/sf`去绑定this\n- 不在函数体内用 **arguments**变量，用**rest运算符**`...`代替\n- 用**默认值语法**设置函数参数\n\n## Map和Object\n- 只有模拟现实世界的对象时，采用`Object`\n- 只需要`key:value`数据结构时，就用`Map`\n\n## Class和prototype\n- 尽量用Class取代需要prototype的操作，更易书写和便于理解\n- 用`extends`实现继承，更简单，不会使instanceof运算有风险\n\n## Module\n- Module语法使ES的标准写法\n- 用import代替require\n- 用export代替module.exports\n- 如果模块只有一个输出值，就用default,否则别用\n- export default和export不要混合使用\n- 模块输出的函数，函数名首字母应该用小写\n\n## 使用ESLint\n- 安装 ESLint\n- 安装 Airbnb 等语法规则，以及 import、a11y、react 等插件\n- 在项目的根目录下新建一个`.eslintrc`文件，配置 ESLint\n","source":"_posts/ES6 Code Style.md","raw":"---\ntitle: ES6编程风格&最佳实践\ncategories:\n    - 10技术 | JavaScript # 一级分类\ntags:\n    - ES\ndate: 2019-11-06\ndescription: 遵守一定的规范和统一的风格写代码，是程序猿的基本素养😺\ntoc: 1\ntop: 0\n---\n\n## 块级作用域\n- `let`完全取代`var`\n- let和const**优先const**:\n  - 函数式编程思想，运算不改变值，只是新建值\n  - 防止了无意间修改变量值所导致的错误\n  - 有利于将来的分布式运算\n  - JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率\n\n## 字符串\n- 静态一律用单引号/反引号\n- 动态使用反引号\n- **不使用双引号**\n\n## 解构赋值\n- 从数组取值给变量时，优先用**数组解构**\n- 函数参数是对象属性，优先用**对象解构**\n- 函数有多个返回值时，优先用**对象解构**\n\n## 对象\n- 单行定义的对象，最后一个成员不以逗号结尾；多行定义的对象，最后一个成员要以逗号结尾\n- 对象尽量静态化，一旦定义就不要随意添加属性。非要加，就用 **Object.assign** 方法\n- 对象有动态属性名：用属性名表达式 **[表达式]** \n- 对象的属性和方法，尽量用**简洁表达式**，易于书写和描述\n\n## 数组\n- 拷贝数组：用 **...** 扩展运算符\n- 类数组对象转数组：用**Array.from**方法\n\n## 函数\n- 立即执行函数：用箭头函数\n- 匿名函数：用箭头函数\n- 简单的、单行的、不会复用的函数：用箭头函数\n- 用箭头函数取代**Function.prototype.bind**\n- 不再用 `_this/that/self/sf`去绑定this\n- 不在函数体内用 **arguments**变量，用**rest运算符**`...`代替\n- 用**默认值语法**设置函数参数\n\n## Map和Object\n- 只有模拟现实世界的对象时，采用`Object`\n- 只需要`key:value`数据结构时，就用`Map`\n\n## Class和prototype\n- 尽量用Class取代需要prototype的操作，更易书写和便于理解\n- 用`extends`实现继承，更简单，不会使instanceof运算有风险\n\n## Module\n- Module语法使ES的标准写法\n- 用import代替require\n- 用export代替module.exports\n- 如果模块只有一个输出值，就用default,否则别用\n- export default和export不要混合使用\n- 模块输出的函数，函数名首字母应该用小写\n\n## 使用ESLint\n- 安装 ESLint\n- 安装 Airbnb 等语法规则，以及 import、a11y、react 等插件\n- 在项目的根目录下新建一个`.eslintrc`文件，配置 ESLint\n","slug":"ES6 Code Style","published":1,"updated":"2020-09-03T07:00:54.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ifk0011c8y6vgilgk72","content":"<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><ul>\n<li><code>let</code>完全取代<code>var</code></li>\n<li>let和const<strong>优先const</strong>:<ul>\n<li>函数式编程思想，运算不改变值，只是新建值</li>\n<li>防止了无意间修改变量值所导致的错误</li>\n<li>有利于将来的分布式运算</li>\n<li>JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>静态一律用单引号/反引号</li>\n<li>动态使用反引号</li>\n<li><strong>不使用双引号</strong></li>\n</ul>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><ul>\n<li>从数组取值给变量时，优先用<strong>数组解构</strong></li>\n<li>函数参数是对象属性，优先用<strong>对象解构</strong></li>\n<li>函数有多个返回值时，优先用<strong>对象解构</strong></li>\n</ul>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><ul>\n<li>单行定义的对象，最后一个成员不以逗号结尾；多行定义的对象，最后一个成员要以逗号结尾</li>\n<li>对象尽量静态化，一旦定义就不要随意添加属性。非要加，就用 <strong>Object.assign</strong> 方法</li>\n<li>对象有动态属性名：用属性名表达式 <strong>[表达式]</strong> </li>\n<li>对象的属性和方法，尽量用<strong>简洁表达式</strong>，易于书写和描述</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li>拷贝数组：用 <strong>…</strong> 扩展运算符</li>\n<li>类数组对象转数组：用<strong>Array.from</strong>方法</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>立即执行函数：用箭头函数</li>\n<li>匿名函数：用箭头函数</li>\n<li>简单的、单行的、不会复用的函数：用箭头函数</li>\n<li>用箭头函数取代<strong>Function.prototype.bind</strong></li>\n<li>不再用 <code>_this/that/self/sf</code>去绑定this</li>\n<li>不在函数体内用 <strong>arguments</strong>变量，用<strong>rest运算符</strong><code>...</code>代替</li>\n<li>用<strong>默认值语法</strong>设置函数参数</li>\n</ul>\n<h2 id=\"Map和Object\"><a href=\"#Map和Object\" class=\"headerlink\" title=\"Map和Object\"></a>Map和Object</h2><ul>\n<li>只有模拟现实世界的对象时，采用<code>Object</code></li>\n<li>只需要<code>key:value</code>数据结构时，就用<code>Map</code></li>\n</ul>\n<h2 id=\"Class和prototype\"><a href=\"#Class和prototype\" class=\"headerlink\" title=\"Class和prototype\"></a>Class和prototype</h2><ul>\n<li>尽量用Class取代需要prototype的操作，更易书写和便于理解</li>\n<li>用<code>extends</code>实现继承，更简单，不会使instanceof运算有风险</li>\n</ul>\n<h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><ul>\n<li>Module语法使ES的标准写法</li>\n<li>用import代替require</li>\n<li>用export代替module.exports</li>\n<li>如果模块只有一个输出值，就用default,否则别用</li>\n<li>export default和export不要混合使用</li>\n<li>模块输出的函数，函数名首字母应该用小写</li>\n</ul>\n<h2 id=\"使用ESLint\"><a href=\"#使用ESLint\" class=\"headerlink\" title=\"使用ESLint\"></a>使用ESLint</h2><ul>\n<li>安装 ESLint</li>\n<li>安装 Airbnb 等语法规则，以及 import、a11y、react 等插件</li>\n<li>在项目的根目录下新建一个<code>.eslintrc</code>文件，配置 ESLint</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><ul>\n<li><code>let</code>完全取代<code>var</code></li>\n<li>let和const<strong>优先const</strong>:<ul>\n<li>函数式编程思想，运算不改变值，只是新建值</li>\n<li>防止了无意间修改变量值所导致的错误</li>\n<li>有利于将来的分布式运算</li>\n<li>JavaScript 编译器会对const进行优化，所以多使用const，有利于提高程序的运行效率</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>静态一律用单引号/反引号</li>\n<li>动态使用反引号</li>\n<li><strong>不使用双引号</strong></li>\n</ul>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><ul>\n<li>从数组取值给变量时，优先用<strong>数组解构</strong></li>\n<li>函数参数是对象属性，优先用<strong>对象解构</strong></li>\n<li>函数有多个返回值时，优先用<strong>对象解构</strong></li>\n</ul>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><ul>\n<li>单行定义的对象，最后一个成员不以逗号结尾；多行定义的对象，最后一个成员要以逗号结尾</li>\n<li>对象尽量静态化，一旦定义就不要随意添加属性。非要加，就用 <strong>Object.assign</strong> 方法</li>\n<li>对象有动态属性名：用属性名表达式 <strong>[表达式]</strong> </li>\n<li>对象的属性和方法，尽量用<strong>简洁表达式</strong>，易于书写和描述</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li>拷贝数组：用 <strong>…</strong> 扩展运算符</li>\n<li>类数组对象转数组：用<strong>Array.from</strong>方法</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>立即执行函数：用箭头函数</li>\n<li>匿名函数：用箭头函数</li>\n<li>简单的、单行的、不会复用的函数：用箭头函数</li>\n<li>用箭头函数取代<strong>Function.prototype.bind</strong></li>\n<li>不再用 <code>_this/that/self/sf</code>去绑定this</li>\n<li>不在函数体内用 <strong>arguments</strong>变量，用<strong>rest运算符</strong><code>...</code>代替</li>\n<li>用<strong>默认值语法</strong>设置函数参数</li>\n</ul>\n<h2 id=\"Map和Object\"><a href=\"#Map和Object\" class=\"headerlink\" title=\"Map和Object\"></a>Map和Object</h2><ul>\n<li>只有模拟现实世界的对象时，采用<code>Object</code></li>\n<li>只需要<code>key:value</code>数据结构时，就用<code>Map</code></li>\n</ul>\n<h2 id=\"Class和prototype\"><a href=\"#Class和prototype\" class=\"headerlink\" title=\"Class和prototype\"></a>Class和prototype</h2><ul>\n<li>尽量用Class取代需要prototype的操作，更易书写和便于理解</li>\n<li>用<code>extends</code>实现继承，更简单，不会使instanceof运算有风险</li>\n</ul>\n<h2 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h2><ul>\n<li>Module语法使ES的标准写法</li>\n<li>用import代替require</li>\n<li>用export代替module.exports</li>\n<li>如果模块只有一个输出值，就用default,否则别用</li>\n<li>export default和export不要混合使用</li>\n<li>模块输出的函数，函数名首字母应该用小写</li>\n</ul>\n<h2 id=\"使用ESLint\"><a href=\"#使用ESLint\" class=\"headerlink\" title=\"使用ESLint\"></a>使用ESLint</h2><ul>\n<li>安装 ESLint</li>\n<li>安装 Airbnb 等语法规则，以及 import、a11y、react 等插件</li>\n<li>在项目的根目录下新建一个<code>.eslintrc</code>文件，配置 ESLint</li>\n</ul>\n"},{"title":"Fullpage.js","date":"2018-04-18T16:00:00.000Z","description":"fullPage.js 是一个基于 jQuery 的插件。","toc":1,"top":0,"_content":"\n## 主要功能有：\n\n-   支持鼠标滚动\n-   支持前进后退和键盘控制\n-   多个回调函数\n-   支持手机、平板触摸事件\n-   支持 CSS3 动画\n-   支持窗口缩放\n-   窗口缩放时自动调整\n-   可设置滚动宽度、背景颜色、滚动速度、 循环选项、回调、文本对齐方式等等\n\n## 兼容性\n\n    jQuery 兼容:\n    兼容 jQuery 1.7+。\n\n    浏览器兼容:\n    IE8+ ✔\tChrome ✔\tFirefox ✔\tOpera ✔\tSafari ✔\n\n## 引入文件\n\n```\n<link rel=\"stylesheet\" href=\"css/jquery.fullPage.css\">\n<script src=\"js/jquery.fullPage.js\"></script>\n<script src=\"js/jquery.min.js\"></script>\n<!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 -->\n<script src=\"js/jquery.easings.min.js\"></script>\n<!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 -->\n<script src=\"js/jquery.slimscroll.min.js\"></script>\n```\n\n## HTML\n\n```\n\t<div id=\"dowebok\">\n\t    <div class=\"section\">\n\t        <h3>第一屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第二屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第三屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第四屏</h3>\n\t    </div>\n\t</div>\n\t每个 section 代表一屏，默认显示“第一屏”，如果要指定加载页面时显示的“屏幕”，可以在对应的 section 加上 class=”active”，如：\n\n\t<div class=\"section active\">第三屏</div>\n\n\t同时，可以在 section 内加入 slide，如：\n\n\t<div id=\"dowebok\">\n\t    <div class=\"section\">第一屏</div>\n\t    <div class=\"section\">第二屏</div>\n\t    <div class=\"section\">\n\t        <div class=\"slide\">第三屏的第一屏</div>\n\t        <div class=\"slide\">第三屏的第二屏</div>\n\t        <div class=\"slide\">第三屏的第三屏</div>\n\t        <div class=\"slide\">第三屏的第四屏</div>\n\t    </div>\n\t    <div class=\"section\">第四屏</div>\n\t</div>\n\n### JavaScript\n``\n\t$(function(){\n\t    $('#dowebok').fullpage();\n\t});\n```\n\n## 详细配置见官方文档\n\n[Fullpage.js-Github](https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs)\n\n---\n\n    皮不动了...\n","source":"_posts/Fullpage.js.md","raw":"---\ntitle: Fullpage.js\ncategories:\n    - 10技术 | 前端工具与工程化 # 一级分类\ntags:\ndate: 2018-04-19\ndescription: fullPage.js 是一个基于 jQuery 的插件。\ntoc: 1\ntop: 0\n---\n\n## 主要功能有：\n\n-   支持鼠标滚动\n-   支持前进后退和键盘控制\n-   多个回调函数\n-   支持手机、平板触摸事件\n-   支持 CSS3 动画\n-   支持窗口缩放\n-   窗口缩放时自动调整\n-   可设置滚动宽度、背景颜色、滚动速度、 循环选项、回调、文本对齐方式等等\n\n## 兼容性\n\n    jQuery 兼容:\n    兼容 jQuery 1.7+。\n\n    浏览器兼容:\n    IE8+ ✔\tChrome ✔\tFirefox ✔\tOpera ✔\tSafari ✔\n\n## 引入文件\n\n```\n<link rel=\"stylesheet\" href=\"css/jquery.fullPage.css\">\n<script src=\"js/jquery.fullPage.js\"></script>\n<script src=\"js/jquery.min.js\"></script>\n<!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 -->\n<script src=\"js/jquery.easings.min.js\"></script>\n<!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 -->\n<script src=\"js/jquery.slimscroll.min.js\"></script>\n```\n\n## HTML\n\n```\n\t<div id=\"dowebok\">\n\t    <div class=\"section\">\n\t        <h3>第一屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第二屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第三屏</h3>\n\t    </div>\n\t    <div class=\"section\">\n\t        <h3>第四屏</h3>\n\t    </div>\n\t</div>\n\t每个 section 代表一屏，默认显示“第一屏”，如果要指定加载页面时显示的“屏幕”，可以在对应的 section 加上 class=”active”，如：\n\n\t<div class=\"section active\">第三屏</div>\n\n\t同时，可以在 section 内加入 slide，如：\n\n\t<div id=\"dowebok\">\n\t    <div class=\"section\">第一屏</div>\n\t    <div class=\"section\">第二屏</div>\n\t    <div class=\"section\">\n\t        <div class=\"slide\">第三屏的第一屏</div>\n\t        <div class=\"slide\">第三屏的第二屏</div>\n\t        <div class=\"slide\">第三屏的第三屏</div>\n\t        <div class=\"slide\">第三屏的第四屏</div>\n\t    </div>\n\t    <div class=\"section\">第四屏</div>\n\t</div>\n\n### JavaScript\n``\n\t$(function(){\n\t    $('#dowebok').fullpage();\n\t});\n```\n\n## 详细配置见官方文档\n\n[Fullpage.js-Github](https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs)\n\n---\n\n    皮不动了...\n","slug":"Fullpage.js","published":1,"updated":"2020-09-03T07:00:54.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ifm0016c8y66cnli0er","content":"<h2 id=\"主要功能有：\"><a href=\"#主要功能有：\" class=\"headerlink\" title=\"主要功能有：\"></a>主要功能有：</h2><ul>\n<li>支持鼠标滚动</li>\n<li>支持前进后退和键盘控制</li>\n<li>多个回调函数</li>\n<li>支持手机、平板触摸事件</li>\n<li>支持 CSS3 动画</li>\n<li>支持窗口缩放</li>\n<li>窗口缩放时自动调整</li>\n<li>可设置滚动宽度、背景颜色、滚动速度、 循环选项、回调、文本对齐方式等等</li>\n</ul>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><pre><code>jQuery 兼容:\n兼容 jQuery 1.7+。\n\n浏览器兼容:\nIE8+ ✔    Chrome ✔    Firefox ✔    Opera ✔    Safari ✔\n</code></pre><h2 id=\"引入文件\"><a href=\"#引入文件\" class=\"headerlink\" title=\"引入文件\"></a>引入文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/jquery.fullPage.css&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.fullPage.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.easings.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.slimscroll.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第一屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第二屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第三屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第四屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t每个 section 代表一屏，默认显示“第一屏”，如果要指定加载页面时显示的“屏幕”，可以在对应的 section 加上 class=”active”，如：</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;div class=&quot;section active&quot;&gt;第三屏&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t同时，可以在 section 内加入 slide，如：</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第一屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第二屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第一屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第二屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第三屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第四屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第四屏&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">### JavaScript</span><br><span class=\"line\">``</span><br><span class=\"line\">\t$(function()&#123;</span><br><span class=\"line\">\t    $(&apos;#dowebok&apos;).fullpage();</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"详细配置见官方文档\"><a href=\"#详细配置见官方文档\" class=\"headerlink\" title=\"详细配置见官方文档\"></a>详细配置见官方文档</h2><p><a href=\"https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs\" target=\"_blank\" rel=\"noopener\">Fullpage.js-Github</a></p>\n<hr>\n<pre><code>皮不动了...\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主要功能有：\"><a href=\"#主要功能有：\" class=\"headerlink\" title=\"主要功能有：\"></a>主要功能有：</h2><ul>\n<li>支持鼠标滚动</li>\n<li>支持前进后退和键盘控制</li>\n<li>多个回调函数</li>\n<li>支持手机、平板触摸事件</li>\n<li>支持 CSS3 动画</li>\n<li>支持窗口缩放</li>\n<li>窗口缩放时自动调整</li>\n<li>可设置滚动宽度、背景颜色、滚动速度、 循环选项、回调、文本对齐方式等等</li>\n</ul>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><pre><code>jQuery 兼容:\n兼容 jQuery 1.7+。\n\n浏览器兼容:\nIE8+ ✔    Chrome ✔    Firefox ✔    Opera ✔    Safari ✔\n</code></pre><h2 id=\"引入文件\"><a href=\"#引入文件\" class=\"headerlink\" title=\"引入文件\"></a>引入文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/jquery.fullPage.css&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.fullPage.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- jquery.easings.min.js 用于 easing 参数，也可以使用完整的 jQuery UI 代替，如果不需要设置 easing 参数，可去掉改文件 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.easings.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 如果 scrollOverflow 设置为 true，则需要引入 jquery.slimscroll.min.js，一般情况下不需要 --&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/jquery.slimscroll.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第一屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第二屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第三屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;h3&gt;第四屏&lt;/h3&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t每个 section 代表一屏，默认显示“第一屏”，如果要指定加载页面时显示的“屏幕”，可以在对应的 section 加上 class=”active”，如：</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;div class=&quot;section active&quot;&gt;第三屏&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t同时，可以在 section 内加入 slide，如：</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;div id=&quot;dowebok&quot;&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第一屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第二屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第一屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第二屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第三屏&lt;/div&gt;</span><br><span class=\"line\">\t        &lt;div class=&quot;slide&quot;&gt;第三屏的第四屏&lt;/div&gt;</span><br><span class=\"line\">\t    &lt;/div&gt;</span><br><span class=\"line\">\t    &lt;div class=&quot;section&quot;&gt;第四屏&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">### JavaScript</span><br><span class=\"line\">``</span><br><span class=\"line\">\t$(function()&#123;</span><br><span class=\"line\">\t    $(&apos;#dowebok&apos;).fullpage();</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"详细配置见官方文档\"><a href=\"#详细配置见官方文档\" class=\"headerlink\" title=\"详细配置见官方文档\"></a>详细配置见官方文档</h2><p><a href=\"https://github.com/alvarotrigo/fullPage.js/tree/master/lang/chinese#fullpagejs\" target=\"_blank\" rel=\"noopener\">Fullpage.js-Github</a></p>\n<hr>\n<pre><code>皮不动了...\n</code></pre>"},{"title":"古老神奇的table","date":"2018-08-28T16:00:00.000Z","description":"凭什么table能兼容IE6？","toc":1,"top":0,"_content":"\n# 结构\n\n```html\n<table>\n  <caption>表格上方的居中标题</caption>\n  <colgroup>\n    <col span=\"2\" style=\"\">\n    <col style=\"\">\n  </colgroup>\n  <thead>\n      <tr>\n        <th>ISBN</th>\n        <th>Title</th>\n        <th>Price</th>\n      </tr>\n  </thead>\n  <tody>\n      <tr>\n        <td>3476896</td>\n        <td>My first HTML</td>\n        <td>$53</td>\n      </tr>\n  </tbody>\n  <tfoot>\n      <tr>\n        <td>3476896</td>\n        <td>My first HTML</td>\n        <td>$53</td>\n      </tr>\n  </tfoot>\n</table>\n```\n\n# 标签\n\n```\n<caption>、<col>、<colgroup>、<thead>、<tfoot> 以及 <tbody>\n```\n\n# `<caption>标题`\n\n对齐方式：\n\n-   用 CSS 属性 \"text-align\" 和 \"caption-side\"\n-   caption-side 只有 top 和 bootom 两个，即位于表格上方或下方\n-   用 text-align 来控制左右位置\n\n无其他属性（HTML4.01 的 align 属性被 HTML5 删除）\n\n# `<colgroup>` 和 `<col>` ：对列进行组合\n\n对列进行组合\n\nspan 属性：定义横跨的列数,无 span 属性默认为 1（类似于 td 的 colspan 属性）\n\n无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# `<thead> <tbody> <tfoot>`\n\n无属性（样式属性被 HTML5 删除）\n\n默认不会影响表格的样式布局\n\n优点：\n\n-   使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。\n-   当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。\n-   可以方便的定义 三部分 的样式\n\n# `<table>`\n\n属性：border=1 或\"\" 规定是否有边框\n\n无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# 表格行：`<tr>`\n\n无属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# 单元格：`<td>` 和 `<th>`\n\n差异\n\n-   th：文本粗体，居中\n-   td：文本普通，左对齐\n\n属性\n\n-   colspan：横跨的列数\n-   rowspan：横跨的行数\n-   headers：header_id 单元格关联的一个或多个表头单元格\n-   无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n自动居中\n\n-   如果给 td 定义了尺寸，且子元素的尺寸小于 td 尺寸，子元素会自动垂直居中\n-   居中后子元素与 td 的边距，不属于 td 的 padding 值，也不属于子元素的 margin 值\n-   IE6 居中随便写，写不出来算我输\n\n# CSS 属性：border-collapse\n\n默认情况：单元格之间有间隔隔开，border-collapse:separate\n\n一般不需要隔开：\n\n```css\ntable {\n    border-collapse: collapse;\n}\n```\n\n---\n\n    \"你大爷还是你大爷\"\n","source":"_posts/ancient_magical_table.md","raw":"---\ntitle: 古老神奇的table\ncategories:\n    - 10技术 | HTML # 一级分类\ntags:\ndate: 2018-08-29\ndescription: 凭什么table能兼容IE6？\ntoc: 1\ntop: 0\n---\n\n# 结构\n\n```html\n<table>\n  <caption>表格上方的居中标题</caption>\n  <colgroup>\n    <col span=\"2\" style=\"\">\n    <col style=\"\">\n  </colgroup>\n  <thead>\n      <tr>\n        <th>ISBN</th>\n        <th>Title</th>\n        <th>Price</th>\n      </tr>\n  </thead>\n  <tody>\n      <tr>\n        <td>3476896</td>\n        <td>My first HTML</td>\n        <td>$53</td>\n      </tr>\n  </tbody>\n  <tfoot>\n      <tr>\n        <td>3476896</td>\n        <td>My first HTML</td>\n        <td>$53</td>\n      </tr>\n  </tfoot>\n</table>\n```\n\n# 标签\n\n```\n<caption>、<col>、<colgroup>、<thead>、<tfoot> 以及 <tbody>\n```\n\n# `<caption>标题`\n\n对齐方式：\n\n-   用 CSS 属性 \"text-align\" 和 \"caption-side\"\n-   caption-side 只有 top 和 bootom 两个，即位于表格上方或下方\n-   用 text-align 来控制左右位置\n\n无其他属性（HTML4.01 的 align 属性被 HTML5 删除）\n\n# `<colgroup>` 和 `<col>` ：对列进行组合\n\n对列进行组合\n\nspan 属性：定义横跨的列数,无 span 属性默认为 1（类似于 td 的 colspan 属性）\n\n无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# `<thead> <tbody> <tfoot>`\n\n无属性（样式属性被 HTML5 删除）\n\n默认不会影响表格的样式布局\n\n优点：\n\n-   使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。\n-   当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。\n-   可以方便的定义 三部分 的样式\n\n# `<table>`\n\n属性：border=1 或\"\" 规定是否有边框\n\n无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# 表格行：`<tr>`\n\n无属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n# 单元格：`<td>` 和 `<th>`\n\n差异\n\n-   th：文本粗体，居中\n-   td：文本普通，左对齐\n\n属性\n\n-   colspan：横跨的列数\n-   rowspan：横跨的行数\n-   headers：header_id 单元格关联的一个或多个表头单元格\n-   无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）\n\n自动居中\n\n-   如果给 td 定义了尺寸，且子元素的尺寸小于 td 尺寸，子元素会自动垂直居中\n-   居中后子元素与 td 的边距，不属于 td 的 padding 值，也不属于子元素的 margin 值\n-   IE6 居中随便写，写不出来算我输\n\n# CSS 属性：border-collapse\n\n默认情况：单元格之间有间隔隔开，border-collapse:separate\n\n一般不需要隔开：\n\n```css\ntable {\n    border-collapse: collapse;\n}\n```\n\n---\n\n    \"你大爷还是你大爷\"\n","slug":"ancient_magical_table","published":1,"updated":"2020-09-03T07:00:54.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ifn0017c8y6g8xqk19r","content":"<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>表格上方的居中标题<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">span</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>ISBN<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Price<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tody</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3476896<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>My first HTML<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$53<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3476896<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>My first HTML<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$53<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;caption&gt;、&lt;col&gt;、&lt;colgroup&gt;、&lt;thead&gt;、&lt;tfoot&gt; 以及 &lt;tbody&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"lt-caption-gt-标题\"><a href=\"#lt-caption-gt-标题\" class=\"headerlink\" title=\"&lt;caption&gt;标题\"></a><code>&lt;caption&gt;标题</code></h1><p>对齐方式：</p>\n<ul>\n<li>用 CSS 属性 “text-align” 和 “caption-side”</li>\n<li>caption-side 只有 top 和 bootom 两个，即位于表格上方或下方</li>\n<li>用 text-align 来控制左右位置</li>\n</ul>\n<p>无其他属性（HTML4.01 的 align 属性被 HTML5 删除）</p>\n<h1 id=\"lt-colgroup-gt-和-lt-col-gt-：对列进行组合\"><a href=\"#lt-colgroup-gt-和-lt-col-gt-：对列进行组合\" class=\"headerlink\" title=\"&lt;colgroup&gt; 和 &lt;col&gt; ：对列进行组合\"></a><code>&lt;colgroup&gt;</code> 和 <code>&lt;col&gt;</code> ：对列进行组合</h1><p>对列进行组合</p>\n<p>span 属性：定义横跨的列数,无 span 属性默认为 1（类似于 td 的 colspan 属性）</p>\n<p>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"lt-thead-gt-lt-tbody-gt-lt-tfoot-gt\"><a href=\"#lt-thead-gt-lt-tbody-gt-lt-tfoot-gt\" class=\"headerlink\" title=\"&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;\"></a><code>&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;</code></h1><p>无属性（样式属性被 HTML5 删除）</p>\n<p>默认不会影响表格的样式布局</p>\n<p>优点：</p>\n<ul>\n<li>使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。</li>\n<li>当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。</li>\n<li>可以方便的定义 三部分 的样式</li>\n</ul>\n<h1 id=\"lt-table-gt\"><a href=\"#lt-table-gt\" class=\"headerlink\" title=\"&lt;table&gt;\"></a><code>&lt;table&gt;</code></h1><p>属性：border=1 或”” 规定是否有边框</p>\n<p>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"表格行：-lt-tr-gt\"><a href=\"#表格行：-lt-tr-gt\" class=\"headerlink\" title=\"表格行：&lt;tr&gt;\"></a>表格行：<code>&lt;tr&gt;</code></h1><p>无属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"单元格：-lt-td-gt-和-lt-th-gt\"><a href=\"#单元格：-lt-td-gt-和-lt-th-gt\" class=\"headerlink\" title=\"单元格：&lt;td&gt; 和 &lt;th&gt;\"></a>单元格：<code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code></h1><p>差异</p>\n<ul>\n<li>th：文本粗体，居中</li>\n<li>td：文本普通，左对齐</li>\n</ul>\n<p>属性</p>\n<ul>\n<li>colspan：横跨的列数</li>\n<li>rowspan：横跨的行数</li>\n<li>headers：header_id 单元格关联的一个或多个表头单元格</li>\n<li>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</li>\n</ul>\n<p>自动居中</p>\n<ul>\n<li>如果给 td 定义了尺寸，且子元素的尺寸小于 td 尺寸，子元素会自动垂直居中</li>\n<li>居中后子元素与 td 的边距，不属于 td 的 padding 值，也不属于子元素的 margin 值</li>\n<li>IE6 居中随便写，写不出来算我输</li>\n</ul>\n<h1 id=\"CSS-属性：border-collapse\"><a href=\"#CSS-属性：border-collapse\" class=\"headerlink\" title=\"CSS 属性：border-collapse\"></a>CSS 属性：border-collapse</h1><p>默认情况：单元格之间有间隔隔开，border-collapse:separate</p>\n<p>一般不需要隔开：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>&quot;你大爷还是你大爷&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>表格上方的居中标题<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">span</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">style</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>ISBN<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Price<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tody</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3476896<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>My first HTML<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$53<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>3476896<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>My first HTML<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$53<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;caption&gt;、&lt;col&gt;、&lt;colgroup&gt;、&lt;thead&gt;、&lt;tfoot&gt; 以及 &lt;tbody&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"lt-caption-gt-标题\"><a href=\"#lt-caption-gt-标题\" class=\"headerlink\" title=\"&lt;caption&gt;标题\"></a><code>&lt;caption&gt;标题</code></h1><p>对齐方式：</p>\n<ul>\n<li>用 CSS 属性 “text-align” 和 “caption-side”</li>\n<li>caption-side 只有 top 和 bootom 两个，即位于表格上方或下方</li>\n<li>用 text-align 来控制左右位置</li>\n</ul>\n<p>无其他属性（HTML4.01 的 align 属性被 HTML5 删除）</p>\n<h1 id=\"lt-colgroup-gt-和-lt-col-gt-：对列进行组合\"><a href=\"#lt-colgroup-gt-和-lt-col-gt-：对列进行组合\" class=\"headerlink\" title=\"&lt;colgroup&gt; 和 &lt;col&gt; ：对列进行组合\"></a><code>&lt;colgroup&gt;</code> 和 <code>&lt;col&gt;</code> ：对列进行组合</h1><p>对列进行组合</p>\n<p>span 属性：定义横跨的列数,无 span 属性默认为 1（类似于 td 的 colspan 属性）</p>\n<p>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"lt-thead-gt-lt-tbody-gt-lt-tfoot-gt\"><a href=\"#lt-thead-gt-lt-tbody-gt-lt-tfoot-gt\" class=\"headerlink\" title=\"&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;\"></a><code>&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;</code></h1><p>无属性（样式属性被 HTML5 删除）</p>\n<p>默认不会影响表格的样式布局</p>\n<p>优点：</p>\n<ul>\n<li>使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。</li>\n<li>当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。</li>\n<li>可以方便的定义 三部分 的样式</li>\n</ul>\n<h1 id=\"lt-table-gt\"><a href=\"#lt-table-gt\" class=\"headerlink\" title=\"&lt;table&gt;\"></a><code>&lt;table&gt;</code></h1><p>属性：border=1 或”” 规定是否有边框</p>\n<p>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"表格行：-lt-tr-gt\"><a href=\"#表格行：-lt-tr-gt\" class=\"headerlink\" title=\"表格行：&lt;tr&gt;\"></a>表格行：<code>&lt;tr&gt;</code></h1><p>无属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</p>\n<h1 id=\"单元格：-lt-td-gt-和-lt-th-gt\"><a href=\"#单元格：-lt-td-gt-和-lt-th-gt\" class=\"headerlink\" title=\"单元格：&lt;td&gt; 和 &lt;th&gt;\"></a>单元格：<code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code></h1><p>差异</p>\n<ul>\n<li>th：文本粗体，居中</li>\n<li>td：文本普通，左对齐</li>\n</ul>\n<p>属性</p>\n<ul>\n<li>colspan：横跨的列数</li>\n<li>rowspan：横跨的行数</li>\n<li>headers：header_id 单元格关联的一个或多个表头单元格</li>\n<li>无其他属性（表示样式的 HTML4.01 属性均被 HTML5 删除）</li>\n</ul>\n<p>自动居中</p>\n<ul>\n<li>如果给 td 定义了尺寸，且子元素的尺寸小于 td 尺寸，子元素会自动垂直居中</li>\n<li>居中后子元素与 td 的边距，不属于 td 的 padding 值，也不属于子元素的 margin 值</li>\n<li>IE6 居中随便写，写不出来算我输</li>\n</ul>\n<h1 id=\"CSS-属性：border-collapse\"><a href=\"#CSS-属性：border-collapse\" class=\"headerlink\" title=\"CSS 属性：border-collapse\"></a>CSS 属性：border-collapse</h1><p>默认情况：单元格之间有间隔隔开，border-collapse:separate</p>\n<p>一般不需要隔开：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>&quot;你大爷还是你大爷&quot;\n</code></pre>"},{"title":"《刻意学习》：如何更高效的成长","date":"2019-08-18T16:00:00.000Z","description":"提升执行力 | 持续精进 | 轻松成为更好的自己","toc":1,"top":0,"_content":"\n## 书的主旨 : 持续行动 + 持续学习\n\n## 为什么要持续行动\n\n#### 为了成长\n\n- 生而为成长，在这个变化万千的时代，不进则退。\n\n\n#### 跳出困境，重构现在与未来\n\n- 现状有多痛苦，过往有多不堪，持续行动就该有多深。\n- “悟已往之不谏，知来者之可追”，我们的原生家庭、出身条件、容貌身体发肤、以及过去的种种，都是不可变的默认参数，只能靠当下的行动，去改变未来的轨迹。\n\n## 正确的自我认知\n\n#### 拒绝自我感动\n\n- 正是因为做得少，才容易“感动”，自欺欺人。\n- 提前透支快感：为自己定下宏大的目标，并为之沾沾自喜，提前透支着目标达成的快感，真正要开始做事便耐不住寂寞开始放弃\n\n#### 拒绝“强及时反馈”\n\n- 我们与外界互动，通常渴望强及时反馈，得不到变容易焦虑、急躁。\n- 强及时反馈对复杂系统是不起作用的:\n\n| 复杂系统     | 行为     | 强及时反馈 |\n| ------------ | -------- | ---------- |\n| 人的身体系统 | 跑一次步 | 变瘦变健康 |\n| 大海         | 撒一泡尿 | 变脏       |\n\n#### 不要过度依赖技巧\n\n- 投机取巧是追求强即时反馈的表现\n- 过度追逐技巧的人，往往缺乏行动量\n- 能用思路解决的问题，尽量不用技巧。从全局的层面看问题，理清逻辑思路，而不是抓住某个细节投机取巧\n\n#### 不要标榜/贴标签，去行动\n\n- 通过标榜自己是谁，给自己贴标签，并且能马上得到本来要经过努力做成事才嗯那个得到的反馈，就不会再踏实的做事了。\n- 通过“宣称”自己写作、在GRE、在奋斗，快速透支大量快感，往往时不会他是做事的。\n\n#### 不要自我迷恋，高估自己\n\n- 不要做事无巨细的完美主义者：等到把所有的因素都准备完美再开工。不如先把一部分事情做起来。\n- 制定计划时，总是雄心勃勃，透支着未来的成就感，高估自己的能力，往往开始正真做事的时候，更容易放弃。\n\n#### 放大格局\n\n- 人是一种容易短视的动物，因为我们的圈子往往比整个世界小的太多太多微乎其微，这种短视会带来认知偏差，让我们做出错误的判断\n- 时不时跳出自己的圈子，主动接触外界信息，不要过度相信自己的认知，是提升格局的关键\n\n## 成长系统\n\n![](/images/continuous_action.png)\n\n## 如何行动\n\n#### 松散到紧凑\n\n- 建立合理的作息\n- 坚定的坚持下去\n\n#### 耐得住寂寞：没有成就感也要行动\n\n- 持续行动的要义就在于持续，不要以任何理由打破自己定下的原则\n- 不依靠透支未来的成就感，作为坚持下去的动力\n\n#### ​克服拖延\n\n- 五分钟内能做完的事，现在立即做。五分钟做不完的，现在开始做一部分。\n\n\n#### 放大对未来的感知\n\n- 提前完成任务，而不是到deadline\n- 不要高度自己的能力，低估自己完成任务所需的时间\n- 时刻警醒自己，让自己感知着未来不完成任务带来的后果\n\n#### 早起是拓宽增量\n\n- 更高效的利用时间，有两个途径。一是“存量优化”，在现有的作息时间中，更高效的利用时间。二是“拓宽增量”，也就是增加可支配的时间。\n- 对于大多数人来说，“存量优化”是很难的，也是有瓶颈的，因此“拓宽增量”是更好的选择。\n- “拓宽增量”意味着压缩睡眠时间，起的更早显然比睡的更晚对身体更有利，并且清晨的时光，更以利用。\n\n#### 投资资源（时间+金钱）\n\n- 首先，投资自己是一种收益最高的投入，不能因为惜钱，而去绕弯路，去用时间换钱\n- 其次，投资自己不光意味花钱，花钱只是获得了更好的资源，真正的成长，需要你投入时间去持续行动\n\n#### 信息分级，对海量信息抗压\n\n- 面对海量的信息，不因噎废食，直接切断所有的信息源\n- 不自我焦虑，培养抗压能力，克服“永远刷不完的小红点”带来的焦虑不安\n- 形成对信息分级的系统，主动的对信息分级，知道自己想要什么\n\n## 关于n阶行动计划\n| 阶数 | 时长                 | 特点                                                                                               |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------- |\n| 一   | 10^1 = 10天，一个周  | 瓶颈在于执行力，行动系统有问题                                                                     |\n| 二   | 10^2 = 100天，三个月 | 瓶颈在于学习系统和格局，有一定执行力，但是需要完善学习系统，升华格局                               |\n| 三   | 10^3 = 1000天，三年  | 时间足够长，能够见到真正的对复杂系统的改变，形成了思维惯性和依赖路径，瓶颈在于创新、重构、与时俱进 |\n| ...  | ...                  | ...                                                                                                |\n\n## 关于1000天持续行动计划\n\n#### 开局阶段：0-300天\n\n- 认清自我，了解现状，认清现实，找出“我能做的”和“我想做的”之间的差距\n- 仅能完成任务，倒逼自己\n\n#### 中盘持续阶段：200-600天\n\n- 补足不全，缩短“我能做的”和“我想做的”之间的差距\n- 能每天完成任务，并在其基础上有所进步\n\n#### 突破创新阶段：600-1000天\n\n- 突破现有的固定模式，打破思维惯性\n- 根据环境的改变，做出新的规划，升华行动\n\n\n<small>希望你看完，能做点什么</small>","source":"_posts/continuous_action.md","raw":"---\ntitle: 《刻意学习》：如何更高效的成长\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2019-08-19\ndescription: 提升执行力 | 持续精进 | 轻松成为更好的自己\ntoc: 1\ntop: 0\n---\n\n## 书的主旨 : 持续行动 + 持续学习\n\n## 为什么要持续行动\n\n#### 为了成长\n\n- 生而为成长，在这个变化万千的时代，不进则退。\n\n\n#### 跳出困境，重构现在与未来\n\n- 现状有多痛苦，过往有多不堪，持续行动就该有多深。\n- “悟已往之不谏，知来者之可追”，我们的原生家庭、出身条件、容貌身体发肤、以及过去的种种，都是不可变的默认参数，只能靠当下的行动，去改变未来的轨迹。\n\n## 正确的自我认知\n\n#### 拒绝自我感动\n\n- 正是因为做得少，才容易“感动”，自欺欺人。\n- 提前透支快感：为自己定下宏大的目标，并为之沾沾自喜，提前透支着目标达成的快感，真正要开始做事便耐不住寂寞开始放弃\n\n#### 拒绝“强及时反馈”\n\n- 我们与外界互动，通常渴望强及时反馈，得不到变容易焦虑、急躁。\n- 强及时反馈对复杂系统是不起作用的:\n\n| 复杂系统     | 行为     | 强及时反馈 |\n| ------------ | -------- | ---------- |\n| 人的身体系统 | 跑一次步 | 变瘦变健康 |\n| 大海         | 撒一泡尿 | 变脏       |\n\n#### 不要过度依赖技巧\n\n- 投机取巧是追求强即时反馈的表现\n- 过度追逐技巧的人，往往缺乏行动量\n- 能用思路解决的问题，尽量不用技巧。从全局的层面看问题，理清逻辑思路，而不是抓住某个细节投机取巧\n\n#### 不要标榜/贴标签，去行动\n\n- 通过标榜自己是谁，给自己贴标签，并且能马上得到本来要经过努力做成事才嗯那个得到的反馈，就不会再踏实的做事了。\n- 通过“宣称”自己写作、在GRE、在奋斗，快速透支大量快感，往往时不会他是做事的。\n\n#### 不要自我迷恋，高估自己\n\n- 不要做事无巨细的完美主义者：等到把所有的因素都准备完美再开工。不如先把一部分事情做起来。\n- 制定计划时，总是雄心勃勃，透支着未来的成就感，高估自己的能力，往往开始正真做事的时候，更容易放弃。\n\n#### 放大格局\n\n- 人是一种容易短视的动物，因为我们的圈子往往比整个世界小的太多太多微乎其微，这种短视会带来认知偏差，让我们做出错误的判断\n- 时不时跳出自己的圈子，主动接触外界信息，不要过度相信自己的认知，是提升格局的关键\n\n## 成长系统\n\n![](/images/continuous_action.png)\n\n## 如何行动\n\n#### 松散到紧凑\n\n- 建立合理的作息\n- 坚定的坚持下去\n\n#### 耐得住寂寞：没有成就感也要行动\n\n- 持续行动的要义就在于持续，不要以任何理由打破自己定下的原则\n- 不依靠透支未来的成就感，作为坚持下去的动力\n\n#### ​克服拖延\n\n- 五分钟内能做完的事，现在立即做。五分钟做不完的，现在开始做一部分。\n\n\n#### 放大对未来的感知\n\n- 提前完成任务，而不是到deadline\n- 不要高度自己的能力，低估自己完成任务所需的时间\n- 时刻警醒自己，让自己感知着未来不完成任务带来的后果\n\n#### 早起是拓宽增量\n\n- 更高效的利用时间，有两个途径。一是“存量优化”，在现有的作息时间中，更高效的利用时间。二是“拓宽增量”，也就是增加可支配的时间。\n- 对于大多数人来说，“存量优化”是很难的，也是有瓶颈的，因此“拓宽增量”是更好的选择。\n- “拓宽增量”意味着压缩睡眠时间，起的更早显然比睡的更晚对身体更有利，并且清晨的时光，更以利用。\n\n#### 投资资源（时间+金钱）\n\n- 首先，投资自己是一种收益最高的投入，不能因为惜钱，而去绕弯路，去用时间换钱\n- 其次，投资自己不光意味花钱，花钱只是获得了更好的资源，真正的成长，需要你投入时间去持续行动\n\n#### 信息分级，对海量信息抗压\n\n- 面对海量的信息，不因噎废食，直接切断所有的信息源\n- 不自我焦虑，培养抗压能力，克服“永远刷不完的小红点”带来的焦虑不安\n- 形成对信息分级的系统，主动的对信息分级，知道自己想要什么\n\n## 关于n阶行动计划\n| 阶数 | 时长                 | 特点                                                                                               |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------- |\n| 一   | 10^1 = 10天，一个周  | 瓶颈在于执行力，行动系统有问题                                                                     |\n| 二   | 10^2 = 100天，三个月 | 瓶颈在于学习系统和格局，有一定执行力，但是需要完善学习系统，升华格局                               |\n| 三   | 10^3 = 1000天，三年  | 时间足够长，能够见到真正的对复杂系统的改变，形成了思维惯性和依赖路径，瓶颈在于创新、重构、与时俱进 |\n| ...  | ...                  | ...                                                                                                |\n\n## 关于1000天持续行动计划\n\n#### 开局阶段：0-300天\n\n- 认清自我，了解现状，认清现实，找出“我能做的”和“我想做的”之间的差距\n- 仅能完成任务，倒逼自己\n\n#### 中盘持续阶段：200-600天\n\n- 补足不全，缩短“我能做的”和“我想做的”之间的差距\n- 能每天完成任务，并在其基础上有所进步\n\n#### 突破创新阶段：600-1000天\n\n- 突破现有的固定模式，打破思维惯性\n- 根据环境的改变，做出新的规划，升华行动\n\n\n<small>希望你看完，能做点什么</small>","slug":"continuous_action","published":1,"updated":"2021-04-21T06:53:37.287Z","_id":"ckir88ifp001ac8y6nre3y1bb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"书的主旨-持续行动-持续学习\"><a href=\"#书的主旨-持续行动-持续学习\" class=\"headerlink\" title=\"书的主旨 : 持续行动 + 持续学习\"></a>书的主旨 : 持续行动 + 持续学习</h2><h2 id=\"为什么要持续行动\"><a href=\"#为什么要持续行动\" class=\"headerlink\" title=\"为什么要持续行动\"></a>为什么要持续行动</h2><h4 id=\"为了成长\"><a href=\"#为了成长\" class=\"headerlink\" title=\"为了成长\"></a>为了成长</h4><ul>\n<li>生而为成长，在这个变化万千的时代，不进则退。</li>\n</ul>\n<h4 id=\"跳出困境，重构现在与未来\"><a href=\"#跳出困境，重构现在与未来\" class=\"headerlink\" title=\"跳出困境，重构现在与未来\"></a>跳出困境，重构现在与未来</h4><ul>\n<li>现状有多痛苦，过往有多不堪，持续行动就该有多深。</li>\n<li>“悟已往之不谏，知来者之可追”，我们的原生家庭、出身条件、容貌身体发肤、以及过去的种种，都是不可变的默认参数，只能靠当下的行动，去改变未来的轨迹。</li>\n</ul>\n<h2 id=\"正确的自我认知\"><a href=\"#正确的自我认知\" class=\"headerlink\" title=\"正确的自我认知\"></a>正确的自我认知</h2><h4 id=\"拒绝自我感动\"><a href=\"#拒绝自我感动\" class=\"headerlink\" title=\"拒绝自我感动\"></a>拒绝自我感动</h4><ul>\n<li>正是因为做得少，才容易“感动”，自欺欺人。</li>\n<li>提前透支快感：为自己定下宏大的目标，并为之沾沾自喜，提前透支着目标达成的快感，真正要开始做事便耐不住寂寞开始放弃</li>\n</ul>\n<h4 id=\"拒绝“强及时反馈”\"><a href=\"#拒绝“强及时反馈”\" class=\"headerlink\" title=\"拒绝“强及时反馈”\"></a>拒绝“强及时反馈”</h4><ul>\n<li>我们与外界互动，通常渴望强及时反馈，得不到变容易焦虑、急躁。</li>\n<li>强及时反馈对复杂系统是不起作用的:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>复杂系统</th>\n<th>行为</th>\n<th>强及时反馈</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>人的身体系统</td>\n<td>跑一次步</td>\n<td>变瘦变健康</td>\n</tr>\n<tr>\n<td>大海</td>\n<td>撒一泡尿</td>\n<td>变脏</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"不要过度依赖技巧\"><a href=\"#不要过度依赖技巧\" class=\"headerlink\" title=\"不要过度依赖技巧\"></a>不要过度依赖技巧</h4><ul>\n<li>投机取巧是追求强即时反馈的表现</li>\n<li>过度追逐技巧的人，往往缺乏行动量</li>\n<li>能用思路解决的问题，尽量不用技巧。从全局的层面看问题，理清逻辑思路，而不是抓住某个细节投机取巧</li>\n</ul>\n<h4 id=\"不要标榜-贴标签，去行动\"><a href=\"#不要标榜-贴标签，去行动\" class=\"headerlink\" title=\"不要标榜/贴标签，去行动\"></a>不要标榜/贴标签，去行动</h4><ul>\n<li>通过标榜自己是谁，给自己贴标签，并且能马上得到本来要经过努力做成事才嗯那个得到的反馈，就不会再踏实的做事了。</li>\n<li>通过“宣称”自己写作、在GRE、在奋斗，快速透支大量快感，往往时不会他是做事的。</li>\n</ul>\n<h4 id=\"不要自我迷恋，高估自己\"><a href=\"#不要自我迷恋，高估自己\" class=\"headerlink\" title=\"不要自我迷恋，高估自己\"></a>不要自我迷恋，高估自己</h4><ul>\n<li>不要做事无巨细的完美主义者：等到把所有的因素都准备完美再开工。不如先把一部分事情做起来。</li>\n<li>制定计划时，总是雄心勃勃，透支着未来的成就感，高估自己的能力，往往开始正真做事的时候，更容易放弃。</li>\n</ul>\n<h4 id=\"放大格局\"><a href=\"#放大格局\" class=\"headerlink\" title=\"放大格局\"></a>放大格局</h4><ul>\n<li>人是一种容易短视的动物，因为我们的圈子往往比整个世界小的太多太多微乎其微，这种短视会带来认知偏差，让我们做出错误的判断</li>\n<li>时不时跳出自己的圈子，主动接触外界信息，不要过度相信自己的认知，是提升格局的关键</li>\n</ul>\n<h2 id=\"成长系统\"><a href=\"#成长系统\" class=\"headerlink\" title=\"成长系统\"></a>成长系统</h2><p><img src=\"/images/continuous_action.png\" alt></p>\n<h2 id=\"如何行动\"><a href=\"#如何行动\" class=\"headerlink\" title=\"如何行动\"></a>如何行动</h2><h4 id=\"松散到紧凑\"><a href=\"#松散到紧凑\" class=\"headerlink\" title=\"松散到紧凑\"></a>松散到紧凑</h4><ul>\n<li>建立合理的作息</li>\n<li>坚定的坚持下去</li>\n</ul>\n<h4 id=\"耐得住寂寞：没有成就感也要行动\"><a href=\"#耐得住寂寞：没有成就感也要行动\" class=\"headerlink\" title=\"耐得住寂寞：没有成就感也要行动\"></a>耐得住寂寞：没有成就感也要行动</h4><ul>\n<li>持续行动的要义就在于持续，不要以任何理由打破自己定下的原则</li>\n<li>不依靠透支未来的成就感，作为坚持下去的动力</li>\n</ul>\n<h4 id=\"​克服拖延\"><a href=\"#​克服拖延\" class=\"headerlink\" title=\"​克服拖延\"></a>​克服拖延</h4><ul>\n<li>五分钟内能做完的事，现在立即做。五分钟做不完的，现在开始做一部分。</li>\n</ul>\n<h4 id=\"放大对未来的感知\"><a href=\"#放大对未来的感知\" class=\"headerlink\" title=\"放大对未来的感知\"></a>放大对未来的感知</h4><ul>\n<li>提前完成任务，而不是到deadline</li>\n<li>不要高度自己的能力，低估自己完成任务所需的时间</li>\n<li>时刻警醒自己，让自己感知着未来不完成任务带来的后果</li>\n</ul>\n<h4 id=\"早起是拓宽增量\"><a href=\"#早起是拓宽增量\" class=\"headerlink\" title=\"早起是拓宽增量\"></a>早起是拓宽增量</h4><ul>\n<li>更高效的利用时间，有两个途径。一是“存量优化”，在现有的作息时间中，更高效的利用时间。二是“拓宽增量”，也就是增加可支配的时间。</li>\n<li>对于大多数人来说，“存量优化”是很难的，也是有瓶颈的，因此“拓宽增量”是更好的选择。</li>\n<li>“拓宽增量”意味着压缩睡眠时间，起的更早显然比睡的更晚对身体更有利，并且清晨的时光，更以利用。</li>\n</ul>\n<h4 id=\"投资资源（时间-金钱）\"><a href=\"#投资资源（时间-金钱）\" class=\"headerlink\" title=\"投资资源（时间+金钱）\"></a>投资资源（时间+金钱）</h4><ul>\n<li>首先，投资自己是一种收益最高的投入，不能因为惜钱，而去绕弯路，去用时间换钱</li>\n<li>其次，投资自己不光意味花钱，花钱只是获得了更好的资源，真正的成长，需要你投入时间去持续行动</li>\n</ul>\n<h4 id=\"信息分级，对海量信息抗压\"><a href=\"#信息分级，对海量信息抗压\" class=\"headerlink\" title=\"信息分级，对海量信息抗压\"></a>信息分级，对海量信息抗压</h4><ul>\n<li>面对海量的信息，不因噎废食，直接切断所有的信息源</li>\n<li>不自我焦虑，培养抗压能力，克服“永远刷不完的小红点”带来的焦虑不安</li>\n<li>形成对信息分级的系统，主动的对信息分级，知道自己想要什么</li>\n</ul>\n<h2 id=\"关于n阶行动计划\"><a href=\"#关于n阶行动计划\" class=\"headerlink\" title=\"关于n阶行动计划\"></a>关于n阶行动计划</h2><table>\n<thead>\n<tr>\n<th>阶数</th>\n<th>时长</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一</td>\n<td>10^1 = 10天，一个周</td>\n<td>瓶颈在于执行力，行动系统有问题</td>\n</tr>\n<tr>\n<td>二</td>\n<td>10^2 = 100天，三个月</td>\n<td>瓶颈在于学习系统和格局，有一定执行力，但是需要完善学习系统，升华格局</td>\n</tr>\n<tr>\n<td>三</td>\n<td>10^3 = 1000天，三年</td>\n<td>时间足够长，能够见到真正的对复杂系统的改变，形成了思维惯性和依赖路径，瓶颈在于创新、重构、与时俱进</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于1000天持续行动计划\"><a href=\"#关于1000天持续行动计划\" class=\"headerlink\" title=\"关于1000天持续行动计划\"></a>关于1000天持续行动计划</h2><h4 id=\"开局阶段：0-300天\"><a href=\"#开局阶段：0-300天\" class=\"headerlink\" title=\"开局阶段：0-300天\"></a>开局阶段：0-300天</h4><ul>\n<li>认清自我，了解现状，认清现实，找出“我能做的”和“我想做的”之间的差距</li>\n<li>仅能完成任务，倒逼自己</li>\n</ul>\n<h4 id=\"中盘持续阶段：200-600天\"><a href=\"#中盘持续阶段：200-600天\" class=\"headerlink\" title=\"中盘持续阶段：200-600天\"></a>中盘持续阶段：200-600天</h4><ul>\n<li>补足不全，缩短“我能做的”和“我想做的”之间的差距</li>\n<li>能每天完成任务，并在其基础上有所进步</li>\n</ul>\n<h4 id=\"突破创新阶段：600-1000天\"><a href=\"#突破创新阶段：600-1000天\" class=\"headerlink\" title=\"突破创新阶段：600-1000天\"></a>突破创新阶段：600-1000天</h4><ul>\n<li>突破现有的固定模式，打破思维惯性</li>\n<li>根据环境的改变，做出新的规划，升华行动</li>\n</ul>\n<p><small>希望你看完，能做点什么</small></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"书的主旨-持续行动-持续学习\"><a href=\"#书的主旨-持续行动-持续学习\" class=\"headerlink\" title=\"书的主旨 : 持续行动 + 持续学习\"></a>书的主旨 : 持续行动 + 持续学习</h2><h2 id=\"为什么要持续行动\"><a href=\"#为什么要持续行动\" class=\"headerlink\" title=\"为什么要持续行动\"></a>为什么要持续行动</h2><h4 id=\"为了成长\"><a href=\"#为了成长\" class=\"headerlink\" title=\"为了成长\"></a>为了成长</h4><ul>\n<li>生而为成长，在这个变化万千的时代，不进则退。</li>\n</ul>\n<h4 id=\"跳出困境，重构现在与未来\"><a href=\"#跳出困境，重构现在与未来\" class=\"headerlink\" title=\"跳出困境，重构现在与未来\"></a>跳出困境，重构现在与未来</h4><ul>\n<li>现状有多痛苦，过往有多不堪，持续行动就该有多深。</li>\n<li>“悟已往之不谏，知来者之可追”，我们的原生家庭、出身条件、容貌身体发肤、以及过去的种种，都是不可变的默认参数，只能靠当下的行动，去改变未来的轨迹。</li>\n</ul>\n<h2 id=\"正确的自我认知\"><a href=\"#正确的自我认知\" class=\"headerlink\" title=\"正确的自我认知\"></a>正确的自我认知</h2><h4 id=\"拒绝自我感动\"><a href=\"#拒绝自我感动\" class=\"headerlink\" title=\"拒绝自我感动\"></a>拒绝自我感动</h4><ul>\n<li>正是因为做得少，才容易“感动”，自欺欺人。</li>\n<li>提前透支快感：为自己定下宏大的目标，并为之沾沾自喜，提前透支着目标达成的快感，真正要开始做事便耐不住寂寞开始放弃</li>\n</ul>\n<h4 id=\"拒绝“强及时反馈”\"><a href=\"#拒绝“强及时反馈”\" class=\"headerlink\" title=\"拒绝“强及时反馈”\"></a>拒绝“强及时反馈”</h4><ul>\n<li>我们与外界互动，通常渴望强及时反馈，得不到变容易焦虑、急躁。</li>\n<li>强及时反馈对复杂系统是不起作用的:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>复杂系统</th>\n<th>行为</th>\n<th>强及时反馈</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>人的身体系统</td>\n<td>跑一次步</td>\n<td>变瘦变健康</td>\n</tr>\n<tr>\n<td>大海</td>\n<td>撒一泡尿</td>\n<td>变脏</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"不要过度依赖技巧\"><a href=\"#不要过度依赖技巧\" class=\"headerlink\" title=\"不要过度依赖技巧\"></a>不要过度依赖技巧</h4><ul>\n<li>投机取巧是追求强即时反馈的表现</li>\n<li>过度追逐技巧的人，往往缺乏行动量</li>\n<li>能用思路解决的问题，尽量不用技巧。从全局的层面看问题，理清逻辑思路，而不是抓住某个细节投机取巧</li>\n</ul>\n<h4 id=\"不要标榜-贴标签，去行动\"><a href=\"#不要标榜-贴标签，去行动\" class=\"headerlink\" title=\"不要标榜/贴标签，去行动\"></a>不要标榜/贴标签，去行动</h4><ul>\n<li>通过标榜自己是谁，给自己贴标签，并且能马上得到本来要经过努力做成事才嗯那个得到的反馈，就不会再踏实的做事了。</li>\n<li>通过“宣称”自己写作、在GRE、在奋斗，快速透支大量快感，往往时不会他是做事的。</li>\n</ul>\n<h4 id=\"不要自我迷恋，高估自己\"><a href=\"#不要自我迷恋，高估自己\" class=\"headerlink\" title=\"不要自我迷恋，高估自己\"></a>不要自我迷恋，高估自己</h4><ul>\n<li>不要做事无巨细的完美主义者：等到把所有的因素都准备完美再开工。不如先把一部分事情做起来。</li>\n<li>制定计划时，总是雄心勃勃，透支着未来的成就感，高估自己的能力，往往开始正真做事的时候，更容易放弃。</li>\n</ul>\n<h4 id=\"放大格局\"><a href=\"#放大格局\" class=\"headerlink\" title=\"放大格局\"></a>放大格局</h4><ul>\n<li>人是一种容易短视的动物，因为我们的圈子往往比整个世界小的太多太多微乎其微，这种短视会带来认知偏差，让我们做出错误的判断</li>\n<li>时不时跳出自己的圈子，主动接触外界信息，不要过度相信自己的认知，是提升格局的关键</li>\n</ul>\n<h2 id=\"成长系统\"><a href=\"#成长系统\" class=\"headerlink\" title=\"成长系统\"></a>成长系统</h2><p><img src=\"/images/continuous_action.png\" alt></p>\n<h2 id=\"如何行动\"><a href=\"#如何行动\" class=\"headerlink\" title=\"如何行动\"></a>如何行动</h2><h4 id=\"松散到紧凑\"><a href=\"#松散到紧凑\" class=\"headerlink\" title=\"松散到紧凑\"></a>松散到紧凑</h4><ul>\n<li>建立合理的作息</li>\n<li>坚定的坚持下去</li>\n</ul>\n<h4 id=\"耐得住寂寞：没有成就感也要行动\"><a href=\"#耐得住寂寞：没有成就感也要行动\" class=\"headerlink\" title=\"耐得住寂寞：没有成就感也要行动\"></a>耐得住寂寞：没有成就感也要行动</h4><ul>\n<li>持续行动的要义就在于持续，不要以任何理由打破自己定下的原则</li>\n<li>不依靠透支未来的成就感，作为坚持下去的动力</li>\n</ul>\n<h4 id=\"​克服拖延\"><a href=\"#​克服拖延\" class=\"headerlink\" title=\"​克服拖延\"></a>​克服拖延</h4><ul>\n<li>五分钟内能做完的事，现在立即做。五分钟做不完的，现在开始做一部分。</li>\n</ul>\n<h4 id=\"放大对未来的感知\"><a href=\"#放大对未来的感知\" class=\"headerlink\" title=\"放大对未来的感知\"></a>放大对未来的感知</h4><ul>\n<li>提前完成任务，而不是到deadline</li>\n<li>不要高度自己的能力，低估自己完成任务所需的时间</li>\n<li>时刻警醒自己，让自己感知着未来不完成任务带来的后果</li>\n</ul>\n<h4 id=\"早起是拓宽增量\"><a href=\"#早起是拓宽增量\" class=\"headerlink\" title=\"早起是拓宽增量\"></a>早起是拓宽增量</h4><ul>\n<li>更高效的利用时间，有两个途径。一是“存量优化”，在现有的作息时间中，更高效的利用时间。二是“拓宽增量”，也就是增加可支配的时间。</li>\n<li>对于大多数人来说，“存量优化”是很难的，也是有瓶颈的，因此“拓宽增量”是更好的选择。</li>\n<li>“拓宽增量”意味着压缩睡眠时间，起的更早显然比睡的更晚对身体更有利，并且清晨的时光，更以利用。</li>\n</ul>\n<h4 id=\"投资资源（时间-金钱）\"><a href=\"#投资资源（时间-金钱）\" class=\"headerlink\" title=\"投资资源（时间+金钱）\"></a>投资资源（时间+金钱）</h4><ul>\n<li>首先，投资自己是一种收益最高的投入，不能因为惜钱，而去绕弯路，去用时间换钱</li>\n<li>其次，投资自己不光意味花钱，花钱只是获得了更好的资源，真正的成长，需要你投入时间去持续行动</li>\n</ul>\n<h4 id=\"信息分级，对海量信息抗压\"><a href=\"#信息分级，对海量信息抗压\" class=\"headerlink\" title=\"信息分级，对海量信息抗压\"></a>信息分级，对海量信息抗压</h4><ul>\n<li>面对海量的信息，不因噎废食，直接切断所有的信息源</li>\n<li>不自我焦虑，培养抗压能力，克服“永远刷不完的小红点”带来的焦虑不安</li>\n<li>形成对信息分级的系统，主动的对信息分级，知道自己想要什么</li>\n</ul>\n<h2 id=\"关于n阶行动计划\"><a href=\"#关于n阶行动计划\" class=\"headerlink\" title=\"关于n阶行动计划\"></a>关于n阶行动计划</h2><table>\n<thead>\n<tr>\n<th>阶数</th>\n<th>时长</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一</td>\n<td>10^1 = 10天，一个周</td>\n<td>瓶颈在于执行力，行动系统有问题</td>\n</tr>\n<tr>\n<td>二</td>\n<td>10^2 = 100天，三个月</td>\n<td>瓶颈在于学习系统和格局，有一定执行力，但是需要完善学习系统，升华格局</td>\n</tr>\n<tr>\n<td>三</td>\n<td>10^3 = 1000天，三年</td>\n<td>时间足够长，能够见到真正的对复杂系统的改变，形成了思维惯性和依赖路径，瓶颈在于创新、重构、与时俱进</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于1000天持续行动计划\"><a href=\"#关于1000天持续行动计划\" class=\"headerlink\" title=\"关于1000天持续行动计划\"></a>关于1000天持续行动计划</h2><h4 id=\"开局阶段：0-300天\"><a href=\"#开局阶段：0-300天\" class=\"headerlink\" title=\"开局阶段：0-300天\"></a>开局阶段：0-300天</h4><ul>\n<li>认清自我，了解现状，认清现实，找出“我能做的”和“我想做的”之间的差距</li>\n<li>仅能完成任务，倒逼自己</li>\n</ul>\n<h4 id=\"中盘持续阶段：200-600天\"><a href=\"#中盘持续阶段：200-600天\" class=\"headerlink\" title=\"中盘持续阶段：200-600天\"></a>中盘持续阶段：200-600天</h4><ul>\n<li>补足不全，缩短“我能做的”和“我想做的”之间的差距</li>\n<li>能每天完成任务，并在其基础上有所进步</li>\n</ul>\n<h4 id=\"突破创新阶段：600-1000天\"><a href=\"#突破创新阶段：600-1000天\" class=\"headerlink\" title=\"突破创新阶段：600-1000天\"></a>突破创新阶段：600-1000天</h4><ul>\n<li>突破现有的固定模式，打破思维惯性</li>\n<li>根据环境的改变，做出新的规划，升华行动</li>\n</ul>\n<p><small>希望你看完，能做点什么</small></p>\n"},{"title":"本博客折腾记录","comments":1,"date":"2017-12-31T16:00:00.000Z","description":"每日一折腾，不折腾难受。","toc":0,"_content":"## TODO\n- 响应式重构\n\n## 变更记录\n- **全部文章**tab页，文章标题下的描述，改为隐藏，hover泡泡显示\n- gitbook文章全部迁移至blog，gitbook废弃\n- 用腾讯兔小巢搭留言板\n- **全部文章**tab页，文章标题下增加描述\n- 从**emojipedia.org**添加全站emoji\n- 页首布局更改为一行，去除gitbook链接\n- 增加暗色模式\n- rss链接改为打开新页面\n- 替换幼稚的置顶按钮\n- 增加apps在线工具tab\n- 博客计时\n![博客计时](/images/blog/blog-counter.gifs)\n- Gitbook\n- Google Adsense广告\n- categories分类排序\n- 返回顶部控件\n  \n\n## 主题 & 个性化样式\n\n#### 1. Hexo 主题：[Maupassant Theme](https://github.com/tufu9441/maupassant-hexo/)\n挑主题的时候一眼就看上了这个主题，简约直白X冷淡\n\n#### 2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\n以主题的pug模板，source中sass样式文件等资源味为基础，根据个人喜欢DIY即可。\n\n有需要可以去[我的博客仓库](https://github.com/scarsu/ScarSuHexo_Netlify.git)自取。\n\n#### 3. 一些参考：\n[hexo官网](https://hexo.io/)\n\n[pug模板语言文档](https://pugjs.org/api/getting-started.html)\n\n[sass文档](https://www.sass.hk/)\n\n## 配置腾讯公益404页面\n1.  在博客代码仓库的/source/404/路径下，新建index.md\n```md\n---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\ndescription: 腾讯404公益页面\n---\n\n<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                \n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"></script>\n\t</body>\n</html>\n\n```\n\n2. 重新构建打包更新即可看到效果，如输入一个不存在的路由会出现公益404页面：[https://www.scarsu.com/qqq](https://www.scarsu.com/qqq)，直接输入/404路由也会出[https://www.scarsu.com/404](https://www.scarsu.com/qqq)\n\n3. 可能会出现本地构建时找不到/404页面的现象，此时可以直接打包到服务器测试。\n\n## 博客评论控件\n\n#### **Gitment**\n[gitment repo](https://github.com/imsun/gitment)\n\n去[Github Auth Applications](https://github.com/settings/applications/new)为你的网站注册一个应用：\n```\nApplication name: 应用名\nHomepage URL: 你的网站地址 #eg. https://www.scarsu.com\nApplication description: 描述\nAuthorization callback URL: 你的网站地址 #如 https://www.scarsu.com\n```\n\n博客配置：\n```yaml\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n    enable: true ## If you want to use Gitment comment system please set the value to true.\n    owner: github用户名 ## Your GitHub ID, 直接用GitHub用户名就可以\n    repo: repo地址 ## The repository to store your comments, make sure you're the repo's owner, 要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的\n    client_id: 刚才申请的ClientID ## GitHub client ID\n    client_secret: 刚才申请的ClientSecret ## GitHub client secret\n```\n\n本地安装gitment，并在项目中添加依赖：\n```\nnpm i --save gitment\n\n```\n\n\n**gitment自2018年起原作者的CORS header服务已经停了，貌似至今暂未维护，不过这个服务的源代码已经开源，很简单的nodejs代码，如果由服务器可以自己启一个服务，我目前用的是这个地址：https://shimeng.info/api/oauth ，手动在gitment.browser.js中把 https://gh-oauth.imsun.net 替换成上述服务地址即可**\n\n\n- **Disqus**[需要FQ，已经弃用-20191212]\n在disqus官网注册账户，在主题配置文件中开启disqus评论控件:\n```yaml\n# Comment 评论相关\ndisqus: username ## Disqus评论 Your disqus_shortname, e.g. username\n```\n\n## SEO\n#### 谷歌网站收录 [链接](https://search.google.com/search-console)\n- 先录入资源类型：域名/网站,录入后需要验证所有权\n\n![](/images/google_search.png)\n\n- 域名类型需要更改dns配置验证，可以一次性验证域名下所有子域名/所有协议的网站（我选了这种）\n- 网站类型支持的验证方法比较多，但是同一个域名对应的不同协议/子域名，都需要重复验证\n\n![](/images/google_search2.png)\n\n- 域名验证方法：在你托管域名的dns服务商配置dns记录，添加一条`txt类型`的`dns记录`，值为上图中谷歌给出的`txt值`，name选择`@`即可：\n\n![](/images/google_search3.png)\n\n- 下图为验证成功截图：\n![](/images/google_search4.png)\n\n- 验证通过后一天，就可以在[google search console](https://search.google.com/search-console)中看到你的域名/网址的数据，例如你的资源在 Google 搜索中的效果，包括展示次数、排名、点击率和热门查询字符串等。\n\n- 收录后，在google[搜索](https://www.google.com/search?sxsrf=ACYBGNSCTqnOP_ApOR1wZYv_3q6MiE4vMA%3A1577335257845&ei=2TkEXsejM5CqoAS0mpjYAw&q=scarsu&oq=scarsu&gs_l=psy-ab.3..0l2.3443.4420..4700...0.0..0.184.1007.0j7......0....1..gws-wiz.......35i39j0i67j0i12j0i12i131j0i131j0i10.8hbvD9zN8Aw&ved=0ahUKEwiH9PDdv9LmAhUQFYgKHTQNBjsQ4dUDCAs&uact=5)我的网站的关键词，就可以在第一条看到结果:\n  \n![](/images/google_search5.png)\n\n#### 百度链接提交工具 [链接](https://ziyuan.baidu.com/linksubmit/url)\n百度链接提交工具使用说明\n> 1. 链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。本工具可加快爬虫抓取速度，无法解决网站内容是否收录问题\n> 2. 百度搜索资源平台为站长提供链接提交通道，您可以提交想被百度收录的链接，百度搜索引擎会按照标准处理，但不保证一定能够收录您提交的链接\n\n如：我提交自己的www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：\n\n![](/images/blog/scarsu-baidu.jpg)\n\n#### 神马搜索站长平台 [链接](https://zhanzhang.sm.cn/)\n配置的时候遇到了一个坑，神马搜索站长平台需要验证对提交的网站的所有权 怎么也验证不通过：\n![神马验证](/images/blog/shenma.pngs)\n\n后来才检索到，是神马不支持对https的站点进行验证，。\n\n由于我的站点部署在netlify上，因此决定放弃神马平台的收录\n\n#### Bing 网站收录[链接](https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired)\n\n- 十分遗憾，截止至2019-12-26我打开上述网址，网站已经显示`Anonymous URL Submission Tool Being Retired`，即Bing的匿名URL提交工具已经停用。\n\n#### 360网站收录[链接](http://info.so.360.cn/site_submit.html)\n- 没有验证，填写信息提交即可\n\n#### 搜狗收录 [链接](http://fankui.help.sogou.com/index.php/)\n- 没有验证，填写信息提交即可\n- \n#### 提交至 “中文独立博客列表” https://github.com/timqian/chinese-independent-blogs\n\nfork[此仓库](https://github.com/timqian/chinese-independent-blogs)，blogs-original.csv中维护自己的博客后，提pull request即可。\n\n\n\n\n---\n\n     “不疯魔 不成活”\n","source":"_posts/blog_history.md","raw":"---\ntitle: 本博客折腾记录 # 文章标题\ncategories:\n    - 01关于 # 一级分类\ntags:\ncomments: true #开启评论\ndate: 2018-01-01\ndescription: 每日一折腾，不折腾难受。\ntoc: 0\n---\n## TODO\n- 响应式重构\n\n## 变更记录\n- **全部文章**tab页，文章标题下的描述，改为隐藏，hover泡泡显示\n- gitbook文章全部迁移至blog，gitbook废弃\n- 用腾讯兔小巢搭留言板\n- **全部文章**tab页，文章标题下增加描述\n- 从**emojipedia.org**添加全站emoji\n- 页首布局更改为一行，去除gitbook链接\n- 增加暗色模式\n- rss链接改为打开新页面\n- 替换幼稚的置顶按钮\n- 增加apps在线工具tab\n- 博客计时\n![博客计时](/images/blog/blog-counter.gifs)\n- Gitbook\n- Google Adsense广告\n- categories分类排序\n- 返回顶部控件\n  \n\n## 主题 & 个性化样式\n\n#### 1. Hexo 主题：[Maupassant Theme](https://github.com/tufu9441/maupassant-hexo/)\n挑主题的时候一眼就看上了这个主题，简约直白X冷淡\n\n#### 2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\n以主题的pug模板，source中sass样式文件等资源味为基础，根据个人喜欢DIY即可。\n\n有需要可以去[我的博客仓库](https://github.com/scarsu/ScarSuHexo_Netlify.git)自取。\n\n#### 3. 一些参考：\n[hexo官网](https://hexo.io/)\n\n[pug模板语言文档](https://pugjs.org/api/getting-started.html)\n\n[sass文档](https://www.sass.hk/)\n\n## 配置腾讯公益404页面\n1.  在博客代码仓库的/source/404/路径下，新建index.md\n```md\n---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\ndescription: 腾讯404公益页面\n---\n\n<!DOCTYPE html>\n<html>\n    <head>\n         <meta charset=\"UTF-8\" />\n         <title>404</title>                                                \n    </head>\n    <body>\n         <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"></script>\n\t</body>\n</html>\n\n```\n\n2. 重新构建打包更新即可看到效果，如输入一个不存在的路由会出现公益404页面：[https://www.scarsu.com/qqq](https://www.scarsu.com/qqq)，直接输入/404路由也会出[https://www.scarsu.com/404](https://www.scarsu.com/qqq)\n\n3. 可能会出现本地构建时找不到/404页面的现象，此时可以直接打包到服务器测试。\n\n## 博客评论控件\n\n#### **Gitment**\n[gitment repo](https://github.com/imsun/gitment)\n\n去[Github Auth Applications](https://github.com/settings/applications/new)为你的网站注册一个应用：\n```\nApplication name: 应用名\nHomepage URL: 你的网站地址 #eg. https://www.scarsu.com\nApplication description: 描述\nAuthorization callback URL: 你的网站地址 #如 https://www.scarsu.com\n```\n\n博客配置：\n```yaml\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n    enable: true ## If you want to use Gitment comment system please set the value to true.\n    owner: github用户名 ## Your GitHub ID, 直接用GitHub用户名就可以\n    repo: repo地址 ## The repository to store your comments, make sure you're the repo's owner, 要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的\n    client_id: 刚才申请的ClientID ## GitHub client ID\n    client_secret: 刚才申请的ClientSecret ## GitHub client secret\n```\n\n本地安装gitment，并在项目中添加依赖：\n```\nnpm i --save gitment\n\n```\n\n\n**gitment自2018年起原作者的CORS header服务已经停了，貌似至今暂未维护，不过这个服务的源代码已经开源，很简单的nodejs代码，如果由服务器可以自己启一个服务，我目前用的是这个地址：https://shimeng.info/api/oauth ，手动在gitment.browser.js中把 https://gh-oauth.imsun.net 替换成上述服务地址即可**\n\n\n- **Disqus**[需要FQ，已经弃用-20191212]\n在disqus官网注册账户，在主题配置文件中开启disqus评论控件:\n```yaml\n# Comment 评论相关\ndisqus: username ## Disqus评论 Your disqus_shortname, e.g. username\n```\n\n## SEO\n#### 谷歌网站收录 [链接](https://search.google.com/search-console)\n- 先录入资源类型：域名/网站,录入后需要验证所有权\n\n![](/images/google_search.png)\n\n- 域名类型需要更改dns配置验证，可以一次性验证域名下所有子域名/所有协议的网站（我选了这种）\n- 网站类型支持的验证方法比较多，但是同一个域名对应的不同协议/子域名，都需要重复验证\n\n![](/images/google_search2.png)\n\n- 域名验证方法：在你托管域名的dns服务商配置dns记录，添加一条`txt类型`的`dns记录`，值为上图中谷歌给出的`txt值`，name选择`@`即可：\n\n![](/images/google_search3.png)\n\n- 下图为验证成功截图：\n![](/images/google_search4.png)\n\n- 验证通过后一天，就可以在[google search console](https://search.google.com/search-console)中看到你的域名/网址的数据，例如你的资源在 Google 搜索中的效果，包括展示次数、排名、点击率和热门查询字符串等。\n\n- 收录后，在google[搜索](https://www.google.com/search?sxsrf=ACYBGNSCTqnOP_ApOR1wZYv_3q6MiE4vMA%3A1577335257845&ei=2TkEXsejM5CqoAS0mpjYAw&q=scarsu&oq=scarsu&gs_l=psy-ab.3..0l2.3443.4420..4700...0.0..0.184.1007.0j7......0....1..gws-wiz.......35i39j0i67j0i12j0i12i131j0i131j0i10.8hbvD9zN8Aw&ved=0ahUKEwiH9PDdv9LmAhUQFYgKHTQNBjsQ4dUDCAs&uact=5)我的网站的关键词，就可以在第一条看到结果:\n  \n![](/images/google_search5.png)\n\n#### 百度链接提交工具 [链接](https://ziyuan.baidu.com/linksubmit/url)\n百度链接提交工具使用说明\n> 1. 链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。本工具可加快爬虫抓取速度，无法解决网站内容是否收录问题\n> 2. 百度搜索资源平台为站长提供链接提交通道，您可以提交想被百度收录的链接，百度搜索引擎会按照标准处理，但不保证一定能够收录您提交的链接\n\n如：我提交自己的www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：\n\n![](/images/blog/scarsu-baidu.jpg)\n\n#### 神马搜索站长平台 [链接](https://zhanzhang.sm.cn/)\n配置的时候遇到了一个坑，神马搜索站长平台需要验证对提交的网站的所有权 怎么也验证不通过：\n![神马验证](/images/blog/shenma.pngs)\n\n后来才检索到，是神马不支持对https的站点进行验证，。\n\n由于我的站点部署在netlify上，因此决定放弃神马平台的收录\n\n#### Bing 网站收录[链接](https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired)\n\n- 十分遗憾，截止至2019-12-26我打开上述网址，网站已经显示`Anonymous URL Submission Tool Being Retired`，即Bing的匿名URL提交工具已经停用。\n\n#### 360网站收录[链接](http://info.so.360.cn/site_submit.html)\n- 没有验证，填写信息提交即可\n\n#### 搜狗收录 [链接](http://fankui.help.sogou.com/index.php/)\n- 没有验证，填写信息提交即可\n- \n#### 提交至 “中文独立博客列表” https://github.com/timqian/chinese-independent-blogs\n\nfork[此仓库](https://github.com/timqian/chinese-independent-blogs)，blogs-original.csv中维护自己的博客后，提pull request即可。\n\n\n\n\n---\n\n     “不疯魔 不成活”\n","slug":"blog_history","published":1,"updated":"2021-01-22T03:28:21.131Z","_id":"ckir88ifr001ec8y6nxzocntr","layout":"post","photos":[],"link":"","content":"<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li>响应式重构</li>\n</ul>\n<h2 id=\"变更记录\"><a href=\"#变更记录\" class=\"headerlink\" title=\"变更记录\"></a>变更记录</h2><ul>\n<li><strong>全部文章</strong>tab页，文章标题下的描述，改为隐藏，hover泡泡显示</li>\n<li>gitbook文章全部迁移至blog，gitbook废弃</li>\n<li>用腾讯兔小巢搭留言板</li>\n<li><strong>全部文章</strong>tab页，文章标题下增加描述</li>\n<li>从<strong>emojipedia.org</strong>添加全站emoji</li>\n<li>页首布局更改为一行，去除gitbook链接</li>\n<li>增加暗色模式</li>\n<li>rss链接改为打开新页面</li>\n<li>替换幼稚的置顶按钮</li>\n<li>增加apps在线工具tab</li>\n<li>博客计时<br><img src=\"/images/blog/blog-counter.gifs\" alt=\"博客计时\"></li>\n<li>Gitbook</li>\n<li>Google Adsense广告</li>\n<li>categories分类排序</li>\n<li>返回顶部控件</li>\n</ul>\n<h2 id=\"主题-amp-个性化样式\"><a href=\"#主题-amp-个性化样式\" class=\"headerlink\" title=\"主题 &amp; 个性化样式\"></a>主题 &amp; 个性化样式</h2><h4 id=\"1-Hexo-主题：Maupassant-Theme\"><a href=\"#1-Hexo-主题：Maupassant-Theme\" class=\"headerlink\" title=\"1. Hexo 主题：Maupassant Theme\"></a>1. Hexo 主题：<a href=\"https://github.com/tufu9441/maupassant-hexo/\" target=\"_blank\" rel=\"noopener\">Maupassant Theme</a></h4><p>挑主题的时候一眼就看上了这个主题，简约直白X冷淡</p>\n<h4 id=\"2-个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\"><a href=\"#2-个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\" class=\"headerlink\" title=\"2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\"></a>2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式</h4><p>以主题的pug模板，source中sass样式文件等资源味为基础，根据个人喜欢DIY即可。</p>\n<p>有需要可以去<a href=\"https://github.com/scarsu/ScarSuHexo_Netlify.git\" target=\"_blank\" rel=\"noopener\">我的博客仓库</a>自取。</p>\n<h4 id=\"3-一些参考：\"><a href=\"#3-一些参考：\" class=\"headerlink\" title=\"3. 一些参考：\"></a>3. 一些参考：</h4><p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo官网</a></p>\n<p><a href=\"https://pugjs.org/api/getting-started.html\" target=\"_blank\" rel=\"noopener\">pug模板语言文档</a></p>\n<p><a href=\"https://www.sass.hk/\" target=\"_blank\" rel=\"noopener\">sass文档</a></p>\n<h2 id=\"配置腾讯公益404页面\"><a href=\"#配置腾讯公益404页面\" class=\"headerlink\" title=\"配置腾讯公益404页面\"></a>配置腾讯公益404页面</h2><ol>\n<li><p>在博客代码仓库的/source/404/路径下，新建index.md</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 404 Not Found：该页无法显示</span><br><span class=\"line\">toc: false</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">permalink: /404</span><br><span class=\"line\">description: 腾讯404公益页面</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;meta charset=\"UTF-8\" /&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;title&gt;404&lt;/title&gt;                                                </span></span><br><span class=\"line\"><span class=\"code\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新构建打包更新即可看到效果，如输入一个不存在的路由会出现公益404页面：<a href=\"https://www.scarsu.com/qqq\">https://www.scarsu.com/qqq</a>，直接输入/404路由也会出<a href=\"https://www.scarsu.com/qqq\">https://www.scarsu.com/404</a></p>\n</li>\n<li><p>可能会出现本地构建时找不到/404页面的现象，此时可以直接打包到服务器测试。</p>\n</li>\n</ol>\n<h2 id=\"博客评论控件\"><a href=\"#博客评论控件\" class=\"headerlink\" title=\"博客评论控件\"></a>博客评论控件</h2><h4 id=\"Gitment\"><a href=\"#Gitment\" class=\"headerlink\" title=\"Gitment\"></a><strong>Gitment</strong></h4><p><a href=\"https://github.com/imsun/gitment\" target=\"_blank\" rel=\"noopener\">gitment repo</a></p>\n<p>去<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">Github Auth Applications</a>为你的网站注册一个应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application name: 应用名</span><br><span class=\"line\">Homepage URL: 你的网站地址 #eg. https://www.scarsu.com</span><br><span class=\"line\">Application description: 描述</span><br><span class=\"line\">Authorization callback URL: 你的网站地址 #如 https://www.scarsu.com</span><br></pre></td></tr></table></figure></p>\n<p>博客配置：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitment</span></span><br><span class=\"line\"><span class=\"comment\"># Introduction: https://imsun.net/posts/gitment-introduction/</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">## If you want to use Gitment comment system please set the value to true.</span></span><br><span class=\"line\">    <span class=\"attr\">owner:</span> <span class=\"string\">github用户名</span> <span class=\"comment\">## Your GitHub ID, 直接用GitHub用户名就可以</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">repo地址</span> <span class=\"comment\">## The repository to store your comments, make sure you're the repo's owner, 要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的</span></span><br><span class=\"line\">    <span class=\"attr\">client_id:</span> <span class=\"string\">刚才申请的ClientID</span> <span class=\"comment\">## GitHub client ID</span></span><br><span class=\"line\">    <span class=\"attr\">client_secret:</span> <span class=\"string\">刚才申请的ClientSecret</span> <span class=\"comment\">## GitHub client secret</span></span><br></pre></td></tr></table></figure></p>\n<p>本地安装gitment，并在项目中添加依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save gitment</span><br></pre></td></tr></table></figure></p>\n<p><strong>gitment自2018年起原作者的CORS header服务已经停了，貌似至今暂未维护，不过这个服务的源代码已经开源，很简单的nodejs代码，如果由服务器可以自己启一个服务，我目前用的是这个地址：<a href=\"https://shimeng.info/api/oauth\" target=\"_blank\" rel=\"noopener\">https://shimeng.info/api/oauth</a> ，手动在gitment.browser.js中把 <a href=\"https://gh-oauth.imsun.net\" target=\"_blank\" rel=\"noopener\">https://gh-oauth.imsun.net</a> 替换成上述服务地址即可</strong></p>\n<ul>\n<li><strong>Disqus</strong>[需要FQ，已经弃用-20191212]<br>在disqus官网注册账户，在主题配置文件中开启disqus评论控件:<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Comment 评论相关</span></span><br><span class=\"line\"><span class=\"attr\">disqus:</span> <span class=\"string\">username</span> <span class=\"comment\">## Disqus评论 Your disqus_shortname, e.g. username</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h2><h4 id=\"谷歌网站收录-链接\"><a href=\"#谷歌网站收录-链接\" class=\"headerlink\" title=\"谷歌网站收录 链接\"></a>谷歌网站收录 <a href=\"https://search.google.com/search-console\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>先录入资源类型：域名/网站,录入后需要验证所有权</li>\n</ul>\n<p><img src=\"/images/google_search.png\" alt></p>\n<ul>\n<li>域名类型需要更改dns配置验证，可以一次性验证域名下所有子域名/所有协议的网站（我选了这种）</li>\n<li>网站类型支持的验证方法比较多，但是同一个域名对应的不同协议/子域名，都需要重复验证</li>\n</ul>\n<p><img src=\"/images/google_search2.png\" alt></p>\n<ul>\n<li>域名验证方法：在你托管域名的dns服务商配置dns记录，添加一条<code>txt类型</code>的<code>dns记录</code>，值为上图中谷歌给出的<code>txt值</code>，name选择<code>@</code>即可：</li>\n</ul>\n<p><img src=\"/images/google_search3.png\" alt></p>\n<ul>\n<li><p>下图为验证成功截图：<br><img src=\"/images/google_search4.png\" alt></p>\n</li>\n<li><p>验证通过后一天，就可以在<a href=\"https://search.google.com/search-console\" target=\"_blank\" rel=\"noopener\">google search console</a>中看到你的域名/网址的数据，例如你的资源在 Google 搜索中的效果，包括展示次数、排名、点击率和热门查询字符串等。</p>\n</li>\n<li><p>收录后，在google<a href=\"https://www.google.com/search?sxsrf=ACYBGNSCTqnOP_ApOR1wZYv_3q6MiE4vMA%3A1577335257845&amp;ei=2TkEXsejM5CqoAS0mpjYAw&amp;q=scarsu&amp;oq=scarsu&amp;gs_l=psy-ab.3..0l2.3443.4420..4700...0.0..0.184.1007.0j7......0....1..gws-wiz.......35i39j0i67j0i12j0i12i131j0i131j0i10.8hbvD9zN8Aw&amp;ved=0ahUKEwiH9PDdv9LmAhUQFYgKHTQNBjsQ4dUDCAs&amp;uact=5\" target=\"_blank\" rel=\"noopener\">搜索</a>我的网站的关键词，就可以在第一条看到结果:</p>\n</li>\n</ul>\n<p><img src=\"/images/google_search5.png\" alt></p>\n<h4 id=\"百度链接提交工具-链接\"><a href=\"#百度链接提交工具-链接\" class=\"headerlink\" title=\"百度链接提交工具 链接\"></a>百度链接提交工具 <a href=\"https://ziyuan.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"noopener\">链接</a></h4><p>百度链接提交工具使用说明</p>\n<blockquote>\n<ol>\n<li>链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。本工具可加快爬虫抓取速度，无法解决网站内容是否收录问题</li>\n<li>百度搜索资源平台为站长提供链接提交通道，您可以提交想被百度收录的链接，百度搜索引擎会按照标准处理，但不保证一定能够收录您提交的链接</li>\n</ol>\n</blockquote>\n<p>如：我提交自己的<a href=\"http://www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：\" target=\"_blank\" rel=\"noopener\">www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：</a></p>\n<p><img src=\"/images/blog/scarsu-baidu.jpg\" alt></p>\n<h4 id=\"神马搜索站长平台-链接\"><a href=\"#神马搜索站长平台-链接\" class=\"headerlink\" title=\"神马搜索站长平台 链接\"></a>神马搜索站长平台 <a href=\"https://zhanzhang.sm.cn/\" target=\"_blank\" rel=\"noopener\">链接</a></h4><p>配置的时候遇到了一个坑，神马搜索站长平台需要验证对提交的网站的所有权 怎么也验证不通过：<br><img src=\"/images/blog/shenma.pngs\" alt=\"神马验证\"></p>\n<p>后来才检索到，是神马不支持对https的站点进行验证，。</p>\n<p>由于我的站点部署在netlify上，因此决定放弃神马平台的收录</p>\n<h4 id=\"Bing-网站收录链接\"><a href=\"#Bing-网站收录链接\" class=\"headerlink\" title=\"Bing 网站收录链接\"></a>Bing 网站收录<a href=\"https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>十分遗憾，截止至2019-12-26我打开上述网址，网站已经显示<code>Anonymous URL Submission Tool Being Retired</code>，即Bing的匿名URL提交工具已经停用。</li>\n</ul>\n<h4 id=\"360网站收录链接\"><a href=\"#360网站收录链接\" class=\"headerlink\" title=\"360网站收录链接\"></a>360网站收录<a href=\"http://info.so.360.cn/site_submit.html\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>没有验证，填写信息提交即可</li>\n</ul>\n<h4 id=\"搜狗收录-链接\"><a href=\"#搜狗收录-链接\" class=\"headerlink\" title=\"搜狗收录 链接\"></a>搜狗收录 <a href=\"http://fankui.help.sogou.com/index.php/\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>没有验证，填写信息提交即可</li>\n<li><h4 id=\"提交至-“中文独立博客列表”-https-github-com-timqian-chinese-independent-blogs\"><a href=\"#提交至-“中文独立博客列表”-https-github-com-timqian-chinese-independent-blogs\" class=\"headerlink\" title=\"提交至 “中文独立博客列表” https://github.com/timqian/chinese-independent-blogs\"></a>提交至 “中文独立博客列表” <a href=\"https://github.com/timqian/chinese-independent-blogs\" target=\"_blank\" rel=\"noopener\">https://github.com/timqian/chinese-independent-blogs</a></h4></li>\n</ul>\n<p>fork<a href=\"https://github.com/timqian/chinese-independent-blogs\" target=\"_blank\" rel=\"noopener\">此仓库</a>，blogs-original.csv中维护自己的博客后，提pull request即可。</p>\n<hr>\n<pre><code>“不疯魔 不成活”\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li>响应式重构</li>\n</ul>\n<h2 id=\"变更记录\"><a href=\"#变更记录\" class=\"headerlink\" title=\"变更记录\"></a>变更记录</h2><ul>\n<li><strong>全部文章</strong>tab页，文章标题下的描述，改为隐藏，hover泡泡显示</li>\n<li>gitbook文章全部迁移至blog，gitbook废弃</li>\n<li>用腾讯兔小巢搭留言板</li>\n<li><strong>全部文章</strong>tab页，文章标题下增加描述</li>\n<li>从<strong>emojipedia.org</strong>添加全站emoji</li>\n<li>页首布局更改为一行，去除gitbook链接</li>\n<li>增加暗色模式</li>\n<li>rss链接改为打开新页面</li>\n<li>替换幼稚的置顶按钮</li>\n<li>增加apps在线工具tab</li>\n<li>博客计时<br><img src=\"/images/blog/blog-counter.gifs\" alt=\"博客计时\"></li>\n<li>Gitbook</li>\n<li>Google Adsense广告</li>\n<li>categories分类排序</li>\n<li>返回顶部控件</li>\n</ul>\n<h2 id=\"主题-amp-个性化样式\"><a href=\"#主题-amp-个性化样式\" class=\"headerlink\" title=\"主题 &amp; 个性化样式\"></a>主题 &amp; 个性化样式</h2><h4 id=\"1-Hexo-主题：Maupassant-Theme\"><a href=\"#1-Hexo-主题：Maupassant-Theme\" class=\"headerlink\" title=\"1. Hexo 主题：Maupassant Theme\"></a>1. Hexo 主题：<a href=\"https://github.com/tufu9441/maupassant-hexo/\" target=\"_blank\" rel=\"noopener\">Maupassant Theme</a></h4><p>挑主题的时候一眼就看上了这个主题，简约直白X冷淡</p>\n<h4 id=\"2-个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\"><a href=\"#2-个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\" class=\"headerlink\" title=\"2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式\"></a>2. 个性化样式：根据自己的口味，在主题的基础上更改了布局和样式</h4><p>以主题的pug模板，source中sass样式文件等资源味为基础，根据个人喜欢DIY即可。</p>\n<p>有需要可以去<a href=\"https://github.com/scarsu/ScarSuHexo_Netlify.git\" target=\"_blank\" rel=\"noopener\">我的博客仓库</a>自取。</p>\n<h4 id=\"3-一些参考：\"><a href=\"#3-一些参考：\" class=\"headerlink\" title=\"3. 一些参考：\"></a>3. 一些参考：</h4><p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo官网</a></p>\n<p><a href=\"https://pugjs.org/api/getting-started.html\" target=\"_blank\" rel=\"noopener\">pug模板语言文档</a></p>\n<p><a href=\"https://www.sass.hk/\" target=\"_blank\" rel=\"noopener\">sass文档</a></p>\n<h2 id=\"配置腾讯公益404页面\"><a href=\"#配置腾讯公益404页面\" class=\"headerlink\" title=\"配置腾讯公益404页面\"></a>配置腾讯公益404页面</h2><ol>\n<li><p>在博客代码仓库的/source/404/路径下，新建index.md</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 404 Not Found：该页无法显示</span><br><span class=\"line\">toc: false</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">permalink: /404</span><br><span class=\"line\">description: 腾讯404公益页面</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;meta charset=\"UTF-8\" /&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;title&gt;404&lt;/title&gt;                                                </span></span><br><span class=\"line\"><span class=\"code\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"code\">         &lt;script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" homePageName=\"返回首页\" homePageUrl=\"https://www.scarsu.com\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新构建打包更新即可看到效果，如输入一个不存在的路由会出现公益404页面：<a href=\"https://www.scarsu.com/qqq\">https://www.scarsu.com/qqq</a>，直接输入/404路由也会出<a href=\"https://www.scarsu.com/qqq\">https://www.scarsu.com/404</a></p>\n</li>\n<li><p>可能会出现本地构建时找不到/404页面的现象，此时可以直接打包到服务器测试。</p>\n</li>\n</ol>\n<h2 id=\"博客评论控件\"><a href=\"#博客评论控件\" class=\"headerlink\" title=\"博客评论控件\"></a>博客评论控件</h2><h4 id=\"Gitment\"><a href=\"#Gitment\" class=\"headerlink\" title=\"Gitment\"></a><strong>Gitment</strong></h4><p><a href=\"https://github.com/imsun/gitment\" target=\"_blank\" rel=\"noopener\">gitment repo</a></p>\n<p>去<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">Github Auth Applications</a>为你的网站注册一个应用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application name: 应用名</span><br><span class=\"line\">Homepage URL: 你的网站地址 #eg. https://www.scarsu.com</span><br><span class=\"line\">Application description: 描述</span><br><span class=\"line\">Authorization callback URL: 你的网站地址 #如 https://www.scarsu.com</span><br></pre></td></tr></table></figure></p>\n<p>博客配置：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitment</span></span><br><span class=\"line\"><span class=\"comment\"># Introduction: https://imsun.net/posts/gitment-introduction/</span></span><br><span class=\"line\"><span class=\"attr\">gitment:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span> <span class=\"comment\">## If you want to use Gitment comment system please set the value to true.</span></span><br><span class=\"line\">    <span class=\"attr\">owner:</span> <span class=\"string\">github用户名</span> <span class=\"comment\">## Your GitHub ID, 直接用GitHub用户名就可以</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">repo地址</span> <span class=\"comment\">## The repository to store your comments, make sure you're the repo's owner, 要存储评论内容的仓库名，可以与博客下的仓库，也可以新建一个仓库专门存储评论内容的</span></span><br><span class=\"line\">    <span class=\"attr\">client_id:</span> <span class=\"string\">刚才申请的ClientID</span> <span class=\"comment\">## GitHub client ID</span></span><br><span class=\"line\">    <span class=\"attr\">client_secret:</span> <span class=\"string\">刚才申请的ClientSecret</span> <span class=\"comment\">## GitHub client secret</span></span><br></pre></td></tr></table></figure></p>\n<p>本地安装gitment，并在项目中添加依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save gitment</span><br></pre></td></tr></table></figure></p>\n<p><strong>gitment自2018年起原作者的CORS header服务已经停了，貌似至今暂未维护，不过这个服务的源代码已经开源，很简单的nodejs代码，如果由服务器可以自己启一个服务，我目前用的是这个地址：<a href=\"https://shimeng.info/api/oauth\" target=\"_blank\" rel=\"noopener\">https://shimeng.info/api/oauth</a> ，手动在gitment.browser.js中把 <a href=\"https://gh-oauth.imsun.net\" target=\"_blank\" rel=\"noopener\">https://gh-oauth.imsun.net</a> 替换成上述服务地址即可</strong></p>\n<ul>\n<li><strong>Disqus</strong>[需要FQ，已经弃用-20191212]<br>在disqus官网注册账户，在主题配置文件中开启disqus评论控件:<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Comment 评论相关</span></span><br><span class=\"line\"><span class=\"attr\">disqus:</span> <span class=\"string\">username</span> <span class=\"comment\">## Disqus评论 Your disqus_shortname, e.g. username</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h2><h4 id=\"谷歌网站收录-链接\"><a href=\"#谷歌网站收录-链接\" class=\"headerlink\" title=\"谷歌网站收录 链接\"></a>谷歌网站收录 <a href=\"https://search.google.com/search-console\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>先录入资源类型：域名/网站,录入后需要验证所有权</li>\n</ul>\n<p><img src=\"/images/google_search.png\" alt></p>\n<ul>\n<li>域名类型需要更改dns配置验证，可以一次性验证域名下所有子域名/所有协议的网站（我选了这种）</li>\n<li>网站类型支持的验证方法比较多，但是同一个域名对应的不同协议/子域名，都需要重复验证</li>\n</ul>\n<p><img src=\"/images/google_search2.png\" alt></p>\n<ul>\n<li>域名验证方法：在你托管域名的dns服务商配置dns记录，添加一条<code>txt类型</code>的<code>dns记录</code>，值为上图中谷歌给出的<code>txt值</code>，name选择<code>@</code>即可：</li>\n</ul>\n<p><img src=\"/images/google_search3.png\" alt></p>\n<ul>\n<li><p>下图为验证成功截图：<br><img src=\"/images/google_search4.png\" alt></p>\n</li>\n<li><p>验证通过后一天，就可以在<a href=\"https://search.google.com/search-console\" target=\"_blank\" rel=\"noopener\">google search console</a>中看到你的域名/网址的数据，例如你的资源在 Google 搜索中的效果，包括展示次数、排名、点击率和热门查询字符串等。</p>\n</li>\n<li><p>收录后，在google<a href=\"https://www.google.com/search?sxsrf=ACYBGNSCTqnOP_ApOR1wZYv_3q6MiE4vMA%3A1577335257845&amp;ei=2TkEXsejM5CqoAS0mpjYAw&amp;q=scarsu&amp;oq=scarsu&amp;gs_l=psy-ab.3..0l2.3443.4420..4700...0.0..0.184.1007.0j7......0....1..gws-wiz.......35i39j0i67j0i12j0i12i131j0i131j0i10.8hbvD9zN8Aw&amp;ved=0ahUKEwiH9PDdv9LmAhUQFYgKHTQNBjsQ4dUDCAs&amp;uact=5\" target=\"_blank\" rel=\"noopener\">搜索</a>我的网站的关键词，就可以在第一条看到结果:</p>\n</li>\n</ul>\n<p><img src=\"/images/google_search5.png\" alt></p>\n<h4 id=\"百度链接提交工具-链接\"><a href=\"#百度链接提交工具-链接\" class=\"headerlink\" title=\"百度链接提交工具 链接\"></a>百度链接提交工具 <a href=\"https://ziyuan.baidu.com/linksubmit/url\" target=\"_blank\" rel=\"noopener\">链接</a></h4><p>百度链接提交工具使用说明</p>\n<blockquote>\n<ol>\n<li>链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。本工具可加快爬虫抓取速度，无法解决网站内容是否收录问题</li>\n<li>百度搜索资源平台为站长提供链接提交通道，您可以提交想被百度收录的链接，百度搜索引擎会按照标准处理，但不保证一定能够收录您提交的链接</li>\n</ol>\n</blockquote>\n<p>如：我提交自己的<a href=\"http://www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：\" target=\"_blank\" rel=\"noopener\">www.scarsu.com和doc.scarsu.com后，在百度首页搜索scarsu，即可在前几条结果看到我的站点如图：</a></p>\n<p><img src=\"/images/blog/scarsu-baidu.jpg\" alt></p>\n<h4 id=\"神马搜索站长平台-链接\"><a href=\"#神马搜索站长平台-链接\" class=\"headerlink\" title=\"神马搜索站长平台 链接\"></a>神马搜索站长平台 <a href=\"https://zhanzhang.sm.cn/\" target=\"_blank\" rel=\"noopener\">链接</a></h4><p>配置的时候遇到了一个坑，神马搜索站长平台需要验证对提交的网站的所有权 怎么也验证不通过：<br><img src=\"/images/blog/shenma.pngs\" alt=\"神马验证\"></p>\n<p>后来才检索到，是神马不支持对https的站点进行验证，。</p>\n<p>由于我的站点部署在netlify上，因此决定放弃神马平台的收录</p>\n<h4 id=\"Bing-网站收录链接\"><a href=\"#Bing-网站收录链接\" class=\"headerlink\" title=\"Bing 网站收录链接\"></a>Bing 网站收录<a href=\"https://blogs.bing.com/webmaster/september-2018/Anonymous-URL-Submission-Tool-Being-Retired\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>十分遗憾，截止至2019-12-26我打开上述网址，网站已经显示<code>Anonymous URL Submission Tool Being Retired</code>，即Bing的匿名URL提交工具已经停用。</li>\n</ul>\n<h4 id=\"360网站收录链接\"><a href=\"#360网站收录链接\" class=\"headerlink\" title=\"360网站收录链接\"></a>360网站收录<a href=\"http://info.so.360.cn/site_submit.html\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>没有验证，填写信息提交即可</li>\n</ul>\n<h4 id=\"搜狗收录-链接\"><a href=\"#搜狗收录-链接\" class=\"headerlink\" title=\"搜狗收录 链接\"></a>搜狗收录 <a href=\"http://fankui.help.sogou.com/index.php/\" target=\"_blank\" rel=\"noopener\">链接</a></h4><ul>\n<li>没有验证，填写信息提交即可</li>\n<li><h4 id=\"提交至-“中文独立博客列表”-https-github-com-timqian-chinese-independent-blogs\"><a href=\"#提交至-“中文独立博客列表”-https-github-com-timqian-chinese-independent-blogs\" class=\"headerlink\" title=\"提交至 “中文独立博客列表” https://github.com/timqian/chinese-independent-blogs\"></a>提交至 “中文独立博客列表” <a href=\"https://github.com/timqian/chinese-independent-blogs\" target=\"_blank\" rel=\"noopener\">https://github.com/timqian/chinese-independent-blogs</a></h4></li>\n</ul>\n<p>fork<a href=\"https://github.com/timqian/chinese-independent-blogs\" target=\"_blank\" rel=\"noopener\">此仓库</a>，blogs-original.csv中维护自己的博客后，提pull request即可。</p>\n<hr>\n<pre><code>“不疯魔 不成活”\n</code></pre>"},{"title":"Customize VSCode","date":"2020-04-27T16:00:00.000Z","description":"VSCode高效使用,来自创造VSCode的Microsoft的Azure团队的BurkeHolland的分享","toc":1,"top":0,"_content":"\n## Links\n- [全文](https://burkeholland.gitbook.io/vs-code-can-do-that/)\n- [视频](https://frontendmasters.com/courses/customize-vs-code/moving-code-code-folding/)\n- [插件vs-code-can-do-that](https://marketplace.visualstudio.com/items?itemName=burkeholland.vs-code-can-do-that)\n\n## 记录几个高光点\n- **Setting Sync插件**：使用gist，同步一切你的个性化配置(user settings,not workspace settings,workspace settings建议存在项目的代码仓库里使团队成员有统一的配置)，即使切换环境，也可以在几分钟内得到一个一模一样的完全得心应手的IDE（gist已经被墙\n- **Project Manager插件**：在侧边栏一键切换/多开工作区/项目，只需要一个简单的配置文件\n- 侧边栏建议放在右侧，放在左侧时，侧边栏的隐藏/显示，会使整个代码区移动\n---\n<small>视频讲的很细很全，不做赘述。很多有用的tips</small>\n","source":"_posts/customize_vscode.md","raw":"---\ntitle: Customize VSCode\ncategories:\n    - 10技术 | 前端工具与工程化 # 一级分类\ntags:\ndate: 2020-04-28\ndescription: VSCode高效使用,来自创造VSCode的Microsoft的Azure团队的BurkeHolland的分享\ntoc: 1\ntop: 0\n---\n\n## Links\n- [全文](https://burkeholland.gitbook.io/vs-code-can-do-that/)\n- [视频](https://frontendmasters.com/courses/customize-vs-code/moving-code-code-folding/)\n- [插件vs-code-can-do-that](https://marketplace.visualstudio.com/items?itemName=burkeholland.vs-code-can-do-that)\n\n## 记录几个高光点\n- **Setting Sync插件**：使用gist，同步一切你的个性化配置(user settings,not workspace settings,workspace settings建议存在项目的代码仓库里使团队成员有统一的配置)，即使切换环境，也可以在几分钟内得到一个一模一样的完全得心应手的IDE（gist已经被墙\n- **Project Manager插件**：在侧边栏一键切换/多开工作区/项目，只需要一个简单的配置文件\n- 侧边栏建议放在右侧，放在左侧时，侧边栏的隐藏/显示，会使整个代码区移动\n---\n<small>视频讲的很细很全，不做赘述。很多有用的tips</small>\n","slug":"customize_vscode","published":1,"updated":"2021-01-28T02:48:51.144Z","_id":"ckir88ifs001gc8y6cvc0j8ce","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ul>\n<li><a href=\"https://burkeholland.gitbook.io/vs-code-can-do-that/\" target=\"_blank\" rel=\"noopener\">全文</a></li>\n<li><a href=\"https://frontendmasters.com/courses/customize-vs-code/moving-code-code-folding/\" target=\"_blank\" rel=\"noopener\">视频</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=burkeholland.vs-code-can-do-that\" target=\"_blank\" rel=\"noopener\">插件vs-code-can-do-that</a></li>\n</ul>\n<h2 id=\"记录几个高光点\"><a href=\"#记录几个高光点\" class=\"headerlink\" title=\"记录几个高光点\"></a>记录几个高光点</h2><ul>\n<li><strong>Setting Sync插件</strong>：使用gist，同步一切你的个性化配置(user settings,not workspace settings,workspace settings建议存在项目的代码仓库里使团队成员有统一的配置)，即使切换环境，也可以在几分钟内得到一个一模一样的完全得心应手的IDE（gist已经被墙</li>\n<li><strong>Project Manager插件</strong>：在侧边栏一键切换/多开工作区/项目，只需要一个简单的配置文件</li>\n<li>侧边栏建议放在右侧，放在左侧时，侧边栏的隐藏/显示，会使整个代码区移动</li>\n</ul>\n<hr>\n<p><small>视频讲的很细很全，不做赘述。很多有用的tips</small></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ul>\n<li><a href=\"https://burkeholland.gitbook.io/vs-code-can-do-that/\" target=\"_blank\" rel=\"noopener\">全文</a></li>\n<li><a href=\"https://frontendmasters.com/courses/customize-vs-code/moving-code-code-folding/\" target=\"_blank\" rel=\"noopener\">视频</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=burkeholland.vs-code-can-do-that\" target=\"_blank\" rel=\"noopener\">插件vs-code-can-do-that</a></li>\n</ul>\n<h2 id=\"记录几个高光点\"><a href=\"#记录几个高光点\" class=\"headerlink\" title=\"记录几个高光点\"></a>记录几个高光点</h2><ul>\n<li><strong>Setting Sync插件</strong>：使用gist，同步一切你的个性化配置(user settings,not workspace settings,workspace settings建议存在项目的代码仓库里使团队成员有统一的配置)，即使切换环境，也可以在几分钟内得到一个一模一样的完全得心应手的IDE（gist已经被墙</li>\n<li><strong>Project Manager插件</strong>：在侧边栏一键切换/多开工作区/项目，只需要一个简单的配置文件</li>\n<li>侧边栏建议放在右侧，放在左侧时，侧边栏的隐藏/显示，会使整个代码区移动</li>\n</ul>\n<hr>\n<p><small>视频讲的很细很全，不做赘述。很多有用的tips</small></p>\n"},{"title":"Devtools 老司机养成 - 第二篇-Elements 面板","date":"2020-02-29T16:00:00.000Z","description":"样式顺手调，DOM实时改～","toc":1,"top":0,"_content":"\n## 界面概览\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](https://i.loli.net/2019/07/29/5d3e521d6fbde79541.png)\n\n## Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n## Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n## DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](https://i.loli.net/2019/07/29/5d3e52339265738563.png)\n\n在 DOM 树中你可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](https://i.loli.net/2019/07/29/5d3e52c51ed0570682.png)\n\n## Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](https://i.loli.net/2019/07/29/5d3e524d5a48a76988.png)\n\n## color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n## Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](https://i.loli.net/2019/07/29/5d3e525f4f2a311954.png)\n\n## Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](https://i.loli.net/2019/07/29/5d3e52728065d88131.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n## DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](https://i.loli.net/2019/07/29/5d3e5282c491d43866.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](https://i.loli.net/2019/07/29/5d3e529117f6c69468.png)\n\n## Properties\n\nProperties 面板会列出元素 DOM 底层相关属性\n![0](https://i.loli.net/2019/07/29/5d3e52b143cc424671.png)\n\n## Accessibility(可访问性)\n\n-   在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。\n-   查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。\n-   查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性\n\n![accessibility.png](https://i.loli.net/2019/04/21/5cbc83e1561e4.png)\n","source":"_posts/devtools_02_elements.md","raw":"---\ntitle: Devtools 老司机养成 - 第二篇-Elements 面板\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2020-03-01\ndescription: 样式顺手调，DOM实时改～\ntoc: 1\ntop: 0\n---\n\n## 界面概览\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](https://i.loli.net/2019/07/29/5d3e521d6fbde79541.png)\n\n## Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n## Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n## DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](https://i.loli.net/2019/07/29/5d3e52339265738563.png)\n\n在 DOM 树中你可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](https://i.loli.net/2019/07/29/5d3e52c51ed0570682.png)\n\n## Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](https://i.loli.net/2019/07/29/5d3e524d5a48a76988.png)\n\n## color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n## Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](https://i.loli.net/2019/07/29/5d3e525f4f2a311954.png)\n\n## Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](https://i.loli.net/2019/07/29/5d3e52728065d88131.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n## DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](https://i.loli.net/2019/07/29/5d3e5282c491d43866.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](https://i.loli.net/2019/07/29/5d3e529117f6c69468.png)\n\n## Properties\n\nProperties 面板会列出元素 DOM 底层相关属性\n![0](https://i.loli.net/2019/07/29/5d3e52b143cc424671.png)\n\n## Accessibility(可访问性)\n\n-   在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。\n-   查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。\n-   查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性\n\n![accessibility.png](https://i.loli.net/2019/04/21/5cbc83e1561e4.png)\n","slug":"devtools_02_elements","published":1,"updated":"2020-09-03T07:01:27.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ifu001kc8y6kgwmuq41","content":"<h2 id=\"界面概览\"><a href=\"#界面概览\" class=\"headerlink\" title=\"界面概览\"></a>界面概览</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e521d6fbde79541.png\" alt=\"Elements 面板\"></p>\n<h2 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h2><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h2 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h2><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h2 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h2><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"https://i.loli.net/2019/07/29/5d3e52339265738563.png\" alt=\"0\"></p>\n<p>在 DOM 树中你可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e52c51ed0570682.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h2 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h2><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e524d5a48a76988.png\" alt=\"0\"></p>\n<h2 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h2><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h2 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h2><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e525f4f2a311954.png\" alt=\"0\"></p>\n<h2 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h2><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e52728065d88131.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h2 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h2><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e5282c491d43866.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"https://i.loli.net/2019/07/29/5d3e529117f6c69468.png\" alt=\"0\"></p>\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><p>Properties 面板会列出元素 DOM 底层相关属性<br><img src=\"https://i.loli.net/2019/07/29/5d3e52b143cc424671.png\" alt=\"0\"></p>\n<h2 id=\"Accessibility-可访问性\"><a href=\"#Accessibility-可访问性\" class=\"headerlink\" title=\"Accessibility(可访问性)\"></a>Accessibility(可访问性)</h2><ul>\n<li>在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。</li>\n<li>查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。</li>\n<li>查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/21/5cbc83e1561e4.png\" alt=\"accessibility.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"界面概览\"><a href=\"#界面概览\" class=\"headerlink\" title=\"界面概览\"></a>界面概览</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e521d6fbde79541.png\" alt=\"Elements 面板\"></p>\n<h2 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h2><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h2 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h2><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h2 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h2><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"https://i.loli.net/2019/07/29/5d3e52339265738563.png\" alt=\"0\"></p>\n<p>在 DOM 树中你可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e52c51ed0570682.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h2 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h2><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e524d5a48a76988.png\" alt=\"0\"></p>\n<h2 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h2><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h2 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h2><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e525f4f2a311954.png\" alt=\"0\"></p>\n<h2 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h2><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e52728065d88131.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h2 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h2><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e5282c491d43866.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"https://i.loli.net/2019/07/29/5d3e529117f6c69468.png\" alt=\"0\"></p>\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><p>Properties 面板会列出元素 DOM 底层相关属性<br><img src=\"https://i.loli.net/2019/07/29/5d3e52b143cc424671.png\" alt=\"0\"></p>\n<h2 id=\"Accessibility-可访问性\"><a href=\"#Accessibility-可访问性\" class=\"headerlink\" title=\"Accessibility(可访问性)\"></a>Accessibility(可访问性)</h2><ul>\n<li>在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。</li>\n<li>查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。</li>\n<li>查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/21/5cbc83e1561e4.png\" alt=\"accessibility.png\"></p>\n"},{"title":"用chrome调试node.js服务端代码","date":"2018-07-29T16:00:00.000Z","description":"不然你想用什么调试？","toc":1,"top":0,"_content":"\n### 开启调试命令\n\n```\nnode --inspect app.js\n\n//在第一行就停下来等待调试,也可以使用\nnode --inspect-brk app.js\n```\n\n### debugger 地址\n\n```\n//运行开启调试命令后，能看到类似如下的输出：\nDebugger listening on ws://127.0.0.1:9229/4dc825ec-a204-46f8-8edc-4afadc8da61a\nFor help see https://nodejs.org/en/docs/inspector\n```\n\n### 在 chrome 中打开 debugger\n\n```\n在Chrome中打开chrome://inspect/#devices\n点击inspect进入调试界面\n```\n\n### debugger 端口\n\ninspect 调试默认监听 9229 端口,可以通过下面的参数指定端口\n\n```\n--inspect=9222\n```\n\n---\n\n    用VSC、用webstorm啊\n    对不起我懒(～﹃～)~zZ\n","source":"_posts/debug_node.js_with_chrome.md","raw":"---\ntitle: 用chrome调试node.js服务端代码\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2018-07-30\ndescription: 不然你想用什么调试？\ntoc: 1\ntop: 0\n---\n\n### 开启调试命令\n\n```\nnode --inspect app.js\n\n//在第一行就停下来等待调试,也可以使用\nnode --inspect-brk app.js\n```\n\n### debugger 地址\n\n```\n//运行开启调试命令后，能看到类似如下的输出：\nDebugger listening on ws://127.0.0.1:9229/4dc825ec-a204-46f8-8edc-4afadc8da61a\nFor help see https://nodejs.org/en/docs/inspector\n```\n\n### 在 chrome 中打开 debugger\n\n```\n在Chrome中打开chrome://inspect/#devices\n点击inspect进入调试界面\n```\n\n### debugger 端口\n\ninspect 调试默认监听 9229 端口,可以通过下面的参数指定端口\n\n```\n--inspect=9222\n```\n\n---\n\n    用VSC、用webstorm啊\n    对不起我懒(～﹃～)~zZ\n","slug":"debug_node.js_with_chrome","published":1,"updated":"2020-09-03T07:01:27.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ifv001mc8y6qvf49oko","content":"<h3 id=\"开启调试命令\"><a href=\"#开启调试命令\" class=\"headerlink\" title=\"开启调试命令\"></a>开启调试命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect app.js</span><br><span class=\"line\"></span><br><span class=\"line\">//在第一行就停下来等待调试,也可以使用</span><br><span class=\"line\">node --inspect-brk app.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"debugger-地址\"><a href=\"#debugger-地址\" class=\"headerlink\" title=\"debugger 地址\"></a>debugger 地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//运行开启调试命令后，能看到类似如下的输出：</span><br><span class=\"line\">Debugger listening on ws://127.0.0.1:9229/4dc825ec-a204-46f8-8edc-4afadc8da61a</span><br><span class=\"line\">For help see https://nodejs.org/en/docs/inspector</span><br></pre></td></tr></table></figure>\n<h3 id=\"在-chrome-中打开-debugger\"><a href=\"#在-chrome-中打开-debugger\" class=\"headerlink\" title=\"在 chrome 中打开 debugger\"></a>在 chrome 中打开 debugger</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Chrome中打开chrome://inspect/#devices</span><br><span class=\"line\">点击inspect进入调试界面</span><br></pre></td></tr></table></figure>\n<h3 id=\"debugger-端口\"><a href=\"#debugger-端口\" class=\"headerlink\" title=\"debugger 端口\"></a>debugger 端口</h3><p>inspect 调试默认监听 9229 端口,可以通过下面的参数指定端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--inspect=9222</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>用VSC、用webstorm啊\n对不起我懒(～﹃～)~zZ\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"开启调试命令\"><a href=\"#开启调试命令\" class=\"headerlink\" title=\"开启调试命令\"></a>开启调试命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect app.js</span><br><span class=\"line\"></span><br><span class=\"line\">//在第一行就停下来等待调试,也可以使用</span><br><span class=\"line\">node --inspect-brk app.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"debugger-地址\"><a href=\"#debugger-地址\" class=\"headerlink\" title=\"debugger 地址\"></a>debugger 地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//运行开启调试命令后，能看到类似如下的输出：</span><br><span class=\"line\">Debugger listening on ws://127.0.0.1:9229/4dc825ec-a204-46f8-8edc-4afadc8da61a</span><br><span class=\"line\">For help see https://nodejs.org/en/docs/inspector</span><br></pre></td></tr></table></figure>\n<h3 id=\"在-chrome-中打开-debugger\"><a href=\"#在-chrome-中打开-debugger\" class=\"headerlink\" title=\"在 chrome 中打开 debugger\"></a>在 chrome 中打开 debugger</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Chrome中打开chrome://inspect/#devices</span><br><span class=\"line\">点击inspect进入调试界面</span><br></pre></td></tr></table></figure>\n<h3 id=\"debugger-端口\"><a href=\"#debugger-端口\" class=\"headerlink\" title=\"debugger 端口\"></a>debugger 端口</h3><p>inspect 调试默认监听 9229 端口,可以通过下面的参数指定端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--inspect=9222</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>用VSC、用webstorm啊\n对不起我懒(～﹃～)~zZ\n</code></pre>"},{"title":"【css变量】css自定义属性","date":"2020-09-24T16:00:00.000Z","description":"原生js控制css变量、Vue3响应式css变量","toc":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211224029.png","status":"Done","_content":"\n\n## 资源\n\n- [文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties)\n- [在线demo](https://codepen.io/zsy/pen/WNwPWxB)\n- [vue3 css变量文档](https://github.com/vuejs/rfcs/blob/sfc-improvements/active-rfcs/0000-sfc-style-variables.md)\n\n\n### 是什么\n\nCSS自定义属性、CSS变量、级联变量，可以文档中重复使用的样式变量\n\n## 声明\n\n- 声明一个自定义属性，属性名需要以两个减号（--）开始\n- 大小写敏感\n- 属性值则可以是任何有效的CSS值。\n- 和其他属性一样，自定义属性也是写在**规则集**之内的\n- 例子🌰：\n\n    ```css\n    element {\n      --main-bg-color: brown;\n    }\n    ```\n\n- **规则集**所指定的选择器 定义了自定义属性的可见**作用域**\n- 自定义属性具有**继承性**，受级联的约束，从其父级继承其值。\n- **最佳实践**💁‍♀️：根伪类`:root`，相当于全局变量\n\n    ```css\n    :root {\n      --main-bg-color: brown;\n    }\n    ```\n\n## 使用变量\n\n`color: var(--main-color);`\n\n## 备用值 / 默认值\n\n```jsx\n// 正确做法\nvar(--my-var, red)\nvar(--my-var, var(--my-background, pink))\n\n// 错误做法\nvar(--my-var, --my-background, pink)\n```\n\n## js更新变量\n\n```jsx\n// 获取一个 Dom 节点上的 CSS 变量\nelement.style.getPropertyValue(\"--my-var\");\n\n// 获取任意 Dom 节点上的 CSS 变量\ngetComputedStyle(element).getPropertyValue(\"--my-var\");\n\n// 修改一个 Dom 节点上的 CSS 变量\nelement.style.setProperty(\"--my-var\", newValue);\n```\n\n## Vue3 响应式css变量\n\n```jsx\n<template>\n  <div class=\"text\">hello</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      color: 'red'\n    }\n  }\n}\n</script>\n\n<style vars=\"{ color }\">\n.text {\n  color: var(--color);\n}\n</style>\n```\n","source":"_posts/css-variable.md","raw":"---\ntitle: 【css变量】css自定义属性\ncategories:\n    - 10技术 | CSS\ntags:\ndate: 2020-09-25\ndescription: 原生js控制css变量、Vue3响应式css变量\ntoc: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211224029.png\nstatus: Done\n---\n\n\n## 资源\n\n- [文档](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties)\n- [在线demo](https://codepen.io/zsy/pen/WNwPWxB)\n- [vue3 css变量文档](https://github.com/vuejs/rfcs/blob/sfc-improvements/active-rfcs/0000-sfc-style-variables.md)\n\n\n### 是什么\n\nCSS自定义属性、CSS变量、级联变量，可以文档中重复使用的样式变量\n\n## 声明\n\n- 声明一个自定义属性，属性名需要以两个减号（--）开始\n- 大小写敏感\n- 属性值则可以是任何有效的CSS值。\n- 和其他属性一样，自定义属性也是写在**规则集**之内的\n- 例子🌰：\n\n    ```css\n    element {\n      --main-bg-color: brown;\n    }\n    ```\n\n- **规则集**所指定的选择器 定义了自定义属性的可见**作用域**\n- 自定义属性具有**继承性**，受级联的约束，从其父级继承其值。\n- **最佳实践**💁‍♀️：根伪类`:root`，相当于全局变量\n\n    ```css\n    :root {\n      --main-bg-color: brown;\n    }\n    ```\n\n## 使用变量\n\n`color: var(--main-color);`\n\n## 备用值 / 默认值\n\n```jsx\n// 正确做法\nvar(--my-var, red)\nvar(--my-var, var(--my-background, pink))\n\n// 错误做法\nvar(--my-var, --my-background, pink)\n```\n\n## js更新变量\n\n```jsx\n// 获取一个 Dom 节点上的 CSS 变量\nelement.style.getPropertyValue(\"--my-var\");\n\n// 获取任意 Dom 节点上的 CSS 变量\ngetComputedStyle(element).getPropertyValue(\"--my-var\");\n\n// 修改一个 Dom 节点上的 CSS 变量\nelement.style.setProperty(\"--my-var\", newValue);\n```\n\n## Vue3 响应式css变量\n\n```jsx\n<template>\n  <div class=\"text\">hello</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      color: 'red'\n    }\n  }\n}\n</script>\n\n<style vars=\"{ color }\">\n.text {\n  color: var(--color);\n}\n</style>\n```\n","slug":"css-variable","published":1,"updated":"2021-01-22T09:59:52.844Z","_id":"ckir88ifx001pc8y6jpn3u5tu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties\" target=\"_blank\" rel=\"noopener\">文档</a></li>\n<li><a href=\"https://codepen.io/zsy/pen/WNwPWxB\" target=\"_blank\" rel=\"noopener\">在线demo</a></li>\n<li><a href=\"https://github.com/vuejs/rfcs/blob/sfc-improvements/active-rfcs/0000-sfc-style-variables.md\" target=\"_blank\" rel=\"noopener\">vue3 css变量文档</a></li>\n</ul>\n<h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>CSS自定义属性、CSS变量、级联变量，可以文档中重复使用的样式变量</p>\n<h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><ul>\n<li>声明一个自定义属性，属性名需要以两个减号（–）开始</li>\n<li>大小写敏感</li>\n<li>属性值则可以是任何有效的CSS值。</li>\n<li>和其他属性一样，自定义属性也是写在<strong>规则集</strong>之内的</li>\n<li><p>例子🌰：</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg-color</span>: brown;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>规则集</strong>所指定的选择器 定义了自定义属性的可见<strong>作用域</strong></p>\n</li>\n<li>自定义属性具有<strong>继承性</strong>，受级联的约束，从其父级继承其值。</li>\n<li><p><strong>最佳实践</strong>💁‍♀️：根伪类<code>:root</code>，相当于全局变量</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg-color</span>: brown;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h2><p><code>color: var(--main-color);</code></p>\n<h2 id=\"备用值-默认值\"><a href=\"#备用值-默认值\" class=\"headerlink\" title=\"备用值 / 默认值\"></a>备用值 / 默认值</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确做法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>(--my-<span class=\"keyword\">var</span>, red)</span><br><span class=\"line\"><span class=\"keyword\">var</span>(--my-<span class=\"keyword\">var</span>, <span class=\"keyword\">var</span>(--my-background, pink))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误做法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>(--my-<span class=\"keyword\">var</span>, --my-background, pink)</span><br></pre></td></tr></table></figure>\n<h2 id=\"js更新变量\"><a href=\"#js更新变量\" class=\"headerlink\" title=\"js更新变量\"></a>js更新变量</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取一个 Dom 节点上的 CSS 变量</span></span><br><span class=\"line\">element.style.getPropertyValue(<span class=\"string\">\"--my-var\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取任意 Dom 节点上的 CSS 变量</span></span><br><span class=\"line\">getComputedStyle(element).getPropertyValue(<span class=\"string\">\"--my-var\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改一个 Dom 节点上的 CSS 变量</span></span><br><span class=\"line\">element.style.setProperty(<span class=\"string\">\"--my-var\"</span>, newValue);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vue3-响应式css变量\"><a href=\"#Vue3-响应式css变量\" class=\"headerlink\" title=\"Vue3 响应式css变量\"></a>Vue3 响应式css变量</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"text\"</span>&gt;hello&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      color: <span class=\"string\">'red'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;style vars=\"&#123; color &#125;\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">.text &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  color: var(--color);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties\" target=\"_blank\" rel=\"noopener\">文档</a></li>\n<li><a href=\"https://codepen.io/zsy/pen/WNwPWxB\" target=\"_blank\" rel=\"noopener\">在线demo</a></li>\n<li><a href=\"https://github.com/vuejs/rfcs/blob/sfc-improvements/active-rfcs/0000-sfc-style-variables.md\" target=\"_blank\" rel=\"noopener\">vue3 css变量文档</a></li>\n</ul>\n<h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>CSS自定义属性、CSS变量、级联变量，可以文档中重复使用的样式变量</p>\n<h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><ul>\n<li>声明一个自定义属性，属性名需要以两个减号（–）开始</li>\n<li>大小写敏感</li>\n<li>属性值则可以是任何有效的CSS值。</li>\n<li>和其他属性一样，自定义属性也是写在<strong>规则集</strong>之内的</li>\n<li><p>例子🌰：</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg-color</span>: brown;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>规则集</strong>所指定的选择器 定义了自定义属性的可见<strong>作用域</strong></p>\n</li>\n<li>自定义属性具有<strong>继承性</strong>，受级联的约束，从其父级继承其值。</li>\n<li><p><strong>最佳实践</strong>💁‍♀️：根伪类<code>:root</code>，相当于全局变量</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg-color</span>: brown;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h2><p><code>color: var(--main-color);</code></p>\n<h2 id=\"备用值-默认值\"><a href=\"#备用值-默认值\" class=\"headerlink\" title=\"备用值 / 默认值\"></a>备用值 / 默认值</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确做法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>(--my-<span class=\"keyword\">var</span>, red)</span><br><span class=\"line\"><span class=\"keyword\">var</span>(--my-<span class=\"keyword\">var</span>, <span class=\"keyword\">var</span>(--my-background, pink))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误做法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>(--my-<span class=\"keyword\">var</span>, --my-background, pink)</span><br></pre></td></tr></table></figure>\n<h2 id=\"js更新变量\"><a href=\"#js更新变量\" class=\"headerlink\" title=\"js更新变量\"></a>js更新变量</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取一个 Dom 节点上的 CSS 变量</span></span><br><span class=\"line\">element.style.getPropertyValue(<span class=\"string\">\"--my-var\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取任意 Dom 节点上的 CSS 变量</span></span><br><span class=\"line\">getComputedStyle(element).getPropertyValue(<span class=\"string\">\"--my-var\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改一个 Dom 节点上的 CSS 变量</span></span><br><span class=\"line\">element.style.setProperty(<span class=\"string\">\"--my-var\"</span>, newValue);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vue3-响应式css变量\"><a href=\"#Vue3-响应式css变量\" class=\"headerlink\" title=\"Vue3 响应式css变量\"></a>Vue3 响应式css变量</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"text\"</span>&gt;hello&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      color: <span class=\"string\">'red'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;style vars=\"&#123; color &#125;\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">.text &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  color: var(--color);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"Devtools 老司机养成 - 第一篇Devtools介绍","date":"2020-02-22T16:00:00.000Z","description":"前端开发调试第一利器，关于devtools的信息，都在这里","toc":1,"top":0,"_content":"\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；工具类知识需要实践，建议阅读本文时打开 [sample](https://masteringdevtools.com/)和 devtools 操作一遍\n-   参考 1：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n-   参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 [Mastering Chrome Developer Tools v2 课程](https://frontendmasters.com/courses/chrome-dev-tools-v2)\n-   参考 3：来自 作者 Tomek Sułkowski 在 medium 的[系列文章](https://medium.com/@tomsu)\n-   [Devtools脑图.png](https://i.loli.net/2019/04/19/5cb95639a9f73.png)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n## Chrome相关介绍\n#### Chromium\n    是谷歌的开源项目，由开源社区维护。\n    \n    国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n    \n    我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n    \n    Chromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n    \n    几乎每天都在进行更新;\n    \n#### Chrome\n    基于 Chromium，但是它是闭源的！\n    所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n    \n    支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n    \n    Chrome 内置了 Flash，Chromium 需要额外安装\n    \n    据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n    \n    集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n    \n#### Dev Canary Stable Beta\n是Chrome的四个版本：\n\n- Stable 稳定版（几月一次更新）\n- Beta 测试版（1 月一次更新）\n- Dev 开发者版（1 星期一次更新）\n- Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n\n新版发布速度递增\n新功能数量递增\n稳定性递减\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n-   开发者版 chrome - [Dev - 开发者专用的每周更新版](https://www.google.cn/chrome/dev/)\n","source":"_posts/devtools_01_intro.md","raw":"---\ntitle: Devtools 老司机养成 - 第一篇Devtools介绍\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2020-02-23\ndescription: 前端开发调试第一利器，关于devtools的信息，都在这里\ntoc: 1\ntop: 0\n---\n\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；工具类知识需要实践，建议阅读本文时打开 [sample](https://masteringdevtools.com/)和 devtools 操作一遍\n-   参考 1：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n-   参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 [Mastering Chrome Developer Tools v2 课程](https://frontendmasters.com/courses/chrome-dev-tools-v2)\n-   参考 3：来自 作者 Tomek Sułkowski 在 medium 的[系列文章](https://medium.com/@tomsu)\n-   [Devtools脑图.png](https://i.loli.net/2019/04/19/5cb95639a9f73.png)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n## Chrome相关介绍\n#### Chromium\n    是谷歌的开源项目，由开源社区维护。\n    \n    国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n    \n    我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n    \n    Chromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n    \n    几乎每天都在进行更新;\n    \n#### Chrome\n    基于 Chromium，但是它是闭源的！\n    所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n    \n    支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n    \n    Chrome 内置了 Flash，Chromium 需要额外安装\n    \n    据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n    \n    集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n    \n#### Dev Canary Stable Beta\n是Chrome的四个版本：\n\n- Stable 稳定版（几月一次更新）\n- Beta 测试版（1 月一次更新）\n- Dev 开发者版（1 星期一次更新）\n- Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n\n新版发布速度递增\n新功能数量递增\n稳定性递减\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n-   开发者版 chrome - [Dev - 开发者专用的每周更新版](https://www.google.cn/chrome/dev/)\n","slug":"devtools_01_intro","published":1,"updated":"2020-12-23T09:37:55.504Z","_id":"ckir88ify001rc8y6xfrvbi4s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；工具类知识需要实践，建议阅读本文时打开 <a href=\"https://masteringdevtools.com/\" target=\"_blank\" rel=\"noopener\">sample</a>和 devtools 操作一遍</li>\n<li>参考 1：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n<li>参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 <a href=\"https://frontendmasters.com/courses/chrome-dev-tools-v2\" target=\"_blank\" rel=\"noopener\">Mastering Chrome Developer Tools v2 课程</a></li>\n<li>参考 3：来自 作者 Tomek Sułkowski 在 medium 的<a href=\"https://medium.com/@tomsu\" target=\"_blank\" rel=\"noopener\">系列文章</a></li>\n<li><a href=\"https://i.loli.net/2019/04/19/5cb95639a9f73.png\" target=\"_blank\" rel=\"noopener\">Devtools脑图.png</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome相关介绍\"><a href=\"#Chrome相关介绍\" class=\"headerlink\" title=\"Chrome相关介绍\"></a>Chrome相关介绍</h2><h4 id=\"Chromium\"><a href=\"#Chromium\" class=\"headerlink\" title=\"Chromium\"></a>Chromium</h4><pre><code>是谷歌的开源项目，由开源社区维护。\n\n国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n\n我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n\nChromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n\n几乎每天都在进行更新;\n</code></pre><h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><pre><code>基于 Chromium，但是它是闭源的！\n所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n\n支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n\nChrome 内置了 Flash，Chromium 需要额外安装\n\n据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n\n集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n</code></pre><h4 id=\"Dev-Canary-Stable-Beta\"><a href=\"#Dev-Canary-Stable-Beta\" class=\"headerlink\" title=\"Dev Canary Stable Beta\"></a>Dev Canary Stable Beta</h4><p>是Chrome的四个版本：</p>\n<ul>\n<li>Stable 稳定版（几月一次更新）</li>\n<li>Beta 测试版（1 月一次更新）</li>\n<li>Dev 开发者版（1 星期一次更新）</li>\n<li>Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。</li>\n</ul>\n<p>新版发布速度递增<br>新功能数量递增<br>稳定性递减</p>\n<h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\"></p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n<li>开发者版 chrome - <a href=\"https://www.google.cn/chrome/dev/\" target=\"_blank\" rel=\"noopener\">Dev - 开发者专用的每周更新版</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；工具类知识需要实践，建议阅读本文时打开 <a href=\"https://masteringdevtools.com/\" target=\"_blank\" rel=\"noopener\">sample</a>和 devtools 操作一遍</li>\n<li>参考 1：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n<li>参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 <a href=\"https://frontendmasters.com/courses/chrome-dev-tools-v2\" target=\"_blank\" rel=\"noopener\">Mastering Chrome Developer Tools v2 课程</a></li>\n<li>参考 3：来自 作者 Tomek Sułkowski 在 medium 的<a href=\"https://medium.com/@tomsu\" target=\"_blank\" rel=\"noopener\">系列文章</a></li>\n<li><a href=\"https://i.loli.net/2019/04/19/5cb95639a9f73.png\" target=\"_blank\" rel=\"noopener\">Devtools脑图.png</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome相关介绍\"><a href=\"#Chrome相关介绍\" class=\"headerlink\" title=\"Chrome相关介绍\"></a>Chrome相关介绍</h2><h4 id=\"Chromium\"><a href=\"#Chromium\" class=\"headerlink\" title=\"Chromium\"></a>Chromium</h4><pre><code>是谷歌的开源项目，由开源社区维护。\n\n国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n\n我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n\nChromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n\n几乎每天都在进行更新;\n</code></pre><h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><pre><code>基于 Chromium，但是它是闭源的！\n所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n\n支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n\nChrome 内置了 Flash，Chromium 需要额外安装\n\n据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n\n集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n</code></pre><h4 id=\"Dev-Canary-Stable-Beta\"><a href=\"#Dev-Canary-Stable-Beta\" class=\"headerlink\" title=\"Dev Canary Stable Beta\"></a>Dev Canary Stable Beta</h4><p>是Chrome的四个版本：</p>\n<ul>\n<li>Stable 稳定版（几月一次更新）</li>\n<li>Beta 测试版（1 月一次更新）</li>\n<li>Dev 开发者版（1 星期一次更新）</li>\n<li>Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。</li>\n</ul>\n<p>新版发布速度递增<br>新功能数量递增<br>稳定性递减</p>\n<h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\"></p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n<li>开发者版 chrome - <a href=\"https://www.google.cn/chrome/dev/\" target=\"_blank\" rel=\"noopener\">Dev - 开发者专用的每周更新版</a></li>\n</ul>\n"},{"title":"Devtools 老司机养成 - 第三篇-Console 面板","date":"2020-03-07T16:00:00.000Z","description":"Console 面板是浏览器的控制台，也是 Devtools 的灵魂，只会console.log就过分啦～","toc":1,"top":0,"_content":"## 概览\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](https://i.loli.net/2019/07/29/5d3e5381c290f84642.png)\n\n## message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](https://i.loli.net/2019/07/29/5d3e53989dba574108.png)\n\n## javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n## 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](https://i.loli.net/2019/07/29/5d3e53a7d369f73554.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n默认情况下\n\n-   子 frame 中：\n\n```js\n(window === self) === self.window;\n//top.window是顶级页面top的全局变量window\n```\n\n-   top frame 中：\n\n```js\n(((window === self) === self.window) === top) === top.window;\n```\n\n## console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](https://i.loli.net/2019/07/29/5d3e53c18483c36428.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](https://i.loli.net/2019/07/29/5d3e53c198cdf46610.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](https://i.loli.net/2019/07/29/5d3e53c1ae52088165.gif)\n\n## console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](https://i.loli.net/2019/07/29/5d3e53ec0c9c777415.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](https://i.loli.net/2019/07/29/5d3e54117f36b48748.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](https://i.loli.net/2019/07/29/5d3e541ed227433392.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](https://i.loli.net/2019/07/29/5d3e542c27e8b99508.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](https://i.loli.net/2019/07/29/5d3e5480317cd69237.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](https://i.loli.net/2019/07/29/5d3e548f62a6723531.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](https://i.loli.net/2019/07/29/5d3e5494878e638089.png)\n","source":"_posts/devtools_03_console.md","raw":"---\ntitle: Devtools 老司机养成 - 第三篇-Console 面板\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2020-03-08\ndescription: Console 面板是浏览器的控制台，也是 Devtools 的灵魂，只会console.log就过分啦～\ntoc: 1\ntop: 0\n---\n## 概览\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](https://i.loli.net/2019/07/29/5d3e5381c290f84642.png)\n\n## message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](https://i.loli.net/2019/07/29/5d3e53989dba574108.png)\n\n## javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n## 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](https://i.loli.net/2019/07/29/5d3e53a7d369f73554.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n默认情况下\n\n-   子 frame 中：\n\n```js\n(window === self) === self.window;\n//top.window是顶级页面top的全局变量window\n```\n\n-   top frame 中：\n\n```js\n(((window === self) === self.window) === top) === top.window;\n```\n\n## console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](https://i.loli.net/2019/07/29/5d3e53c18483c36428.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](https://i.loli.net/2019/07/29/5d3e53c198cdf46610.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](https://i.loli.net/2019/07/29/5d3e53c1ae52088165.gif)\n\n## console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](https://i.loli.net/2019/07/29/5d3e53ec0c9c777415.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](https://i.loli.net/2019/07/29/5d3e54117f36b48748.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](https://i.loli.net/2019/07/29/5d3e541ed227433392.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](https://i.loli.net/2019/07/29/5d3e542c27e8b99508.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](https://i.loli.net/2019/07/29/5d3e5480317cd69237.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](https://i.loli.net/2019/07/29/5d3e548f62a6723531.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](https://i.loli.net/2019/07/29/5d3e5494878e638089.png)\n","slug":"devtools_03_console","published":1,"updated":"2020-09-03T07:01:27.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ifz001uc8y6lz60feng","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"https://i.loli.net/2019/07/29/5d3e5381c290f84642.png\" alt=\"0\"></p>\n<h2 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h2><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e53989dba574108.png\" alt=\"0\"></p>\n<h2 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h2><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h2 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h2><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e53a7d369f73554.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<p>默认情况下</p>\n<ul>\n<li>子 frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">window</span> === self) === self.window;</span><br><span class=\"line\"><span class=\"comment\">//top.window是顶级页面top的全局变量window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>top frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(((<span class=\"built_in\">window</span> === self) === self.window) === top) === top.window;</span><br></pre></td></tr></table></figure>\n<h2 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h2><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c18483c36428.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c198cdf46610.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c1ae52088165.gif\" alt=\"0\"></li>\n</ul>\n<h2 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h2><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"https://i.loli.net/2019/07/29/5d3e53ec0c9c777415.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"https://i.loli.net/2019/07/29/5d3e54117f36b48748.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"https://i.loli.net/2019/07/29/5d3e541ed227433392.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"https://i.loli.net/2019/07/29/5d3e542c27e8b99508.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"https://i.loli.net/2019/07/29/5d3e5480317cd69237.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"https://i.loli.net/2019/07/29/5d3e548f62a6723531.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"https://i.loli.net/2019/07/29/5d3e5494878e638089.png\" alt=\"0\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"https://i.loli.net/2019/07/29/5d3e5381c290f84642.png\" alt=\"0\"></p>\n<h2 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h2><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e53989dba574108.png\" alt=\"0\"></p>\n<h2 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h2><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h2 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h2><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e53a7d369f73554.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<p>默认情况下</p>\n<ul>\n<li>子 frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">window</span> === self) === self.window;</span><br><span class=\"line\"><span class=\"comment\">//top.window是顶级页面top的全局变量window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>top frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(((<span class=\"built_in\">window</span> === self) === self.window) === top) === top.window;</span><br></pre></td></tr></table></figure>\n<h2 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h2><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c18483c36428.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c198cdf46610.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"https://i.loli.net/2019/07/29/5d3e53c1ae52088165.gif\" alt=\"0\"></li>\n</ul>\n<h2 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h2><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"https://i.loli.net/2019/07/29/5d3e53ec0c9c777415.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"https://i.loli.net/2019/07/29/5d3e54117f36b48748.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"https://i.loli.net/2019/07/29/5d3e541ed227433392.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"https://i.loli.net/2019/07/29/5d3e542c27e8b99508.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"https://i.loli.net/2019/07/29/5d3e5480317cd69237.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"https://i.loli.net/2019/07/29/5d3e548f62a6723531.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"https://i.loli.net/2019/07/29/5d3e5494878e638089.png\" alt=\"0\"></li>\n</ul>\n"},{"title":"Devtools 老司机养成 - 第六篇 Performance 性能面板","date":"2020-03-28T16:00:00.000Z","description":"中高级前端都应该懂的性能分析&优化，都在Performance面板","toc":1,"top":0,"_content":"\n\n## Performance面板概览\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Junky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n## RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n## 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n## FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n## CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n## SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n## HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n## Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n## FPS 仪表工具\n\n-   通过`more -> more tools -> Rendering` 或者 `ctrl+shift+p -> rendering` 打开`Rendering`面板\n\n![](https://i.loli.net/2019/05/05/5ccee9d226d2e.png)\n\n-   启用`FPS meter`，即可看到的页面实时帧率\n\n![](https://i.loli.net/2019/05/05/5cceeb3144e12.gif)\n\n## Mian\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n## 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n\n## 浏览器并发请求数\n- 现象：\n    同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。\n\n- 原因：\n    基于端口数量和线程切换开销的考虑，浏览器不可能无限量的并发请求。\n\n- 导致：\n    有大量请求的站点，响应较慢，因为并发请求会被阻塞。\n\n-   ![不同浏览器的限制数](https://i.loli.net/2019/07/29/5d3e56236ee0b54748.png)\n\n- 解决方法：\n  1. 用不同域名（hash domain，cookie free）\n    例如知乎的图片都是放在zhiimg.com域名下获取的。\n    cookie free是指，例如知乎主站zhihu.com域名下有很多cookie，换成zhihuimg.com请求图片时，就不会把zhihu上的cookie发过去，减小所需带宽。\n\n  2. 减少请求数\n  雪碧图\n  合并压缩css/js（另一个原因是为了减少重绘）\n  利用Cache-Control等缓存静态资源，在更新静态资源时使用不同url或文件名带上版本\n  懒加载，出现再加载","source":"_posts/devtools_06_performance.md","raw":"---\ntitle: Devtools 老司机养成 - 第六篇 Performance 性能面板\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2020-03-29\ndescription: 中高级前端都应该懂的性能分析&优化，都在Performance面板\ntoc: 1\ntop: 0\n---\n\n\n## Performance面板概览\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Junky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n## RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n## 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n## FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n## CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n## SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n## HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n## Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n## FPS 仪表工具\n\n-   通过`more -> more tools -> Rendering` 或者 `ctrl+shift+p -> rendering` 打开`Rendering`面板\n\n![](https://i.loli.net/2019/05/05/5ccee9d226d2e.png)\n\n-   启用`FPS meter`，即可看到的页面实时帧率\n\n![](https://i.loli.net/2019/05/05/5cceeb3144e12.gif)\n\n## Mian\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n## 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n\n## 浏览器并发请求数\n- 现象：\n    同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。\n\n- 原因：\n    基于端口数量和线程切换开销的考虑，浏览器不可能无限量的并发请求。\n\n- 导致：\n    有大量请求的站点，响应较慢，因为并发请求会被阻塞。\n\n-   ![不同浏览器的限制数](https://i.loli.net/2019/07/29/5d3e56236ee0b54748.png)\n\n- 解决方法：\n  1. 用不同域名（hash domain，cookie free）\n    例如知乎的图片都是放在zhiimg.com域名下获取的。\n    cookie free是指，例如知乎主站zhihu.com域名下有很多cookie，换成zhihuimg.com请求图片时，就不会把zhihu上的cookie发过去，减小所需带宽。\n\n  2. 减少请求数\n  雪碧图\n  合并压缩css/js（另一个原因是为了减少重绘）\n  利用Cache-Control等缓存静态资源，在更新静态资源时使用不同url或文件名带上版本\n  懒加载，出现再加载","slug":"devtools_06_performance","published":1,"updated":"2020-09-03T07:01:27.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ig0001vc8y6w4pjyxnm","content":"<h2 id=\"Performance面板概览\"><a href=\"#Performance面板概览\" class=\"headerlink\" title=\"Performance面板概览\"></a>Performance面板概览</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Junky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h2 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h2 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h2><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h2 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h2 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h2 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h2><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h2 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h2 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h2><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h2 id=\"FPS-仪表工具\"><a href=\"#FPS-仪表工具\" class=\"headerlink\" title=\"FPS 仪表工具\"></a>FPS 仪表工具</h2><ul>\n<li>通过<code>more -&gt; more tools -&gt; Rendering</code> 或者 <code>ctrl+shift+p -&gt; rendering</code> 打开<code>Rendering</code>面板</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee9d226d2e.png\" alt></p>\n<ul>\n<li>启用<code>FPS meter</code>，即可看到的页面实时帧率</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceeb3144e12.gif\" alt></p>\n<h2 id=\"Mian\"><a href=\"#Mian\" class=\"headerlink\" title=\"Mian\"></a>Mian</h2><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h2 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n<h2 id=\"浏览器并发请求数\"><a href=\"#浏览器并发请求数\" class=\"headerlink\" title=\"浏览器并发请求数\"></a>浏览器并发请求数</h2><ul>\n<li><p>现象：<br>  同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。</p>\n</li>\n<li><p>原因：<br>  基于端口数量和线程切换开销的考虑，浏览器不可能无限量的并发请求。</p>\n</li>\n<li><p>导致：<br>  有大量请求的站点，响应较慢，因为并发请求会被阻塞。</p>\n</li>\n<li><p><img src=\"https://i.loli.net/2019/07/29/5d3e56236ee0b54748.png\" alt=\"不同浏览器的限制数\"></p>\n</li>\n<li><p>解决方法：</p>\n<ol>\n<li><p>用不同域名（hash domain，cookie free）<br>例如知乎的图片都是放在zhiimg.com域名下获取的。<br>cookie free是指，例如知乎主站zhihu.com域名下有很多cookie，换成zhihuimg.com请求图片时，就不会把zhihu上的cookie发过去，减小所需带宽。</p>\n</li>\n<li><p>减少请求数<br>雪碧图<br>合并压缩css/js（另一个原因是为了减少重绘）<br>利用Cache-Control等缓存静态资源，在更新静态资源时使用不同url或文件名带上版本<br>懒加载，出现再加载</p>\n</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Performance面板概览\"><a href=\"#Performance面板概览\" class=\"headerlink\" title=\"Performance面板概览\"></a>Performance面板概览</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Junky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h2 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h2 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h2><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h2 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h2 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h2 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h2><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h2 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h2><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h2 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h2><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h2 id=\"FPS-仪表工具\"><a href=\"#FPS-仪表工具\" class=\"headerlink\" title=\"FPS 仪表工具\"></a>FPS 仪表工具</h2><ul>\n<li>通过<code>more -&gt; more tools -&gt; Rendering</code> 或者 <code>ctrl+shift+p -&gt; rendering</code> 打开<code>Rendering</code>面板</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee9d226d2e.png\" alt></p>\n<ul>\n<li>启用<code>FPS meter</code>，即可看到的页面实时帧率</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceeb3144e12.gif\" alt></p>\n<h2 id=\"Mian\"><a href=\"#Mian\" class=\"headerlink\" title=\"Mian\"></a>Mian</h2><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h2 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h2><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n<h2 id=\"浏览器并发请求数\"><a href=\"#浏览器并发请求数\" class=\"headerlink\" title=\"浏览器并发请求数\"></a>浏览器并发请求数</h2><ul>\n<li><p>现象：<br>  同一时间针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞。</p>\n</li>\n<li><p>原因：<br>  基于端口数量和线程切换开销的考虑，浏览器不可能无限量的并发请求。</p>\n</li>\n<li><p>导致：<br>  有大量请求的站点，响应较慢，因为并发请求会被阻塞。</p>\n</li>\n<li><p><img src=\"https://i.loli.net/2019/07/29/5d3e56236ee0b54748.png\" alt=\"不同浏览器的限制数\"></p>\n</li>\n<li><p>解决方法：</p>\n<ol>\n<li><p>用不同域名（hash domain，cookie free）<br>例如知乎的图片都是放在zhiimg.com域名下获取的。<br>cookie free是指，例如知乎主站zhihu.com域名下有很多cookie，换成zhihuimg.com请求图片时，就不会把zhihu上的cookie发过去，减小所需带宽。</p>\n</li>\n<li><p>减少请求数<br>雪碧图<br>合并压缩css/js（另一个原因是为了减少重绘）<br>利用Cache-Control等缓存静态资源，在更新静态资源时使用不同url或文件名带上版本<br>懒加载，出现再加载</p>\n</li>\n</ol>\n</li>\n</ul>\n"},{"title":"正则自检清单","date":"2020-05-05T16:00:00.000Z","description":"正则是程序员必备的效率生产力知识~","toc":1,"top":0,"status":"Continuous Updates","img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211230835.png","_content":"## 正则原型`test`方法\n```javascript\nlet myString = \"Hello, World!\";\nlet myRegex = /Hello/;\nlet result = myRegex.test(myString);\n```\n\n## 或操作符`|`\n```javascript\nlet waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /Waldo/;\nlet result = waldoRegex.test(waldoIsHiding);\n```\n\n## 正则标志\n- 标志`i`：忽略大小写\n- 标志`g`：全局匹配（多次匹配）\n\n## 字符串原型方法：`match`\n- 在字符串上使用`.match()`方法将返回一个数组，其中包含它匹配的字符串及其捕获组。\n```javascript\n\"Hello, World!\".match(/Hello/);\n// Returns [\"Hello\"]\n```\n\n## 通配符：`.`（点）\n\n## 字符集匹配：`[]`\n```javascript\nlet vowelRegex = /[aeiou]/gi; \nlet result = quoteSample.match(vowelRegex); \n```\n\n## 字符集 连字符：`-` 字符范围\n```javascript\nlet quoteSample = \"The quick brown fox jumps over the lazy dog.\";\nlet alphabetRegex = /[a-z]/gi; \nlet result = quoteSample.match(alphabetRegex); \n```\n\n## 否定字符集：`^`\n- /[^1-9]/g  匹配所有非数字字符\n\n## `+*?^$`\n- +：一次或多次\n- *：0次或多次\n- ？：0次或1次\n- 字符串开头：^\n- 字符串结尾：$\n\n## 贪婪匹配 & 惰性匹配\n- 贪婪匹配：正则默认贪婪匹配，匹配满足表达式的最长部分\n- 惰性匹配：匹配满足表达式的最小部分：加？\n```javascript\nlet text = \"<h1>Winter is coming</h1>\";\nlet myRegex = /<.*?1>/; \nlet result = text.match(myRegex);\nconsole.log(result)\n```\n\n## 字符集\n- `\\w` : [A-Za-z0-9_]   数字字母下划线\n- `\\W`: [^A-Za-z0-9_]   反匹配模式\n- `\\d`:  [0-9]  数字\n- `\\D`:  [^0-9] 非数字\n- `\\s`:  [\\r\\t\\f\\n\\v]  空格 回车 制表符 换行 换页\n- `\\S`:  [^\\r\\t\\f\\n\\v]\n\n\n## 匹配的数量上下限\n- `{m,n}`最少m个，最多n个\n- `{m}`指定m个\n- `{m,}`最少m个\n- `{,n}`最多n个\n\n\n## 先行断言：在字符串中向前查找的匹配模式。\n- `正向先行断言`：会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。\n- 用法是(`?=`...)，其中...就是需要存在但不会被匹配的部分。\n- `负向先行断言`：会查看并确保搜索匹配模式中的元素不存在。\n- 用法是(`?!`...)，其中...是你希望不存在的匹配模式。如果负向先行断言部分不存在，将返回匹配模式的其余部分。\n\n\n例子：\n- 3 到 6 个字符且至少包含一个数字：\n```javascript\nlet password = \"abc123\";\nlet checkPass = /(?=\\w{3,6})(?=\\D*\\d)/;\ncheckPass.test(password); // Returns true\n```\n- 至少5个字符且有连续两个数字的密码：\n```javascript\nlet sampleWord = \"astronaut\";\nlet pwRegex = /(?=\\w{5,})(?=\\D*\\d{2}\\D*)/;\nlet result = pwRegex.test(sampleWord);\n```\n\n\n\n\n## 捕获组：重用子字符串\n- 用`（）`来表示捕获组，匹配第一次出现的子字符串\n- 用` \\n`来表示第n个捕获组，n是数字，表示第n个捕获组\n```javascript\nlet repeatStr = \"regex regex\";\nlet repeatRegex = /(\\w+)\\s\\1/;\nrepeatRegex.test(repeatStr); // Returns true\nrepeatStr.match(repeatRegex); // Returns [\"regex regex\", \"regex\"]\n```\n\n\n## 字符串原型方法replace：捕获组 搜索/替换\n- `.replace()`的输入首先是你想要搜索的正则表达式匹配模式，\n- 第二个参数是用于替换匹配的字符串或用于执行某些操作的函数。\n- 第二个参数中，可以用`$n`访问替换字符串中的捕获组（即用括号括起来的组）\n- 其中n表示`第n个捕获组`\n\n- 例子:\n```javascript\n\"Code Camp\".replace(/(\\w+)\\s(\\w+)/, '$2 $1');\n// Returns \"Camp Code\"\n```\n- 去除字符串两端的空格\n```javascript\nlet hello = \"   Hello, World!  \";\nlet wsRegex = /^\\s+(\\S.*\\S)\\s+$/; \nlet result = hello.replace(wsRegex,\"$1\");\n```\n\n","source":"_posts/dive_into_regular_expression.md","raw":"---\ntitle: 正则自检清单\ncategories:\n    - 10技术 | JavaScript # 一级分类\ntags:\ndate: 2020-05-06\ndescription: 正则是程序员必备的效率生产力知识~\ntoc: 1\ntop: 0\nstatus: Continuous Updates\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211230835.png\n---\n## 正则原型`test`方法\n```javascript\nlet myString = \"Hello, World!\";\nlet myRegex = /Hello/;\nlet result = myRegex.test(myString);\n```\n\n## 或操作符`|`\n```javascript\nlet waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /Waldo/;\nlet result = waldoRegex.test(waldoIsHiding);\n```\n\n## 正则标志\n- 标志`i`：忽略大小写\n- 标志`g`：全局匹配（多次匹配）\n\n## 字符串原型方法：`match`\n- 在字符串上使用`.match()`方法将返回一个数组，其中包含它匹配的字符串及其捕获组。\n```javascript\n\"Hello, World!\".match(/Hello/);\n// Returns [\"Hello\"]\n```\n\n## 通配符：`.`（点）\n\n## 字符集匹配：`[]`\n```javascript\nlet vowelRegex = /[aeiou]/gi; \nlet result = quoteSample.match(vowelRegex); \n```\n\n## 字符集 连字符：`-` 字符范围\n```javascript\nlet quoteSample = \"The quick brown fox jumps over the lazy dog.\";\nlet alphabetRegex = /[a-z]/gi; \nlet result = quoteSample.match(alphabetRegex); \n```\n\n## 否定字符集：`^`\n- /[^1-9]/g  匹配所有非数字字符\n\n## `+*?^$`\n- +：一次或多次\n- *：0次或多次\n- ？：0次或1次\n- 字符串开头：^\n- 字符串结尾：$\n\n## 贪婪匹配 & 惰性匹配\n- 贪婪匹配：正则默认贪婪匹配，匹配满足表达式的最长部分\n- 惰性匹配：匹配满足表达式的最小部分：加？\n```javascript\nlet text = \"<h1>Winter is coming</h1>\";\nlet myRegex = /<.*?1>/; \nlet result = text.match(myRegex);\nconsole.log(result)\n```\n\n## 字符集\n- `\\w` : [A-Za-z0-9_]   数字字母下划线\n- `\\W`: [^A-Za-z0-9_]   反匹配模式\n- `\\d`:  [0-9]  数字\n- `\\D`:  [^0-9] 非数字\n- `\\s`:  [\\r\\t\\f\\n\\v]  空格 回车 制表符 换行 换页\n- `\\S`:  [^\\r\\t\\f\\n\\v]\n\n\n## 匹配的数量上下限\n- `{m,n}`最少m个，最多n个\n- `{m}`指定m个\n- `{m,}`最少m个\n- `{,n}`最多n个\n\n\n## 先行断言：在字符串中向前查找的匹配模式。\n- `正向先行断言`：会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。\n- 用法是(`?=`...)，其中...就是需要存在但不会被匹配的部分。\n- `负向先行断言`：会查看并确保搜索匹配模式中的元素不存在。\n- 用法是(`?!`...)，其中...是你希望不存在的匹配模式。如果负向先行断言部分不存在，将返回匹配模式的其余部分。\n\n\n例子：\n- 3 到 6 个字符且至少包含一个数字：\n```javascript\nlet password = \"abc123\";\nlet checkPass = /(?=\\w{3,6})(?=\\D*\\d)/;\ncheckPass.test(password); // Returns true\n```\n- 至少5个字符且有连续两个数字的密码：\n```javascript\nlet sampleWord = \"astronaut\";\nlet pwRegex = /(?=\\w{5,})(?=\\D*\\d{2}\\D*)/;\nlet result = pwRegex.test(sampleWord);\n```\n\n\n\n\n## 捕获组：重用子字符串\n- 用`（）`来表示捕获组，匹配第一次出现的子字符串\n- 用` \\n`来表示第n个捕获组，n是数字，表示第n个捕获组\n```javascript\nlet repeatStr = \"regex regex\";\nlet repeatRegex = /(\\w+)\\s\\1/;\nrepeatRegex.test(repeatStr); // Returns true\nrepeatStr.match(repeatRegex); // Returns [\"regex regex\", \"regex\"]\n```\n\n\n## 字符串原型方法replace：捕获组 搜索/替换\n- `.replace()`的输入首先是你想要搜索的正则表达式匹配模式，\n- 第二个参数是用于替换匹配的字符串或用于执行某些操作的函数。\n- 第二个参数中，可以用`$n`访问替换字符串中的捕获组（即用括号括起来的组）\n- 其中n表示`第n个捕获组`\n\n- 例子:\n```javascript\n\"Code Camp\".replace(/(\\w+)\\s(\\w+)/, '$2 $1');\n// Returns \"Camp Code\"\n```\n- 去除字符串两端的空格\n```javascript\nlet hello = \"   Hello, World!  \";\nlet wsRegex = /^\\s+(\\S.*\\S)\\s+$/; \nlet result = hello.replace(wsRegex,\"$1\");\n```\n\n","slug":"dive_into_regular_expression","published":1,"updated":"2020-12-11T15:08:47.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ig2001yc8y63m895z78","content":"<h2 id=\"正则原型test方法\"><a href=\"#正则原型test方法\" class=\"headerlink\" title=\"正则原型test方法\"></a>正则原型<code>test</code>方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myString = <span class=\"string\">\"Hello, World!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myRegex = <span class=\"regexp\">/Hello/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = myRegex.test(myString);</span><br></pre></td></tr></table></figure>\n<h2 id=\"或操作符\"><a href=\"#或操作符\" class=\"headerlink\" title=\"或操作符|\"></a>或操作符<code>|</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> waldoIsHiding = <span class=\"string\">\"Somewhere Waldo is hiding in this text.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> waldoRegex = <span class=\"regexp\">/Waldo/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = waldoRegex.test(waldoIsHiding);</span><br></pre></td></tr></table></figure>\n<h2 id=\"正则标志\"><a href=\"#正则标志\" class=\"headerlink\" title=\"正则标志\"></a>正则标志</h2><ul>\n<li>标志<code>i</code>：忽略大小写</li>\n<li>标志<code>g</code>：全局匹配（多次匹配）</li>\n</ul>\n<h2 id=\"字符串原型方法：match\"><a href=\"#字符串原型方法：match\" class=\"headerlink\" title=\"字符串原型方法：match\"></a>字符串原型方法：<code>match</code></h2><ul>\n<li>在字符串上使用<code>.match()</code>方法将返回一个数组，其中包含它匹配的字符串及其捕获组。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello, World!\"</span>.match(<span class=\"regexp\">/Hello/</span>);</span><br><span class=\"line\"><span class=\"comment\">// Returns [\"Hello\"]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"通配符：-（点）\"><a href=\"#通配符：-（点）\" class=\"headerlink\" title=\"通配符：.（点）\"></a>通配符：<code>.</code>（点）</h2><h2 id=\"字符集匹配：\"><a href=\"#字符集匹配：\" class=\"headerlink\" title=\"字符集匹配：[]\"></a>字符集匹配：<code>[]</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vowelRegex = <span class=\"regexp\">/[aeiou]/gi</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = quoteSample.match(vowelRegex);</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符集-连字符：-字符范围\"><a href=\"#字符集-连字符：-字符范围\" class=\"headerlink\" title=\"字符集 连字符：- 字符范围\"></a>字符集 连字符：<code>-</code> 字符范围</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> quoteSample = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> alphabetRegex = <span class=\"regexp\">/[a-z]/gi</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = quoteSample.match(alphabetRegex);</span><br></pre></td></tr></table></figure>\n<h2 id=\"否定字符集：\"><a href=\"#否定字符集：\" class=\"headerlink\" title=\"否定字符集：^\"></a>否定字符集：<code>^</code></h2><ul>\n<li>/[^1-9]/g  匹配所有非数字字符</li>\n</ul>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\"+*?^$\"></a><code>+*?^$</code></h2><ul>\n<li>+：一次或多次</li>\n<li>*：0次或多次</li>\n<li>？：0次或1次</li>\n<li>字符串开头：^</li>\n<li>字符串结尾：$</li>\n</ul>\n<h2 id=\"贪婪匹配-amp-惰性匹配\"><a href=\"#贪婪匹配-amp-惰性匹配\" class=\"headerlink\" title=\"贪婪匹配 &amp; 惰性匹配\"></a>贪婪匹配 &amp; 惰性匹配</h2><ul>\n<li>贪婪匹配：正则默认贪婪匹配，匹配满足表达式的最长部分</li>\n<li>惰性匹配：匹配满足表达式的最小部分：加？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">\"&lt;h1&gt;Winter is coming&lt;/h1&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myRegex = <span class=\"regexp\">/&lt;.*?1&gt;/</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = text.match(myRegex);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><ul>\n<li><code>\\w</code> : [A-Za-z0-9_]   数字字母下划线</li>\n<li><code>\\W</code>: [^A-Za-z0-9_]   反匹配模式</li>\n<li><code>\\d</code>:  [0-9]  数字</li>\n<li><code>\\D</code>:  [^0-9] 非数字</li>\n<li><code>\\s</code>:  [\\r\\t\\f\\n\\v]  空格 回车 制表符 换行 换页</li>\n<li><code>\\S</code>:  [^\\r\\t\\f\\n\\v]</li>\n</ul>\n<h2 id=\"匹配的数量上下限\"><a href=\"#匹配的数量上下限\" class=\"headerlink\" title=\"匹配的数量上下限\"></a>匹配的数量上下限</h2><ul>\n<li><code>{m,n}</code>最少m个，最多n个</li>\n<li><code>{m}</code>指定m个</li>\n<li><code>{m,}</code>最少m个</li>\n<li><code>{,n}</code>最多n个</li>\n</ul>\n<h2 id=\"先行断言：在字符串中向前查找的匹配模式。\"><a href=\"#先行断言：在字符串中向前查找的匹配模式。\" class=\"headerlink\" title=\"先行断言：在字符串中向前查找的匹配模式。\"></a>先行断言：在字符串中向前查找的匹配模式。</h2><ul>\n<li><code>正向先行断言</code>：会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。</li>\n<li>用法是(<code>?=</code>…)，其中…就是需要存在但不会被匹配的部分。</li>\n<li><code>负向先行断言</code>：会查看并确保搜索匹配模式中的元素不存在。</li>\n<li>用法是(<code>?!</code>…)，其中…是你希望不存在的匹配模式。如果负向先行断言部分不存在，将返回匹配模式的其余部分。</li>\n</ul>\n<p>例子：</p>\n<ul>\n<li><p>3 到 6 个字符且至少包含一个数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> password = <span class=\"string\">\"abc123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> checkPass = <span class=\"regexp\">/(?=\\w&#123;3,6&#125;)(?=\\D*\\d)/</span>;</span><br><span class=\"line\">checkPass.test(password); <span class=\"comment\">// Returns true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>至少5个字符且有连续两个数字的密码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sampleWord = <span class=\"string\">\"astronaut\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pwRegex = <span class=\"regexp\">/(?=\\w&#123;5,&#125;)(?=\\D*\\d&#123;2&#125;\\D*)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = pwRegex.test(sampleWord);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"捕获组：重用子字符串\"><a href=\"#捕获组：重用子字符串\" class=\"headerlink\" title=\"捕获组：重用子字符串\"></a>捕获组：重用子字符串</h2><ul>\n<li>用<code>（）</code>来表示捕获组，匹配第一次出现的子字符串</li>\n<li>用<code>\\n</code>来表示第n个捕获组，n是数字，表示第n个捕获组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> repeatStr = <span class=\"string\">\"regex regex\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> repeatRegex = <span class=\"regexp\">/(\\w+)\\s\\1/</span>;</span><br><span class=\"line\">repeatRegex.test(repeatStr); <span class=\"comment\">// Returns true</span></span><br><span class=\"line\">repeatStr.match(repeatRegex); <span class=\"comment\">// Returns [\"regex regex\", \"regex\"]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"字符串原型方法replace：捕获组-搜索-替换\"><a href=\"#字符串原型方法replace：捕获组-搜索-替换\" class=\"headerlink\" title=\"字符串原型方法replace：捕获组 搜索/替换\"></a>字符串原型方法replace：捕获组 搜索/替换</h2><ul>\n<li><code>.replace()</code>的输入首先是你想要搜索的正则表达式匹配模式，</li>\n<li>第二个参数是用于替换匹配的字符串或用于执行某些操作的函数。</li>\n<li>第二个参数中，可以用<code>$n</code>访问替换字符串中的捕获组（即用括号括起来的组）</li>\n<li><p>其中n表示<code>第n个捕获组</code></p>\n</li>\n<li><p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Code Camp\"</span>.replace(<span class=\"regexp\">/(\\w+)\\s(\\w+)/</span>, <span class=\"string\">'$2 $1'</span>);</span><br><span class=\"line\"><span class=\"comment\">// Returns \"Camp Code\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去除字符串两端的空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> hello = <span class=\"string\">\"   Hello, World!  \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> wsRegex = <span class=\"regexp\">/^\\s+(\\S.*\\S)\\s+$/</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = hello.replace(wsRegex,<span class=\"string\">\"$1\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正则原型test方法\"><a href=\"#正则原型test方法\" class=\"headerlink\" title=\"正则原型test方法\"></a>正则原型<code>test</code>方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myString = <span class=\"string\">\"Hello, World!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myRegex = <span class=\"regexp\">/Hello/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = myRegex.test(myString);</span><br></pre></td></tr></table></figure>\n<h2 id=\"或操作符\"><a href=\"#或操作符\" class=\"headerlink\" title=\"或操作符|\"></a>或操作符<code>|</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> waldoIsHiding = <span class=\"string\">\"Somewhere Waldo is hiding in this text.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> waldoRegex = <span class=\"regexp\">/Waldo/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = waldoRegex.test(waldoIsHiding);</span><br></pre></td></tr></table></figure>\n<h2 id=\"正则标志\"><a href=\"#正则标志\" class=\"headerlink\" title=\"正则标志\"></a>正则标志</h2><ul>\n<li>标志<code>i</code>：忽略大小写</li>\n<li>标志<code>g</code>：全局匹配（多次匹配）</li>\n</ul>\n<h2 id=\"字符串原型方法：match\"><a href=\"#字符串原型方法：match\" class=\"headerlink\" title=\"字符串原型方法：match\"></a>字符串原型方法：<code>match</code></h2><ul>\n<li>在字符串上使用<code>.match()</code>方法将返回一个数组，其中包含它匹配的字符串及其捕获组。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello, World!\"</span>.match(<span class=\"regexp\">/Hello/</span>);</span><br><span class=\"line\"><span class=\"comment\">// Returns [\"Hello\"]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"通配符：-（点）\"><a href=\"#通配符：-（点）\" class=\"headerlink\" title=\"通配符：.（点）\"></a>通配符：<code>.</code>（点）</h2><h2 id=\"字符集匹配：\"><a href=\"#字符集匹配：\" class=\"headerlink\" title=\"字符集匹配：[]\"></a>字符集匹配：<code>[]</code></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vowelRegex = <span class=\"regexp\">/[aeiou]/gi</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = quoteSample.match(vowelRegex);</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符集-连字符：-字符范围\"><a href=\"#字符集-连字符：-字符范围\" class=\"headerlink\" title=\"字符集 连字符：- 字符范围\"></a>字符集 连字符：<code>-</code> 字符范围</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> quoteSample = <span class=\"string\">\"The quick brown fox jumps over the lazy dog.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> alphabetRegex = <span class=\"regexp\">/[a-z]/gi</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = quoteSample.match(alphabetRegex);</span><br></pre></td></tr></table></figure>\n<h2 id=\"否定字符集：\"><a href=\"#否定字符集：\" class=\"headerlink\" title=\"否定字符集：^\"></a>否定字符集：<code>^</code></h2><ul>\n<li>/[^1-9]/g  匹配所有非数字字符</li>\n</ul>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\"+*?^$\"></a><code>+*?^$</code></h2><ul>\n<li>+：一次或多次</li>\n<li>*：0次或多次</li>\n<li>？：0次或1次</li>\n<li>字符串开头：^</li>\n<li>字符串结尾：$</li>\n</ul>\n<h2 id=\"贪婪匹配-amp-惰性匹配\"><a href=\"#贪婪匹配-amp-惰性匹配\" class=\"headerlink\" title=\"贪婪匹配 &amp; 惰性匹配\"></a>贪婪匹配 &amp; 惰性匹配</h2><ul>\n<li>贪婪匹配：正则默认贪婪匹配，匹配满足表达式的最长部分</li>\n<li>惰性匹配：匹配满足表达式的最小部分：加？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"string\">\"&lt;h1&gt;Winter is coming&lt;/h1&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myRegex = <span class=\"regexp\">/&lt;.*?1&gt;/</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = text.match(myRegex);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><ul>\n<li><code>\\w</code> : [A-Za-z0-9_]   数字字母下划线</li>\n<li><code>\\W</code>: [^A-Za-z0-9_]   反匹配模式</li>\n<li><code>\\d</code>:  [0-9]  数字</li>\n<li><code>\\D</code>:  [^0-9] 非数字</li>\n<li><code>\\s</code>:  [\\r\\t\\f\\n\\v]  空格 回车 制表符 换行 换页</li>\n<li><code>\\S</code>:  [^\\r\\t\\f\\n\\v]</li>\n</ul>\n<h2 id=\"匹配的数量上下限\"><a href=\"#匹配的数量上下限\" class=\"headerlink\" title=\"匹配的数量上下限\"></a>匹配的数量上下限</h2><ul>\n<li><code>{m,n}</code>最少m个，最多n个</li>\n<li><code>{m}</code>指定m个</li>\n<li><code>{m,}</code>最少m个</li>\n<li><code>{,n}</code>最多n个</li>\n</ul>\n<h2 id=\"先行断言：在字符串中向前查找的匹配模式。\"><a href=\"#先行断言：在字符串中向前查找的匹配模式。\" class=\"headerlink\" title=\"先行断言：在字符串中向前查找的匹配模式。\"></a>先行断言：在字符串中向前查找的匹配模式。</h2><ul>\n<li><code>正向先行断言</code>：会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。</li>\n<li>用法是(<code>?=</code>…)，其中…就是需要存在但不会被匹配的部分。</li>\n<li><code>负向先行断言</code>：会查看并确保搜索匹配模式中的元素不存在。</li>\n<li>用法是(<code>?!</code>…)，其中…是你希望不存在的匹配模式。如果负向先行断言部分不存在，将返回匹配模式的其余部分。</li>\n</ul>\n<p>例子：</p>\n<ul>\n<li><p>3 到 6 个字符且至少包含一个数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> password = <span class=\"string\">\"abc123\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> checkPass = <span class=\"regexp\">/(?=\\w&#123;3,6&#125;)(?=\\D*\\d)/</span>;</span><br><span class=\"line\">checkPass.test(password); <span class=\"comment\">// Returns true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>至少5个字符且有连续两个数字的密码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sampleWord = <span class=\"string\">\"astronaut\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pwRegex = <span class=\"regexp\">/(?=\\w&#123;5,&#125;)(?=\\D*\\d&#123;2&#125;\\D*)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = pwRegex.test(sampleWord);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"捕获组：重用子字符串\"><a href=\"#捕获组：重用子字符串\" class=\"headerlink\" title=\"捕获组：重用子字符串\"></a>捕获组：重用子字符串</h2><ul>\n<li>用<code>（）</code>来表示捕获组，匹配第一次出现的子字符串</li>\n<li>用<code>\\n</code>来表示第n个捕获组，n是数字，表示第n个捕获组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> repeatStr = <span class=\"string\">\"regex regex\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> repeatRegex = <span class=\"regexp\">/(\\w+)\\s\\1/</span>;</span><br><span class=\"line\">repeatRegex.test(repeatStr); <span class=\"comment\">// Returns true</span></span><br><span class=\"line\">repeatStr.match(repeatRegex); <span class=\"comment\">// Returns [\"regex regex\", \"regex\"]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"字符串原型方法replace：捕获组-搜索-替换\"><a href=\"#字符串原型方法replace：捕获组-搜索-替换\" class=\"headerlink\" title=\"字符串原型方法replace：捕获组 搜索/替换\"></a>字符串原型方法replace：捕获组 搜索/替换</h2><ul>\n<li><code>.replace()</code>的输入首先是你想要搜索的正则表达式匹配模式，</li>\n<li>第二个参数是用于替换匹配的字符串或用于执行某些操作的函数。</li>\n<li>第二个参数中，可以用<code>$n</code>访问替换字符串中的捕获组（即用括号括起来的组）</li>\n<li><p>其中n表示<code>第n个捕获组</code></p>\n</li>\n<li><p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Code Camp\"</span>.replace(<span class=\"regexp\">/(\\w+)\\s(\\w+)/</span>, <span class=\"string\">'$2 $1'</span>);</span><br><span class=\"line\"><span class=\"comment\">// Returns \"Camp Code\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去除字符串两端的空格</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> hello = <span class=\"string\">\"   Hello, World!  \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> wsRegex = <span class=\"regexp\">/^\\s+(\\S.*\\S)\\s+$/</span>; </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = hello.replace(wsRegex,<span class=\"string\">\"$1\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Devtools 老司机养成 - 第七篇- Memory 内存","date":"2020-04-04T16:00:00.000Z","description":"你开的网页会卡吗？来Memory面板了解一下内存分析&内存泄漏","toc":1,"top":0,"_content":"\n## 内存 && 内存泄露\n\n内存占用：\n\n1. allocate 分配内存(eg 声明变量\n2. 使用内存\n3. release 释放内存\n\n内存泄漏：\n\n-   `内存泄露-Memory Leak`：内存被占用后无法被 release，且无法被垃圾回收器回收\n-   内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少\n-   `垃圾回收-Garbage Collect-GC`：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停\n\n## 造成内存泄露常见原因\n\n-   `fogotten timer`被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件\n-   `Dettached HTMLElement`分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在\n\n## 内存监控 1-Task manager 任务管理器\n\n-   chorme 浏览器 -> task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小\n\n![](https://i.loli.net/2019/05/07/5cd194ba3a655.png)\n\n-   `Memory` 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。\n-   `JavaScript Memory`列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。\n\n## 内存监控 2-Devtools Performance 面板\n\n-   在`Performance`面板记录性能时，勾选`memory`即可在分析结果中看到 memory 占用情况\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n```js\n//示例1:正常的内存占用与GC\n\nvar x = [];\n\nfunction grow() {\n    for (var i = 0; i < 10000; i++) {\n        document.body.appendChild(document.createElement(\"div\"));\n    }\n    x.push(new Array(1000000).join(\"x\"));\n}\n\nsetInterval(grow, 100);\n```\n\n![](https://i.loli.net/2019/05/07/5cd19db41fbbc.png)\n\n```js\n//示例2:不可被GC的内存泄漏\n\nfunction grow() {\n    // for (var i = 0; i < 10000; i++) {\n    //     document.body.appendChild(document.createElement(\"div\"));\n    // }\n    // x.push(new Array(1000000).join(\"x\"));\n    var ul = document.createElement(\"ul\");\n    for (var i = 0; i < 10; i++) {\n        var li = document.createElement(\"li\");\n        ul.appendChild(li);\n    }\n    detachedTree = ul;\n}\n\nsetInterval(grow, 1000);\n```\n\n![](https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png)\n\n## 内存监控 3-Devtools Memory 面板\n\n![](https://i.loli.net/2019/05/07/5cd18fa5d8489.png)\n\n-   如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角`record`开始记录内存\n\n1.  `Heap snapshot`堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况\n2.  `Allocation instrumentation on timeline`按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)\n3.  `Allocation sampling`使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。\n\n-   左上角的垃圾桶图标`Collect garbage`是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收\n\n-   利用上述示例 2 代码，执行时间线 Memory 分析：\n\n![](https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png)\n\n## 扩展\n\n-   [内存相关术语](https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101)\n-   [深入内存分析](https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots)\n","source":"_posts/devtools_07_memory.md","raw":"---\ntitle: Devtools 老司机养成 - 第七篇- Memory 内存\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2020-04-05\ndescription: 你开的网页会卡吗？来Memory面板了解一下内存分析&内存泄漏\ntoc: 1\ntop: 0\n---\n\n## 内存 && 内存泄露\n\n内存占用：\n\n1. allocate 分配内存(eg 声明变量\n2. 使用内存\n3. release 释放内存\n\n内存泄漏：\n\n-   `内存泄露-Memory Leak`：内存被占用后无法被 release，且无法被垃圾回收器回收\n-   内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少\n-   `垃圾回收-Garbage Collect-GC`：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停\n\n## 造成内存泄露常见原因\n\n-   `fogotten timer`被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件\n-   `Dettached HTMLElement`分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在\n\n## 内存监控 1-Task manager 任务管理器\n\n-   chorme 浏览器 -> task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小\n\n![](https://i.loli.net/2019/05/07/5cd194ba3a655.png)\n\n-   `Memory` 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。\n-   `JavaScript Memory`列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。\n\n## 内存监控 2-Devtools Performance 面板\n\n-   在`Performance`面板记录性能时，勾选`memory`即可在分析结果中看到 memory 占用情况\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n```js\n//示例1:正常的内存占用与GC\n\nvar x = [];\n\nfunction grow() {\n    for (var i = 0; i < 10000; i++) {\n        document.body.appendChild(document.createElement(\"div\"));\n    }\n    x.push(new Array(1000000).join(\"x\"));\n}\n\nsetInterval(grow, 100);\n```\n\n![](https://i.loli.net/2019/05/07/5cd19db41fbbc.png)\n\n```js\n//示例2:不可被GC的内存泄漏\n\nfunction grow() {\n    // for (var i = 0; i < 10000; i++) {\n    //     document.body.appendChild(document.createElement(\"div\"));\n    // }\n    // x.push(new Array(1000000).join(\"x\"));\n    var ul = document.createElement(\"ul\");\n    for (var i = 0; i < 10; i++) {\n        var li = document.createElement(\"li\");\n        ul.appendChild(li);\n    }\n    detachedTree = ul;\n}\n\nsetInterval(grow, 1000);\n```\n\n![](https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png)\n\n## 内存监控 3-Devtools Memory 面板\n\n![](https://i.loli.net/2019/05/07/5cd18fa5d8489.png)\n\n-   如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角`record`开始记录内存\n\n1.  `Heap snapshot`堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况\n2.  `Allocation instrumentation on timeline`按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)\n3.  `Allocation sampling`使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。\n\n-   左上角的垃圾桶图标`Collect garbage`是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收\n\n-   利用上述示例 2 代码，执行时间线 Memory 分析：\n\n![](https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png)\n\n## 扩展\n\n-   [内存相关术语](https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101)\n-   [深入内存分析](https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots)\n","slug":"devtools_07_memory","published":1,"updated":"2020-09-03T07:01:27.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ig30020c8y6ivgbin59","content":"<h2 id=\"内存-amp-amp-内存泄露\"><a href=\"#内存-amp-amp-内存泄露\" class=\"headerlink\" title=\"内存 &amp;&amp; 内存泄露\"></a>内存 &amp;&amp; 内存泄露</h2><p>内存占用：</p>\n<ol>\n<li>allocate 分配内存(eg 声明变量</li>\n<li>使用内存</li>\n<li>release 释放内存</li>\n</ol>\n<p>内存泄漏：</p>\n<ul>\n<li><code>内存泄露-Memory Leak</code>：内存被占用后无法被 release，且无法被垃圾回收器回收</li>\n<li>内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少</li>\n<li><code>垃圾回收-Garbage Collect-GC</code>：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停</li>\n</ul>\n<h2 id=\"造成内存泄露常见原因\"><a href=\"#造成内存泄露常见原因\" class=\"headerlink\" title=\"造成内存泄露常见原因\"></a>造成内存泄露常见原因</h2><ul>\n<li><code>fogotten timer</code>被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件</li>\n<li><code>Dettached HTMLElement</code>分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在</li>\n</ul>\n<h2 id=\"内存监控-1-Task-manager-任务管理器\"><a href=\"#内存监控-1-Task-manager-任务管理器\" class=\"headerlink\" title=\"内存监控 1-Task manager 任务管理器\"></a>内存监控 1-Task manager 任务管理器</h2><ul>\n<li>chorme 浏览器 -&gt; task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd194ba3a655.png\" alt></p>\n<ul>\n<li><code>Memory</code> 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。</li>\n<li><code>JavaScript Memory</code>列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。</li>\n</ul>\n<h2 id=\"内存监控-2-Devtools-Performance-面板\"><a href=\"#内存监控-2-Devtools-Performance-面板\" class=\"headerlink\" title=\"内存监控 2-Devtools Performance 面板\"></a>内存监控 2-Devtools Performance 面板</h2><ul>\n<li>在<code>Performance</code>面板记录性能时，勾选<code>memory</code>即可在分析结果中看到 memory 占用情况</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例1:正常的内存占用与GC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">\"x\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd19db41fbbc.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例2:不可被GC的内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// for (var i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     document.body.appendChild(document.createElement(\"div\"));</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// x.push(new Array(1000000).join(\"x\"));</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"ul\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">        ul.appendChild(li);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detachedTree = ul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png\" alt></p>\n<h2 id=\"内存监控-3-Devtools-Memory-面板\"><a href=\"#内存监控-3-Devtools-Memory-面板\" class=\"headerlink\" title=\"内存监控 3-Devtools Memory 面板\"></a>内存监控 3-Devtools Memory 面板</h2><p><img src=\"https://i.loli.net/2019/05/07/5cd18fa5d8489.png\" alt></p>\n<ul>\n<li>如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角<code>record</code>开始记录内存</li>\n</ul>\n<ol>\n<li><code>Heap snapshot</code>堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况</li>\n<li><code>Allocation instrumentation on timeline</code>按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)</li>\n<li><code>Allocation sampling</code>使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。</li>\n</ol>\n<ul>\n<li><p>左上角的垃圾桶图标<code>Collect garbage</code>是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收</p>\n</li>\n<li><p>利用上述示例 2 代码，执行时间线 Memory 分析：</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png\" alt></p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><ul>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101\" target=\"_blank\" rel=\"noopener\">内存相关术语</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots\" target=\"_blank\" rel=\"noopener\">深入内存分析</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存-amp-amp-内存泄露\"><a href=\"#内存-amp-amp-内存泄露\" class=\"headerlink\" title=\"内存 &amp;&amp; 内存泄露\"></a>内存 &amp;&amp; 内存泄露</h2><p>内存占用：</p>\n<ol>\n<li>allocate 分配内存(eg 声明变量</li>\n<li>使用内存</li>\n<li>release 释放内存</li>\n</ol>\n<p>内存泄漏：</p>\n<ul>\n<li><code>内存泄露-Memory Leak</code>：内存被占用后无法被 release，且无法被垃圾回收器回收</li>\n<li>内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少</li>\n<li><code>垃圾回收-Garbage Collect-GC</code>：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停</li>\n</ul>\n<h2 id=\"造成内存泄露常见原因\"><a href=\"#造成内存泄露常见原因\" class=\"headerlink\" title=\"造成内存泄露常见原因\"></a>造成内存泄露常见原因</h2><ul>\n<li><code>fogotten timer</code>被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件</li>\n<li><code>Dettached HTMLElement</code>分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在</li>\n</ul>\n<h2 id=\"内存监控-1-Task-manager-任务管理器\"><a href=\"#内存监控-1-Task-manager-任务管理器\" class=\"headerlink\" title=\"内存监控 1-Task manager 任务管理器\"></a>内存监控 1-Task manager 任务管理器</h2><ul>\n<li>chorme 浏览器 -&gt; task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd194ba3a655.png\" alt></p>\n<ul>\n<li><code>Memory</code> 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。</li>\n<li><code>JavaScript Memory</code>列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。</li>\n</ul>\n<h2 id=\"内存监控-2-Devtools-Performance-面板\"><a href=\"#内存监控-2-Devtools-Performance-面板\" class=\"headerlink\" title=\"内存监控 2-Devtools Performance 面板\"></a>内存监控 2-Devtools Performance 面板</h2><ul>\n<li>在<code>Performance</code>面板记录性能时，勾选<code>memory</code>即可在分析结果中看到 memory 占用情况</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例1:正常的内存占用与GC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">\"x\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd19db41fbbc.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例2:不可被GC的内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// for (var i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     document.body.appendChild(document.createElement(\"div\"));</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// x.push(new Array(1000000).join(\"x\"));</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"ul\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">        ul.appendChild(li);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detachedTree = ul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png\" alt></p>\n<h2 id=\"内存监控-3-Devtools-Memory-面板\"><a href=\"#内存监控-3-Devtools-Memory-面板\" class=\"headerlink\" title=\"内存监控 3-Devtools Memory 面板\"></a>内存监控 3-Devtools Memory 面板</h2><p><img src=\"https://i.loli.net/2019/05/07/5cd18fa5d8489.png\" alt></p>\n<ul>\n<li>如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角<code>record</code>开始记录内存</li>\n</ul>\n<ol>\n<li><code>Heap snapshot</code>堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况</li>\n<li><code>Allocation instrumentation on timeline</code>按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)</li>\n<li><code>Allocation sampling</code>使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。</li>\n</ol>\n<ul>\n<li><p>左上角的垃圾桶图标<code>Collect garbage</code>是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收</p>\n</li>\n<li><p>利用上述示例 2 代码，执行时间线 Memory 分析：</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png\" alt></p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><ul>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101\" target=\"_blank\" rel=\"noopener\">内存相关术语</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots\" target=\"_blank\" rel=\"noopener\">深入内存分析</a></li>\n</ul>\n"},{"title":"我与这世界的距离","comments":1,"date":"1996-06-05T16:00:00.000Z","description":"一些胡言乱语","toc":0,"status":"Continuous Updates","_content":"\n## 如何与情绪相处\n\n从人性上来说，我们倾向于保护自我最脆弱的部分\n\n伤痛、需求未被满足、罪恶、耻辱会激发我们痛苦、恐惧、愤怒的情绪，这是人类天生的保护机制\n\n我们无法控制自己的本能，但是应该学会接受、正视、了解我们的感觉和情绪，\n\n去发现并解决 情绪背后 激发情绪的问题，而不是去任由情绪发泄\n\n## 不要扮演受害者\n\n责怪、批评与指责是人类防御机制的关键要素。\n\n责怪他人、批评他人行为、指责他人不愿改变，其实是一种轻而易举的手段，\n\n能够简单地利用道德批判，将自己提升到一个高于他人的位置，也使我们摆脱了自身的不安。\n\n然而，责怪、批评与指责的态度最终只会加强自我的受害者意识。\n\n受害者常感到无力、无助、无价值且无法自我满足。\n\n他们的防卫机制常常是自我否定，并将自己置于一个道德正确的位置。\n\n**当我们坦然面对内在的受害情绪时，我们将有机会更具有意识地正视这份感觉，并了解这仅是一种感受，而非事实**\n\n责怪、批评与指责也终将不再发生。\n\n## 亲密关系\n\n亲密关系是一种完美设计\n\n在亲密关系中，所有的一切都是重要的部分，即使是令人不悦的冲突与不适的情境。\n\n当你继续在感情中成长时，你也开始**懂得欣赏你跟伴侣之间所发生的任何事情**。\n\n你的伴侣不是你的爱与幸福的来源，满足你的期待与使你开心不是他们的职责。\n\n你的伴侣在你的生活中扮演了三个重要的角色：\n\n- 一面镜子，让你看见引发你关注的不舒服感；\n- 一名老师，在你探寻真实自我的时候，激励与启发你；\n- 一名“玩伴”，开启并陪伴你一段生命的旅程。\n\n## 学习最原始的驱动力\n\n保持质疑\n\n保持好奇心和兴趣\n\n保持对努力的自信\n\n## No means No\n\n该表达态度的时候，要明确、干净、利落的表达。\n\n## 就是不想努力怎么办\n\n> 我就想做一个安于现状的人\n>\n> 就想利用上班赚钱过好自己的小日子\n>\n> 就想平凡的过完一生\n>\n> 我就是不想拼命奋斗，拼命努力，拼命内卷\n>\n> 不可以吗？\n\n当然可以，每个人的追求不同，淡泊名利，平静一生，真正能做到的话，是一种很高的人生境界。\n\n但是你做出这种决定，就要考虑其带来的结果\n\n> 你能做到真正的“淡泊名利”吗？\n>\n> 当别人用光鲜亮丽的服装、车子、房子包装和提升自己的生活品质时，你能做到不羡慕吗\n>\n> 当别人在马尔代夫浮潜、在阿尔卑斯滑雪、在土耳其滑翔、在富士山脚泡温泉喝清酒，你能做到不羡慕吗\n>\n> 你身边的人生活品质都比你高得时候，你会不会后悔\n>\n> 你的普通收入扣除房子首付、房贷、车子、奶粉钱之后你还足够安稳吗\n>\n> 如果不买房，你可以做到一生租房，并容忍一生到老不断的搬家吗\n>\n> 你的普通收入能让你匹配上你心仪的另一半吗\n>\n> 你的现状能维持你一生的稳定平凡吗？你能对抗人生所有的风险吗\n>\n> 你可以为自己的一生、父母后半生、孩子前半生的大大小小的健康问题买单吗\n>\n> 如果你有了孩子，你作为爸爸/妈妈，能给孩子最好的教育吗\n>\n\n如果你深刻的考虑了这些问题，都能得到坚定的答案，那么安于现状，不拼命努力，也没什么不好\n\n每个人的人生都不同，人生的路也没有对错之分，只是路上的酸甜苦辣，你需要独自承担\n\n## 别让任何人打乱你的人生节奏\n\n> 每个人的人生都不同\n>\n> \"Not everything that counts can be counted，and not everything that's counted truly counts\"\n>\n> \"并不是每件算出来的事，都有意义；也不是每件有意义的事，都能被算出来\" ——爱因斯坦\n\n[@https://www.bilibili.com/video/BV1WW411F7Hx](https://www.bilibili.com/video/BV1WW411F7Hx)\n\n## 关于坚持\n\n> 坚持这两个字，远比你想象中的要难的多，但也比你想象中的有效的多。\n>\n> 'You do make a difference!'\n\n[@https://www.bilibili.com/video/BV1XJ411d7Xx](https://www.bilibili.com/video/BV1XJ411d7Xx)\n\n> 两年，是很容易虚度过去的时长，也是足够改变自己的时长。\n\n[@https://www.bilibili.com/video/BV1NE41197sr](https://www.bilibili.com/video/BV1NE41197sr)\n\n## 如何追求快乐\n\n> 有很多快乐是放纵的快乐，是降低了人性尊严的快乐，而越能体现人性尊严的快乐，越是一种高级的快乐。\n>\n> 追求高级的快乐并不意味着放弃低级的快乐，但是如果你的眼目永远只关注地下，你永远不知道向上看有多么的快乐。\n\n——罗翔\n\n[@https://www.bilibili.com/video/BV1AE411T7p7](https://www.bilibili.com/video/BV1AE411T7p7)\n\n> I don't need dollar bills to have fun\n\n——【Cheap Thrills】 Sia\n\n## 成熟的一些标志\n\n> 能克制欲望，不追求即时反馈，延迟享受。\n>\n> 保持一致性，无论在人群中还是独处时，知行合一，不卑不亢，不矫揉造作，不哗众取宠。\n>\n> 心中始终有底线、有原则、有追求。\n>\n> 时刻反省自己：what在做什么、why为什么这样做、how如何做的更好\n\n—— 尼古拉斯·鱼\n\n## 享受平静才是生活的真谛\n\n> “上次我去一个朋友家玩，看到他们客厅里摆着一张很长的桌子。朋友说，每到周末，两个大人，一个孩子，还有两只猫都会围在这个桌子旁，家里很安静，只有书页翻动和画笔接触纸张的细微声音。”\n\n## 看电影/阅读的意义是什么？\n\n> 谁看到的维度越多，世界在谁的眼中便越真实。\n>\n> 练习自己感动、愤怒、喜悦、震惊、欢笑、平静的能力 不被苟且的生活捆绑致死。\n>\n> 认识这个世界，丰富认知维度。\n>\n> 即使生活一平如水、或筋疲力尽、或颠沛流离，仍要感受这个形形色色的世界，满怀希望，拥有细腻的情感。\n\n## 子 瓜 犭 虫\n\n> 稚儿擎瓜柳棚下,细犬逐蝶窄巷中,人间繁华多笑语,惟我空余两鬓风。\n>\n> “孤独”\n>\n> 这两个字拆开看，有小孩，有水果，有走兽，有蚊蝇\n>\n> 足以撑起一个盛夏傍晚的巷子口，人味十足。\n>\n> 夏日的傍晚，你看着空中嗡嗡飞舞的飞虫，不远处的狗摇着尾巴穿巷而过，你手中拿着吃剩下的半块西瓜\n>\n> 忽然觉得好像过了半辈子\n>\n> 又好像只过了半分钟。\n\n## 为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\"><i class=\"fa fa-link\"></i>原文</a>\n\n> **爆炸性压力才能带来爆炸性进步**\n>\n> 每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：\n>\n> 演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。\n>\n> 这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。\n>\n> 不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。\n>\n> 祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。\n>\n> 前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。\n>\n> 再烂的牌也得打下去，这就是人生\n>\n\n## 时光\n\n> 小时候小时候，夏天穿过山间的风，打在树梢的雨，外婆灶台上的饭香，无奈回忆真的变成了回忆。\n\n## 《stronger》kelly clarkson\n\n> Doesn't mean I'm lonely when I'm alone\n\n## 《Lolita》\n\n> 洛丽塔，我生命之光，我欲念之火。我的罪恶，我的灵魂。\n\n## 《阿甘正传》\n\n> life's like a feather\n\n## 《하루하루》\n\n> 离开时请不要回头\n>\n> 以后活着也不要找我\n>\n> 因为爱你\n>\n> 没有一丝悔意\n>\n> 所以请带着美好的回忆离去\n\n## 《安娜·卡列尼娜》列夫·托尔斯泰\n\n> “幸福的家庭总是相似的，不幸的家庭各有各的不幸。”\n\n## 阿德勒\n\n> “幸运的人一生都被童年治愈，不幸的人一生都在治愈童年。”\n\n## 二十多岁浅薄的人生的唯一信仰：自律 + 坚持\n","source":"_posts/escape_from_the_world.md","raw":"---\ntitle: 我与这世界的距离 # 文章标题\ncategories:\n    - 01关于 # 一级分类\ntags:\ncomments: true #开启评论\ndate: 1996-06-06\ndescription: 一些胡言乱语\ntoc: 0\nstatus: Continuous Updates\n---\n\n## 如何与情绪相处\n\n从人性上来说，我们倾向于保护自我最脆弱的部分\n\n伤痛、需求未被满足、罪恶、耻辱会激发我们痛苦、恐惧、愤怒的情绪，这是人类天生的保护机制\n\n我们无法控制自己的本能，但是应该学会接受、正视、了解我们的感觉和情绪，\n\n去发现并解决 情绪背后 激发情绪的问题，而不是去任由情绪发泄\n\n## 不要扮演受害者\n\n责怪、批评与指责是人类防御机制的关键要素。\n\n责怪他人、批评他人行为、指责他人不愿改变，其实是一种轻而易举的手段，\n\n能够简单地利用道德批判，将自己提升到一个高于他人的位置，也使我们摆脱了自身的不安。\n\n然而，责怪、批评与指责的态度最终只会加强自我的受害者意识。\n\n受害者常感到无力、无助、无价值且无法自我满足。\n\n他们的防卫机制常常是自我否定，并将自己置于一个道德正确的位置。\n\n**当我们坦然面对内在的受害情绪时，我们将有机会更具有意识地正视这份感觉，并了解这仅是一种感受，而非事实**\n\n责怪、批评与指责也终将不再发生。\n\n## 亲密关系\n\n亲密关系是一种完美设计\n\n在亲密关系中，所有的一切都是重要的部分，即使是令人不悦的冲突与不适的情境。\n\n当你继续在感情中成长时，你也开始**懂得欣赏你跟伴侣之间所发生的任何事情**。\n\n你的伴侣不是你的爱与幸福的来源，满足你的期待与使你开心不是他们的职责。\n\n你的伴侣在你的生活中扮演了三个重要的角色：\n\n- 一面镜子，让你看见引发你关注的不舒服感；\n- 一名老师，在你探寻真实自我的时候，激励与启发你；\n- 一名“玩伴”，开启并陪伴你一段生命的旅程。\n\n## 学习最原始的驱动力\n\n保持质疑\n\n保持好奇心和兴趣\n\n保持对努力的自信\n\n## No means No\n\n该表达态度的时候，要明确、干净、利落的表达。\n\n## 就是不想努力怎么办\n\n> 我就想做一个安于现状的人\n>\n> 就想利用上班赚钱过好自己的小日子\n>\n> 就想平凡的过完一生\n>\n> 我就是不想拼命奋斗，拼命努力，拼命内卷\n>\n> 不可以吗？\n\n当然可以，每个人的追求不同，淡泊名利，平静一生，真正能做到的话，是一种很高的人生境界。\n\n但是你做出这种决定，就要考虑其带来的结果\n\n> 你能做到真正的“淡泊名利”吗？\n>\n> 当别人用光鲜亮丽的服装、车子、房子包装和提升自己的生活品质时，你能做到不羡慕吗\n>\n> 当别人在马尔代夫浮潜、在阿尔卑斯滑雪、在土耳其滑翔、在富士山脚泡温泉喝清酒，你能做到不羡慕吗\n>\n> 你身边的人生活品质都比你高得时候，你会不会后悔\n>\n> 你的普通收入扣除房子首付、房贷、车子、奶粉钱之后你还足够安稳吗\n>\n> 如果不买房，你可以做到一生租房，并容忍一生到老不断的搬家吗\n>\n> 你的普通收入能让你匹配上你心仪的另一半吗\n>\n> 你的现状能维持你一生的稳定平凡吗？你能对抗人生所有的风险吗\n>\n> 你可以为自己的一生、父母后半生、孩子前半生的大大小小的健康问题买单吗\n>\n> 如果你有了孩子，你作为爸爸/妈妈，能给孩子最好的教育吗\n>\n\n如果你深刻的考虑了这些问题，都能得到坚定的答案，那么安于现状，不拼命努力，也没什么不好\n\n每个人的人生都不同，人生的路也没有对错之分，只是路上的酸甜苦辣，你需要独自承担\n\n## 别让任何人打乱你的人生节奏\n\n> 每个人的人生都不同\n>\n> \"Not everything that counts can be counted，and not everything that's counted truly counts\"\n>\n> \"并不是每件算出来的事，都有意义；也不是每件有意义的事，都能被算出来\" ——爱因斯坦\n\n[@https://www.bilibili.com/video/BV1WW411F7Hx](https://www.bilibili.com/video/BV1WW411F7Hx)\n\n## 关于坚持\n\n> 坚持这两个字，远比你想象中的要难的多，但也比你想象中的有效的多。\n>\n> 'You do make a difference!'\n\n[@https://www.bilibili.com/video/BV1XJ411d7Xx](https://www.bilibili.com/video/BV1XJ411d7Xx)\n\n> 两年，是很容易虚度过去的时长，也是足够改变自己的时长。\n\n[@https://www.bilibili.com/video/BV1NE41197sr](https://www.bilibili.com/video/BV1NE41197sr)\n\n## 如何追求快乐\n\n> 有很多快乐是放纵的快乐，是降低了人性尊严的快乐，而越能体现人性尊严的快乐，越是一种高级的快乐。\n>\n> 追求高级的快乐并不意味着放弃低级的快乐，但是如果你的眼目永远只关注地下，你永远不知道向上看有多么的快乐。\n\n——罗翔\n\n[@https://www.bilibili.com/video/BV1AE411T7p7](https://www.bilibili.com/video/BV1AE411T7p7)\n\n> I don't need dollar bills to have fun\n\n——【Cheap Thrills】 Sia\n\n## 成熟的一些标志\n\n> 能克制欲望，不追求即时反馈，延迟享受。\n>\n> 保持一致性，无论在人群中还是独处时，知行合一，不卑不亢，不矫揉造作，不哗众取宠。\n>\n> 心中始终有底线、有原则、有追求。\n>\n> 时刻反省自己：what在做什么、why为什么这样做、how如何做的更好\n\n—— 尼古拉斯·鱼\n\n## 享受平静才是生活的真谛\n\n> “上次我去一个朋友家玩，看到他们客厅里摆着一张很长的桌子。朋友说，每到周末，两个大人，一个孩子，还有两只猫都会围在这个桌子旁，家里很安静，只有书页翻动和画笔接触纸张的细微声音。”\n\n## 看电影/阅读的意义是什么？\n\n> 谁看到的维度越多，世界在谁的眼中便越真实。\n>\n> 练习自己感动、愤怒、喜悦、震惊、欢笑、平静的能力 不被苟且的生活捆绑致死。\n>\n> 认识这个世界，丰富认知维度。\n>\n> 即使生活一平如水、或筋疲力尽、或颠沛流离，仍要感受这个形形色色的世界，满怀希望，拥有细腻的情感。\n\n## 子 瓜 犭 虫\n\n> 稚儿擎瓜柳棚下,细犬逐蝶窄巷中,人间繁华多笑语,惟我空余两鬓风。\n>\n> “孤独”\n>\n> 这两个字拆开看，有小孩，有水果，有走兽，有蚊蝇\n>\n> 足以撑起一个盛夏傍晚的巷子口，人味十足。\n>\n> 夏日的傍晚，你看着空中嗡嗡飞舞的飞虫，不远处的狗摇着尾巴穿巷而过，你手中拿着吃剩下的半块西瓜\n>\n> 忽然觉得好像过了半辈子\n>\n> 又好像只过了半分钟。\n\n## 为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\"><i class=\"fa fa-link\"></i>原文</a>\n\n> **爆炸性压力才能带来爆炸性进步**\n>\n> 每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：\n>\n> 演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。\n>\n> 这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。\n>\n> 不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。\n>\n> 祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。\n>\n> 前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。\n>\n> 再烂的牌也得打下去，这就是人生\n>\n\n## 时光\n\n> 小时候小时候，夏天穿过山间的风，打在树梢的雨，外婆灶台上的饭香，无奈回忆真的变成了回忆。\n\n## 《stronger》kelly clarkson\n\n> Doesn't mean I'm lonely when I'm alone\n\n## 《Lolita》\n\n> 洛丽塔，我生命之光，我欲念之火。我的罪恶，我的灵魂。\n\n## 《阿甘正传》\n\n> life's like a feather\n\n## 《하루하루》\n\n> 离开时请不要回头\n>\n> 以后活着也不要找我\n>\n> 因为爱你\n>\n> 没有一丝悔意\n>\n> 所以请带着美好的回忆离去\n\n## 《安娜·卡列尼娜》列夫·托尔斯泰\n\n> “幸福的家庭总是相似的，不幸的家庭各有各的不幸。”\n\n## 阿德勒\n\n> “幸运的人一生都被童年治愈，不幸的人一生都在治愈童年。”\n\n## 二十多岁浅薄的人生的唯一信仰：自律 + 坚持\n","slug":"escape_from_the_world","published":1,"updated":"2021-03-25T03:08:59.256Z","_id":"ckir88ig50023c8y66gbw8vjx","layout":"post","photos":[],"link":"","content":"<h2 id=\"如何与情绪相处\"><a href=\"#如何与情绪相处\" class=\"headerlink\" title=\"如何与情绪相处\"></a>如何与情绪相处</h2><p>从人性上来说，我们倾向于保护自我最脆弱的部分</p>\n<p>伤痛、需求未被满足、罪恶、耻辱会激发我们痛苦、恐惧、愤怒的情绪，这是人类天生的保护机制</p>\n<p>我们无法控制自己的本能，但是应该学会接受、正视、了解我们的感觉和情绪，</p>\n<p>去发现并解决 情绪背后 激发情绪的问题，而不是去任由情绪发泄</p>\n<h2 id=\"不要扮演受害者\"><a href=\"#不要扮演受害者\" class=\"headerlink\" title=\"不要扮演受害者\"></a>不要扮演受害者</h2><p>责怪、批评与指责是人类防御机制的关键要素。</p>\n<p>责怪他人、批评他人行为、指责他人不愿改变，其实是一种轻而易举的手段，</p>\n<p>能够简单地利用道德批判，将自己提升到一个高于他人的位置，也使我们摆脱了自身的不安。</p>\n<p>然而，责怪、批评与指责的态度最终只会加强自我的受害者意识。</p>\n<p>受害者常感到无力、无助、无价值且无法自我满足。</p>\n<p>他们的防卫机制常常是自我否定，并将自己置于一个道德正确的位置。</p>\n<p><strong>当我们坦然面对内在的受害情绪时，我们将有机会更具有意识地正视这份感觉，并了解这仅是一种感受，而非事实</strong></p>\n<p>责怪、批评与指责也终将不再发生。</p>\n<h2 id=\"亲密关系\"><a href=\"#亲密关系\" class=\"headerlink\" title=\"亲密关系\"></a>亲密关系</h2><p>亲密关系是一种完美设计</p>\n<p>在亲密关系中，所有的一切都是重要的部分，即使是令人不悦的冲突与不适的情境。</p>\n<p>当你继续在感情中成长时，你也开始<strong>懂得欣赏你跟伴侣之间所发生的任何事情</strong>。</p>\n<p>你的伴侣不是你的爱与幸福的来源，满足你的期待与使你开心不是他们的职责。</p>\n<p>你的伴侣在你的生活中扮演了三个重要的角色：</p>\n<ul>\n<li>一面镜子，让你看见引发你关注的不舒服感；</li>\n<li>一名老师，在你探寻真实自我的时候，激励与启发你；</li>\n<li>一名“玩伴”，开启并陪伴你一段生命的旅程。</li>\n</ul>\n<h2 id=\"学习最原始的驱动力\"><a href=\"#学习最原始的驱动力\" class=\"headerlink\" title=\"学习最原始的驱动力\"></a>学习最原始的驱动力</h2><p>保持质疑</p>\n<p>保持好奇心和兴趣</p>\n<p>保持对努力的自信</p>\n<h2 id=\"No-means-No\"><a href=\"#No-means-No\" class=\"headerlink\" title=\"No means No\"></a>No means No</h2><p>该表达态度的时候，要明确、干净、利落的表达。</p>\n<h2 id=\"就是不想努力怎么办\"><a href=\"#就是不想努力怎么办\" class=\"headerlink\" title=\"就是不想努力怎么办\"></a>就是不想努力怎么办</h2><blockquote>\n<p>我就想做一个安于现状的人</p>\n<p>就想利用上班赚钱过好自己的小日子</p>\n<p>就想平凡的过完一生</p>\n<p>我就是不想拼命奋斗，拼命努力，拼命内卷</p>\n<p>不可以吗？</p>\n</blockquote>\n<p>当然可以，每个人的追求不同，淡泊名利，平静一生，真正能做到的话，是一种很高的人生境界。</p>\n<p>但是你做出这种决定，就要考虑其带来的结果</p>\n<blockquote>\n<p>你能做到真正的“淡泊名利”吗？</p>\n<p>当别人用光鲜亮丽的服装、车子、房子包装和提升自己的生活品质时，你能做到不羡慕吗</p>\n<p>当别人在马尔代夫浮潜、在阿尔卑斯滑雪、在土耳其滑翔、在富士山脚泡温泉喝清酒，你能做到不羡慕吗</p>\n<p>你身边的人生活品质都比你高得时候，你会不会后悔</p>\n<p>你的普通收入扣除房子首付、房贷、车子、奶粉钱之后你还足够安稳吗</p>\n<p>如果不买房，你可以做到一生租房，并容忍一生到老不断的搬家吗</p>\n<p>你的普通收入能让你匹配上你心仪的另一半吗</p>\n<p>你的现状能维持你一生的稳定平凡吗？你能对抗人生所有的风险吗</p>\n<p>你可以为自己的一生、父母后半生、孩子前半生的大大小小的健康问题买单吗</p>\n<p>如果你有了孩子，你作为爸爸/妈妈，能给孩子最好的教育吗</p>\n</blockquote>\n<p>如果你深刻的考虑了这些问题，都能得到坚定的答案，那么安于现状，不拼命努力，也没什么不好</p>\n<p>每个人的人生都不同，人生的路也没有对错之分，只是路上的酸甜苦辣，你需要独自承担</p>\n<h2 id=\"别让任何人打乱你的人生节奏\"><a href=\"#别让任何人打乱你的人生节奏\" class=\"headerlink\" title=\"别让任何人打乱你的人生节奏\"></a>别让任何人打乱你的人生节奏</h2><blockquote>\n<p>每个人的人生都不同</p>\n<p>“Not everything that counts can be counted，and not everything that’s counted truly counts”</p>\n<p>“并不是每件算出来的事，都有意义；也不是每件有意义的事，都能被算出来” ——爱因斯坦</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1WW411F7Hx\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1WW411F7Hx</a></p>\n<h2 id=\"关于坚持\"><a href=\"#关于坚持\" class=\"headerlink\" title=\"关于坚持\"></a>关于坚持</h2><blockquote>\n<p>坚持这两个字，远比你想象中的要难的多，但也比你想象中的有效的多。</p>\n<p>‘You do make a difference!’</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1XJ411d7Xx\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1XJ411d7Xx</a></p>\n<blockquote>\n<p>两年，是很容易虚度过去的时长，也是足够改变自己的时长。</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1NE41197sr\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1NE41197sr</a></p>\n<h2 id=\"如何追求快乐\"><a href=\"#如何追求快乐\" class=\"headerlink\" title=\"如何追求快乐\"></a>如何追求快乐</h2><blockquote>\n<p>有很多快乐是放纵的快乐，是降低了人性尊严的快乐，而越能体现人性尊严的快乐，越是一种高级的快乐。</p>\n<p>追求高级的快乐并不意味着放弃低级的快乐，但是如果你的眼目永远只关注地下，你永远不知道向上看有多么的快乐。</p>\n</blockquote>\n<p>——罗翔</p>\n<p><a href=\"https://www.bilibili.com/video/BV1AE411T7p7\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1AE411T7p7</a></p>\n<blockquote>\n<p>I don’t need dollar bills to have fun</p>\n</blockquote>\n<p>——【Cheap Thrills】 Sia</p>\n<h2 id=\"成熟的一些标志\"><a href=\"#成熟的一些标志\" class=\"headerlink\" title=\"成熟的一些标志\"></a>成熟的一些标志</h2><blockquote>\n<p>能克制欲望，不追求即时反馈，延迟享受。</p>\n<p>保持一致性，无论在人群中还是独处时，知行合一，不卑不亢，不矫揉造作，不哗众取宠。</p>\n<p>心中始终有底线、有原则、有追求。</p>\n<p>时刻反省自己：what在做什么、why为什么这样做、how如何做的更好</p>\n</blockquote>\n<p>—— 尼古拉斯·鱼</p>\n<h2 id=\"享受平静才是生活的真谛\"><a href=\"#享受平静才是生活的真谛\" class=\"headerlink\" title=\"享受平静才是生活的真谛\"></a>享受平静才是生活的真谛</h2><blockquote>\n<p>“上次我去一个朋友家玩，看到他们客厅里摆着一张很长的桌子。朋友说，每到周末，两个大人，一个孩子，还有两只猫都会围在这个桌子旁，家里很安静，只有书页翻动和画笔接触纸张的细微声音。”</p>\n</blockquote>\n<h2 id=\"看电影-阅读的意义是什么？\"><a href=\"#看电影-阅读的意义是什么？\" class=\"headerlink\" title=\"看电影/阅读的意义是什么？\"></a>看电影/阅读的意义是什么？</h2><blockquote>\n<p>谁看到的维度越多，世界在谁的眼中便越真实。</p>\n<p>练习自己感动、愤怒、喜悦、震惊、欢笑、平静的能力 不被苟且的生活捆绑致死。</p>\n<p>认识这个世界，丰富认知维度。</p>\n<p>即使生活一平如水、或筋疲力尽、或颠沛流离，仍要感受这个形形色色的世界，满怀希望，拥有细腻的情感。</p>\n</blockquote>\n<h2 id=\"子-瓜-犭-虫\"><a href=\"#子-瓜-犭-虫\" class=\"headerlink\" title=\"子 瓜 犭 虫\"></a>子 瓜 犭 虫</h2><blockquote>\n<p>稚儿擎瓜柳棚下,细犬逐蝶窄巷中,人间繁华多笑语,惟我空余两鬓风。</p>\n<p>“孤独”</p>\n<p>这两个字拆开看，有小孩，有水果，有走兽，有蚊蝇</p>\n<p>足以撑起一个盛夏傍晚的巷子口，人味十足。</p>\n<p>夏日的傍晚，你看着空中嗡嗡飞舞的飞虫，不远处的狗摇着尾巴穿巷而过，你手中拿着吃剩下的半块西瓜</p>\n<p>忽然觉得好像过了半辈子</p>\n<p>又好像只过了半分钟。</p>\n</blockquote>\n<h2 id=\"为什么要趁年轻多学习原文\"><a href=\"#为什么要趁年轻多学习原文\" class=\"headerlink\" title=\"为什么要趁年轻多学习原文\"></a>为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-link\"></i>原文</a></h2><blockquote>\n<p><strong>爆炸性压力才能带来爆炸性进步</strong></p>\n<p>每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：</p>\n<p>演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。</p>\n<p>这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。</p>\n<p>不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。</p>\n<p>祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。</p>\n<p>前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。</p>\n<p>再烂的牌也得打下去，这就是人生</p>\n</blockquote>\n<h2 id=\"时光\"><a href=\"#时光\" class=\"headerlink\" title=\"时光\"></a>时光</h2><blockquote>\n<p>小时候小时候，夏天穿过山间的风，打在树梢的雨，外婆灶台上的饭香，无奈回忆真的变成了回忆。</p>\n</blockquote>\n<h2 id=\"《stronger》kelly-clarkson\"><a href=\"#《stronger》kelly-clarkson\" class=\"headerlink\" title=\"《stronger》kelly clarkson\"></a>《stronger》kelly clarkson</h2><blockquote>\n<p>Doesn’t mean I’m lonely when I’m alone</p>\n</blockquote>\n<h2 id=\"《Lolita》\"><a href=\"#《Lolita》\" class=\"headerlink\" title=\"《Lolita》\"></a>《Lolita》</h2><blockquote>\n<p>洛丽塔，我生命之光，我欲念之火。我的罪恶，我的灵魂。</p>\n</blockquote>\n<h2 id=\"《阿甘正传》\"><a href=\"#《阿甘正传》\" class=\"headerlink\" title=\"《阿甘正传》\"></a>《阿甘正传》</h2><blockquote>\n<p>life’s like a feather</p>\n</blockquote>\n<h2 id=\"《하루하루》\"><a href=\"#《하루하루》\" class=\"headerlink\" title=\"《하루하루》\"></a>《하루하루》</h2><blockquote>\n<p>离开时请不要回头</p>\n<p>以后活着也不要找我</p>\n<p>因为爱你</p>\n<p>没有一丝悔意</p>\n<p>所以请带着美好的回忆离去</p>\n</blockquote>\n<h2 id=\"《安娜·卡列尼娜》列夫·托尔斯泰\"><a href=\"#《安娜·卡列尼娜》列夫·托尔斯泰\" class=\"headerlink\" title=\"《安娜·卡列尼娜》列夫·托尔斯泰\"></a>《安娜·卡列尼娜》列夫·托尔斯泰</h2><blockquote>\n<p>“幸福的家庭总是相似的，不幸的家庭各有各的不幸。”</p>\n</blockquote>\n<h2 id=\"阿德勒\"><a href=\"#阿德勒\" class=\"headerlink\" title=\"阿德勒\"></a>阿德勒</h2><blockquote>\n<p>“幸运的人一生都被童年治愈，不幸的人一生都在治愈童年。”</p>\n</blockquote>\n<h2 id=\"二十多岁浅薄的人生的唯一信仰：自律-坚持\"><a href=\"#二十多岁浅薄的人生的唯一信仰：自律-坚持\" class=\"headerlink\" title=\"二十多岁浅薄的人生的唯一信仰：自律 + 坚持\"></a>二十多岁浅薄的人生的唯一信仰：自律 + 坚持</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"如何与情绪相处\"><a href=\"#如何与情绪相处\" class=\"headerlink\" title=\"如何与情绪相处\"></a>如何与情绪相处</h2><p>从人性上来说，我们倾向于保护自我最脆弱的部分</p>\n<p>伤痛、需求未被满足、罪恶、耻辱会激发我们痛苦、恐惧、愤怒的情绪，这是人类天生的保护机制</p>\n<p>我们无法控制自己的本能，但是应该学会接受、正视、了解我们的感觉和情绪，</p>\n<p>去发现并解决 情绪背后 激发情绪的问题，而不是去任由情绪发泄</p>\n<h2 id=\"不要扮演受害者\"><a href=\"#不要扮演受害者\" class=\"headerlink\" title=\"不要扮演受害者\"></a>不要扮演受害者</h2><p>责怪、批评与指责是人类防御机制的关键要素。</p>\n<p>责怪他人、批评他人行为、指责他人不愿改变，其实是一种轻而易举的手段，</p>\n<p>能够简单地利用道德批判，将自己提升到一个高于他人的位置，也使我们摆脱了自身的不安。</p>\n<p>然而，责怪、批评与指责的态度最终只会加强自我的受害者意识。</p>\n<p>受害者常感到无力、无助、无价值且无法自我满足。</p>\n<p>他们的防卫机制常常是自我否定，并将自己置于一个道德正确的位置。</p>\n<p><strong>当我们坦然面对内在的受害情绪时，我们将有机会更具有意识地正视这份感觉，并了解这仅是一种感受，而非事实</strong></p>\n<p>责怪、批评与指责也终将不再发生。</p>\n<h2 id=\"亲密关系\"><a href=\"#亲密关系\" class=\"headerlink\" title=\"亲密关系\"></a>亲密关系</h2><p>亲密关系是一种完美设计</p>\n<p>在亲密关系中，所有的一切都是重要的部分，即使是令人不悦的冲突与不适的情境。</p>\n<p>当你继续在感情中成长时，你也开始<strong>懂得欣赏你跟伴侣之间所发生的任何事情</strong>。</p>\n<p>你的伴侣不是你的爱与幸福的来源，满足你的期待与使你开心不是他们的职责。</p>\n<p>你的伴侣在你的生活中扮演了三个重要的角色：</p>\n<ul>\n<li>一面镜子，让你看见引发你关注的不舒服感；</li>\n<li>一名老师，在你探寻真实自我的时候，激励与启发你；</li>\n<li>一名“玩伴”，开启并陪伴你一段生命的旅程。</li>\n</ul>\n<h2 id=\"学习最原始的驱动力\"><a href=\"#学习最原始的驱动力\" class=\"headerlink\" title=\"学习最原始的驱动力\"></a>学习最原始的驱动力</h2><p>保持质疑</p>\n<p>保持好奇心和兴趣</p>\n<p>保持对努力的自信</p>\n<h2 id=\"No-means-No\"><a href=\"#No-means-No\" class=\"headerlink\" title=\"No means No\"></a>No means No</h2><p>该表达态度的时候，要明确、干净、利落的表达。</p>\n<h2 id=\"就是不想努力怎么办\"><a href=\"#就是不想努力怎么办\" class=\"headerlink\" title=\"就是不想努力怎么办\"></a>就是不想努力怎么办</h2><blockquote>\n<p>我就想做一个安于现状的人</p>\n<p>就想利用上班赚钱过好自己的小日子</p>\n<p>就想平凡的过完一生</p>\n<p>我就是不想拼命奋斗，拼命努力，拼命内卷</p>\n<p>不可以吗？</p>\n</blockquote>\n<p>当然可以，每个人的追求不同，淡泊名利，平静一生，真正能做到的话，是一种很高的人生境界。</p>\n<p>但是你做出这种决定，就要考虑其带来的结果</p>\n<blockquote>\n<p>你能做到真正的“淡泊名利”吗？</p>\n<p>当别人用光鲜亮丽的服装、车子、房子包装和提升自己的生活品质时，你能做到不羡慕吗</p>\n<p>当别人在马尔代夫浮潜、在阿尔卑斯滑雪、在土耳其滑翔、在富士山脚泡温泉喝清酒，你能做到不羡慕吗</p>\n<p>你身边的人生活品质都比你高得时候，你会不会后悔</p>\n<p>你的普通收入扣除房子首付、房贷、车子、奶粉钱之后你还足够安稳吗</p>\n<p>如果不买房，你可以做到一生租房，并容忍一生到老不断的搬家吗</p>\n<p>你的普通收入能让你匹配上你心仪的另一半吗</p>\n<p>你的现状能维持你一生的稳定平凡吗？你能对抗人生所有的风险吗</p>\n<p>你可以为自己的一生、父母后半生、孩子前半生的大大小小的健康问题买单吗</p>\n<p>如果你有了孩子，你作为爸爸/妈妈，能给孩子最好的教育吗</p>\n</blockquote>\n<p>如果你深刻的考虑了这些问题，都能得到坚定的答案，那么安于现状，不拼命努力，也没什么不好</p>\n<p>每个人的人生都不同，人生的路也没有对错之分，只是路上的酸甜苦辣，你需要独自承担</p>\n<h2 id=\"别让任何人打乱你的人生节奏\"><a href=\"#别让任何人打乱你的人生节奏\" class=\"headerlink\" title=\"别让任何人打乱你的人生节奏\"></a>别让任何人打乱你的人生节奏</h2><blockquote>\n<p>每个人的人生都不同</p>\n<p>“Not everything that counts can be counted，and not everything that’s counted truly counts”</p>\n<p>“并不是每件算出来的事，都有意义；也不是每件有意义的事，都能被算出来” ——爱因斯坦</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1WW411F7Hx\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1WW411F7Hx</a></p>\n<h2 id=\"关于坚持\"><a href=\"#关于坚持\" class=\"headerlink\" title=\"关于坚持\"></a>关于坚持</h2><blockquote>\n<p>坚持这两个字，远比你想象中的要难的多，但也比你想象中的有效的多。</p>\n<p>‘You do make a difference!’</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1XJ411d7Xx\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1XJ411d7Xx</a></p>\n<blockquote>\n<p>两年，是很容易虚度过去的时长，也是足够改变自己的时长。</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1NE41197sr\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1NE41197sr</a></p>\n<h2 id=\"如何追求快乐\"><a href=\"#如何追求快乐\" class=\"headerlink\" title=\"如何追求快乐\"></a>如何追求快乐</h2><blockquote>\n<p>有很多快乐是放纵的快乐，是降低了人性尊严的快乐，而越能体现人性尊严的快乐，越是一种高级的快乐。</p>\n<p>追求高级的快乐并不意味着放弃低级的快乐，但是如果你的眼目永远只关注地下，你永远不知道向上看有多么的快乐。</p>\n</blockquote>\n<p>——罗翔</p>\n<p><a href=\"https://www.bilibili.com/video/BV1AE411T7p7\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1AE411T7p7</a></p>\n<blockquote>\n<p>I don’t need dollar bills to have fun</p>\n</blockquote>\n<p>——【Cheap Thrills】 Sia</p>\n<h2 id=\"成熟的一些标志\"><a href=\"#成熟的一些标志\" class=\"headerlink\" title=\"成熟的一些标志\"></a>成熟的一些标志</h2><blockquote>\n<p>能克制欲望，不追求即时反馈，延迟享受。</p>\n<p>保持一致性，无论在人群中还是独处时，知行合一，不卑不亢，不矫揉造作，不哗众取宠。</p>\n<p>心中始终有底线、有原则、有追求。</p>\n<p>时刻反省自己：what在做什么、why为什么这样做、how如何做的更好</p>\n</blockquote>\n<p>—— 尼古拉斯·鱼</p>\n<h2 id=\"享受平静才是生活的真谛\"><a href=\"#享受平静才是生活的真谛\" class=\"headerlink\" title=\"享受平静才是生活的真谛\"></a>享受平静才是生活的真谛</h2><blockquote>\n<p>“上次我去一个朋友家玩，看到他们客厅里摆着一张很长的桌子。朋友说，每到周末，两个大人，一个孩子，还有两只猫都会围在这个桌子旁，家里很安静，只有书页翻动和画笔接触纸张的细微声音。”</p>\n</blockquote>\n<h2 id=\"看电影-阅读的意义是什么？\"><a href=\"#看电影-阅读的意义是什么？\" class=\"headerlink\" title=\"看电影/阅读的意义是什么？\"></a>看电影/阅读的意义是什么？</h2><blockquote>\n<p>谁看到的维度越多，世界在谁的眼中便越真实。</p>\n<p>练习自己感动、愤怒、喜悦、震惊、欢笑、平静的能力 不被苟且的生活捆绑致死。</p>\n<p>认识这个世界，丰富认知维度。</p>\n<p>即使生活一平如水、或筋疲力尽、或颠沛流离，仍要感受这个形形色色的世界，满怀希望，拥有细腻的情感。</p>\n</blockquote>\n<h2 id=\"子-瓜-犭-虫\"><a href=\"#子-瓜-犭-虫\" class=\"headerlink\" title=\"子 瓜 犭 虫\"></a>子 瓜 犭 虫</h2><blockquote>\n<p>稚儿擎瓜柳棚下,细犬逐蝶窄巷中,人间繁华多笑语,惟我空余两鬓风。</p>\n<p>“孤独”</p>\n<p>这两个字拆开看，有小孩，有水果，有走兽，有蚊蝇</p>\n<p>足以撑起一个盛夏傍晚的巷子口，人味十足。</p>\n<p>夏日的傍晚，你看着空中嗡嗡飞舞的飞虫，不远处的狗摇着尾巴穿巷而过，你手中拿着吃剩下的半块西瓜</p>\n<p>忽然觉得好像过了半辈子</p>\n<p>又好像只过了半分钟。</p>\n</blockquote>\n<h2 id=\"为什么要趁年轻多学习原文\"><a href=\"#为什么要趁年轻多学习原文\" class=\"headerlink\" title=\"为什么要趁年轻多学习原文\"></a>为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-link\"></i>原文</a></h2><blockquote>\n<p><strong>爆炸性压力才能带来爆炸性进步</strong></p>\n<p>每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：</p>\n<p>演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。</p>\n<p>这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。</p>\n<p>不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。</p>\n<p>祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。</p>\n<p>前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。</p>\n<p>再烂的牌也得打下去，这就是人生</p>\n</blockquote>\n<h2 id=\"时光\"><a href=\"#时光\" class=\"headerlink\" title=\"时光\"></a>时光</h2><blockquote>\n<p>小时候小时候，夏天穿过山间的风，打在树梢的雨，外婆灶台上的饭香，无奈回忆真的变成了回忆。</p>\n</blockquote>\n<h2 id=\"《stronger》kelly-clarkson\"><a href=\"#《stronger》kelly-clarkson\" class=\"headerlink\" title=\"《stronger》kelly clarkson\"></a>《stronger》kelly clarkson</h2><blockquote>\n<p>Doesn’t mean I’m lonely when I’m alone</p>\n</blockquote>\n<h2 id=\"《Lolita》\"><a href=\"#《Lolita》\" class=\"headerlink\" title=\"《Lolita》\"></a>《Lolita》</h2><blockquote>\n<p>洛丽塔，我生命之光，我欲念之火。我的罪恶，我的灵魂。</p>\n</blockquote>\n<h2 id=\"《阿甘正传》\"><a href=\"#《阿甘正传》\" class=\"headerlink\" title=\"《阿甘正传》\"></a>《阿甘正传》</h2><blockquote>\n<p>life’s like a feather</p>\n</blockquote>\n<h2 id=\"《하루하루》\"><a href=\"#《하루하루》\" class=\"headerlink\" title=\"《하루하루》\"></a>《하루하루》</h2><blockquote>\n<p>离开时请不要回头</p>\n<p>以后活着也不要找我</p>\n<p>因为爱你</p>\n<p>没有一丝悔意</p>\n<p>所以请带着美好的回忆离去</p>\n</blockquote>\n<h2 id=\"《安娜·卡列尼娜》列夫·托尔斯泰\"><a href=\"#《安娜·卡列尼娜》列夫·托尔斯泰\" class=\"headerlink\" title=\"《安娜·卡列尼娜》列夫·托尔斯泰\"></a>《安娜·卡列尼娜》列夫·托尔斯泰</h2><blockquote>\n<p>“幸福的家庭总是相似的，不幸的家庭各有各的不幸。”</p>\n</blockquote>\n<h2 id=\"阿德勒\"><a href=\"#阿德勒\" class=\"headerlink\" title=\"阿德勒\"></a>阿德勒</h2><blockquote>\n<p>“幸运的人一生都被童年治愈，不幸的人一生都在治愈童年。”</p>\n</blockquote>\n<h2 id=\"二十多岁浅薄的人生的唯一信仰：自律-坚持\"><a href=\"#二十多岁浅薄的人生的唯一信仰：自律-坚持\" class=\"headerlink\" title=\"二十多岁浅薄的人生的唯一信仰：自律 + 坚持\"></a>二十多岁浅薄的人生的唯一信仰：自律 + 坚持</h2>"},{"title":"Notion为什么能让我放弃手帐","date":"2020-04-11T16:00:00.000Z","description":"自我管理,记录,自省,用意识控制生活，而非本能","toc":1,"top":0,"_content":"\n今天在逛今日热榜的时候，看到了一篇知乎的文章[“我的最后一款笔记应用-Notion”](https://zhuanlan.zhihu.com/p/49263306)，是种草notion的。\n\n\n![Notion/header.png](/images/notion/header.png)\n\n一两年前notion刚火的时候，因为被其极简可爱的颜值吸引，我试用过一次，那时候我已经是“有道云笔记”的深度用户了，备份类、笔记类、小应用类、电子书类、代码类全都放在有道云笔记上，开了年会员加持，容量大、网速稳定、体验感功能性都没有缺陷，觉得notion仅仅适合做笔记、做管理，并不适合我从有道云笔记转型，而且刚刚起步的产品，还有这很多细节上体验不好的地方。\n\n直到今天，notion这款应用又重新进入我的视野，我被吸引了。\n\n原因是，近两年来，我一直在尝试用[手帐](https://baike.baidu.com/item/%E6%89%8B%E8%B4%A6/8972475?fromtitle=%E6%89%8B%E5%B8%90&fromid=8657227&fr=aladdin)的方式去做自我管理：每年都要换本子，重新set up年目标、年总结、影单、书单、学习路径、愿望清单、资产、习惯、体重等等的追踪记录，每个月也要做set up的工作，包括月封面、月历、周历、每日记录......\n\n即使中间我从普通手帐，转型到了最简洁的Bullet Journal，差别也仅仅是风格变成了极简，不需要花哨的涂涂画画，但也需要耗时耗精力的精心维护，花了很多时间在重复的工作：重复的画track表格、画年历月历、每年新建一些需要长期维护的项目（例如愿望清单、书单影单都不适合以年为维度记录，我更倾向于认为这些是需要以人生为维度去记录积累的），还需要每天带着一堆文具和厚厚的一个本子。\n\n低效、冗余、耗精力这些弊端都一直是我的心头草，仅仅是靠着对手帐的兴趣才维持了两年时间。\n\n两年后再接触到notion，又有了新的体验，这两年notion团队做出了卓越的努力，不断的优化更新，让当初新露头角毛毛糙糙的notion，在用户体验上有了华丽变身，更细致，更贴近用户，客户端也全端兼容了。\n\n当然，对于我来说，notion的亮点不光在于颜值和用户体验，更重要的，是它的“模块化”的思想，设计新颖又实用的“数据库”模式，文档（Notion Page）之间的灵活链接，以及对**markdown**的友好支持。\n\n模块化思想，把整个文档拆分成“块”（block），可以随意拖动排版，所有“块”都支持30多种媒体类型，包括文字、标题、多种list、文档链接（Notion Page）、团队成员、日期/提醒、图片视频、地图、Github Gist片段、数据库链接等等，这些特性让Notion既灵活又功能丰富。\n\n数据库模式，可以在一张数据表上保留所有数据记录。以表格、看板、画廊、日历等视图展现，一次创建，多处引用。例如创建一张待办事项表，就可以通过简单的引用数据表+新增视图+筛选，展现出“今日待办事项、团队协作看板、待办日历”等视图。例如创建一张财务收支表，可以展现出“年收入支出、月收入支出、支出类别占比”等视图，这些特性让Notion既高效又细致入微。举个栗子：以下的三张表其实都是同一张数据源。\n\n![Notion/数据库模式](/images/notion/ds.png)\n\n页面之间的灵活链接，使Notion跳出了“以文件夹格式逐层管理“的固定模式，用户完全可以创建一张灵活排布的目录Page，任意设计分类、排版、跳转。例如我的手帐主页：\n\n![Notion/页面灵活排版](/images/notion/home.png)\n\n---\n\n最后，我的示例和观点，只展示出了星星点点的用法，还有更多有意思的用法，等待开发～\n\n这是我的[邀请链接](https://www.notion.so/?r=a0690020239d4c52989afb7eb8042ca7),欢迎注册使用Notion\n\n---\n\n注：关于手账的意义：\n- 自我管理，自我规划，自律\n- 记录、温习回忆\n- 自省\n- 记录、调节情绪，解压\n- 用意识控制生活，而非本能","source":"_posts/e_journal_by_notion.md","raw":"---\ntitle: Notion为什么能让我放弃手帐\ncategories:\n    - 03成长 | 自我管理 # 一级分类\ntags:\ndate: 2020-04-12\ndescription: 自我管理,记录,自省,用意识控制生活，而非本能\ntoc: 1\ntop: 0\n---\n\n今天在逛今日热榜的时候，看到了一篇知乎的文章[“我的最后一款笔记应用-Notion”](https://zhuanlan.zhihu.com/p/49263306)，是种草notion的。\n\n\n![Notion/header.png](/images/notion/header.png)\n\n一两年前notion刚火的时候，因为被其极简可爱的颜值吸引，我试用过一次，那时候我已经是“有道云笔记”的深度用户了，备份类、笔记类、小应用类、电子书类、代码类全都放在有道云笔记上，开了年会员加持，容量大、网速稳定、体验感功能性都没有缺陷，觉得notion仅仅适合做笔记、做管理，并不适合我从有道云笔记转型，而且刚刚起步的产品，还有这很多细节上体验不好的地方。\n\n直到今天，notion这款应用又重新进入我的视野，我被吸引了。\n\n原因是，近两年来，我一直在尝试用[手帐](https://baike.baidu.com/item/%E6%89%8B%E8%B4%A6/8972475?fromtitle=%E6%89%8B%E5%B8%90&fromid=8657227&fr=aladdin)的方式去做自我管理：每年都要换本子，重新set up年目标、年总结、影单、书单、学习路径、愿望清单、资产、习惯、体重等等的追踪记录，每个月也要做set up的工作，包括月封面、月历、周历、每日记录......\n\n即使中间我从普通手帐，转型到了最简洁的Bullet Journal，差别也仅仅是风格变成了极简，不需要花哨的涂涂画画，但也需要耗时耗精力的精心维护，花了很多时间在重复的工作：重复的画track表格、画年历月历、每年新建一些需要长期维护的项目（例如愿望清单、书单影单都不适合以年为维度记录，我更倾向于认为这些是需要以人生为维度去记录积累的），还需要每天带着一堆文具和厚厚的一个本子。\n\n低效、冗余、耗精力这些弊端都一直是我的心头草，仅仅是靠着对手帐的兴趣才维持了两年时间。\n\n两年后再接触到notion，又有了新的体验，这两年notion团队做出了卓越的努力，不断的优化更新，让当初新露头角毛毛糙糙的notion，在用户体验上有了华丽变身，更细致，更贴近用户，客户端也全端兼容了。\n\n当然，对于我来说，notion的亮点不光在于颜值和用户体验，更重要的，是它的“模块化”的思想，设计新颖又实用的“数据库”模式，文档（Notion Page）之间的灵活链接，以及对**markdown**的友好支持。\n\n模块化思想，把整个文档拆分成“块”（block），可以随意拖动排版，所有“块”都支持30多种媒体类型，包括文字、标题、多种list、文档链接（Notion Page）、团队成员、日期/提醒、图片视频、地图、Github Gist片段、数据库链接等等，这些特性让Notion既灵活又功能丰富。\n\n数据库模式，可以在一张数据表上保留所有数据记录。以表格、看板、画廊、日历等视图展现，一次创建，多处引用。例如创建一张待办事项表，就可以通过简单的引用数据表+新增视图+筛选，展现出“今日待办事项、团队协作看板、待办日历”等视图。例如创建一张财务收支表，可以展现出“年收入支出、月收入支出、支出类别占比”等视图，这些特性让Notion既高效又细致入微。举个栗子：以下的三张表其实都是同一张数据源。\n\n![Notion/数据库模式](/images/notion/ds.png)\n\n页面之间的灵活链接，使Notion跳出了“以文件夹格式逐层管理“的固定模式，用户完全可以创建一张灵活排布的目录Page，任意设计分类、排版、跳转。例如我的手帐主页：\n\n![Notion/页面灵活排版](/images/notion/home.png)\n\n---\n\n最后，我的示例和观点，只展示出了星星点点的用法，还有更多有意思的用法，等待开发～\n\n这是我的[邀请链接](https://www.notion.so/?r=a0690020239d4c52989afb7eb8042ca7),欢迎注册使用Notion\n\n---\n\n注：关于手账的意义：\n- 自我管理，自我规划，自律\n- 记录、温习回忆\n- 自省\n- 记录、调节情绪，解压\n- 用意识控制生活，而非本能","slug":"e_journal_by_notion","published":1,"updated":"2021-01-28T02:48:18.756Z","_id":"ckir88ig60024c8y6t6pdy6ha","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今天在逛今日热榜的时候，看到了一篇知乎的文章<a href=\"https://zhuanlan.zhihu.com/p/49263306\" target=\"_blank\" rel=\"noopener\">“我的最后一款笔记应用-Notion”</a>，是种草notion的。</p>\n<p><img src=\"/images/notion/header.png\" alt=\"Notion/header.png\"></p>\n<p>一两年前notion刚火的时候，因为被其极简可爱的颜值吸引，我试用过一次，那时候我已经是“有道云笔记”的深度用户了，备份类、笔记类、小应用类、电子书类、代码类全都放在有道云笔记上，开了年会员加持，容量大、网速稳定、体验感功能性都没有缺陷，觉得notion仅仅适合做笔记、做管理，并不适合我从有道云笔记转型，而且刚刚起步的产品，还有这很多细节上体验不好的地方。</p>\n<p>直到今天，notion这款应用又重新进入我的视野，我被吸引了。</p>\n<p>原因是，近两年来，我一直在尝试用<a href=\"https://baike.baidu.com/item/%E6%89%8B%E8%B4%A6/8972475?fromtitle=%E6%89%8B%E5%B8%90&amp;fromid=8657227&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">手帐</a>的方式去做自我管理：每年都要换本子，重新set up年目标、年总结、影单、书单、学习路径、愿望清单、资产、习惯、体重等等的追踪记录，每个月也要做set up的工作，包括月封面、月历、周历、每日记录……</p>\n<p>即使中间我从普通手帐，转型到了最简洁的Bullet Journal，差别也仅仅是风格变成了极简，不需要花哨的涂涂画画，但也需要耗时耗精力的精心维护，花了很多时间在重复的工作：重复的画track表格、画年历月历、每年新建一些需要长期维护的项目（例如愿望清单、书单影单都不适合以年为维度记录，我更倾向于认为这些是需要以人生为维度去记录积累的），还需要每天带着一堆文具和厚厚的一个本子。</p>\n<p>低效、冗余、耗精力这些弊端都一直是我的心头草，仅仅是靠着对手帐的兴趣才维持了两年时间。</p>\n<p>两年后再接触到notion，又有了新的体验，这两年notion团队做出了卓越的努力，不断的优化更新，让当初新露头角毛毛糙糙的notion，在用户体验上有了华丽变身，更细致，更贴近用户，客户端也全端兼容了。</p>\n<p>当然，对于我来说，notion的亮点不光在于颜值和用户体验，更重要的，是它的“模块化”的思想，设计新颖又实用的“数据库”模式，文档（Notion Page）之间的灵活链接，以及对<strong>markdown</strong>的友好支持。</p>\n<p>模块化思想，把整个文档拆分成“块”（block），可以随意拖动排版，所有“块”都支持30多种媒体类型，包括文字、标题、多种list、文档链接（Notion Page）、团队成员、日期/提醒、图片视频、地图、Github Gist片段、数据库链接等等，这些特性让Notion既灵活又功能丰富。</p>\n<p>数据库模式，可以在一张数据表上保留所有数据记录。以表格、看板、画廊、日历等视图展现，一次创建，多处引用。例如创建一张待办事项表，就可以通过简单的引用数据表+新增视图+筛选，展现出“今日待办事项、团队协作看板、待办日历”等视图。例如创建一张财务收支表，可以展现出“年收入支出、月收入支出、支出类别占比”等视图，这些特性让Notion既高效又细致入微。举个栗子：以下的三张表其实都是同一张数据源。</p>\n<p><img src=\"/images/notion/ds.png\" alt=\"Notion/数据库模式\"></p>\n<p>页面之间的灵活链接，使Notion跳出了“以文件夹格式逐层管理“的固定模式，用户完全可以创建一张灵活排布的目录Page，任意设计分类、排版、跳转。例如我的手帐主页：</p>\n<p><img src=\"/images/notion/home.png\" alt=\"Notion/页面灵活排版\"></p>\n<hr>\n<p>最后，我的示例和观点，只展示出了星星点点的用法，还有更多有意思的用法，等待开发～</p>\n<p>这是我的<a href=\"https://www.notion.so/?r=a0690020239d4c52989afb7eb8042ca7\" target=\"_blank\" rel=\"noopener\">邀请链接</a>,欢迎注册使用Notion</p>\n<hr>\n<p>注：关于手账的意义：</p>\n<ul>\n<li>自我管理，自我规划，自律</li>\n<li>记录、温习回忆</li>\n<li>自省</li>\n<li>记录、调节情绪，解压</li>\n<li>用意识控制生活，而非本能</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在逛今日热榜的时候，看到了一篇知乎的文章<a href=\"https://zhuanlan.zhihu.com/p/49263306\" target=\"_blank\" rel=\"noopener\">“我的最后一款笔记应用-Notion”</a>，是种草notion的。</p>\n<p><img src=\"/images/notion/header.png\" alt=\"Notion/header.png\"></p>\n<p>一两年前notion刚火的时候，因为被其极简可爱的颜值吸引，我试用过一次，那时候我已经是“有道云笔记”的深度用户了，备份类、笔记类、小应用类、电子书类、代码类全都放在有道云笔记上，开了年会员加持，容量大、网速稳定、体验感功能性都没有缺陷，觉得notion仅仅适合做笔记、做管理，并不适合我从有道云笔记转型，而且刚刚起步的产品，还有这很多细节上体验不好的地方。</p>\n<p>直到今天，notion这款应用又重新进入我的视野，我被吸引了。</p>\n<p>原因是，近两年来，我一直在尝试用<a href=\"https://baike.baidu.com/item/%E6%89%8B%E8%B4%A6/8972475?fromtitle=%E6%89%8B%E5%B8%90&amp;fromid=8657227&amp;fr=aladdin\" target=\"_blank\" rel=\"noopener\">手帐</a>的方式去做自我管理：每年都要换本子，重新set up年目标、年总结、影单、书单、学习路径、愿望清单、资产、习惯、体重等等的追踪记录，每个月也要做set up的工作，包括月封面、月历、周历、每日记录……</p>\n<p>即使中间我从普通手帐，转型到了最简洁的Bullet Journal，差别也仅仅是风格变成了极简，不需要花哨的涂涂画画，但也需要耗时耗精力的精心维护，花了很多时间在重复的工作：重复的画track表格、画年历月历、每年新建一些需要长期维护的项目（例如愿望清单、书单影单都不适合以年为维度记录，我更倾向于认为这些是需要以人生为维度去记录积累的），还需要每天带着一堆文具和厚厚的一个本子。</p>\n<p>低效、冗余、耗精力这些弊端都一直是我的心头草，仅仅是靠着对手帐的兴趣才维持了两年时间。</p>\n<p>两年后再接触到notion，又有了新的体验，这两年notion团队做出了卓越的努力，不断的优化更新，让当初新露头角毛毛糙糙的notion，在用户体验上有了华丽变身，更细致，更贴近用户，客户端也全端兼容了。</p>\n<p>当然，对于我来说，notion的亮点不光在于颜值和用户体验，更重要的，是它的“模块化”的思想，设计新颖又实用的“数据库”模式，文档（Notion Page）之间的灵活链接，以及对<strong>markdown</strong>的友好支持。</p>\n<p>模块化思想，把整个文档拆分成“块”（block），可以随意拖动排版，所有“块”都支持30多种媒体类型，包括文字、标题、多种list、文档链接（Notion Page）、团队成员、日期/提醒、图片视频、地图、Github Gist片段、数据库链接等等，这些特性让Notion既灵活又功能丰富。</p>\n<p>数据库模式，可以在一张数据表上保留所有数据记录。以表格、看板、画廊、日历等视图展现，一次创建，多处引用。例如创建一张待办事项表，就可以通过简单的引用数据表+新增视图+筛选，展现出“今日待办事项、团队协作看板、待办日历”等视图。例如创建一张财务收支表，可以展现出“年收入支出、月收入支出、支出类别占比”等视图，这些特性让Notion既高效又细致入微。举个栗子：以下的三张表其实都是同一张数据源。</p>\n<p><img src=\"/images/notion/ds.png\" alt=\"Notion/数据库模式\"></p>\n<p>页面之间的灵活链接，使Notion跳出了“以文件夹格式逐层管理“的固定模式，用户完全可以创建一张灵活排布的目录Page，任意设计分类、排版、跳转。例如我的手帐主页：</p>\n<p><img src=\"/images/notion/home.png\" alt=\"Notion/页面灵活排版\"></p>\n<hr>\n<p>最后，我的示例和观点，只展示出了星星点点的用法，还有更多有意思的用法，等待开发～</p>\n<p>这是我的<a href=\"https://www.notion.so/?r=a0690020239d4c52989afb7eb8042ca7\" target=\"_blank\" rel=\"noopener\">邀请链接</a>,欢迎注册使用Notion</p>\n<hr>\n<p>注：关于手账的意义：</p>\n<ul>\n<li>自我管理，自我规划，自律</li>\n<li>记录、温习回忆</li>\n<li>自省</li>\n<li>记录、调节情绪，解压</li>\n<li>用意识控制生活，而非本能</li>\n</ul>\n"},{"title":"【ML01】机器学习&神经网络简介","date":"2019-12-24T16:00:00.000Z","description":"Javascript玩转机器学习01","toc":1,"top":0,"_content":"## 大纲\n- 理论知识：机器学习、神经网络、 Tensorflow. js\n- 经典案例：线性回归、逻辑回归、XOR、IRS、手写数字识\n别、商标识别、语音识别\n- 神经网络模型：从单个神经元到深度神经网络\n- 神经网络模型算法：MSE/Log/ Cross Entropy\nSigmoid/Relu/Softmax， SGD/Adam\n- 炼丹最佳实践：归化、欠（过）拟合、可视化、度量\n- 模型的迁移学习、保存、加载、转换\n\n## 为什么要学机器学习\n可以做一些很酷的事情,tensorflow.js官网列出了一些已经训练好的，开箱即用的[模型](https://www.tensorflow.org/js/models)\n\n例如，[BodyPix](https://github.com/tensorflow/tfjs-models/tree/master/body-pix)：实时分割人的身体和身体部位\n\n![body-pix](/images/ai/000.gif)\n\n[图像分类](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet),\n[文本恶意检测](https://github.com/tensorflow/tfjs-models/tree/master/toxicity),\n[语音指令识别](https://github.com/tensorflow/tfjs-models/tree/master/speech-commands),\n[...](https://www.tensorflow.org/js/models)\n\n\n## 机器学习是什么\n```\n数据 + 经验 -> 优化算法\n```\n- 对能**通过经验自动改进算法**的研究\n- 用**数据**或者以往的**经验**，来优化计算机程序的性能标准\n\n## 机器学习例子：线性回归\n- 只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\n\n![线性回归](/images/ai/01.png)\n\n- 如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\n\n![多元线性回归](/images/ai/02.png)\n\n## 机器学习例子：逻辑回归\n- 输入连续的（多个）值，输出0-1之间的概率，可以用于解决分类/是非判断问题\n\n![逻辑回归](/images/ai/03.png)\n\n- 例子：图片分类、语音助手\n\n![逻辑回归：图片分类](/images/ai/04.png)\n\n\n## 为什么要用机器学习\n- 有些问题无法用编写代码规则的方法来解决，例如图片识别。\n- 获取数据比编写规则更容易\n- GPU等计算能力显著提升（上世纪神经网络就已发明，但是受限于计算机计算能力，得不到发展\n\n\n## 机器学习如何运作\n- 神经网络\n- 决策树、支持向量机、贝叶斯分类器、强化学习\n\n## 什么是神经网络\n- 人工神经网络\n- 一种运算模型（输入输出的映射）\n- 由大量的节点（神经元）之间相互连接构成\n\n<!-- eg. 相亲\n![image](http://note.youdao.com/yws/res/26525/FDAB01287A58444E9C6205F65EE8A164) -->\n\n- 神经网路包括：一个输入层，若干隐藏层，一个输出层。\n- 每条线的权重可能不同\n\n## 神经元、权重、偏置、激活函数\n- 每个神经元里都存储着若干**权重wight**、**偏置bias**和一个**激活函数activation**\n- 输入**权重 + 偏置**，经过**激活函数**得到**输出**\n- **激活函数**：用于添加**非线性**变换\n\n\n## 神经网络的训练是什么？\n- 给大量输入输出，算出神经网络里所有神经元的**权重、偏置**，然后给定新的输入，可以算出新的输出\n\n## 机器学习中的术语\n- **==特征==**：输入\n- **==标签==**：输出\n- **训练集**：大量输入输出\n\n\n## 如何训练\n1. 初始化：随便生成一些**weight**，**bias**\n2. 计算**损失**：给定特征，计算出标签，得到其与真实标签的差距\n3. 优化：微调**weight**和**bias**，使损失变小\n\n## 前向传播\n- 将训练数据的**特征（输入）**送入网络，得到**标签（输出）**\n\n## 反向传播\n- 计算**损失**并优化\n\n## 如何计算损失\n**损失函数**：均方误差、对数损失、交叉熵...\n\n（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）\n\n## 如何优化\n**优化器**：随即梯度下降**SGD**、**Adam**\n\n（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_01.md","raw":"---\ntitle: 【ML01】机器学习&神经网络简介\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2019-12-25\ndescription: Javascript玩转机器学习01\ntoc: 1\ntop: 0\n---\n## 大纲\n- 理论知识：机器学习、神经网络、 Tensorflow. js\n- 经典案例：线性回归、逻辑回归、XOR、IRS、手写数字识\n别、商标识别、语音识别\n- 神经网络模型：从单个神经元到深度神经网络\n- 神经网络模型算法：MSE/Log/ Cross Entropy\nSigmoid/Relu/Softmax， SGD/Adam\n- 炼丹最佳实践：归化、欠（过）拟合、可视化、度量\n- 模型的迁移学习、保存、加载、转换\n\n## 为什么要学机器学习\n可以做一些很酷的事情,tensorflow.js官网列出了一些已经训练好的，开箱即用的[模型](https://www.tensorflow.org/js/models)\n\n例如，[BodyPix](https://github.com/tensorflow/tfjs-models/tree/master/body-pix)：实时分割人的身体和身体部位\n\n![body-pix](/images/ai/000.gif)\n\n[图像分类](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet),\n[文本恶意检测](https://github.com/tensorflow/tfjs-models/tree/master/toxicity),\n[语音指令识别](https://github.com/tensorflow/tfjs-models/tree/master/speech-commands),\n[...](https://www.tensorflow.org/js/models)\n\n\n## 机器学习是什么\n```\n数据 + 经验 -> 优化算法\n```\n- 对能**通过经验自动改进算法**的研究\n- 用**数据**或者以往的**经验**，来优化计算机程序的性能标准\n\n## 机器学习例子：线性回归\n- 只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。\n\n![线性回归](/images/ai/01.png)\n\n- 如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。\n\n![多元线性回归](/images/ai/02.png)\n\n## 机器学习例子：逻辑回归\n- 输入连续的（多个）值，输出0-1之间的概率，可以用于解决分类/是非判断问题\n\n![逻辑回归](/images/ai/03.png)\n\n- 例子：图片分类、语音助手\n\n![逻辑回归：图片分类](/images/ai/04.png)\n\n\n## 为什么要用机器学习\n- 有些问题无法用编写代码规则的方法来解决，例如图片识别。\n- 获取数据比编写规则更容易\n- GPU等计算能力显著提升（上世纪神经网络就已发明，但是受限于计算机计算能力，得不到发展\n\n\n## 机器学习如何运作\n- 神经网络\n- 决策树、支持向量机、贝叶斯分类器、强化学习\n\n## 什么是神经网络\n- 人工神经网络\n- 一种运算模型（输入输出的映射）\n- 由大量的节点（神经元）之间相互连接构成\n\n<!-- eg. 相亲\n![image](http://note.youdao.com/yws/res/26525/FDAB01287A58444E9C6205F65EE8A164) -->\n\n- 神经网路包括：一个输入层，若干隐藏层，一个输出层。\n- 每条线的权重可能不同\n\n## 神经元、权重、偏置、激活函数\n- 每个神经元里都存储着若干**权重wight**、**偏置bias**和一个**激活函数activation**\n- 输入**权重 + 偏置**，经过**激活函数**得到**输出**\n- **激活函数**：用于添加**非线性**变换\n\n\n## 神经网络的训练是什么？\n- 给大量输入输出，算出神经网络里所有神经元的**权重、偏置**，然后给定新的输入，可以算出新的输出\n\n## 机器学习中的术语\n- **==特征==**：输入\n- **==标签==**：输出\n- **训练集**：大量输入输出\n\n\n## 如何训练\n1. 初始化：随便生成一些**weight**，**bias**\n2. 计算**损失**：给定特征，计算出标签，得到其与真实标签的差距\n3. 优化：微调**weight**和**bias**，使损失变小\n\n## 前向传播\n- 将训练数据的**特征（输入）**送入网络，得到**标签（输出）**\n\n## 反向传播\n- 计算**损失**并优化\n\n## 如何计算损失\n**损失函数**：均方误差、对数损失、交叉熵...\n\n（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）\n\n## 如何优化\n**优化器**：随即梯度下降**SGD**、**Adam**\n\n（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_01","published":1,"updated":"2021-01-22T10:00:34.791Z","_id":"ckir88ig70027c8y65j98566f","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><ul>\n<li>理论知识：机器学习、神经网络、 Tensorflow. js</li>\n<li>经典案例：线性回归、逻辑回归、XOR、IRS、手写数字识<br>别、商标识别、语音识别</li>\n<li>神经网络模型：从单个神经元到深度神经网络</li>\n<li>神经网络模型算法：MSE/Log/ Cross Entropy<br>Sigmoid/Relu/Softmax， SGD/Adam</li>\n<li>炼丹最佳实践：归化、欠（过）拟合、可视化、度量</li>\n<li>模型的迁移学习、保存、加载、转换</li>\n</ul>\n<h2 id=\"为什么要学机器学习\"><a href=\"#为什么要学机器学习\" class=\"headerlink\" title=\"为什么要学机器学习\"></a>为什么要学机器学习</h2><p>可以做一些很酷的事情,tensorflow.js官网列出了一些已经训练好的，开箱即用的<a href=\"https://www.tensorflow.org/js/models\" target=\"_blank\" rel=\"noopener\">模型</a></p>\n<p>例如，<a href=\"https://github.com/tensorflow/tfjs-models/tree/master/body-pix\" target=\"_blank\" rel=\"noopener\">BodyPix</a>：实时分割人的身体和身体部位</p>\n<p><img src=\"/images/ai/000.gif\" alt=\"body-pix\"></p>\n<p><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/mobilenet\" target=\"_blank\" rel=\"noopener\">图像分类</a>,<br><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/toxicity\" target=\"_blank\" rel=\"noopener\">文本恶意检测</a>,<br><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\" target=\"_blank\" rel=\"noopener\">语音指令识别</a>,<br><a href=\"https://www.tensorflow.org/js/models\" target=\"_blank\" rel=\"noopener\">…</a></p>\n<h2 id=\"机器学习是什么\"><a href=\"#机器学习是什么\" class=\"headerlink\" title=\"机器学习是什么\"></a>机器学习是什么</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据 + 经验 -&gt; 优化算法</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对能<strong>通过经验自动改进算法</strong>的研究</li>\n<li>用<strong>数据</strong>或者以往的<strong>经验</strong>，来优化计算机程序的性能标准</li>\n</ul>\n<h2 id=\"机器学习例子：线性回归\"><a href=\"#机器学习例子：线性回归\" class=\"headerlink\" title=\"机器学习例子：线性回归\"></a>机器学习例子：线性回归</h2><ul>\n<li>只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。</li>\n</ul>\n<p><img src=\"/images/ai/01.png\" alt=\"线性回归\"></p>\n<ul>\n<li>如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。</li>\n</ul>\n<p><img src=\"/images/ai/02.png\" alt=\"多元线性回归\"></p>\n<h2 id=\"机器学习例子：逻辑回归\"><a href=\"#机器学习例子：逻辑回归\" class=\"headerlink\" title=\"机器学习例子：逻辑回归\"></a>机器学习例子：逻辑回归</h2><ul>\n<li>输入连续的（多个）值，输出0-1之间的概率，可以用于解决分类/是非判断问题</li>\n</ul>\n<p><img src=\"/images/ai/03.png\" alt=\"逻辑回归\"></p>\n<ul>\n<li>例子：图片分类、语音助手</li>\n</ul>\n<p><img src=\"/images/ai/04.png\" alt=\"逻辑回归：图片分类\"></p>\n<h2 id=\"为什么要用机器学习\"><a href=\"#为什么要用机器学习\" class=\"headerlink\" title=\"为什么要用机器学习\"></a>为什么要用机器学习</h2><ul>\n<li>有些问题无法用编写代码规则的方法来解决，例如图片识别。</li>\n<li>获取数据比编写规则更容易</li>\n<li>GPU等计算能力显著提升（上世纪神经网络就已发明，但是受限于计算机计算能力，得不到发展</li>\n</ul>\n<h2 id=\"机器学习如何运作\"><a href=\"#机器学习如何运作\" class=\"headerlink\" title=\"机器学习如何运作\"></a>机器学习如何运作</h2><ul>\n<li>神经网络</li>\n<li>决策树、支持向量机、贝叶斯分类器、强化学习</li>\n</ul>\n<h2 id=\"什么是神经网络\"><a href=\"#什么是神经网络\" class=\"headerlink\" title=\"什么是神经网络\"></a>什么是神经网络</h2><ul>\n<li>人工神经网络</li>\n<li>一种运算模型（输入输出的映射）</li>\n<li>由大量的节点（神经元）之间相互连接构成</li>\n</ul>\n<!-- eg. 相亲\n![image](http://note.youdao.com/yws/res/26525/FDAB01287A58444E9C6205F65EE8A164) -->\n<ul>\n<li>神经网路包括：一个输入层，若干隐藏层，一个输出层。</li>\n<li>每条线的权重可能不同</li>\n</ul>\n<h2 id=\"神经元、权重、偏置、激活函数\"><a href=\"#神经元、权重、偏置、激活函数\" class=\"headerlink\" title=\"神经元、权重、偏置、激活函数\"></a>神经元、权重、偏置、激活函数</h2><ul>\n<li>每个神经元里都存储着若干<strong>权重wight</strong>、<strong>偏置bias</strong>和一个<strong>激活函数activation</strong></li>\n<li>输入<strong>权重 + 偏置</strong>，经过<strong>激活函数</strong>得到<strong>输出</strong></li>\n<li><strong>激活函数</strong>：用于添加<strong>非线性</strong>变换</li>\n</ul>\n<h2 id=\"神经网络的训练是什么？\"><a href=\"#神经网络的训练是什么？\" class=\"headerlink\" title=\"神经网络的训练是什么？\"></a>神经网络的训练是什么？</h2><ul>\n<li>给大量输入输出，算出神经网络里所有神经元的<strong>权重、偏置</strong>，然后给定新的输入，可以算出新的输出</li>\n</ul>\n<h2 id=\"机器学习中的术语\"><a href=\"#机器学习中的术语\" class=\"headerlink\" title=\"机器学习中的术语\"></a>机器学习中的术语</h2><ul>\n<li><strong>==特征==</strong>：输入</li>\n<li><strong>==标签==</strong>：输出</li>\n<li><strong>训练集</strong>：大量输入输出</li>\n</ul>\n<h2 id=\"如何训练\"><a href=\"#如何训练\" class=\"headerlink\" title=\"如何训练\"></a>如何训练</h2><ol>\n<li>初始化：随便生成一些<strong>weight</strong>，<strong>bias</strong></li>\n<li>计算<strong>损失</strong>：给定特征，计算出标签，得到其与真实标签的差距</li>\n<li>优化：微调<strong>weight</strong>和<strong>bias</strong>，使损失变小</li>\n</ol>\n<h2 id=\"前向传播\"><a href=\"#前向传播\" class=\"headerlink\" title=\"前向传播\"></a>前向传播</h2><ul>\n<li>将训练数据的<strong>特征（输入）</strong>送入网络，得到<strong>标签（输出）</strong></li>\n</ul>\n<h2 id=\"反向传播\"><a href=\"#反向传播\" class=\"headerlink\" title=\"反向传播\"></a>反向传播</h2><ul>\n<li>计算<strong>损失</strong>并优化</li>\n</ul>\n<h2 id=\"如何计算损失\"><a href=\"#如何计算损失\" class=\"headerlink\" title=\"如何计算损失\"></a>如何计算损失</h2><p><strong>损失函数</strong>：均方误差、对数损失、交叉熵…</p>\n<p>（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）</p>\n<h2 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h2><p><strong>优化器</strong>：随即梯度下降<strong>SGD</strong>、<strong>Adam</strong></p>\n<p>（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）</p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h2><ul>\n<li>理论知识：机器学习、神经网络、 Tensorflow. js</li>\n<li>经典案例：线性回归、逻辑回归、XOR、IRS、手写数字识<br>别、商标识别、语音识别</li>\n<li>神经网络模型：从单个神经元到深度神经网络</li>\n<li>神经网络模型算法：MSE/Log/ Cross Entropy<br>Sigmoid/Relu/Softmax， SGD/Adam</li>\n<li>炼丹最佳实践：归化、欠（过）拟合、可视化、度量</li>\n<li>模型的迁移学习、保存、加载、转换</li>\n</ul>\n<h2 id=\"为什么要学机器学习\"><a href=\"#为什么要学机器学习\" class=\"headerlink\" title=\"为什么要学机器学习\"></a>为什么要学机器学习</h2><p>可以做一些很酷的事情,tensorflow.js官网列出了一些已经训练好的，开箱即用的<a href=\"https://www.tensorflow.org/js/models\" target=\"_blank\" rel=\"noopener\">模型</a></p>\n<p>例如，<a href=\"https://github.com/tensorflow/tfjs-models/tree/master/body-pix\" target=\"_blank\" rel=\"noopener\">BodyPix</a>：实时分割人的身体和身体部位</p>\n<p><img src=\"/images/ai/000.gif\" alt=\"body-pix\"></p>\n<p><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/mobilenet\" target=\"_blank\" rel=\"noopener\">图像分类</a>,<br><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/toxicity\" target=\"_blank\" rel=\"noopener\">文本恶意检测</a>,<br><a href=\"https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\" target=\"_blank\" rel=\"noopener\">语音指令识别</a>,<br><a href=\"https://www.tensorflow.org/js/models\" target=\"_blank\" rel=\"noopener\">…</a></p>\n<h2 id=\"机器学习是什么\"><a href=\"#机器学习是什么\" class=\"headerlink\" title=\"机器学习是什么\"></a>机器学习是什么</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据 + 经验 -&gt; 优化算法</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对能<strong>通过经验自动改进算法</strong>的研究</li>\n<li>用<strong>数据</strong>或者以往的<strong>经验</strong>，来优化计算机程序的性能标准</li>\n</ul>\n<h2 id=\"机器学习例子：线性回归\"><a href=\"#机器学习例子：线性回归\" class=\"headerlink\" title=\"机器学习例子：线性回归\"></a>机器学习例子：线性回归</h2><ul>\n<li>只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。</li>\n</ul>\n<p><img src=\"/images/ai/01.png\" alt=\"线性回归\"></p>\n<ul>\n<li>如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。</li>\n</ul>\n<p><img src=\"/images/ai/02.png\" alt=\"多元线性回归\"></p>\n<h2 id=\"机器学习例子：逻辑回归\"><a href=\"#机器学习例子：逻辑回归\" class=\"headerlink\" title=\"机器学习例子：逻辑回归\"></a>机器学习例子：逻辑回归</h2><ul>\n<li>输入连续的（多个）值，输出0-1之间的概率，可以用于解决分类/是非判断问题</li>\n</ul>\n<p><img src=\"/images/ai/03.png\" alt=\"逻辑回归\"></p>\n<ul>\n<li>例子：图片分类、语音助手</li>\n</ul>\n<p><img src=\"/images/ai/04.png\" alt=\"逻辑回归：图片分类\"></p>\n<h2 id=\"为什么要用机器学习\"><a href=\"#为什么要用机器学习\" class=\"headerlink\" title=\"为什么要用机器学习\"></a>为什么要用机器学习</h2><ul>\n<li>有些问题无法用编写代码规则的方法来解决，例如图片识别。</li>\n<li>获取数据比编写规则更容易</li>\n<li>GPU等计算能力显著提升（上世纪神经网络就已发明，但是受限于计算机计算能力，得不到发展</li>\n</ul>\n<h2 id=\"机器学习如何运作\"><a href=\"#机器学习如何运作\" class=\"headerlink\" title=\"机器学习如何运作\"></a>机器学习如何运作</h2><ul>\n<li>神经网络</li>\n<li>决策树、支持向量机、贝叶斯分类器、强化学习</li>\n</ul>\n<h2 id=\"什么是神经网络\"><a href=\"#什么是神经网络\" class=\"headerlink\" title=\"什么是神经网络\"></a>什么是神经网络</h2><ul>\n<li>人工神经网络</li>\n<li>一种运算模型（输入输出的映射）</li>\n<li>由大量的节点（神经元）之间相互连接构成</li>\n</ul>\n<!-- eg. 相亲\n![image](http://note.youdao.com/yws/res/26525/FDAB01287A58444E9C6205F65EE8A164) -->\n<ul>\n<li>神经网路包括：一个输入层，若干隐藏层，一个输出层。</li>\n<li>每条线的权重可能不同</li>\n</ul>\n<h2 id=\"神经元、权重、偏置、激活函数\"><a href=\"#神经元、权重、偏置、激活函数\" class=\"headerlink\" title=\"神经元、权重、偏置、激活函数\"></a>神经元、权重、偏置、激活函数</h2><ul>\n<li>每个神经元里都存储着若干<strong>权重wight</strong>、<strong>偏置bias</strong>和一个<strong>激活函数activation</strong></li>\n<li>输入<strong>权重 + 偏置</strong>，经过<strong>激活函数</strong>得到<strong>输出</strong></li>\n<li><strong>激活函数</strong>：用于添加<strong>非线性</strong>变换</li>\n</ul>\n<h2 id=\"神经网络的训练是什么？\"><a href=\"#神经网络的训练是什么？\" class=\"headerlink\" title=\"神经网络的训练是什么？\"></a>神经网络的训练是什么？</h2><ul>\n<li>给大量输入输出，算出神经网络里所有神经元的<strong>权重、偏置</strong>，然后给定新的输入，可以算出新的输出</li>\n</ul>\n<h2 id=\"机器学习中的术语\"><a href=\"#机器学习中的术语\" class=\"headerlink\" title=\"机器学习中的术语\"></a>机器学习中的术语</h2><ul>\n<li><strong>==特征==</strong>：输入</li>\n<li><strong>==标签==</strong>：输出</li>\n<li><strong>训练集</strong>：大量输入输出</li>\n</ul>\n<h2 id=\"如何训练\"><a href=\"#如何训练\" class=\"headerlink\" title=\"如何训练\"></a>如何训练</h2><ol>\n<li>初始化：随便生成一些<strong>weight</strong>，<strong>bias</strong></li>\n<li>计算<strong>损失</strong>：给定特征，计算出标签，得到其与真实标签的差距</li>\n<li>优化：微调<strong>weight</strong>和<strong>bias</strong>，使损失变小</li>\n</ol>\n<h2 id=\"前向传播\"><a href=\"#前向传播\" class=\"headerlink\" title=\"前向传播\"></a>前向传播</h2><ul>\n<li>将训练数据的<strong>特征（输入）</strong>送入网络，得到<strong>标签（输出）</strong></li>\n</ul>\n<h2 id=\"反向传播\"><a href=\"#反向传播\" class=\"headerlink\" title=\"反向传播\"></a>反向传播</h2><ul>\n<li>计算<strong>损失</strong>并优化</li>\n</ul>\n<h2 id=\"如何计算损失\"><a href=\"#如何计算损失\" class=\"headerlink\" title=\"如何计算损失\"></a>如何计算损失</h2><p><strong>损失函数</strong>：均方误差、对数损失、交叉熵…</p>\n<p>（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）</p>\n<h2 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h2><p><strong>优化器</strong>：随即梯度下降<strong>SGD</strong>、<strong>Adam</strong></p>\n<p>（了解损失函数原理即可，可以从第三方库调用。eg.TensorFlow.js）</p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML03】Tensor-张量简介","date":"2019-12-28T16:00:00.000Z","description":"Javascript玩转机器学习03","toc":1,"top":0,"_content":"\n## 什么是Tensor\n- **张量**\n- 是向量和矩阵向更高维度的推广\n- 相当于多维数组\n\n### 0维张量\n![0维张量](/images/ai/05.png)\n\n![rankType描述维度](/images/ai/06.png)\n\n### 1维张量\n![1维张量](/images/ai/07.png)\n\n![shape描述每个维度上数组长度](/images/ai/08.png)\n\n### 2维张量\n![每一维度数组长度均为2的2维张量](/images/ai/09.png)\n\n![size描述张量的元素数量](/images/ai/10.png)\n\n### 2 维张量\n![2维张量](/images/ai/11.png)\n\n![每一维度数组长度均为1的2维张量](/images/ai/12.png)\n\n\n### 3维张量\n![3维张量](/images/ai/13.png)\n\n![shape描述了三个维度的数组长度均为1](/images/ai/14.png)\n\n\n## Tensor和机器学习有什么关系？\n- Tensor符合神经网络的数据结构\n- 神经网络每一层要存N维数据\n- N层的For循环运算\n\n## Tensor的运算 十分符合 神经网络的运算\n- eg.用TensorFlow.js提供的**点乘dotAPI**能够简化复杂的for循环运算：\n\n![传统for循环运算张量 vs dot运算张量](/images/ai/15.png)\n\n![点乘结果与for循环结果一致](/images/ai/16.png)\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_03_tensor.md","raw":"---\ntitle: 【ML03】Tensor-张量简介\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2019-12-29\ndescription: Javascript玩转机器学习03\ntoc: 1\ntop: 0\n---\n\n## 什么是Tensor\n- **张量**\n- 是向量和矩阵向更高维度的推广\n- 相当于多维数组\n\n### 0维张量\n![0维张量](/images/ai/05.png)\n\n![rankType描述维度](/images/ai/06.png)\n\n### 1维张量\n![1维张量](/images/ai/07.png)\n\n![shape描述每个维度上数组长度](/images/ai/08.png)\n\n### 2维张量\n![每一维度数组长度均为2的2维张量](/images/ai/09.png)\n\n![size描述张量的元素数量](/images/ai/10.png)\n\n### 2 维张量\n![2维张量](/images/ai/11.png)\n\n![每一维度数组长度均为1的2维张量](/images/ai/12.png)\n\n\n### 3维张量\n![3维张量](/images/ai/13.png)\n\n![shape描述了三个维度的数组长度均为1](/images/ai/14.png)\n\n\n## Tensor和机器学习有什么关系？\n- Tensor符合神经网络的数据结构\n- 神经网络每一层要存N维数据\n- N层的For循环运算\n\n## Tensor的运算 十分符合 神经网络的运算\n- eg.用TensorFlow.js提供的**点乘dotAPI**能够简化复杂的for循环运算：\n\n![传统for循环运算张量 vs dot运算张量](/images/ai/15.png)\n\n![点乘结果与for循环结果一致](/images/ai/16.png)\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_03_tensor","published":1,"updated":"2021-01-22T10:00:51.581Z","_id":"ckir88ig80029c8y6wxt4qxo0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是Tensor\"><a href=\"#什么是Tensor\" class=\"headerlink\" title=\"什么是Tensor\"></a>什么是Tensor</h2><ul>\n<li><strong>张量</strong></li>\n<li>是向量和矩阵向更高维度的推广</li>\n<li>相当于多维数组</li>\n</ul>\n<h3 id=\"0维张量\"><a href=\"#0维张量\" class=\"headerlink\" title=\"0维张量\"></a>0维张量</h3><p><img src=\"/images/ai/05.png\" alt=\"0维张量\"></p>\n<p><img src=\"/images/ai/06.png\" alt=\"rankType描述维度\"></p>\n<h3 id=\"1维张量\"><a href=\"#1维张量\" class=\"headerlink\" title=\"1维张量\"></a>1维张量</h3><p><img src=\"/images/ai/07.png\" alt=\"1维张量\"></p>\n<p><img src=\"/images/ai/08.png\" alt=\"shape描述每个维度上数组长度\"></p>\n<h3 id=\"2维张量\"><a href=\"#2维张量\" class=\"headerlink\" title=\"2维张量\"></a>2维张量</h3><p><img src=\"/images/ai/09.png\" alt=\"每一维度数组长度均为2的2维张量\"></p>\n<p><img src=\"/images/ai/10.png\" alt=\"size描述张量的元素数量\"></p>\n<h3 id=\"2-维张量\"><a href=\"#2-维张量\" class=\"headerlink\" title=\"2 维张量\"></a>2 维张量</h3><p><img src=\"/images/ai/11.png\" alt=\"2维张量\"></p>\n<p><img src=\"/images/ai/12.png\" alt=\"每一维度数组长度均为1的2维张量\"></p>\n<h3 id=\"3维张量\"><a href=\"#3维张量\" class=\"headerlink\" title=\"3维张量\"></a>3维张量</h3><p><img src=\"/images/ai/13.png\" alt=\"3维张量\"></p>\n<p><img src=\"/images/ai/14.png\" alt=\"shape描述了三个维度的数组长度均为1\"></p>\n<h2 id=\"Tensor和机器学习有什么关系？\"><a href=\"#Tensor和机器学习有什么关系？\" class=\"headerlink\" title=\"Tensor和机器学习有什么关系？\"></a>Tensor和机器学习有什么关系？</h2><ul>\n<li>Tensor符合神经网络的数据结构</li>\n<li>神经网络每一层要存N维数据</li>\n<li>N层的For循环运算</li>\n</ul>\n<h2 id=\"Tensor的运算-十分符合-神经网络的运算\"><a href=\"#Tensor的运算-十分符合-神经网络的运算\" class=\"headerlink\" title=\"Tensor的运算 十分符合 神经网络的运算\"></a>Tensor的运算 十分符合 神经网络的运算</h2><ul>\n<li>eg.用TensorFlow.js提供的<strong>点乘dotAPI</strong>能够简化复杂的for循环运算：</li>\n</ul>\n<p><img src=\"/images/ai/15.png\" alt=\"传统for循环运算张量 vs dot运算张量\"></p>\n<p><img src=\"/images/ai/16.png\" alt=\"点乘结果与for循环结果一致\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Tensor\"><a href=\"#什么是Tensor\" class=\"headerlink\" title=\"什么是Tensor\"></a>什么是Tensor</h2><ul>\n<li><strong>张量</strong></li>\n<li>是向量和矩阵向更高维度的推广</li>\n<li>相当于多维数组</li>\n</ul>\n<h3 id=\"0维张量\"><a href=\"#0维张量\" class=\"headerlink\" title=\"0维张量\"></a>0维张量</h3><p><img src=\"/images/ai/05.png\" alt=\"0维张量\"></p>\n<p><img src=\"/images/ai/06.png\" alt=\"rankType描述维度\"></p>\n<h3 id=\"1维张量\"><a href=\"#1维张量\" class=\"headerlink\" title=\"1维张量\"></a>1维张量</h3><p><img src=\"/images/ai/07.png\" alt=\"1维张量\"></p>\n<p><img src=\"/images/ai/08.png\" alt=\"shape描述每个维度上数组长度\"></p>\n<h3 id=\"2维张量\"><a href=\"#2维张量\" class=\"headerlink\" title=\"2维张量\"></a>2维张量</h3><p><img src=\"/images/ai/09.png\" alt=\"每一维度数组长度均为2的2维张量\"></p>\n<p><img src=\"/images/ai/10.png\" alt=\"size描述张量的元素数量\"></p>\n<h3 id=\"2-维张量\"><a href=\"#2-维张量\" class=\"headerlink\" title=\"2 维张量\"></a>2 维张量</h3><p><img src=\"/images/ai/11.png\" alt=\"2维张量\"></p>\n<p><img src=\"/images/ai/12.png\" alt=\"每一维度数组长度均为1的2维张量\"></p>\n<h3 id=\"3维张量\"><a href=\"#3维张量\" class=\"headerlink\" title=\"3维张量\"></a>3维张量</h3><p><img src=\"/images/ai/13.png\" alt=\"3维张量\"></p>\n<p><img src=\"/images/ai/14.png\" alt=\"shape描述了三个维度的数组长度均为1\"></p>\n<h2 id=\"Tensor和机器学习有什么关系？\"><a href=\"#Tensor和机器学习有什么关系？\" class=\"headerlink\" title=\"Tensor和机器学习有什么关系？\"></a>Tensor和机器学习有什么关系？</h2><ul>\n<li>Tensor符合神经网络的数据结构</li>\n<li>神经网络每一层要存N维数据</li>\n<li>N层的For循环运算</li>\n</ul>\n<h2 id=\"Tensor的运算-十分符合-神经网络的运算\"><a href=\"#Tensor的运算-十分符合-神经网络的运算\" class=\"headerlink\" title=\"Tensor的运算 十分符合 神经网络的运算\"></a>Tensor的运算 十分符合 神经网络的运算</h2><ul>\n<li>eg.用TensorFlow.js提供的<strong>点乘dotAPI</strong>能够简化复杂的for循环运算：</li>\n</ul>\n<p><img src=\"/images/ai/15.png\" alt=\"传统for循环运算张量 vs dot运算张量\"></p>\n<p><img src=\"/images/ai/16.png\" alt=\"点乘结果与for循环结果一致\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML04】线性回归训练","date":"2020-01-01T16:00:00.000Z","description":"Javascript玩转机器学习04","toc":1,"top":0,"_content":"\n## 线性回归是什么\n- 一种统计分析方法\n- 用于确定两种(或以上)变量间相互依赖的**定量关系**\n- eg.身高体重预测(两种变量)、房价预测(多变量)\n\n\n## 操作步骤\n- 准备、可视化：训练数据\n- 用TensorFlow.js的API构建一个简单的神经网络\n- 训练模型 并 预测\n\n## 前置条件\n- 最新版本chrome\n- 代码编辑器（eg.VSCODE\n- 基础的前端、神经网络知识\n\n## 准备、可视化：训练数据（实操）\n- 准备线性回归训练数据(特征、标签)\n- 使用tfvis可视化训练数据(tfvis是一个神经网络可视化库)\n\n\n```html\n<!-- linear-regression/index.html-->\n<script src=\"script.js\"></script>\n```\n```js\n// linear-regression/script.js\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" },\n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n};\n\n```\n\n```\n-- bash\nparcel li*/*.html\n```\n\n## 可视化效果\n![可视化效果](/images/ai/17.png)\n\n\n\n## 定义单个神经元的神经网络模型\n- 初始化一个神经网络模型(model)\n- 为模型添加**层**(layer)\n- 设计**层**的神经元个数和**inputShape**\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" },\n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n};\n\n```\n\n## 损失函数：均方误差（MSE-MeanSquaredError）\n- 利用[google ML  playground](https://developers.google.cn/machine-learning/crash-course/descending-into-ml) 理解**损失函数**与**均方误差**：\n\n\n- **损失函数**用于计算预测值与实际值差距\n\n\n![预测值、实际值、损失](/images/ai/18.png)\n\n\n- **均方误差**（meanSquaredError）是一种损失函数\n\n![MSE](/images/ai/19.png)\n\n\n- 在TensorFlow.js中设置损失函数\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError})  //设置损失函数为均方误差MSE\n};\n```\n\n## 优化器：随即梯度下降（SGD）\n- 利用[google ML  playground](https://developers.google.cn/machine-learning/crash-course/descending-into-ml) 理解**优化器**与**随机梯度下降**：\n\n\n- 迭代试错：\n\n![迭代试错](/images/ai/20.png)\n\n\n- 梯度下降法：\n\n![梯度下降法](/images/ai/21.png)\n\n\n- SGD\n\n![SGD](/images/ai/22.png)\n\n\n\n\n- 在TensorFlow.js中设置**优化器**\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD\n};\n```\n\n## 训练模型并可视化训练过程\n- 将训练数据转为tensor\n- 训练模型\n- 用**tfvis**可视化训练过程\n\n\n\n```\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = async () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = tf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数\n\n  const inputs = tf.tensor(xs);\n  const labels = tf.tensor(ys);\n\n  await model.fit(inputs, labels,{\n    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）\n    epochs:100, //迭代实验次数（超参数，需要不断调整试验）\n    callbacks:tfvis.show.fitCallbacks(\n      {name:'训练过程'},\n      ['loss'],\n    )\n  });\n\n};\n\n```\n\n- 批量处理size设置为1，训练初期会有明显抖动\n\n\n![](/images/ai/23.png)\n\n![](/images/ai/24.png)\n\n\n- 批量处理size设置为4，训练曲线比较平滑\n\n![](/images/ai/25.png)\n\n\n![](/images/ai/26.png)\n\n\n## 进行预测\n- 将待预测数据转为Tensor\n- 用训练好的模型进行预测\n- 将输出的Tensor转为普通数据并显示（模型的输入输出都是模型）\n\n\n```\n  const output = model.predict(tf.tensor([5])); //将待预测数据5转为Tensor,用训练好的模型进行预测\n  output.print();\n  console.log(output.dataSync()); //将输出的Tensor转为普通数据并显示\n```\n\n![预测结果](/images/ai/27.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_04_linear_regression.md","raw":"---\ntitle: 【ML04】线性回归训练\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-01-02\ndescription: Javascript玩转机器学习04\ntoc: 1\ntop: 0\n---\n\n## 线性回归是什么\n- 一种统计分析方法\n- 用于确定两种(或以上)变量间相互依赖的**定量关系**\n- eg.身高体重预测(两种变量)、房价预测(多变量)\n\n\n## 操作步骤\n- 准备、可视化：训练数据\n- 用TensorFlow.js的API构建一个简单的神经网络\n- 训练模型 并 预测\n\n## 前置条件\n- 最新版本chrome\n- 代码编辑器（eg.VSCODE\n- 基础的前端、神经网络知识\n\n## 准备、可视化：训练数据（实操）\n- 准备线性回归训练数据(特征、标签)\n- 使用tfvis可视化训练数据(tfvis是一个神经网络可视化库)\n\n\n```html\n<!-- linear-regression/index.html-->\n<script src=\"script.js\"></script>\n```\n```js\n// linear-regression/script.js\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" },\n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n};\n\n```\n\n```\n-- bash\nparcel li*/*.html\n```\n\n## 可视化效果\n![可视化效果](/images/ai/17.png)\n\n\n\n## 定义单个神经元的神经网络模型\n- 初始化一个神经网络模型(model)\n- 为模型添加**层**(layer)\n- 设计**层**的神经元个数和**inputShape**\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" },\n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n};\n\n```\n\n## 损失函数：均方误差（MSE-MeanSquaredError）\n- 利用[google ML  playground](https://developers.google.cn/machine-learning/crash-course/descending-into-ml) 理解**损失函数**与**均方误差**：\n\n\n- **损失函数**用于计算预测值与实际值差距\n\n\n![预测值、实际值、损失](/images/ai/18.png)\n\n\n- **均方误差**（meanSquaredError）是一种损失函数\n\n![MSE](/images/ai/19.png)\n\n\n- 在TensorFlow.js中设置损失函数\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError})  //设置损失函数为均方误差MSE\n};\n```\n\n## 优化器：随即梯度下降（SGD）\n- 利用[google ML  playground](https://developers.google.cn/machine-learning/crash-course/descending-into-ml) 理解**优化器**与**随机梯度下降**：\n\n\n- 迭代试错：\n\n![迭代试错](/images/ai/20.png)\n\n\n- 梯度下降法：\n\n![梯度下降法](/images/ai/21.png)\n\n\n- SGD\n\n![SGD](/images/ai/22.png)\n\n\n\n\n- 在TensorFlow.js中设置**优化器**\n\n\n```\nimport * as tfjs from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = sf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD\n};\n```\n\n## 训练模型并可视化训练过程\n- 将训练数据转为tensor\n- 训练模型\n- 用**tfvis**可视化训练过程\n\n\n\n```\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nwindow.onload = async () => {\n  const xs = [1, 2, 3, 4]; //input\n  const ys = [1, 3, 5, 7]; //output\n\n  tfvis.render.scatterplot(\n    { name: \"线性回归训练数据\" }, \n    { values: xs.map((x, i) => ({x, y:ys[i]})) },\n    {xAxisDomain:[0,5],yAxisDomain:[0,9]}\n  );\n\n  const model = tf.sequential();  //创造一个连续模型\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数\n\n  const inputs = tf.tensor(xs);\n  const labels = tf.tensor(ys);\n\n  await model.fit(inputs, labels,{\n    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）\n    epochs:100, //迭代实验次数（超参数，需要不断调整试验）\n    callbacks:tfvis.show.fitCallbacks(\n      {name:'训练过程'},\n      ['loss'],\n    )\n  });\n\n};\n\n```\n\n- 批量处理size设置为1，训练初期会有明显抖动\n\n\n![](/images/ai/23.png)\n\n![](/images/ai/24.png)\n\n\n- 批量处理size设置为4，训练曲线比较平滑\n\n![](/images/ai/25.png)\n\n\n![](/images/ai/26.png)\n\n\n## 进行预测\n- 将待预测数据转为Tensor\n- 用训练好的模型进行预测\n- 将输出的Tensor转为普通数据并显示（模型的输入输出都是模型）\n\n\n```\n  const output = model.predict(tf.tensor([5])); //将待预测数据5转为Tensor,用训练好的模型进行预测\n  output.print();\n  console.log(output.dataSync()); //将输出的Tensor转为普通数据并显示\n```\n\n![预测结果](/images/ai/27.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_04_linear_regression","published":1,"updated":"2021-01-22T10:00:56.989Z","_id":"ckir88ig9002bc8y6cfld39wj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"线性回归是什么\"><a href=\"#线性回归是什么\" class=\"headerlink\" title=\"线性回归是什么\"></a>线性回归是什么</h2><ul>\n<li>一种统计分析方法</li>\n<li>用于确定两种(或以上)变量间相互依赖的<strong>定量关系</strong></li>\n<li>eg.身高体重预测(两种变量)、房价预测(多变量)</li>\n</ul>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><ul>\n<li>准备、可视化：训练数据</li>\n<li>用TensorFlow.js的API构建一个简单的神经网络</li>\n<li>训练模型 并 预测</li>\n</ul>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><ul>\n<li>最新版本chrome</li>\n<li>代码编辑器（eg.VSCODE</li>\n<li>基础的前端、神经网络知识</li>\n</ul>\n<h2 id=\"准备、可视化：训练数据（实操）\"><a href=\"#准备、可视化：训练数据（实操）\" class=\"headerlink\" title=\"准备、可视化：训练数据（实操）\"></a>准备、可视化：训练数据（实操）</h2><ul>\n<li>准备线性回归训练数据(特征、标签)</li>\n<li>使用tfvis可视化训练数据(tfvis是一个神经网络可视化库)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- linear-regression/index.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// linear-regression/script.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">\"@tensorflow/tfjs-vis\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xs = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]; <span class=\"comment\">//input</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ys = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]; <span class=\"comment\">//output</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"线性回归训练数据\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">values</span>: xs.map(<span class=\"function\">(<span class=\"params\">x, i</span>) =&gt;</span> (&#123;x, <span class=\"attr\">y</span>:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">xAxisDomain</span>:[<span class=\"number\">0</span>,<span class=\"number\">5</span>],<span class=\"attr\">yAxisDomain</span>:[<span class=\"number\">0</span>,<span class=\"number\">9</span>]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- bash</span><br><span class=\"line\">parcel li*/*.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"可视化效果\"><a href=\"#可视化效果\" class=\"headerlink\" title=\"可视化效果\"></a>可视化效果</h2><p><img src=\"/images/ai/17.png\" alt=\"可视化效果\"></p>\n<h2 id=\"定义单个神经元的神经网络模型\"><a href=\"#定义单个神经元的神经网络模型\" class=\"headerlink\" title=\"定义单个神经元的神经网络模型\"></a>定义单个神经元的神经网络模型</h2><ul>\n<li>初始化一个神经网络模型(model)</li>\n<li>为模型添加<strong>层</strong>(layer)</li>\n<li>设计<strong>层</strong>的神经元个数和<strong>inputShape</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;,</span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"损失函数：均方误差（MSE-MeanSquaredError）\"><a href=\"#损失函数：均方误差（MSE-MeanSquaredError）\" class=\"headerlink\" title=\"损失函数：均方误差（MSE-MeanSquaredError）\"></a>损失函数：均方误差（MSE-MeanSquaredError）</h2><ul>\n<li>利用<a href=\"https://developers.google.cn/machine-learning/crash-course/descending-into-ml\" target=\"_blank\" rel=\"noopener\">google ML  playground</a> 理解<strong>损失函数</strong>与<strong>均方误差</strong>：</li>\n</ul>\n<ul>\n<li><strong>损失函数</strong>用于计算预测值与实际值差距</li>\n</ul>\n<p><img src=\"/images/ai/18.png\" alt=\"预测值、实际值、损失\"></p>\n<ul>\n<li><strong>均方误差</strong>（meanSquaredError）是一种损失函数</li>\n</ul>\n<p><img src=\"/images/ai/19.png\" alt=\"MSE\"></p>\n<ul>\n<li>在TensorFlow.js中设置损失函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError&#125;)  //设置损失函数为均方误差MSE</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化器：随即梯度下降（SGD）\"><a href=\"#优化器：随即梯度下降（SGD）\" class=\"headerlink\" title=\"优化器：随即梯度下降（SGD）\"></a>优化器：随即梯度下降（SGD）</h2><ul>\n<li>利用<a href=\"https://developers.google.cn/machine-learning/crash-course/descending-into-ml\" target=\"_blank\" rel=\"noopener\">google ML  playground</a> 理解<strong>优化器</strong>与<strong>随机梯度下降</strong>：</li>\n</ul>\n<ul>\n<li>迭代试错：</li>\n</ul>\n<p><img src=\"/images/ai/20.png\" alt=\"迭代试错\"></p>\n<ul>\n<li>梯度下降法：</li>\n</ul>\n<p><img src=\"/images/ai/21.png\" alt=\"梯度下降法\"></p>\n<ul>\n<li>SGD</li>\n</ul>\n<p><img src=\"/images/ai/22.png\" alt=\"SGD\"></p>\n<ul>\n<li>在TensorFlow.js中设置<strong>优化器</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并可视化训练过程\"><a href=\"#训练模型并可视化训练过程\" class=\"headerlink\" title=\"训练模型并可视化训练过程\"></a>训练模型并可视化训练过程</h2><ul>\n<li>将训练数据转为tensor</li>\n<li>训练模型</li>\n<li>用<strong>tfvis</strong>可视化训练过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tf from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = async () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = tf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数</span><br><span class=\"line\"></span><br><span class=\"line\">  const inputs = tf.tensor(xs);</span><br><span class=\"line\">  const labels = tf.tensor(ys);</span><br><span class=\"line\"></span><br><span class=\"line\">  await model.fit(inputs, labels,&#123;</span><br><span class=\"line\">    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）</span><br><span class=\"line\">    epochs:100, //迭代实验次数（超参数，需要不断调整试验）</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;训练过程&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;],</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>批量处理size设置为1，训练初期会有明显抖动</li>\n</ul>\n<p><img src=\"/images/ai/23.png\" alt></p>\n<p><img src=\"/images/ai/24.png\" alt></p>\n<ul>\n<li>批量处理size设置为4，训练曲线比较平滑</li>\n</ul>\n<p><img src=\"/images/ai/25.png\" alt></p>\n<p><img src=\"/images/ai/26.png\" alt></p>\n<h2 id=\"进行预测\"><a href=\"#进行预测\" class=\"headerlink\" title=\"进行预测\"></a>进行预测</h2><ul>\n<li>将待预测数据转为Tensor</li>\n<li>用训练好的模型进行预测</li>\n<li>将输出的Tensor转为普通数据并显示（模型的输入输出都是模型）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const output = model.predict(tf.tensor([5])); //将待预测数据5转为Tensor,用训练好的模型进行预测</span><br><span class=\"line\">output.print();</span><br><span class=\"line\">console.log(output.dataSync()); //将输出的Tensor转为普通数据并显示</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/27.png\" alt=\"预测结果\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线性回归是什么\"><a href=\"#线性回归是什么\" class=\"headerlink\" title=\"线性回归是什么\"></a>线性回归是什么</h2><ul>\n<li>一种统计分析方法</li>\n<li>用于确定两种(或以上)变量间相互依赖的<strong>定量关系</strong></li>\n<li>eg.身高体重预测(两种变量)、房价预测(多变量)</li>\n</ul>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><ul>\n<li>准备、可视化：训练数据</li>\n<li>用TensorFlow.js的API构建一个简单的神经网络</li>\n<li>训练模型 并 预测</li>\n</ul>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><ul>\n<li>最新版本chrome</li>\n<li>代码编辑器（eg.VSCODE</li>\n<li>基础的前端、神经网络知识</li>\n</ul>\n<h2 id=\"准备、可视化：训练数据（实操）\"><a href=\"#准备、可视化：训练数据（实操）\" class=\"headerlink\" title=\"准备、可视化：训练数据（实操）\"></a>准备、可视化：训练数据（实操）</h2><ul>\n<li>准备线性回归训练数据(特征、标签)</li>\n<li>使用tfvis可视化训练数据(tfvis是一个神经网络可视化库)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- linear-regression/index.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// linear-regression/script.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">\"@tensorflow/tfjs-vis\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> xs = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]; <span class=\"comment\">//input</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ys = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]; <span class=\"comment\">//output</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"线性回归训练数据\"</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">values</span>: xs.map(<span class=\"function\">(<span class=\"params\">x, i</span>) =&gt;</span> (&#123;x, <span class=\"attr\">y</span>:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">xAxisDomain</span>:[<span class=\"number\">0</span>,<span class=\"number\">5</span>],<span class=\"attr\">yAxisDomain</span>:[<span class=\"number\">0</span>,<span class=\"number\">9</span>]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- bash</span><br><span class=\"line\">parcel li*/*.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"可视化效果\"><a href=\"#可视化效果\" class=\"headerlink\" title=\"可视化效果\"></a>可视化效果</h2><p><img src=\"/images/ai/17.png\" alt=\"可视化效果\"></p>\n<h2 id=\"定义单个神经元的神经网络模型\"><a href=\"#定义单个神经元的神经网络模型\" class=\"headerlink\" title=\"定义单个神经元的神经网络模型\"></a>定义单个神经元的神经网络模型</h2><ul>\n<li>初始化一个神经网络模型(model)</li>\n<li>为模型添加<strong>层</strong>(layer)</li>\n<li>设计<strong>层</strong>的神经元个数和<strong>inputShape</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;,</span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"损失函数：均方误差（MSE-MeanSquaredError）\"><a href=\"#损失函数：均方误差（MSE-MeanSquaredError）\" class=\"headerlink\" title=\"损失函数：均方误差（MSE-MeanSquaredError）\"></a>损失函数：均方误差（MSE-MeanSquaredError）</h2><ul>\n<li>利用<a href=\"https://developers.google.cn/machine-learning/crash-course/descending-into-ml\" target=\"_blank\" rel=\"noopener\">google ML  playground</a> 理解<strong>损失函数</strong>与<strong>均方误差</strong>：</li>\n</ul>\n<ul>\n<li><strong>损失函数</strong>用于计算预测值与实际值差距</li>\n</ul>\n<p><img src=\"/images/ai/18.png\" alt=\"预测值、实际值、损失\"></p>\n<ul>\n<li><strong>均方误差</strong>（meanSquaredError）是一种损失函数</li>\n</ul>\n<p><img src=\"/images/ai/19.png\" alt=\"MSE\"></p>\n<ul>\n<li>在TensorFlow.js中设置损失函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError&#125;)  //设置损失函数为均方误差MSE</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化器：随即梯度下降（SGD）\"><a href=\"#优化器：随即梯度下降（SGD）\" class=\"headerlink\" title=\"优化器：随即梯度下降（SGD）\"></a>优化器：随即梯度下降（SGD）</h2><ul>\n<li>利用<a href=\"https://developers.google.cn/machine-learning/crash-course/descending-into-ml\" target=\"_blank\" rel=\"noopener\">google ML  playground</a> 理解<strong>优化器</strong>与<strong>随机梯度下降</strong>：</li>\n</ul>\n<ul>\n<li>迭代试错：</li>\n</ul>\n<p><img src=\"/images/ai/20.png\" alt=\"迭代试错\"></p>\n<ul>\n<li>梯度下降法：</li>\n</ul>\n<p><img src=\"/images/ai/21.png\" alt=\"梯度下降法\"></p>\n<ul>\n<li>SGD</li>\n</ul>\n<p><img src=\"/images/ai/22.png\" alt=\"SGD\"></p>\n<ul>\n<li>在TensorFlow.js中设置<strong>优化器</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tfjs from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = sf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并可视化训练过程\"><a href=\"#训练模型并可视化训练过程\" class=\"headerlink\" title=\"训练模型并可视化训练过程\"></a>训练模型并可视化训练过程</h2><ul>\n<li>将训练数据转为tensor</li>\n<li>训练模型</li>\n<li>用<strong>tfvis</strong>可视化训练过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as tf from &quot;@tensorflow/tfjs&quot;;</span><br><span class=\"line\">import * as tfvis from &quot;@tensorflow/tfjs-vis&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = async () =&gt; &#123;</span><br><span class=\"line\">  const xs = [1, 2, 3, 4]; //input</span><br><span class=\"line\">  const ys = [1, 3, 5, 7]; //output</span><br><span class=\"line\"></span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;线性回归训练数据&quot; &#125;, </span><br><span class=\"line\">    &#123; values: xs.map((x, i) =&gt; (&#123;x, y:ys[i]&#125;)) &#125;,</span><br><span class=\"line\">    &#123;xAxisDomain:[0,5],yAxisDomain:[0,9]&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  const model = tf.sequential();  //创造一个连续模型</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数</span><br><span class=\"line\"></span><br><span class=\"line\">  const inputs = tf.tensor(xs);</span><br><span class=\"line\">  const labels = tf.tensor(ys);</span><br><span class=\"line\"></span><br><span class=\"line\">  await model.fit(inputs, labels,&#123;</span><br><span class=\"line\">    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）</span><br><span class=\"line\">    epochs:100, //迭代实验次数（超参数，需要不断调整试验）</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;训练过程&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;],</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>批量处理size设置为1，训练初期会有明显抖动</li>\n</ul>\n<p><img src=\"/images/ai/23.png\" alt></p>\n<p><img src=\"/images/ai/24.png\" alt></p>\n<ul>\n<li>批量处理size设置为4，训练曲线比较平滑</li>\n</ul>\n<p><img src=\"/images/ai/25.png\" alt></p>\n<p><img src=\"/images/ai/26.png\" alt></p>\n<h2 id=\"进行预测\"><a href=\"#进行预测\" class=\"headerlink\" title=\"进行预测\"></a>进行预测</h2><ul>\n<li>将待预测数据转为Tensor</li>\n<li>用训练好的模型进行预测</li>\n<li>将输出的Tensor转为普通数据并显示（模型的输入输出都是模型）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const output = model.predict(tf.tensor([5])); //将待预测数据5转为Tensor,用训练好的模型进行预测</span><br><span class=\"line\">output.print();</span><br><span class=\"line\">console.log(output.dataSync()); //将输出的Tensor转为普通数据并显示</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/27.png\" alt=\"预测结果\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML02】TensorFlow.js简介","date":"2019-12-25T16:00:00.000Z","description":"Javascript玩转机器学习02","toc":1,"top":0,"_content":"\n## TensorFlow.js是什么\n- js实现的机器学库\n- 可以在node.js/浏览器环境中使用机器学习技术，这意味着有更好的实时性和交互性\n- 著名的TensorFlow是用Python实现的\n\n## TensorFlow.js能干什么\n- 运行现有的模型（算法工程师已经训练好的模型）\n- 重新训练现有模型\n- 使用javascript开发机器学习模型\n\n## demo\n- [tfjs的各种例子](https://github.com/tensorflow/tfjs-examples)\n\n## 在浏览器安装tfjs\n- 新建一个html，script标签引入\n\n`<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js\"></script>`\n\n- npm包安装，用import引入，用parcel/webpack构建\n\n`npm i @tensorflow/tfjs`\n\n## 在Node.JS安装tfjs\n- 安装带有原生C++绑定的TensorFlow.js(推荐，底层是C++，速度快，但是安装麻烦)\n- 安装纯Javascript版本，性能较差\n\n- 使用require方式引用之前npm安装的`@tensorflow/tfjs`，直接用node运行当前js，一样可以在node中使用到tfjs，但是会提示：\n\n```\n============================\nHi there. \nLooks like you are running TensorFlow.js in Node.js. \nTo speed things up dramatically, install our node backend, whi\nch binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n```\n\n- 因此要使用`npm i @tensorflow/tfjs-node`命令来安装后端版本tfjs，但是直接安装会报错，要先安装以下依赖：`npm i node-gyp windows-build-tools@4.0.0 -g`\n\n- `node-gyp`是node和计算机底层交互时经常要用到的包，在windows直接安装这个包也需要一些依赖，例如安装visual studio、python，因此`windows-build-tools@4.0.0`这个包就是用来解决其依赖问题的。\n\n- 安装完后端版本tfjs`@tensorflow/tfjs-node`后，即可直接通过require引入使用\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_02_tensorflow.md","raw":"---\ntitle: 【ML02】TensorFlow.js简介\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2019-12-26\ndescription: Javascript玩转机器学习02\ntoc: 1\ntop: 0\n---\n\n## TensorFlow.js是什么\n- js实现的机器学库\n- 可以在node.js/浏览器环境中使用机器学习技术，这意味着有更好的实时性和交互性\n- 著名的TensorFlow是用Python实现的\n\n## TensorFlow.js能干什么\n- 运行现有的模型（算法工程师已经训练好的模型）\n- 重新训练现有模型\n- 使用javascript开发机器学习模型\n\n## demo\n- [tfjs的各种例子](https://github.com/tensorflow/tfjs-examples)\n\n## 在浏览器安装tfjs\n- 新建一个html，script标签引入\n\n`<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js\"></script>`\n\n- npm包安装，用import引入，用parcel/webpack构建\n\n`npm i @tensorflow/tfjs`\n\n## 在Node.JS安装tfjs\n- 安装带有原生C++绑定的TensorFlow.js(推荐，底层是C++，速度快，但是安装麻烦)\n- 安装纯Javascript版本，性能较差\n\n- 使用require方式引用之前npm安装的`@tensorflow/tfjs`，直接用node运行当前js，一样可以在node中使用到tfjs，但是会提示：\n\n```\n============================\nHi there. \nLooks like you are running TensorFlow.js in Node.js. \nTo speed things up dramatically, install our node backend, whi\nch binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n```\n\n- 因此要使用`npm i @tensorflow/tfjs-node`命令来安装后端版本tfjs，但是直接安装会报错，要先安装以下依赖：`npm i node-gyp windows-build-tools@4.0.0 -g`\n\n- `node-gyp`是node和计算机底层交互时经常要用到的包，在windows直接安装这个包也需要一些依赖，例如安装visual studio、python，因此`windows-build-tools@4.0.0`这个包就是用来解决其依赖问题的。\n\n- 安装完后端版本tfjs`@tensorflow/tfjs-node`后，即可直接通过require引入使用\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_02_tensorflow","published":1,"updated":"2021-01-22T10:00:41.751Z","_id":"ckir88igb002ec8y6wfnnfnc5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"TensorFlow-js是什么\"><a href=\"#TensorFlow-js是什么\" class=\"headerlink\" title=\"TensorFlow.js是什么\"></a>TensorFlow.js是什么</h2><ul>\n<li>js实现的机器学库</li>\n<li>可以在node.js/浏览器环境中使用机器学习技术，这意味着有更好的实时性和交互性</li>\n<li>著名的TensorFlow是用Python实现的</li>\n</ul>\n<h2 id=\"TensorFlow-js能干什么\"><a href=\"#TensorFlow-js能干什么\" class=\"headerlink\" title=\"TensorFlow.js能干什么\"></a>TensorFlow.js能干什么</h2><ul>\n<li>运行现有的模型（算法工程师已经训练好的模型）</li>\n<li>重新训练现有模型</li>\n<li>使用javascript开发机器学习模型</li>\n</ul>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><ul>\n<li><a href=\"https://github.com/tensorflow/tfjs-examples\" target=\"_blank\" rel=\"noopener\">tfjs的各种例子</a></li>\n</ul>\n<h2 id=\"在浏览器安装tfjs\"><a href=\"#在浏览器安装tfjs\" class=\"headerlink\" title=\"在浏览器安装tfjs\"></a>在浏览器安装tfjs</h2><ul>\n<li>新建一个html，script标签引入</li>\n</ul>\n<p><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<ul>\n<li>npm包安装，用import引入，用parcel/webpack构建</li>\n</ul>\n<p><code>npm i @tensorflow/tfjs</code></p>\n<h2 id=\"在Node-JS安装tfjs\"><a href=\"#在Node-JS安装tfjs\" class=\"headerlink\" title=\"在Node.JS安装tfjs\"></a>在Node.JS安装tfjs</h2><ul>\n<li>安装带有原生C++绑定的TensorFlow.js(推荐，底层是C++，速度快，但是安装麻烦)</li>\n<li><p>安装纯Javascript版本，性能较差</p>\n</li>\n<li><p>使用require方式引用之前npm安装的<code>@tensorflow/tfjs</code>，直接用node运行当前js，一样可以在node中使用到tfjs，但是会提示：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============================</span><br><span class=\"line\">Hi there. </span><br><span class=\"line\">Looks like you are running TensorFlow.js in Node.js. </span><br><span class=\"line\">To speed things up dramatically, install our node backend, whi</span><br><span class=\"line\">ch binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require(&apos;@tensorflow/tfjs-node&apos;); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.</span><br><span class=\"line\">============================</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>因此要使用<code>npm i @tensorflow/tfjs-node</code>命令来安装后端版本tfjs，但是直接安装会报错，要先安装以下依赖：<code>npm i node-gyp windows-build-tools@4.0.0 -g</code></p>\n</li>\n<li><p><code>node-gyp</code>是node和计算机底层交互时经常要用到的包，在windows直接安装这个包也需要一些依赖，例如安装visual studio、python，因此<a href=\"mailto:`windows-build-tools@4.0.0\" target=\"_blank\" rel=\"noopener\">`windows-build-tools@4.0.0</a>`这个包就是用来解决其依赖问题的。</p>\n</li>\n<li><p>安装完后端版本tfjs<code>@tensorflow/tfjs-node</code>后，即可直接通过require引入使用</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TensorFlow-js是什么\"><a href=\"#TensorFlow-js是什么\" class=\"headerlink\" title=\"TensorFlow.js是什么\"></a>TensorFlow.js是什么</h2><ul>\n<li>js实现的机器学库</li>\n<li>可以在node.js/浏览器环境中使用机器学习技术，这意味着有更好的实时性和交互性</li>\n<li>著名的TensorFlow是用Python实现的</li>\n</ul>\n<h2 id=\"TensorFlow-js能干什么\"><a href=\"#TensorFlow-js能干什么\" class=\"headerlink\" title=\"TensorFlow.js能干什么\"></a>TensorFlow.js能干什么</h2><ul>\n<li>运行现有的模型（算法工程师已经训练好的模型）</li>\n<li>重新训练现有模型</li>\n<li>使用javascript开发机器学习模型</li>\n</ul>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><ul>\n<li><a href=\"https://github.com/tensorflow/tfjs-examples\" target=\"_blank\" rel=\"noopener\">tfjs的各种例子</a></li>\n</ul>\n<h2 id=\"在浏览器安装tfjs\"><a href=\"#在浏览器安装tfjs\" class=\"headerlink\" title=\"在浏览器安装tfjs\"></a>在浏览器安装tfjs</h2><ul>\n<li>新建一个html，script标签引入</li>\n</ul>\n<p><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<ul>\n<li>npm包安装，用import引入，用parcel/webpack构建</li>\n</ul>\n<p><code>npm i @tensorflow/tfjs</code></p>\n<h2 id=\"在Node-JS安装tfjs\"><a href=\"#在Node-JS安装tfjs\" class=\"headerlink\" title=\"在Node.JS安装tfjs\"></a>在Node.JS安装tfjs</h2><ul>\n<li>安装带有原生C++绑定的TensorFlow.js(推荐，底层是C++，速度快，但是安装麻烦)</li>\n<li><p>安装纯Javascript版本，性能较差</p>\n</li>\n<li><p>使用require方式引用之前npm安装的<code>@tensorflow/tfjs</code>，直接用node运行当前js，一样可以在node中使用到tfjs，但是会提示：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============================</span><br><span class=\"line\">Hi there. </span><br><span class=\"line\">Looks like you are running TensorFlow.js in Node.js. </span><br><span class=\"line\">To speed things up dramatically, install our node backend, whi</span><br><span class=\"line\">ch binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require(&apos;@tensorflow/tfjs-node&apos;); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.</span><br><span class=\"line\">============================</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>因此要使用<code>npm i @tensorflow/tfjs-node</code>命令来安装后端版本tfjs，但是直接安装会报错，要先安装以下依赖：<code>npm i node-gyp windows-build-tools@4.0.0 -g</code></p>\n</li>\n<li><p><code>node-gyp</code>是node和计算机底层交互时经常要用到的包，在windows直接安装这个包也需要一些依赖，例如安装visual studio、python，因此<a href=\"mailto:`windows-build-tools@4.0.0\" target=\"_blank\" rel=\"noopener\">`windows-build-tools@4.0.0</a>`这个包就是用来解决其依赖问题的。</p>\n</li>\n<li><p>安装完后端版本tfjs<code>@tensorflow/tfjs-node</code>后，即可直接通过require引入使用</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML06】逻辑回归训练","date":"2020-01-05T16:00:00.000Z","description":"Javascript玩转机器学习06","toc":1,"top":0,"_content":"\n## 逻辑回归简介\n- 解决分类问题，输出一个概率[0,1]\n\n![image](/images/ai/30.png)\n\n## 加载二分类数据集\n- 使用脚本生成二分类数据集\n\n\n```\n//利用脚本生成400组二分类数据\n  const data = getData(400);\n  console.log(data);\n```\n\n- 数据结构如图：\n\n![image](/images/ai/31.png)\n\n- 可视化二分类数据集(散点图)\n\n\n```\n//可视化为散点图\n  tfvis.render.scatterplot(\n    {name:'二分类逻辑回归 训练数据'},\n    {\n      values:[\n        data.filter(p=>p.label === 1),\n        data.filter(p=>p.label === 0),\n      ]\n    }\n  )\n```\n\n- 可视化效果：\n\n![image](/images/ai/32.png)\n\n\n## 定义模型结构:带有激活函数的单个神经元\n- 初始化一个sequential神经网络模型\n\n\n```\n//添加一个sequential神经网络模型\n  const model = tf.sequential();\n```\n\n\n- 为模型添加层，设计层的神经元个数、inputShape、激活函数(`model.add`)\n\n\n```\n//为模型添加一个 dense全链接层（点乘 偏置 激活函数 适合用于二分类回归）\n  model.add(tf.layers.dense({\n    units:1,  //神经元个数\n    inputShape:[2], //输入的tensor的shape：长度为2的一维数组\n    activation:'sigmoid', //sigmoid这种激活函数的曲线y值范围始终在[0,1]\n  }));\n```\n\n\n## 对数损失函数 Log Loss\n- 利用`wiki.fast.ai`人工智能教学网站，理解[对数损失函数](http://wiki.fast.ai/index.php/Log_Loss)\n- 对数损失函数:用于测量预测值在[0,1]的分类模型的性能\n- 如下图为：标签为1的预测值的对数损失函数曲线，预测越接近真实值1，损失越小，越接近0 ，损失越大：\n\n![image](/images/ai/33.png)\n\n## 用TFJS API设置损失函数为：LogLoss(`model.compile`)\n\n\n```\n//设置损失函数为：LogLoss 对数损失函数\n  model.compile({loss:tf.losses.logLoss});\n```\n\n## 设置超参数，训练模型(`model.fit`)\n\n\n```\n//设置超参数 训练模型\n  await model.fit(inputs, labels,{\n    batchSize:40,\n    epochs:50,\n    callbacks:tfvis.show.fitCallbacks(\n      {name:'训练过程'},\n      ['loss']\n    )\n  })\n```\n\n- 训练过程截图：\n\n![image](/images/ai/34.png)\n\n## 预测\n- 编写前端界面输入待预测数据\n- 使用训练好的模型进行预测(`model.predict`)\n\n\n```html\n<form action=\"\" onsubmit=\"predict(this);return false;\">\n  x: <input type=\"text\" name=\"x\">\n  y: <input type=\"text\" name=\"y\">\n  <button type=\"submit\">预测</button>\n</form>\n```\n\n\n```js\nwindow.predict = (form)=>{\n    const pred = model.predict(tf.tensor([[form.x.value * 1,form.y.value * 1]]));\n    alert(`预测结果：${pred.dataSync()[0]}`);\n  }\n```\n\n- 输入2，2    预测结果：\n\n![image](/images/ai/35.png)\n\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n\n","source":"_posts/fed_ml_06_logistic_regression.md","raw":"---\ntitle: 【ML06】逻辑回归训练\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-01-06\ndescription: Javascript玩转机器学习06\ntoc: 1\ntop: 0\n---\n\n## 逻辑回归简介\n- 解决分类问题，输出一个概率[0,1]\n\n![image](/images/ai/30.png)\n\n## 加载二分类数据集\n- 使用脚本生成二分类数据集\n\n\n```\n//利用脚本生成400组二分类数据\n  const data = getData(400);\n  console.log(data);\n```\n\n- 数据结构如图：\n\n![image](/images/ai/31.png)\n\n- 可视化二分类数据集(散点图)\n\n\n```\n//可视化为散点图\n  tfvis.render.scatterplot(\n    {name:'二分类逻辑回归 训练数据'},\n    {\n      values:[\n        data.filter(p=>p.label === 1),\n        data.filter(p=>p.label === 0),\n      ]\n    }\n  )\n```\n\n- 可视化效果：\n\n![image](/images/ai/32.png)\n\n\n## 定义模型结构:带有激活函数的单个神经元\n- 初始化一个sequential神经网络模型\n\n\n```\n//添加一个sequential神经网络模型\n  const model = tf.sequential();\n```\n\n\n- 为模型添加层，设计层的神经元个数、inputShape、激活函数(`model.add`)\n\n\n```\n//为模型添加一个 dense全链接层（点乘 偏置 激活函数 适合用于二分类回归）\n  model.add(tf.layers.dense({\n    units:1,  //神经元个数\n    inputShape:[2], //输入的tensor的shape：长度为2的一维数组\n    activation:'sigmoid', //sigmoid这种激活函数的曲线y值范围始终在[0,1]\n  }));\n```\n\n\n## 对数损失函数 Log Loss\n- 利用`wiki.fast.ai`人工智能教学网站，理解[对数损失函数](http://wiki.fast.ai/index.php/Log_Loss)\n- 对数损失函数:用于测量预测值在[0,1]的分类模型的性能\n- 如下图为：标签为1的预测值的对数损失函数曲线，预测越接近真实值1，损失越小，越接近0 ，损失越大：\n\n![image](/images/ai/33.png)\n\n## 用TFJS API设置损失函数为：LogLoss(`model.compile`)\n\n\n```\n//设置损失函数为：LogLoss 对数损失函数\n  model.compile({loss:tf.losses.logLoss});\n```\n\n## 设置超参数，训练模型(`model.fit`)\n\n\n```\n//设置超参数 训练模型\n  await model.fit(inputs, labels,{\n    batchSize:40,\n    epochs:50,\n    callbacks:tfvis.show.fitCallbacks(\n      {name:'训练过程'},\n      ['loss']\n    )\n  })\n```\n\n- 训练过程截图：\n\n![image](/images/ai/34.png)\n\n## 预测\n- 编写前端界面输入待预测数据\n- 使用训练好的模型进行预测(`model.predict`)\n\n\n```html\n<form action=\"\" onsubmit=\"predict(this);return false;\">\n  x: <input type=\"text\" name=\"x\">\n  y: <input type=\"text\" name=\"y\">\n  <button type=\"submit\">预测</button>\n</form>\n```\n\n\n```js\nwindow.predict = (form)=>{\n    const pred = model.predict(tf.tensor([[form.x.value * 1,form.y.value * 1]]));\n    alert(`预测结果：${pred.dataSync()[0]}`);\n  }\n```\n\n- 输入2，2    预测结果：\n\n![image](/images/ai/35.png)\n\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n\n","slug":"fed_ml_06_logistic_regression","published":1,"updated":"2021-01-22T10:01:09.833Z","_id":"ckir88igd002gc8y6lpklidt9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"逻辑回归简介\"><a href=\"#逻辑回归简介\" class=\"headerlink\" title=\"逻辑回归简介\"></a>逻辑回归简介</h2><ul>\n<li>解决分类问题，输出一个概率[0,1]</li>\n</ul>\n<p><img src=\"/images/ai/30.png\" alt=\"image\"></p>\n<h2 id=\"加载二分类数据集\"><a href=\"#加载二分类数据集\" class=\"headerlink\" title=\"加载二分类数据集\"></a>加载二分类数据集</h2><ul>\n<li>使用脚本生成二分类数据集</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//利用脚本生成400组二分类数据</span><br><span class=\"line\">  const data = getData(400);</span><br><span class=\"line\">  console.log(data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据结构如图：</li>\n</ul>\n<p><img src=\"/images/ai/31.png\" alt=\"image\"></p>\n<ul>\n<li>可视化二分类数据集(散点图)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可视化为散点图</span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123;name:&apos;二分类逻辑回归 训练数据&apos;&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      values:[</span><br><span class=\"line\">        data.filter(p=&gt;p.label === 1),</span><br><span class=\"line\">        data.filter(p=&gt;p.label === 0),</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化效果：</li>\n</ul>\n<p><img src=\"/images/ai/32.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构-带有激活函数的单个神经元\"><a href=\"#定义模型结构-带有激活函数的单个神经元\" class=\"headerlink\" title=\"定义模型结构:带有激活函数的单个神经元\"></a>定义模型结构:带有激活函数的单个神经元</h2><ul>\n<li>初始化一个sequential神经网络模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加一个sequential神经网络模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为模型添加层，设计层的神经元个数、inputShape、激活函数(<code>model.add</code>)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//为模型添加一个 dense全链接层（点乘 偏置 激活函数 适合用于二分类回归）</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units:1,  //神经元个数</span><br><span class=\"line\">    inputShape:[2], //输入的tensor的shape：长度为2的一维数组</span><br><span class=\"line\">    activation:&apos;sigmoid&apos;, //sigmoid这种激活函数的曲线y值范围始终在[0,1]</span><br><span class=\"line\">  &#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"对数损失函数-Log-Loss\"><a href=\"#对数损失函数-Log-Loss\" class=\"headerlink\" title=\"对数损失函数 Log Loss\"></a>对数损失函数 Log Loss</h2><ul>\n<li>利用<code>wiki.fast.ai</code>人工智能教学网站，理解<a href=\"http://wiki.fast.ai/index.php/Log_Loss\" target=\"_blank\" rel=\"noopener\">对数损失函数</a></li>\n<li>对数损失函数:用于测量预测值在[0,1]的分类模型的性能</li>\n<li>如下图为：标签为1的预测值的对数损失函数曲线，预测越接近真实值1，损失越小，越接近0 ，损失越大：</li>\n</ul>\n<p><img src=\"/images/ai/33.png\" alt=\"image\"></p>\n<h2 id=\"用TFJS-API设置损失函数为：LogLoss-model-compile\"><a href=\"#用TFJS-API设置损失函数为：LogLoss-model-compile\" class=\"headerlink\" title=\"用TFJS API设置损失函数为：LogLoss(model.compile)\"></a>用TFJS API设置损失函数为：LogLoss(<code>model.compile</code>)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置损失函数为：LogLoss 对数损失函数</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.logLoss&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置超参数，训练模型-model-fit\"><a href=\"#设置超参数，训练模型-model-fit\" class=\"headerlink\" title=\"设置超参数，训练模型(model.fit)\"></a>设置超参数，训练模型(<code>model.fit</code>)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置超参数 训练模型</span><br><span class=\"line\">  await model.fit(inputs, labels,&#123;</span><br><span class=\"line\">    batchSize:40,</span><br><span class=\"line\">    epochs:50,</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;训练过程&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;]</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程截图：</li>\n</ul>\n<p><img src=\"/images/ai/34.png\" alt=\"image\"></p>\n<h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><ul>\n<li>编写前端界面输入待预测数据</li>\n<li>使用训练好的模型进行预测(<code>model.predict</code>)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">onsubmit</span>=<span class=\"string\">\"predict(this);return false;\"</span>&gt;</span></span><br><span class=\"line\">  x: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span>&gt;</span></span><br><span class=\"line\">  y: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"y\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>预测<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"function\">(<span class=\"params\">form</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = model.predict(tf.tensor([[form.x.value * <span class=\"number\">1</span>,form.y.value * <span class=\"number\">1</span>]]));</span><br><span class=\"line\">    alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;pred.dataSync()[<span class=\"number\">0</span>]&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入2，2    预测结果：</li>\n</ul>\n<p><img src=\"/images/ai/35.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"逻辑回归简介\"><a href=\"#逻辑回归简介\" class=\"headerlink\" title=\"逻辑回归简介\"></a>逻辑回归简介</h2><ul>\n<li>解决分类问题，输出一个概率[0,1]</li>\n</ul>\n<p><img src=\"/images/ai/30.png\" alt=\"image\"></p>\n<h2 id=\"加载二分类数据集\"><a href=\"#加载二分类数据集\" class=\"headerlink\" title=\"加载二分类数据集\"></a>加载二分类数据集</h2><ul>\n<li>使用脚本生成二分类数据集</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//利用脚本生成400组二分类数据</span><br><span class=\"line\">  const data = getData(400);</span><br><span class=\"line\">  console.log(data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数据结构如图：</li>\n</ul>\n<p><img src=\"/images/ai/31.png\" alt=\"image\"></p>\n<ul>\n<li>可视化二分类数据集(散点图)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可视化为散点图</span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123;name:&apos;二分类逻辑回归 训练数据&apos;&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      values:[</span><br><span class=\"line\">        data.filter(p=&gt;p.label === 1),</span><br><span class=\"line\">        data.filter(p=&gt;p.label === 0),</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化效果：</li>\n</ul>\n<p><img src=\"/images/ai/32.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构-带有激活函数的单个神经元\"><a href=\"#定义模型结构-带有激活函数的单个神经元\" class=\"headerlink\" title=\"定义模型结构:带有激活函数的单个神经元\"></a>定义模型结构:带有激活函数的单个神经元</h2><ul>\n<li>初始化一个sequential神经网络模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加一个sequential神经网络模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为模型添加层，设计层的神经元个数、inputShape、激活函数(<code>model.add</code>)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//为模型添加一个 dense全链接层（点乘 偏置 激活函数 适合用于二分类回归）</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units:1,  //神经元个数</span><br><span class=\"line\">    inputShape:[2], //输入的tensor的shape：长度为2的一维数组</span><br><span class=\"line\">    activation:&apos;sigmoid&apos;, //sigmoid这种激活函数的曲线y值范围始终在[0,1]</span><br><span class=\"line\">  &#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"对数损失函数-Log-Loss\"><a href=\"#对数损失函数-Log-Loss\" class=\"headerlink\" title=\"对数损失函数 Log Loss\"></a>对数损失函数 Log Loss</h2><ul>\n<li>利用<code>wiki.fast.ai</code>人工智能教学网站，理解<a href=\"http://wiki.fast.ai/index.php/Log_Loss\" target=\"_blank\" rel=\"noopener\">对数损失函数</a></li>\n<li>对数损失函数:用于测量预测值在[0,1]的分类模型的性能</li>\n<li>如下图为：标签为1的预测值的对数损失函数曲线，预测越接近真实值1，损失越小，越接近0 ，损失越大：</li>\n</ul>\n<p><img src=\"/images/ai/33.png\" alt=\"image\"></p>\n<h2 id=\"用TFJS-API设置损失函数为：LogLoss-model-compile\"><a href=\"#用TFJS-API设置损失函数为：LogLoss-model-compile\" class=\"headerlink\" title=\"用TFJS API设置损失函数为：LogLoss(model.compile)\"></a>用TFJS API设置损失函数为：LogLoss(<code>model.compile</code>)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置损失函数为：LogLoss 对数损失函数</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.logLoss&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置超参数，训练模型-model-fit\"><a href=\"#设置超参数，训练模型-model-fit\" class=\"headerlink\" title=\"设置超参数，训练模型(model.fit)\"></a>设置超参数，训练模型(<code>model.fit</code>)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置超参数 训练模型</span><br><span class=\"line\">  await model.fit(inputs, labels,&#123;</span><br><span class=\"line\">    batchSize:40,</span><br><span class=\"line\">    epochs:50,</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;训练过程&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;]</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程截图：</li>\n</ul>\n<p><img src=\"/images/ai/34.png\" alt=\"image\"></p>\n<h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><ul>\n<li>编写前端界面输入待预测数据</li>\n<li>使用训练好的模型进行预测(<code>model.predict</code>)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">onsubmit</span>=<span class=\"string\">\"predict(this);return false;\"</span>&gt;</span></span><br><span class=\"line\">  x: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x\"</span>&gt;</span></span><br><span class=\"line\">  y: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"y\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>预测<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"function\">(<span class=\"params\">form</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = model.predict(tf.tensor([[form.x.value * <span class=\"number\">1</span>,form.y.value * <span class=\"number\">1</span>]]));</span><br><span class=\"line\">    alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;pred.dataSync()[<span class=\"number\">0</span>]&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入2，2    预测结果：</li>\n</ul>\n<p><img src=\"/images/ai/35.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML05】归一化","date":"2020-01-04T16:00:00.000Z","description":"Javascript玩转机器学习05","toc":1,"top":0,"_content":"## 归一化:\n- 将大数量级`特征`转化到较小的数量级下，通常是[0,1]或[-1,1]\n\n## 为什么要归一化：\n- 绝大多数TensorFlow.js的模型都不是给特别大的数设计的\n- 将不同数量级的`特征`转换到统一数量级，避免某个特征影响过大\n\n## 归一化任务实例-身高体重预测：\n- 准备身高体重数据，可视化\n\n\n```\n//模拟标签和特征\n  const heights=[150,160,170,180];\n  const weights=[40,50,60,70];\n\n  //可视化数据\n  tfvis.render.scatterplot(\n    {name:'身高体重预测'},\n    {values:heights.map((x,i)=>({x,y:weights[i]}))},\n    {\n      xAxisDomain:[140,190],\n      yAxisDomain:[30,80],\n    }\n  )\n```\n\n\n- 用TFJS的API`归一化`数据\n\n\n```\n//将数据转换为tensor 并归一化\n  const inputs = tf.tensor(heights).sub(150).div(30);\n  const labels = tf.tensor(weights).sub(40).div(30);\n  inputs.print();\n  labels.print();\n```\n\n- 归一化后数据：\n\n![image](/images/ai/28.png)\n\n\n- 训练模型并预测\n\n\n```\n//创造一个连续模型\n  const model = tf.sequential();\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数\n\n  await model.fit(inputs, labels, {\n    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）\n    epochs: 100, //迭代实验次数（超参数，需要不断调整试验）\n    callbacks: tfvis.show.fitCallbacks({ name: \"训练过程\" }, [\"loss\"])\n  });\n\n  //将待预测数据190转为Tensor,用训练好的模型进行预测\n  const output = model.predict(tf.tensor([190]).sub(150).div(30)); \n  output.print();\n```\n\n\n- 将结果反归一化为正常数据\n\n\n```\n//将输出的Tensor反归一化并转为普通数据并显示\n  alert(`如果身高是190cm，预测体重为${output.mul(30).add(40).dataSync()}kg`); \n```\n\n- 预测结果：\n\n![image](/images/ai/29.png)\n\n- 上述例子中，归一化的关键步骤就是：\n```\n减去 min（最小值）\n除以 diff（最大值最小值的差）\n```\n\n- 反归一化的关键步骤就是归一化的反操作：\n```\n乘以 diff\n加上 min\n```\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n","source":"_posts/fed_ml_05_normalize.md","raw":"---\ntitle: 【ML05】归一化\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-01-05\ndescription: Javascript玩转机器学习05\ntoc: 1\ntop: 0\n---\n## 归一化:\n- 将大数量级`特征`转化到较小的数量级下，通常是[0,1]或[-1,1]\n\n## 为什么要归一化：\n- 绝大多数TensorFlow.js的模型都不是给特别大的数设计的\n- 将不同数量级的`特征`转换到统一数量级，避免某个特征影响过大\n\n## 归一化任务实例-身高体重预测：\n- 准备身高体重数据，可视化\n\n\n```\n//模拟标签和特征\n  const heights=[150,160,170,180];\n  const weights=[40,50,60,70];\n\n  //可视化数据\n  tfvis.render.scatterplot(\n    {name:'身高体重预测'},\n    {values:heights.map((x,i)=>({x,y:weights[i]}))},\n    {\n      xAxisDomain:[140,190],\n      yAxisDomain:[30,80],\n    }\n  )\n```\n\n\n- 用TFJS的API`归一化`数据\n\n\n```\n//将数据转换为tensor 并归一化\n  const inputs = tf.tensor(heights).sub(150).div(30);\n  const labels = tf.tensor(weights).sub(40).div(30);\n  inputs.print();\n  labels.print();\n```\n\n- 归一化后数据：\n\n![image](/images/ai/28.png)\n\n\n- 训练模型并预测\n\n\n```\n//创造一个连续模型\n  const model = tf.sequential();\n  model.add(tf.layers.dense({units:1,inputShape:[1]})); //添加一个全连接层（点乘权重+偏置）\n  model.compile({loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)});  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数\n\n  await model.fit(inputs, labels, {\n    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）\n    epochs: 100, //迭代实验次数（超参数，需要不断调整试验）\n    callbacks: tfvis.show.fitCallbacks({ name: \"训练过程\" }, [\"loss\"])\n  });\n\n  //将待预测数据190转为Tensor,用训练好的模型进行预测\n  const output = model.predict(tf.tensor([190]).sub(150).div(30)); \n  output.print();\n```\n\n\n- 将结果反归一化为正常数据\n\n\n```\n//将输出的Tensor反归一化并转为普通数据并显示\n  alert(`如果身高是190cm，预测体重为${output.mul(30).add(40).dataSync()}kg`); \n```\n\n- 预测结果：\n\n![image](/images/ai/29.png)\n\n- 上述例子中，归一化的关键步骤就是：\n```\n减去 min（最小值）\n除以 diff（最大值最小值的差）\n```\n\n- 反归一化的关键步骤就是归一化的反操作：\n```\n乘以 diff\n加上 min\n```\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n","slug":"fed_ml_05_normalize","published":1,"updated":"2021-01-22T10:01:03.640Z","_id":"ckir88igf002jc8y642ev17s6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"归一化\"><a href=\"#归一化\" class=\"headerlink\" title=\"归一化:\"></a>归一化:</h2><ul>\n<li>将大数量级<code>特征</code>转化到较小的数量级下，通常是[0,1]或[-1,1]</li>\n</ul>\n<h2 id=\"为什么要归一化：\"><a href=\"#为什么要归一化：\" class=\"headerlink\" title=\"为什么要归一化：\"></a>为什么要归一化：</h2><ul>\n<li>绝大多数TensorFlow.js的模型都不是给特别大的数设计的</li>\n<li>将不同数量级的<code>特征</code>转换到统一数量级，避免某个特征影响过大</li>\n</ul>\n<h2 id=\"归一化任务实例-身高体重预测：\"><a href=\"#归一化任务实例-身高体重预测：\" class=\"headerlink\" title=\"归一化任务实例-身高体重预测：\"></a>归一化任务实例-身高体重预测：</h2><ul>\n<li>准备身高体重数据，可视化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//模拟标签和特征</span><br><span class=\"line\">  const heights=[150,160,170,180];</span><br><span class=\"line\">  const weights=[40,50,60,70];</span><br><span class=\"line\"></span><br><span class=\"line\">  //可视化数据</span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123;name:&apos;身高体重预测&apos;&#125;,</span><br><span class=\"line\">    &#123;values:heights.map((x,i)=&gt;(&#123;x,y:weights[i]&#125;))&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      xAxisDomain:[140,190],</span><br><span class=\"line\">      yAxisDomain:[30,80],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用TFJS的API<code>归一化</code>数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将数据转换为tensor 并归一化</span><br><span class=\"line\">  const inputs = tf.tensor(heights).sub(150).div(30);</span><br><span class=\"line\">  const labels = tf.tensor(weights).sub(40).div(30);</span><br><span class=\"line\">  inputs.print();</span><br><span class=\"line\">  labels.print();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>归一化后数据：</li>\n</ul>\n<p><img src=\"/images/ai/28.png\" alt=\"image\"></p>\n<ul>\n<li>训练模型并预测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创造一个连续模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数</span><br><span class=\"line\"></span><br><span class=\"line\">  await model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）</span><br><span class=\"line\">    epochs: 100, //迭代实验次数（超参数，需要不断调整试验）</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(&#123; name: &quot;训练过程&quot; &#125;, [&quot;loss&quot;])</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //将待预测数据190转为Tensor,用训练好的模型进行预测</span><br><span class=\"line\">  const output = model.predict(tf.tensor([190]).sub(150).div(30)); </span><br><span class=\"line\">  output.print();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将结果反归一化为正常数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将输出的Tensor反归一化并转为普通数据并显示</span><br><span class=\"line\">  alert(`如果身高是190cm，预测体重为$&#123;output.mul(30).add(40).dataSync()&#125;kg`);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>预测结果：</li>\n</ul>\n<p><img src=\"/images/ai/29.png\" alt=\"image\"></p>\n<ul>\n<li><p>上述例子中，归一化的关键步骤就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">减去 min（最小值）</span><br><span class=\"line\">除以 diff（最大值最小值的差）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>反归一化的关键步骤就是归一化的反操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">乘以 diff</span><br><span class=\"line\">加上 min</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"归一化\"><a href=\"#归一化\" class=\"headerlink\" title=\"归一化:\"></a>归一化:</h2><ul>\n<li>将大数量级<code>特征</code>转化到较小的数量级下，通常是[0,1]或[-1,1]</li>\n</ul>\n<h2 id=\"为什么要归一化：\"><a href=\"#为什么要归一化：\" class=\"headerlink\" title=\"为什么要归一化：\"></a>为什么要归一化：</h2><ul>\n<li>绝大多数TensorFlow.js的模型都不是给特别大的数设计的</li>\n<li>将不同数量级的<code>特征</code>转换到统一数量级，避免某个特征影响过大</li>\n</ul>\n<h2 id=\"归一化任务实例-身高体重预测：\"><a href=\"#归一化任务实例-身高体重预测：\" class=\"headerlink\" title=\"归一化任务实例-身高体重预测：\"></a>归一化任务实例-身高体重预测：</h2><ul>\n<li>准备身高体重数据，可视化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//模拟标签和特征</span><br><span class=\"line\">  const heights=[150,160,170,180];</span><br><span class=\"line\">  const weights=[40,50,60,70];</span><br><span class=\"line\"></span><br><span class=\"line\">  //可视化数据</span><br><span class=\"line\">  tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123;name:&apos;身高体重预测&apos;&#125;,</span><br><span class=\"line\">    &#123;values:heights.map((x,i)=&gt;(&#123;x,y:weights[i]&#125;))&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      xAxisDomain:[140,190],</span><br><span class=\"line\">      yAxisDomain:[30,80],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用TFJS的API<code>归一化</code>数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将数据转换为tensor 并归一化</span><br><span class=\"line\">  const inputs = tf.tensor(heights).sub(150).div(30);</span><br><span class=\"line\">  const labels = tf.tensor(weights).sub(40).div(30);</span><br><span class=\"line\">  inputs.print();</span><br><span class=\"line\">  labels.print();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>归一化后数据：</li>\n</ul>\n<p><img src=\"/images/ai/28.png\" alt=\"image\"></p>\n<ul>\n<li>训练模型并预测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创造一个连续模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;units:1,inputShape:[1]&#125;)); //添加一个全连接层（点乘权重+偏置）</span><br><span class=\"line\">  model.compile(&#123;loss:tf.losses.meanSquaredError,optimizer:tf.train.sgd(0.1)&#125;);  //设置:损失函数为均方误差MSE,优化器为随机梯度下降SGD,学习速率为0.1，学习率是一个需要调整优化的超参数</span><br><span class=\"line\"></span><br><span class=\"line\">  await model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    batchSize: 4, //批量训练的数据集大小（超参数，需要不断调整试验）</span><br><span class=\"line\">    epochs: 100, //迭代实验次数（超参数，需要不断调整试验）</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(&#123; name: &quot;训练过程&quot; &#125;, [&quot;loss&quot;])</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //将待预测数据190转为Tensor,用训练好的模型进行预测</span><br><span class=\"line\">  const output = model.predict(tf.tensor([190]).sub(150).div(30)); </span><br><span class=\"line\">  output.print();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将结果反归一化为正常数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将输出的Tensor反归一化并转为普通数据并显示</span><br><span class=\"line\">  alert(`如果身高是190cm，预测体重为$&#123;output.mul(30).add(40).dataSync()&#125;kg`);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>预测结果：</li>\n</ul>\n<p><img src=\"/images/ai/29.png\" alt=\"image\"></p>\n<ul>\n<li><p>上述例子中，归一化的关键步骤就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">减去 min（最小值）</span><br><span class=\"line\">除以 diff（最大值最小值的差）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>反归一化的关键步骤就是归一化的反操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">乘以 diff</span><br><span class=\"line\">加上 min</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML08】多分类问题训练：IRIS鸢尾花分类问题","date":"2020-01-08T16:00:00.000Z","description":"Javascript玩转机器学习08","toc":1,"top":0,"_content":"\n## 多分类问题\n- 手写数字分类：10种分类\n- 图片分类：成千上万种分类\n\n\n- 多种特征：需要多层神经网络\n- 多种分类输出：需要在输出层加softMax函数\n\n## 鸢尾花（iris）分类问题\n- 著名的数据集，诞生了很久，被无数科学家用来验证自己的算法\n- 三种分类(输出)：山鸢尾，变色鸢尾，Virginica鸢尾\n- 四种特征(输入)：花瓣长、宽、花萼长、宽\n\n## 加载IRIS数据集（训练集与验证集）\n- 用脚本生成IRIS数据集：训练集+验证集\n\n```\n//生成：训练集特征，训练集标签，验证集特征，验证集标签（数据类型为tensor）\n  const [xTrain,yTrain,xTest,yTest] = getIrisData(0.15);\n  xTrain.print();\n  yTrain.print();\n  xTest.print();\n  yTest.print();\n  console.log(IRIS_CLASSES);\n```\n\n- 打印结果：\n\n![image](/images/ai/42.png)\n\n\n## 定义模型结构：带有softMax激活函数的多层神经网络\n- 初始化一个神经网络模型\n\n```\n//初始化模型\n  const model = tf.sequential();\n```\n\n- 为模型添加两个层\n- 设计层的神经元个数、inputShape、激活函数\n\n```\n//添加隐藏层：全链接层\n  model.add(tf.layers.dense({\n    units:10, //10个神经元，超参数\n    inputShape:[xTrain.shape[1]],\n    activation:'sigmoid',\n  }));\n//添加输出层：全链接层\n  model.add(tf.layers.dense({\n    units:3,  //必须是输出类别的个数\n    // inputShape:[yTrain.shape], //除了第一层以外 都不需要设计inputShape，会根据上一层的输出自动设计\n    activation:'softmax', //softmax 激活函数 适用于多种分类输出层\n  }));\n```\n\n\n## 交叉熵损失函数\n- 交叉熵损失函数 **Cross-Entropy**：是LogLoss对数损失函数的多分类版本，都用于度量分类神经网络模型的性能。\n- 当分类数为2时，交叉熵损失=对数损失。\n\n![image](/images/ai/43.png)\n\n\n## 定义损失函数、优化器、准确度度量\n\n```\n  //设置损失函数，增加训练过程中的“准确度”度量\n  model.compile({\n    loss:'categoricalCrossentropy',\n    optimizer: tf.train.adam(0.1),\n    metrics: ['accuracy']\n  });\n```\n\n## 训练模型并可视化\n\n```\n//训练并可视化\n  await model.fit(xTrain,yTrain,{\n    epochs:100,\n    validationData:[xTest,yTest],\n    callbacks:tfvis.show.fitCallbacks(\n      {name:''},\n      ['loss','val_loss','acc','val_acc'],\n      {callbacks:['onEpochEnd']},\n    ),\n  })\n```\n\n- 训练过程：\n\n![image](/images/ai/44.png)\n\n\n## 模型多分类预测\n\n```\nwindow.predict = (form)=>{\n    const input = tf.tensor([[\n      form.a.value * 1,\n      form.b.value * 1,\n      form.c.value * 1,\n      form.d.value * 1,\n    ]]);\n    \n    debugger;\n    const pred = model.predict(input);\n    pred.print();\n    alert(`预测结果${IRIS_CLASSES[pred.argMax(1).dataSync(0)]}`);\n  }\n```\n\n![image](/images/ai/45.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_08_iris.md","raw":"---\ntitle: 【ML08】多分类问题训练：IRIS鸢尾花分类问题\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-01-09\ndescription: Javascript玩转机器学习08\ntoc: 1\ntop: 0\n---\n\n## 多分类问题\n- 手写数字分类：10种分类\n- 图片分类：成千上万种分类\n\n\n- 多种特征：需要多层神经网络\n- 多种分类输出：需要在输出层加softMax函数\n\n## 鸢尾花（iris）分类问题\n- 著名的数据集，诞生了很久，被无数科学家用来验证自己的算法\n- 三种分类(输出)：山鸢尾，变色鸢尾，Virginica鸢尾\n- 四种特征(输入)：花瓣长、宽、花萼长、宽\n\n## 加载IRIS数据集（训练集与验证集）\n- 用脚本生成IRIS数据集：训练集+验证集\n\n```\n//生成：训练集特征，训练集标签，验证集特征，验证集标签（数据类型为tensor）\n  const [xTrain,yTrain,xTest,yTest] = getIrisData(0.15);\n  xTrain.print();\n  yTrain.print();\n  xTest.print();\n  yTest.print();\n  console.log(IRIS_CLASSES);\n```\n\n- 打印结果：\n\n![image](/images/ai/42.png)\n\n\n## 定义模型结构：带有softMax激活函数的多层神经网络\n- 初始化一个神经网络模型\n\n```\n//初始化模型\n  const model = tf.sequential();\n```\n\n- 为模型添加两个层\n- 设计层的神经元个数、inputShape、激活函数\n\n```\n//添加隐藏层：全链接层\n  model.add(tf.layers.dense({\n    units:10, //10个神经元，超参数\n    inputShape:[xTrain.shape[1]],\n    activation:'sigmoid',\n  }));\n//添加输出层：全链接层\n  model.add(tf.layers.dense({\n    units:3,  //必须是输出类别的个数\n    // inputShape:[yTrain.shape], //除了第一层以外 都不需要设计inputShape，会根据上一层的输出自动设计\n    activation:'softmax', //softmax 激活函数 适用于多种分类输出层\n  }));\n```\n\n\n## 交叉熵损失函数\n- 交叉熵损失函数 **Cross-Entropy**：是LogLoss对数损失函数的多分类版本，都用于度量分类神经网络模型的性能。\n- 当分类数为2时，交叉熵损失=对数损失。\n\n![image](/images/ai/43.png)\n\n\n## 定义损失函数、优化器、准确度度量\n\n```\n  //设置损失函数，增加训练过程中的“准确度”度量\n  model.compile({\n    loss:'categoricalCrossentropy',\n    optimizer: tf.train.adam(0.1),\n    metrics: ['accuracy']\n  });\n```\n\n## 训练模型并可视化\n\n```\n//训练并可视化\n  await model.fit(xTrain,yTrain,{\n    epochs:100,\n    validationData:[xTest,yTest],\n    callbacks:tfvis.show.fitCallbacks(\n      {name:''},\n      ['loss','val_loss','acc','val_acc'],\n      {callbacks:['onEpochEnd']},\n    ),\n  })\n```\n\n- 训练过程：\n\n![image](/images/ai/44.png)\n\n\n## 模型多分类预测\n\n```\nwindow.predict = (form)=>{\n    const input = tf.tensor([[\n      form.a.value * 1,\n      form.b.value * 1,\n      form.c.value * 1,\n      form.d.value * 1,\n    ]]);\n    \n    debugger;\n    const pred = model.predict(input);\n    pred.print();\n    alert(`预测结果${IRIS_CLASSES[pred.argMax(1).dataSync(0)]}`);\n  }\n```\n\n![image](/images/ai/45.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_08_iris","published":1,"updated":"2021-01-22T10:01:23.179Z","_id":"ckir88igg002kc8y6o8kd1rv3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"多分类问题\"><a href=\"#多分类问题\" class=\"headerlink\" title=\"多分类问题\"></a>多分类问题</h2><ul>\n<li>手写数字分类：10种分类</li>\n<li>图片分类：成千上万种分类</li>\n</ul>\n<ul>\n<li>多种特征：需要多层神经网络</li>\n<li>多种分类输出：需要在输出层加softMax函数</li>\n</ul>\n<h2 id=\"鸢尾花（iris）分类问题\"><a href=\"#鸢尾花（iris）分类问题\" class=\"headerlink\" title=\"鸢尾花（iris）分类问题\"></a>鸢尾花（iris）分类问题</h2><ul>\n<li>著名的数据集，诞生了很久，被无数科学家用来验证自己的算法</li>\n<li>三种分类(输出)：山鸢尾，变色鸢尾，Virginica鸢尾</li>\n<li>四种特征(输入)：花瓣长、宽、花萼长、宽</li>\n</ul>\n<h2 id=\"加载IRIS数据集（训练集与验证集）\"><a href=\"#加载IRIS数据集（训练集与验证集）\" class=\"headerlink\" title=\"加载IRIS数据集（训练集与验证集）\"></a>加载IRIS数据集（训练集与验证集）</h2><ul>\n<li>用脚本生成IRIS数据集：训练集+验证集</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//生成：训练集特征，训练集标签，验证集特征，验证集标签（数据类型为tensor）</span><br><span class=\"line\">  const [xTrain,yTrain,xTest,yTest] = getIrisData(0.15);</span><br><span class=\"line\">  xTrain.print();</span><br><span class=\"line\">  yTrain.print();</span><br><span class=\"line\">  xTest.print();</span><br><span class=\"line\">  yTest.print();</span><br><span class=\"line\">  console.log(IRIS_CLASSES);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打印结果：</li>\n</ul>\n<p><img src=\"/images/ai/42.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构：带有softMax激活函数的多层神经网络\"><a href=\"#定义模型结构：带有softMax激活函数的多层神经网络\" class=\"headerlink\" title=\"定义模型结构：带有softMax激活函数的多层神经网络\"></a>定义模型结构：带有softMax激活函数的多层神经网络</h2><ul>\n<li>初始化一个神经网络模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为模型添加两个层</li>\n<li>设计层的神经元个数、inputShape、激活函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加隐藏层：全链接层</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units:10, //10个神经元，超参数</span><br><span class=\"line\">    inputShape:[xTrain.shape[1]],</span><br><span class=\"line\">    activation:&apos;sigmoid&apos;,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">//添加输出层：全链接层</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units:3,  //必须是输出类别的个数</span><br><span class=\"line\">    // inputShape:[yTrain.shape], //除了第一层以外 都不需要设计inputShape，会根据上一层的输出自动设计</span><br><span class=\"line\">    activation:&apos;softmax&apos;, //softmax 激活函数 适用于多种分类输出层</span><br><span class=\"line\">  &#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"交叉熵损失函数\"><a href=\"#交叉熵损失函数\" class=\"headerlink\" title=\"交叉熵损失函数\"></a>交叉熵损失函数</h2><ul>\n<li>交叉熵损失函数 <strong>Cross-Entropy</strong>：是LogLoss对数损失函数的多分类版本，都用于度量分类神经网络模型的性能。</li>\n<li>当分类数为2时，交叉熵损失=对数损失。</li>\n</ul>\n<p><img src=\"/images/ai/43.png\" alt=\"image\"></p>\n<h2 id=\"定义损失函数、优化器、准确度度量\"><a href=\"#定义损失函数、优化器、准确度度量\" class=\"headerlink\" title=\"定义损失函数、优化器、准确度度量\"></a>定义损失函数、优化器、准确度度量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置损失函数，增加训练过程中的“准确度”度量</span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">  loss:&apos;categoricalCrossentropy&apos;,</span><br><span class=\"line\">  optimizer: tf.train.adam(0.1),</span><br><span class=\"line\">  metrics: [&apos;accuracy&apos;]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并可视化\"><a href=\"#训练模型并可视化\" class=\"headerlink\" title=\"训练模型并可视化\"></a>训练模型并可视化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练并可视化</span><br><span class=\"line\">  await model.fit(xTrain,yTrain,&#123;</span><br><span class=\"line\">    epochs:100,</span><br><span class=\"line\">    validationData:[xTest,yTest],</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;,&apos;val_loss&apos;,&apos;acc&apos;,&apos;val_acc&apos;],</span><br><span class=\"line\">      &#123;callbacks:[&apos;onEpochEnd&apos;]&#125;,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程：</li>\n</ul>\n<p><img src=\"/images/ai/44.png\" alt=\"image\"></p>\n<h2 id=\"模型多分类预测\"><a href=\"#模型多分类预测\" class=\"headerlink\" title=\"模型多分类预测\"></a>模型多分类预测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.predict = (form)=&gt;&#123;</span><br><span class=\"line\">    const input = tf.tensor([[</span><br><span class=\"line\">      form.a.value * 1,</span><br><span class=\"line\">      form.b.value * 1,</span><br><span class=\"line\">      form.c.value * 1,</span><br><span class=\"line\">      form.d.value * 1,</span><br><span class=\"line\">    ]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    debugger;</span><br><span class=\"line\">    const pred = model.predict(input);</span><br><span class=\"line\">    pred.print();</span><br><span class=\"line\">    alert(`预测结果$&#123;IRIS_CLASSES[pred.argMax(1).dataSync(0)]&#125;`);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/45.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"多分类问题\"><a href=\"#多分类问题\" class=\"headerlink\" title=\"多分类问题\"></a>多分类问题</h2><ul>\n<li>手写数字分类：10种分类</li>\n<li>图片分类：成千上万种分类</li>\n</ul>\n<ul>\n<li>多种特征：需要多层神经网络</li>\n<li>多种分类输出：需要在输出层加softMax函数</li>\n</ul>\n<h2 id=\"鸢尾花（iris）分类问题\"><a href=\"#鸢尾花（iris）分类问题\" class=\"headerlink\" title=\"鸢尾花（iris）分类问题\"></a>鸢尾花（iris）分类问题</h2><ul>\n<li>著名的数据集，诞生了很久，被无数科学家用来验证自己的算法</li>\n<li>三种分类(输出)：山鸢尾，变色鸢尾，Virginica鸢尾</li>\n<li>四种特征(输入)：花瓣长、宽、花萼长、宽</li>\n</ul>\n<h2 id=\"加载IRIS数据集（训练集与验证集）\"><a href=\"#加载IRIS数据集（训练集与验证集）\" class=\"headerlink\" title=\"加载IRIS数据集（训练集与验证集）\"></a>加载IRIS数据集（训练集与验证集）</h2><ul>\n<li>用脚本生成IRIS数据集：训练集+验证集</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//生成：训练集特征，训练集标签，验证集特征，验证集标签（数据类型为tensor）</span><br><span class=\"line\">  const [xTrain,yTrain,xTest,yTest] = getIrisData(0.15);</span><br><span class=\"line\">  xTrain.print();</span><br><span class=\"line\">  yTrain.print();</span><br><span class=\"line\">  xTest.print();</span><br><span class=\"line\">  yTest.print();</span><br><span class=\"line\">  console.log(IRIS_CLASSES);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打印结果：</li>\n</ul>\n<p><img src=\"/images/ai/42.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构：带有softMax激活函数的多层神经网络\"><a href=\"#定义模型结构：带有softMax激活函数的多层神经网络\" class=\"headerlink\" title=\"定义模型结构：带有softMax激活函数的多层神经网络\"></a>定义模型结构：带有softMax激活函数的多层神经网络</h2><ul>\n<li>初始化一个神经网络模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化模型</span><br><span class=\"line\">  const model = tf.sequential();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为模型添加两个层</li>\n<li>设计层的神经元个数、inputShape、激活函数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加隐藏层：全链接层</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units:10, //10个神经元，超参数</span><br><span class=\"line\">    inputShape:[xTrain.shape[1]],</span><br><span class=\"line\">    activation:&apos;sigmoid&apos;,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">//添加输出层：全链接层</span><br><span class=\"line\">  model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units:3,  //必须是输出类别的个数</span><br><span class=\"line\">    // inputShape:[yTrain.shape], //除了第一层以外 都不需要设计inputShape，会根据上一层的输出自动设计</span><br><span class=\"line\">    activation:&apos;softmax&apos;, //softmax 激活函数 适用于多种分类输出层</span><br><span class=\"line\">  &#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"交叉熵损失函数\"><a href=\"#交叉熵损失函数\" class=\"headerlink\" title=\"交叉熵损失函数\"></a>交叉熵损失函数</h2><ul>\n<li>交叉熵损失函数 <strong>Cross-Entropy</strong>：是LogLoss对数损失函数的多分类版本，都用于度量分类神经网络模型的性能。</li>\n<li>当分类数为2时，交叉熵损失=对数损失。</li>\n</ul>\n<p><img src=\"/images/ai/43.png\" alt=\"image\"></p>\n<h2 id=\"定义损失函数、优化器、准确度度量\"><a href=\"#定义损失函数、优化器、准确度度量\" class=\"headerlink\" title=\"定义损失函数、优化器、准确度度量\"></a>定义损失函数、优化器、准确度度量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置损失函数，增加训练过程中的“准确度”度量</span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">  loss:&apos;categoricalCrossentropy&apos;,</span><br><span class=\"line\">  optimizer: tf.train.adam(0.1),</span><br><span class=\"line\">  metrics: [&apos;accuracy&apos;]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并可视化\"><a href=\"#训练模型并可视化\" class=\"headerlink\" title=\"训练模型并可视化\"></a>训练模型并可视化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练并可视化</span><br><span class=\"line\">  await model.fit(xTrain,yTrain,&#123;</span><br><span class=\"line\">    epochs:100,</span><br><span class=\"line\">    validationData:[xTest,yTest],</span><br><span class=\"line\">    callbacks:tfvis.show.fitCallbacks(</span><br><span class=\"line\">      &#123;name:&apos;&apos;&#125;,</span><br><span class=\"line\">      [&apos;loss&apos;,&apos;val_loss&apos;,&apos;acc&apos;,&apos;val_acc&apos;],</span><br><span class=\"line\">      &#123;callbacks:[&apos;onEpochEnd&apos;]&#125;,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程：</li>\n</ul>\n<p><img src=\"/images/ai/44.png\" alt=\"image\"></p>\n<h2 id=\"模型多分类预测\"><a href=\"#模型多分类预测\" class=\"headerlink\" title=\"模型多分类预测\"></a>模型多分类预测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.predict = (form)=&gt;&#123;</span><br><span class=\"line\">    const input = tf.tensor([[</span><br><span class=\"line\">      form.a.value * 1,</span><br><span class=\"line\">      form.b.value * 1,</span><br><span class=\"line\">      form.c.value * 1,</span><br><span class=\"line\">      form.d.value * 1,</span><br><span class=\"line\">    ]]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    debugger;</span><br><span class=\"line\">    const pred = model.predict(input);</span><br><span class=\"line\">    pred.print();</span><br><span class=\"line\">    alert(`预测结果$&#123;IRIS_CLASSES[pred.argMax(1).dataSync(0)]&#125;`);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/45.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML07】XOR回归训练：多层神经网络","date":"2020-01-06T16:00:00.000Z","description":"Javascript玩转机器学习07","toc":1,"top":0,"_content":"\n## XOR 异或逻辑回归\n- 不是线性问题\n- 需要多层神经网络+激活函数来解决\n\n![image](/images/ai/36.png)\n\n\n## [Google Playground网站](http://playground.tensorflow.org/)\n- 用TFJS写的 可视化学习机器学习的网站\n\n\n\n![image](/images/ai/37.png)\n\n\n## 加载XOR数据集\n\n```\n//调脚本接口生成模拟数据\nconst data = getData(400);\nconsole.log(data);\n```\n\n- 模拟数据 数据结构：\n![image](/images/ai/38.png)\n\n\n```\n//可视化\ntfvis.render.scatterplot(\n    { name: \"XOR训练数据\" },\n    {\n        values: [\n            data.filter(p => p.label === 1),\n            data.filter(p => p.label === 0)\n        ]\n    }\n);\n```\n\n- 可视化结果\n\n![image](/images/ai/39.png)\n\n## 定义模型结构：多层神经网络\n- 初始化一个神经网络模型\n- 为模型添加两个层：隐藏层+输出层\n- 设计层的激活函数、inputShape、神经元个数\n\n\n```\n//初始化一个 sequential model\n    const mdoel = tf.sequential();\n\n    //添加一个隐藏层（全连接层）\n    mdoel.add(\n        tf.layers.dense({\n            units: 4,\n            inputShape: [2], //只有第一层需要设置inputShape\n            activition: \"relu\"\n        })\n    );\n\n    //添加一个输出层（全连接层）\n    model.add(\n        tf.layers.dense({\n            units: 1,\n            activition: \"sigmoid\" //需要输出[0,1]之间的概率所以选sigmoid\n        })\n    );\n```\n- 定义模型的损失函数和优化器\n\n\n```\n//定义模型的损失函数和优化器\nmodel.compile({\n    loss: tf.losses.logLoss,\n    optimizer: tf.train.adam(0.1)\n});\n```\n\n\n## 训练模型并预测\n- 训练数据转换为tensor\n\n```\n//训练数据转换为tensor\nconst inputs = tf.tensor(data.map(p => [p.x, p.y]));\nconst labels = tf.tensor(data.map(p => p.label));\n```\n\n\n- 训练模型并可视化训练过程\n\n```\n//训练\nawait model.fit(inputs, labels, {\n    epochs: 10,\n    callbacks: tfvis.show.fitCallbacks({ name: \"XOR训练过程\" }, [\"loss\"])\n});\n```\n\n- 训练过程\n![image](/images/ai/40.png)\n\n\n- 进行预测\n\n```\n//预测\nwindow.predict = form => {\n    const pred = model.predict(\n        tf.tensor([[form.x.value * 1, form.y.value * 1]])\n    );\n    alert(`预测结果：${pred.dataSync()[0]}`);\n};\n```\n\n- 预测结果\n\n![image](/images/ai/41.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n\n\n","source":"_posts/fed_ml_07_xor_regression.md","raw":"---\ntitle: 【ML07】XOR回归训练：多层神经网络\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-01-07\ndescription: Javascript玩转机器学习07\ntoc: 1\ntop: 0\n---\n\n## XOR 异或逻辑回归\n- 不是线性问题\n- 需要多层神经网络+激活函数来解决\n\n![image](/images/ai/36.png)\n\n\n## [Google Playground网站](http://playground.tensorflow.org/)\n- 用TFJS写的 可视化学习机器学习的网站\n\n\n\n![image](/images/ai/37.png)\n\n\n## 加载XOR数据集\n\n```\n//调脚本接口生成模拟数据\nconst data = getData(400);\nconsole.log(data);\n```\n\n- 模拟数据 数据结构：\n![image](/images/ai/38.png)\n\n\n```\n//可视化\ntfvis.render.scatterplot(\n    { name: \"XOR训练数据\" },\n    {\n        values: [\n            data.filter(p => p.label === 1),\n            data.filter(p => p.label === 0)\n        ]\n    }\n);\n```\n\n- 可视化结果\n\n![image](/images/ai/39.png)\n\n## 定义模型结构：多层神经网络\n- 初始化一个神经网络模型\n- 为模型添加两个层：隐藏层+输出层\n- 设计层的激活函数、inputShape、神经元个数\n\n\n```\n//初始化一个 sequential model\n    const mdoel = tf.sequential();\n\n    //添加一个隐藏层（全连接层）\n    mdoel.add(\n        tf.layers.dense({\n            units: 4,\n            inputShape: [2], //只有第一层需要设置inputShape\n            activition: \"relu\"\n        })\n    );\n\n    //添加一个输出层（全连接层）\n    model.add(\n        tf.layers.dense({\n            units: 1,\n            activition: \"sigmoid\" //需要输出[0,1]之间的概率所以选sigmoid\n        })\n    );\n```\n- 定义模型的损失函数和优化器\n\n\n```\n//定义模型的损失函数和优化器\nmodel.compile({\n    loss: tf.losses.logLoss,\n    optimizer: tf.train.adam(0.1)\n});\n```\n\n\n## 训练模型并预测\n- 训练数据转换为tensor\n\n```\n//训练数据转换为tensor\nconst inputs = tf.tensor(data.map(p => [p.x, p.y]));\nconst labels = tf.tensor(data.map(p => p.label));\n```\n\n\n- 训练模型并可视化训练过程\n\n```\n//训练\nawait model.fit(inputs, labels, {\n    epochs: 10,\n    callbacks: tfvis.show.fitCallbacks({ name: \"XOR训练过程\" }, [\"loss\"])\n});\n```\n\n- 训练过程\n![image](/images/ai/40.png)\n\n\n- 进行预测\n\n```\n//预测\nwindow.predict = form => {\n    const pred = model.predict(\n        tf.tensor([[form.x.value * 1, form.y.value * 1]])\n    );\n    alert(`预测结果：${pred.dataSync()[0]}`);\n};\n```\n\n- 预测结果\n\n![image](/images/ai/41.png)\n\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)\n\n\n","slug":"fed_ml_07_xor_regression","published":1,"updated":"2021-01-22T10:01:16.011Z","_id":"ckir88igi002nc8y6z419fz2f","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"XOR-异或逻辑回归\"><a href=\"#XOR-异或逻辑回归\" class=\"headerlink\" title=\"XOR 异或逻辑回归\"></a>XOR 异或逻辑回归</h2><ul>\n<li>不是线性问题</li>\n<li>需要多层神经网络+激活函数来解决</li>\n</ul>\n<p><img src=\"/images/ai/36.png\" alt=\"image\"></p>\n<h2 id=\"Google-Playground网站\"><a href=\"#Google-Playground网站\" class=\"headerlink\" title=\"Google Playground网站\"></a><a href=\"http://playground.tensorflow.org/\" target=\"_blank\" rel=\"noopener\">Google Playground网站</a></h2><ul>\n<li>用TFJS写的 可视化学习机器学习的网站</li>\n</ul>\n<p><img src=\"/images/ai/37.png\" alt=\"image\"></p>\n<h2 id=\"加载XOR数据集\"><a href=\"#加载XOR数据集\" class=\"headerlink\" title=\"加载XOR数据集\"></a>加载XOR数据集</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//调脚本接口生成模拟数据</span><br><span class=\"line\">const data = getData(400);</span><br><span class=\"line\">console.log(data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模拟数据 数据结构：<br><img src=\"/images/ai/38.png\" alt=\"image\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可视化</span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;XOR训练数据&quot; &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(p =&gt; p.label === 1),</span><br><span class=\"line\">            data.filter(p =&gt; p.label === 0)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化结果</li>\n</ul>\n<p><img src=\"/images/ai/39.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构：多层神经网络\"><a href=\"#定义模型结构：多层神经网络\" class=\"headerlink\" title=\"定义模型结构：多层神经网络\"></a>定义模型结构：多层神经网络</h2><ul>\n<li>初始化一个神经网络模型</li>\n<li>为模型添加两个层：隐藏层+输出层</li>\n<li>设计层的激活函数、inputShape、神经元个数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化一个 sequential model</span><br><span class=\"line\">    const mdoel = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加一个隐藏层（全连接层）</span><br><span class=\"line\">    mdoel.add(</span><br><span class=\"line\">        tf.layers.dense(&#123;</span><br><span class=\"line\">            units: 4,</span><br><span class=\"line\">            inputShape: [2], //只有第一层需要设置inputShape</span><br><span class=\"line\">            activition: &quot;relu&quot;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加一个输出层（全连接层）</span><br><span class=\"line\">    model.add(</span><br><span class=\"line\">        tf.layers.dense(&#123;</span><br><span class=\"line\">            units: 1,</span><br><span class=\"line\">            activition: &quot;sigmoid&quot; //需要输出[0,1]之间的概率所以选sigmoid</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义模型的损失函数和优化器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义模型的损失函数和优化器</span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: tf.losses.logLoss,</span><br><span class=\"line\">    optimizer: tf.train.adam(0.1)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并预测\"><a href=\"#训练模型并预测\" class=\"headerlink\" title=\"训练模型并预测\"></a>训练模型并预测</h2><ul>\n<li>训练数据转换为tensor</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练数据转换为tensor</span><br><span class=\"line\">const inputs = tf.tensor(data.map(p =&gt; [p.x, p.y]));</span><br><span class=\"line\">const labels = tf.tensor(data.map(p =&gt; p.label));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练模型并可视化训练过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练</span><br><span class=\"line\">await model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    epochs: 10,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(&#123; name: &quot;XOR训练过程&quot; &#125;, [&quot;loss&quot;])</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程<br><img src=\"/images/ai/40.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>进行预测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//预测</span><br><span class=\"line\">window.predict = form =&gt; &#123;</span><br><span class=\"line\">    const pred = model.predict(</span><br><span class=\"line\">        tf.tensor([[form.x.value * 1, form.y.value * 1]])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    alert(`预测结果：$&#123;pred.dataSync()[0]&#125;`);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>预测结果</li>\n</ul>\n<p><img src=\"/images/ai/41.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"XOR-异或逻辑回归\"><a href=\"#XOR-异或逻辑回归\" class=\"headerlink\" title=\"XOR 异或逻辑回归\"></a>XOR 异或逻辑回归</h2><ul>\n<li>不是线性问题</li>\n<li>需要多层神经网络+激活函数来解决</li>\n</ul>\n<p><img src=\"/images/ai/36.png\" alt=\"image\"></p>\n<h2 id=\"Google-Playground网站\"><a href=\"#Google-Playground网站\" class=\"headerlink\" title=\"Google Playground网站\"></a><a href=\"http://playground.tensorflow.org/\" target=\"_blank\" rel=\"noopener\">Google Playground网站</a></h2><ul>\n<li>用TFJS写的 可视化学习机器学习的网站</li>\n</ul>\n<p><img src=\"/images/ai/37.png\" alt=\"image\"></p>\n<h2 id=\"加载XOR数据集\"><a href=\"#加载XOR数据集\" class=\"headerlink\" title=\"加载XOR数据集\"></a>加载XOR数据集</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//调脚本接口生成模拟数据</span><br><span class=\"line\">const data = getData(400);</span><br><span class=\"line\">console.log(data);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模拟数据 数据结构：<br><img src=\"/images/ai/38.png\" alt=\"image\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可视化</span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; name: &quot;XOR训练数据&quot; &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(p =&gt; p.label === 1),</span><br><span class=\"line\">            data.filter(p =&gt; p.label === 0)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化结果</li>\n</ul>\n<p><img src=\"/images/ai/39.png\" alt=\"image\"></p>\n<h2 id=\"定义模型结构：多层神经网络\"><a href=\"#定义模型结构：多层神经网络\" class=\"headerlink\" title=\"定义模型结构：多层神经网络\"></a>定义模型结构：多层神经网络</h2><ul>\n<li>初始化一个神经网络模型</li>\n<li>为模型添加两个层：隐藏层+输出层</li>\n<li>设计层的激活函数、inputShape、神经元个数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化一个 sequential model</span><br><span class=\"line\">    const mdoel = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加一个隐藏层（全连接层）</span><br><span class=\"line\">    mdoel.add(</span><br><span class=\"line\">        tf.layers.dense(&#123;</span><br><span class=\"line\">            units: 4,</span><br><span class=\"line\">            inputShape: [2], //只有第一层需要设置inputShape</span><br><span class=\"line\">            activition: &quot;relu&quot;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加一个输出层（全连接层）</span><br><span class=\"line\">    model.add(</span><br><span class=\"line\">        tf.layers.dense(&#123;</span><br><span class=\"line\">            units: 1,</span><br><span class=\"line\">            activition: &quot;sigmoid&quot; //需要输出[0,1]之间的概率所以选sigmoid</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义模型的损失函数和优化器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义模型的损失函数和优化器</span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: tf.losses.logLoss,</span><br><span class=\"line\">    optimizer: tf.train.adam(0.1)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型并预测\"><a href=\"#训练模型并预测\" class=\"headerlink\" title=\"训练模型并预测\"></a>训练模型并预测</h2><ul>\n<li>训练数据转换为tensor</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练数据转换为tensor</span><br><span class=\"line\">const inputs = tf.tensor(data.map(p =&gt; [p.x, p.y]));</span><br><span class=\"line\">const labels = tf.tensor(data.map(p =&gt; p.label));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练模型并可视化训练过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//训练</span><br><span class=\"line\">await model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    epochs: 10,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(&#123; name: &quot;XOR训练过程&quot; &#125;, [&quot;loss&quot;])</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练过程<br><img src=\"/images/ai/40.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>进行预测</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//预测</span><br><span class=\"line\">window.predict = form =&gt; &#123;</span><br><span class=\"line\">    const pred = model.predict(</span><br><span class=\"line\">        tf.tensor([[form.x.value * 1, form.y.value * 1]])</span><br><span class=\"line\">    );</span><br><span class=\"line\">    alert(`预测结果：$&#123;pred.dataSync()[0]&#125;`);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>预测结果</li>\n</ul>\n<p><img src=\"/images/ai/41.png\" alt=\"image\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML09】欠拟合&过拟合","date":"2020-04-23T16:00:00.000Z","description":"Javascript玩转机器学习09","toc":1,"top":0,"_content":"\n## 欠拟合\n- 数据过于复杂，但是神经网络模型过于简单\n\n![underFitting](/images/ai/47.png)\n\n- 无论训练多久，训练损失始终降不下去\n\n![underFitting](/images/ai/46.png)\n\n## 过拟合\n- 模型过于复杂，把训练集噪声数据都拟合进去\n\n![overFitting](/images/ai/48.png)\n\n- 过拟合损失曲线，红色代表验证集，蓝色代表训练集\n\n![overFitting](/images/ai/49.png)\n\n![overFitting](/images/ai/50.png)\n\n\n## 实操模拟 欠拟合&过拟合\n- 加载带有噪音的二分类数据集（训练集与验证集）\n- 使用不同神经网络演示 过拟合&欠拟合\n- 过拟合应对法：早停法、权重衰减、丢弃法\n\n## 加载带有噪音的二分类数据集（训练集与验证集）\n#### 脚本原理\n生成正态分布(高斯分布)的样本数据\n```javascript\n  function normalRandom(mean = 0, variance = 1) {\n    let v1, v2, s;\n    do {\n      v1 = 2 * Math.random() - 1;\n      v2 = 2 * Math.random() - 1;\n      s = v1 * v1 + v2 * v2;\n    } while (s > 1);\n  \n    let result = Math.sqrt(-2 * Math.log(s) / s) * v1;\n    return mean + Math.sqrt(variance) * result;\n  }\n```\n正态分布两边低的数据看作噪音数据，中间高的数据视为正常数据\n\n通过调整方差 调整噪音量\n\n#### 用脚本生成带有噪音的二分类数据集\n```javascript\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { getData } from './data';\n\nwindow.onload = async () => {\n    const data = getData(200, 3);\n\n}\n```\n#### 可视化数据集\n```javascript\n\n    tfvis.render.scatterplot(\n        { name: '训练数据' },\n        {\n            values: [\n                data.filter(p => p.label === 1),\n                data.filter(p => p.label === 0),\n            ]\n        }\n    );\n```\n\n\n![可视化结果](/images/ai/51.png)\n\n\n## 使用不同神经网络演示 过拟合\n```javascript\nconst data = getData(200, 2);\n\ntfvis.render.scatterplot(\n    { name: '训练数据' },\n    {\n        values: [\n            data.filter(p => p.label === 1),\n            data.filter(p => p.label === 0),\n        ]\n    }\n);\n\nconst model = tf.sequential();\n\n//第一层隐藏层\nmodel.add(tf.layers.dense({\n    units: 10,\n    inputShape: [2],  //长度为2的一维数组\n    activation: \"tanh\",\n}));\n\n//输出层\nmodel.add(tf.layers.dense({\n    units: 1,\n    activation: 'sigmoid'\n}));\n\n//设置损失函数&优化器\nmodel.compile({\n    loss: tf.losses.logLoss,\n    optimizer: tf.train.adam(0.1)\n});\n\nconst inputs = tf.tensor(data.map(p => [p.x, p.y]));\nconst labels = tf.tensor(data.map(p => p.label));\n\nawait model.fit(inputs, labels, {\n    validationSplit: 0.2,\n    epochs: 200,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss', 'val_loss'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n\n```\n\n![过拟合训练结果](/images/ai/52.png)\n\n## 过拟合应对法：早停法\n在训练出现过拟合时及时手动停止训练\n\n## 过拟合应对法：权重衰减法(设置L2正则化\n将过于复杂的模型权重降低\n```javascript\nmodel.add(tf.layers.dense({\n    units: 10,\n    inputShape: [2],  //长度为2的一维数组\n    activation: \"tanh\",\n    kernelRegularizer: tf.regularizers.l2({ l2: 1 })  //设置权重衰减\n}));\n```\n\n![权重衰减法训练结果](/images/ai/54.png)\n\n## 过拟合应对法：丢弃法\n在隐藏层和输出层之间添加一个丢弃层\n```javascript\n//添加丢弃层，降低训练集复杂度\nmodel.add(tf.layers.dropout({ rate: 0.9 }));\n```\n\n\n![丢弃法训练结果](/images/ai/53.png)\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_09_under&overfitting.md","raw":"---\ntitle: 【ML09】欠拟合&过拟合\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-04-24\ndescription: Javascript玩转机器学习09\ntoc: 1\ntop: 0\n---\n\n## 欠拟合\n- 数据过于复杂，但是神经网络模型过于简单\n\n![underFitting](/images/ai/47.png)\n\n- 无论训练多久，训练损失始终降不下去\n\n![underFitting](/images/ai/46.png)\n\n## 过拟合\n- 模型过于复杂，把训练集噪声数据都拟合进去\n\n![overFitting](/images/ai/48.png)\n\n- 过拟合损失曲线，红色代表验证集，蓝色代表训练集\n\n![overFitting](/images/ai/49.png)\n\n![overFitting](/images/ai/50.png)\n\n\n## 实操模拟 欠拟合&过拟合\n- 加载带有噪音的二分类数据集（训练集与验证集）\n- 使用不同神经网络演示 过拟合&欠拟合\n- 过拟合应对法：早停法、权重衰减、丢弃法\n\n## 加载带有噪音的二分类数据集（训练集与验证集）\n#### 脚本原理\n生成正态分布(高斯分布)的样本数据\n```javascript\n  function normalRandom(mean = 0, variance = 1) {\n    let v1, v2, s;\n    do {\n      v1 = 2 * Math.random() - 1;\n      v2 = 2 * Math.random() - 1;\n      s = v1 * v1 + v2 * v2;\n    } while (s > 1);\n  \n    let result = Math.sqrt(-2 * Math.log(s) / s) * v1;\n    return mean + Math.sqrt(variance) * result;\n  }\n```\n正态分布两边低的数据看作噪音数据，中间高的数据视为正常数据\n\n通过调整方差 调整噪音量\n\n#### 用脚本生成带有噪音的二分类数据集\n```javascript\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { getData } from './data';\n\nwindow.onload = async () => {\n    const data = getData(200, 3);\n\n}\n```\n#### 可视化数据集\n```javascript\n\n    tfvis.render.scatterplot(\n        { name: '训练数据' },\n        {\n            values: [\n                data.filter(p => p.label === 1),\n                data.filter(p => p.label === 0),\n            ]\n        }\n    );\n```\n\n\n![可视化结果](/images/ai/51.png)\n\n\n## 使用不同神经网络演示 过拟合\n```javascript\nconst data = getData(200, 2);\n\ntfvis.render.scatterplot(\n    { name: '训练数据' },\n    {\n        values: [\n            data.filter(p => p.label === 1),\n            data.filter(p => p.label === 0),\n        ]\n    }\n);\n\nconst model = tf.sequential();\n\n//第一层隐藏层\nmodel.add(tf.layers.dense({\n    units: 10,\n    inputShape: [2],  //长度为2的一维数组\n    activation: \"tanh\",\n}));\n\n//输出层\nmodel.add(tf.layers.dense({\n    units: 1,\n    activation: 'sigmoid'\n}));\n\n//设置损失函数&优化器\nmodel.compile({\n    loss: tf.losses.logLoss,\n    optimizer: tf.train.adam(0.1)\n});\n\nconst inputs = tf.tensor(data.map(p => [p.x, p.y]));\nconst labels = tf.tensor(data.map(p => p.label));\n\nawait model.fit(inputs, labels, {\n    validationSplit: 0.2,\n    epochs: 200,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss', 'val_loss'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n\n```\n\n![过拟合训练结果](/images/ai/52.png)\n\n## 过拟合应对法：早停法\n在训练出现过拟合时及时手动停止训练\n\n## 过拟合应对法：权重衰减法(设置L2正则化\n将过于复杂的模型权重降低\n```javascript\nmodel.add(tf.layers.dense({\n    units: 10,\n    inputShape: [2],  //长度为2的一维数组\n    activation: \"tanh\",\n    kernelRegularizer: tf.regularizers.l2({ l2: 1 })  //设置权重衰减\n}));\n```\n\n![权重衰减法训练结果](/images/ai/54.png)\n\n## 过拟合应对法：丢弃法\n在隐藏层和输出层之间添加一个丢弃层\n```javascript\n//添加丢弃层，降低训练集复杂度\nmodel.add(tf.layers.dropout({ rate: 0.9 }));\n```\n\n\n![丢弃法训练结果](/images/ai/53.png)\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_09_under&overfitting","published":1,"updated":"2021-01-22T10:01:29.875Z","_id":"ckir88igk002oc8y6jtqy41pd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"欠拟合\"><a href=\"#欠拟合\" class=\"headerlink\" title=\"欠拟合\"></a>欠拟合</h2><ul>\n<li>数据过于复杂，但是神经网络模型过于简单</li>\n</ul>\n<p><img src=\"/images/ai/47.png\" alt=\"underFitting\"></p>\n<ul>\n<li>无论训练多久，训练损失始终降不下去</li>\n</ul>\n<p><img src=\"/images/ai/46.png\" alt=\"underFitting\"></p>\n<h2 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h2><ul>\n<li>模型过于复杂，把训练集噪声数据都拟合进去</li>\n</ul>\n<p><img src=\"/images/ai/48.png\" alt=\"overFitting\"></p>\n<ul>\n<li>过拟合损失曲线，红色代表验证集，蓝色代表训练集</li>\n</ul>\n<p><img src=\"/images/ai/49.png\" alt=\"overFitting\"></p>\n<p><img src=\"/images/ai/50.png\" alt=\"overFitting\"></p>\n<h2 id=\"实操模拟-欠拟合-amp-过拟合\"><a href=\"#实操模拟-欠拟合-amp-过拟合\" class=\"headerlink\" title=\"实操模拟 欠拟合&amp;过拟合\"></a>实操模拟 欠拟合&amp;过拟合</h2><ul>\n<li>加载带有噪音的二分类数据集（训练集与验证集）</li>\n<li>使用不同神经网络演示 过拟合&amp;欠拟合</li>\n<li>过拟合应对法：早停法、权重衰减、丢弃法</li>\n</ul>\n<h2 id=\"加载带有噪音的二分类数据集（训练集与验证集）\"><a href=\"#加载带有噪音的二分类数据集（训练集与验证集）\" class=\"headerlink\" title=\"加载带有噪音的二分类数据集（训练集与验证集）\"></a>加载带有噪音的二分类数据集（训练集与验证集）</h2><h4 id=\"脚本原理\"><a href=\"#脚本原理\" class=\"headerlink\" title=\"脚本原理\"></a>脚本原理</h4><p>生成正态分布(高斯分布)的样本数据<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalRandom</span>(<span class=\"params\">mean = <span class=\"number\">0</span>, variance = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> v1, v2, s;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    v1 = <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.random() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    v2 = <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.random() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    s = v1 * v1 + v2 * v2;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">-2</span> * <span class=\"built_in\">Math</span>.log(s) / s) * v1;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mean + <span class=\"built_in\">Math</span>.sqrt(variance) * result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>正态分布两边低的数据看作噪音数据，中间高的数据视为正常数据</p>\n<p>通过调整方差 调整噪音量</p>\n<h4 id=\"用脚本生成带有噪音的二分类数据集\"><a href=\"#用脚本生成带有噪音的二分类数据集\" class=\"headerlink\" title=\"用脚本生成带有噪音的二分类数据集\"></a>用脚本生成带有噪音的二分类数据集</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = getData(<span class=\"number\">200</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"可视化数据集\"><a href=\"#可视化数据集\" class=\"headerlink\" title=\"可视化数据集\"></a>可视化数据集</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练数据'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">1</span>),</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">0</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/51.png\" alt=\"可视化结果\"></p>\n<h2 id=\"使用不同神经网络演示-过拟合\"><a href=\"#使用不同神经网络演示-过拟合\" class=\"headerlink\" title=\"使用不同神经网络演示 过拟合\"></a>使用不同神经网络演示 过拟合</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = getData(<span class=\"number\">200</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练数据'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">1</span>),</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">0</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一层隐藏层</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    inputShape: [<span class=\"number\">2</span>],  <span class=\"comment\">//长度为2的一维数组</span></span><br><span class=\"line\">    activation: <span class=\"string\">\"tanh\"</span>,</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出层</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">1</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'sigmoid'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置损失函数&amp;优化器</span></span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: tf.losses.logLoss,</span><br><span class=\"line\">    optimizer: tf.train.adam(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> inputs = tf.tensor(data.map(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> [p.x, p.y]));</span><br><span class=\"line\"><span class=\"keyword\">const</span> labels = tf.tensor(data.map(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    validationSplit: <span class=\"number\">0.2</span>,</span><br><span class=\"line\">    epochs: <span class=\"number\">200</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>, <span class=\"string\">'val_loss'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/52.png\" alt=\"过拟合训练结果\"></p>\n<h2 id=\"过拟合应对法：早停法\"><a href=\"#过拟合应对法：早停法\" class=\"headerlink\" title=\"过拟合应对法：早停法\"></a>过拟合应对法：早停法</h2><p>在训练出现过拟合时及时手动停止训练</p>\n<h2 id=\"过拟合应对法：权重衰减法-设置L2正则化\"><a href=\"#过拟合应对法：权重衰减法-设置L2正则化\" class=\"headerlink\" title=\"过拟合应对法：权重衰减法(设置L2正则化\"></a>过拟合应对法：权重衰减法(设置L2正则化</h2><p>将过于复杂的模型权重降低<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    inputShape: [<span class=\"number\">2</span>],  <span class=\"comment\">//长度为2的一维数组</span></span><br><span class=\"line\">    activation: <span class=\"string\">\"tanh\"</span>,</span><br><span class=\"line\">    kernelRegularizer: tf.regularizers.l2(&#123; <span class=\"attr\">l2</span>: <span class=\"number\">1</span> &#125;)  <span class=\"comment\">//设置权重衰减</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ai/54.png\" alt=\"权重衰减法训练结果\"></p>\n<h2 id=\"过拟合应对法：丢弃法\"><a href=\"#过拟合应对法：丢弃法\" class=\"headerlink\" title=\"过拟合应对法：丢弃法\"></a>过拟合应对法：丢弃法</h2><p>在隐藏层和输出层之间添加一个丢弃层<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加丢弃层，降低训练集复杂度</span></span><br><span class=\"line\">model.add(tf.layers.dropout(&#123; <span class=\"attr\">rate</span>: <span class=\"number\">0.9</span> &#125;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ai/53.png\" alt=\"丢弃法训练结果\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"欠拟合\"><a href=\"#欠拟合\" class=\"headerlink\" title=\"欠拟合\"></a>欠拟合</h2><ul>\n<li>数据过于复杂，但是神经网络模型过于简单</li>\n</ul>\n<p><img src=\"/images/ai/47.png\" alt=\"underFitting\"></p>\n<ul>\n<li>无论训练多久，训练损失始终降不下去</li>\n</ul>\n<p><img src=\"/images/ai/46.png\" alt=\"underFitting\"></p>\n<h2 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h2><ul>\n<li>模型过于复杂，把训练集噪声数据都拟合进去</li>\n</ul>\n<p><img src=\"/images/ai/48.png\" alt=\"overFitting\"></p>\n<ul>\n<li>过拟合损失曲线，红色代表验证集，蓝色代表训练集</li>\n</ul>\n<p><img src=\"/images/ai/49.png\" alt=\"overFitting\"></p>\n<p><img src=\"/images/ai/50.png\" alt=\"overFitting\"></p>\n<h2 id=\"实操模拟-欠拟合-amp-过拟合\"><a href=\"#实操模拟-欠拟合-amp-过拟合\" class=\"headerlink\" title=\"实操模拟 欠拟合&amp;过拟合\"></a>实操模拟 欠拟合&amp;过拟合</h2><ul>\n<li>加载带有噪音的二分类数据集（训练集与验证集）</li>\n<li>使用不同神经网络演示 过拟合&amp;欠拟合</li>\n<li>过拟合应对法：早停法、权重衰减、丢弃法</li>\n</ul>\n<h2 id=\"加载带有噪音的二分类数据集（训练集与验证集）\"><a href=\"#加载带有噪音的二分类数据集（训练集与验证集）\" class=\"headerlink\" title=\"加载带有噪音的二分类数据集（训练集与验证集）\"></a>加载带有噪音的二分类数据集（训练集与验证集）</h2><h4 id=\"脚本原理\"><a href=\"#脚本原理\" class=\"headerlink\" title=\"脚本原理\"></a>脚本原理</h4><p>生成正态分布(高斯分布)的样本数据<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalRandom</span>(<span class=\"params\">mean = <span class=\"number\">0</span>, variance = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> v1, v2, s;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    v1 = <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.random() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    v2 = <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.random() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    s = v1 * v1 + v2 * v2;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (s &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">-2</span> * <span class=\"built_in\">Math</span>.log(s) / s) * v1;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mean + <span class=\"built_in\">Math</span>.sqrt(variance) * result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>正态分布两边低的数据看作噪音数据，中间高的数据视为正常数据</p>\n<p>通过调整方差 调整噪音量</p>\n<h4 id=\"用脚本生成带有噪音的二分类数据集\"><a href=\"#用脚本生成带有噪音的二分类数据集\" class=\"headerlink\" title=\"用脚本生成带有噪音的二分类数据集\"></a>用脚本生成带有噪音的二分类数据集</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = getData(<span class=\"number\">200</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"可视化数据集\"><a href=\"#可视化数据集\" class=\"headerlink\" title=\"可视化数据集\"></a>可视化数据集</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练数据'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">1</span>),</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">0</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/51.png\" alt=\"可视化结果\"></p>\n<h2 id=\"使用不同神经网络演示-过拟合\"><a href=\"#使用不同神经网络演示-过拟合\" class=\"headerlink\" title=\"使用不同神经网络演示 过拟合\"></a>使用不同神经网络演示 过拟合</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = getData(<span class=\"number\">200</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">tfvis.render.scatterplot(</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练数据'</span> &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        values: [</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">1</span>),</span><br><span class=\"line\">            data.filter(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label === <span class=\"number\">0</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第一层隐藏层</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    inputShape: [<span class=\"number\">2</span>],  <span class=\"comment\">//长度为2的一维数组</span></span><br><span class=\"line\">    activation: <span class=\"string\">\"tanh\"</span>,</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出层</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">1</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'sigmoid'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置损失函数&amp;优化器</span></span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: tf.losses.logLoss,</span><br><span class=\"line\">    optimizer: tf.train.adam(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> inputs = tf.tensor(data.map(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> [p.x, p.y]));</span><br><span class=\"line\"><span class=\"keyword\">const</span> labels = tf.tensor(data.map(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> p.label));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(inputs, labels, &#123;</span><br><span class=\"line\">    validationSplit: <span class=\"number\">0.2</span>,</span><br><span class=\"line\">    epochs: <span class=\"number\">200</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>, <span class=\"string\">'val_loss'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/52.png\" alt=\"过拟合训练结果\"></p>\n<h2 id=\"过拟合应对法：早停法\"><a href=\"#过拟合应对法：早停法\" class=\"headerlink\" title=\"过拟合应对法：早停法\"></a>过拟合应对法：早停法</h2><p>在训练出现过拟合时及时手动停止训练</p>\n<h2 id=\"过拟合应对法：权重衰减法-设置L2正则化\"><a href=\"#过拟合应对法：权重衰减法-设置L2正则化\" class=\"headerlink\" title=\"过拟合应对法：权重衰减法(设置L2正则化\"></a>过拟合应对法：权重衰减法(设置L2正则化</h2><p>将过于复杂的模型权重降低<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    inputShape: [<span class=\"number\">2</span>],  <span class=\"comment\">//长度为2的一维数组</span></span><br><span class=\"line\">    activation: <span class=\"string\">\"tanh\"</span>,</span><br><span class=\"line\">    kernelRegularizer: tf.regularizers.l2(&#123; <span class=\"attr\">l2</span>: <span class=\"number\">1</span> &#125;)  <span class=\"comment\">//设置权重衰减</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ai/54.png\" alt=\"权重衰减法训练结果\"></p>\n<h2 id=\"过拟合应对法：丢弃法\"><a href=\"#过拟合应对法：丢弃法\" class=\"headerlink\" title=\"过拟合应对法：丢弃法\"></a>过拟合应对法：丢弃法</h2><p>在隐藏层和输出层之间添加一个丢弃层<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加丢弃层，降低训练集复杂度</span></span><br><span class=\"line\">model.add(tf.layers.dropout(&#123; <span class=\"attr\">rate</span>: <span class=\"number\">0.9</span> &#125;));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ai/53.png\" alt=\"丢弃法训练结果\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML11】使用预训练模型 图片分类","date":"2020-04-25T16:00:00.000Z","description":"Javascript玩转机器学习11","toc":1,"top":0,"_content":"\n<!-- ![先看一下简单训练的预测效果](/images/ai/001.gif) -->\n\n## 预训练模型是什么\n- 预先训练好的模型，无需训练，即可预测\n- 在Tensorflow.js中可以调用Web格式的模型文件\n\n## MobileNet模型\n- 一种卷积神经网络模型,能识别1000种物体图片\n- 模型文件小，响应速度块，准确度略低\n\n#### 引入模型文件\n- 为资源启动本地静态资源服务器(文件位于本地代码仓库/data下)\n```\nhs data --cors\n```\n\n- 引入资源\n```\nconst MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/mobilenet/web_model/model.json';\n```\n\n- 引入物体类型\n```\nimport { IMAGENET_CLASSES } from './imagenet_classes';\n```\n\n#### 用tfjs加载模型\n```javascript\n//用tf的loadLayersModel加载模型\nconst model = await tf.loadLayersModel(MOBILENET_MODEL_PATH);\n```\n\n#### 前端输入带预测数据\n- html\n```html\n<script src=\"script.js\"></script>\n<input type=\"file\" onchange=\"predict(this.files[0])\">\n```\n\n#### 使用模型进行预测\n\n```javascript\n// ./util.js\nexport function file2img(f) {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(f);\n        reader.onload = (e) => {\n            const img = document.createElement('img');\n            img.src = e.target.result;\n            img.width = 224;\n            img.height = 224;\n            img.onload = () => resolve(img);\n        };\n    });\n}\n\n// ./script.js\n\nwindow.predict = async (file) => {\n    //从文件转换为htmlElement\n    const img = await file2img(file);\n    document.body.appendChild(img);\n    const pred = tf.tidy(() => {\t//tidy优化webGl内存\n        const input = tf.browser.fromPixels(img)\t//转换为tensor\n            .toFloat()\t//整数转为浮点数\n            .sub(255 / 2)\t//归一化\n            .div(255 / 2)\n            .reshape([1, 224, 224, 3]);\t//一个图片的格式\n        return model.predict(input);\t//预测\n    });\n\n    const index = pred.argMax(1).dataSync()[0];\n\n    // setTimeout 0 使ui不被脚本阻塞\n        setTimeout(() => {\n            alert(`预测结果：${IMAGENET_CLASSES[index]}`);\n        }, 0);\n    };\n```\n\n![预测效果](/images/ai/61.png)\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_11_pre_training_model.md","raw":"---\ntitle: 【ML11】使用预训练模型 图片分类\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-04-26\ndescription: Javascript玩转机器学习11\ntoc: 1\ntop: 0\n---\n\n<!-- ![先看一下简单训练的预测效果](/images/ai/001.gif) -->\n\n## 预训练模型是什么\n- 预先训练好的模型，无需训练，即可预测\n- 在Tensorflow.js中可以调用Web格式的模型文件\n\n## MobileNet模型\n- 一种卷积神经网络模型,能识别1000种物体图片\n- 模型文件小，响应速度块，准确度略低\n\n#### 引入模型文件\n- 为资源启动本地静态资源服务器(文件位于本地代码仓库/data下)\n```\nhs data --cors\n```\n\n- 引入资源\n```\nconst MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/mobilenet/web_model/model.json';\n```\n\n- 引入物体类型\n```\nimport { IMAGENET_CLASSES } from './imagenet_classes';\n```\n\n#### 用tfjs加载模型\n```javascript\n//用tf的loadLayersModel加载模型\nconst model = await tf.loadLayersModel(MOBILENET_MODEL_PATH);\n```\n\n#### 前端输入带预测数据\n- html\n```html\n<script src=\"script.js\"></script>\n<input type=\"file\" onchange=\"predict(this.files[0])\">\n```\n\n#### 使用模型进行预测\n\n```javascript\n// ./util.js\nexport function file2img(f) {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(f);\n        reader.onload = (e) => {\n            const img = document.createElement('img');\n            img.src = e.target.result;\n            img.width = 224;\n            img.height = 224;\n            img.onload = () => resolve(img);\n        };\n    });\n}\n\n// ./script.js\n\nwindow.predict = async (file) => {\n    //从文件转换为htmlElement\n    const img = await file2img(file);\n    document.body.appendChild(img);\n    const pred = tf.tidy(() => {\t//tidy优化webGl内存\n        const input = tf.browser.fromPixels(img)\t//转换为tensor\n            .toFloat()\t//整数转为浮点数\n            .sub(255 / 2)\t//归一化\n            .div(255 / 2)\n            .reshape([1, 224, 224, 3]);\t//一个图片的格式\n        return model.predict(input);\t//预测\n    });\n\n    const index = pred.argMax(1).dataSync()[0];\n\n    // setTimeout 0 使ui不被脚本阻塞\n        setTimeout(() => {\n            alert(`预测结果：${IMAGENET_CLASSES[index]}`);\n        }, 0);\n    };\n```\n\n![预测效果](/images/ai/61.png)\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_11_pre_training_model","published":1,"updated":"2021-01-22T10:01:57.021Z","_id":"ckir88igl002rc8y6g9j6r3bh","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- ![先看一下简单训练的预测效果](/images/ai/001.gif) -->\n<h2 id=\"预训练模型是什么\"><a href=\"#预训练模型是什么\" class=\"headerlink\" title=\"预训练模型是什么\"></a>预训练模型是什么</h2><ul>\n<li>预先训练好的模型，无需训练，即可预测</li>\n<li>在Tensorflow.js中可以调用Web格式的模型文件</li>\n</ul>\n<h2 id=\"MobileNet模型\"><a href=\"#MobileNet模型\" class=\"headerlink\" title=\"MobileNet模型\"></a>MobileNet模型</h2><ul>\n<li>一种卷积神经网络模型,能识别1000种物体图片</li>\n<li>模型文件小，响应速度块，准确度略低</li>\n</ul>\n<h4 id=\"引入模型文件\"><a href=\"#引入模型文件\" class=\"headerlink\" title=\"引入模型文件\"></a>引入模型文件</h4><ul>\n<li><p>为资源启动本地静态资源服务器(文件位于本地代码仓库/data下)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MOBILENET_MODEL_PATH = &apos;http://127.0.0.1:8080/mobilenet/web_model/model.json&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入物体类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; IMAGENET_CLASSES &#125; from &apos;./imagenet_classes&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"用tfjs加载模型\"><a href=\"#用tfjs加载模型\" class=\"headerlink\" title=\"用tfjs加载模型\"></a>用tfjs加载模型</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用tf的loadLayersModel加载模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = <span class=\"keyword\">await</span> tf.loadLayersModel(MOBILENET_MODEL_PATH);</span><br></pre></td></tr></table></figure>\n<h4 id=\"前端输入带预测数据\"><a href=\"#前端输入带预测数据\" class=\"headerlink\" title=\"前端输入带预测数据\"></a>前端输入带预测数据</h4><ul>\n<li>html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"predict(this.files[0])\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用模型进行预测\"><a href=\"#使用模型进行预测\" class=\"headerlink\" title=\"使用模型进行预测\"></a>使用模型进行预测</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./util.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">file2img</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">        reader.readAsDataURL(f);</span><br><span class=\"line\">        reader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">            img.src = e.target.result;</span><br><span class=\"line\">            img.width = <span class=\"number\">224</span>;</span><br><span class=\"line\">            img.height = <span class=\"number\">224</span>;</span><br><span class=\"line\">            img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(img);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./script.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"keyword\">async</span> (file) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//从文件转换为htmlElement</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">await</span> file2img(file);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;\t<span class=\"comment\">//tidy优化webGl内存</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> input = tf.browser.fromPixels(img)\t<span class=\"comment\">//转换为tensor</span></span><br><span class=\"line\">            .toFloat()\t<span class=\"comment\">//整数转为浮点数</span></span><br><span class=\"line\">            .sub(<span class=\"number\">255</span> / <span class=\"number\">2</span>)\t<span class=\"comment\">//归一化</span></span><br><span class=\"line\">            .div(<span class=\"number\">255</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">            .reshape([<span class=\"number\">1</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>, <span class=\"number\">3</span>]);\t<span class=\"comment\">//一个图片的格式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.predict(input);\t<span class=\"comment\">//预测</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = pred.argMax(<span class=\"number\">1</span>).dataSync()[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setTimeout 0 使ui不被脚本阻塞</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;IMAGENET_CLASSES[index]&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/images/ai/61.png\" alt=\"预测效果\"></h2><p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<!-- ![先看一下简单训练的预测效果](/images/ai/001.gif) -->\n<h2 id=\"预训练模型是什么\"><a href=\"#预训练模型是什么\" class=\"headerlink\" title=\"预训练模型是什么\"></a>预训练模型是什么</h2><ul>\n<li>预先训练好的模型，无需训练，即可预测</li>\n<li>在Tensorflow.js中可以调用Web格式的模型文件</li>\n</ul>\n<h2 id=\"MobileNet模型\"><a href=\"#MobileNet模型\" class=\"headerlink\" title=\"MobileNet模型\"></a>MobileNet模型</h2><ul>\n<li>一种卷积神经网络模型,能识别1000种物体图片</li>\n<li>模型文件小，响应速度块，准确度略低</li>\n</ul>\n<h4 id=\"引入模型文件\"><a href=\"#引入模型文件\" class=\"headerlink\" title=\"引入模型文件\"></a>引入模型文件</h4><ul>\n<li><p>为资源启动本地静态资源服务器(文件位于本地代码仓库/data下)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入资源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MOBILENET_MODEL_PATH = &apos;http://127.0.0.1:8080/mobilenet/web_model/model.json&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入物体类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; IMAGENET_CLASSES &#125; from &apos;./imagenet_classes&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"用tfjs加载模型\"><a href=\"#用tfjs加载模型\" class=\"headerlink\" title=\"用tfjs加载模型\"></a>用tfjs加载模型</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用tf的loadLayersModel加载模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = <span class=\"keyword\">await</span> tf.loadLayersModel(MOBILENET_MODEL_PATH);</span><br></pre></td></tr></table></figure>\n<h4 id=\"前端输入带预测数据\"><a href=\"#前端输入带预测数据\" class=\"headerlink\" title=\"前端输入带预测数据\"></a>前端输入带预测数据</h4><ul>\n<li>html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"predict(this.files[0])\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用模型进行预测\"><a href=\"#使用模型进行预测\" class=\"headerlink\" title=\"使用模型进行预测\"></a>使用模型进行预测</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ./util.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">file2img</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">        reader.readAsDataURL(f);</span><br><span class=\"line\">        reader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">            img.src = e.target.result;</span><br><span class=\"line\">            img.width = <span class=\"number\">224</span>;</span><br><span class=\"line\">            img.height = <span class=\"number\">224</span>;</span><br><span class=\"line\">            img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(img);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ./script.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"keyword\">async</span> (file) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//从文件转换为htmlElement</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">await</span> file2img(file);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;\t<span class=\"comment\">//tidy优化webGl内存</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> input = tf.browser.fromPixels(img)\t<span class=\"comment\">//转换为tensor</span></span><br><span class=\"line\">            .toFloat()\t<span class=\"comment\">//整数转为浮点数</span></span><br><span class=\"line\">            .sub(<span class=\"number\">255</span> / <span class=\"number\">2</span>)\t<span class=\"comment\">//归一化</span></span><br><span class=\"line\">            .div(<span class=\"number\">255</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">            .reshape([<span class=\"number\">1</span>, <span class=\"number\">224</span>, <span class=\"number\">224</span>, <span class=\"number\">3</span>]);\t<span class=\"comment\">//一个图片的格式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.predict(input);\t<span class=\"comment\">//预测</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = pred.argMax(<span class=\"number\">1</span>).dataSync()[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setTimeout 0 使ui不被脚本阻塞</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;IMAGENET_CLASSES[index]&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/images/ai/61.png\" alt=\"预测效果\"></h2><p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML13】用tf官方的预训练模型-语音识别","date":"2020-04-27T16:00:00.000Z","description":"Javascript玩转机器学习13","toc":1,"top":0,"_content":"\n## 语音识别\n- 模型接受声音信息，输出分类信息\n- 声音在计算机里是声谱图，因此也可以使用卷积神经网络\n\n## 加载预训练语音识别模型(tf官网的模型)\n- 开本地静态服务器，获取语音识别模型文件\n- 使用tfjs-models的speech-commands包加载模型\n(tfjs-models是tf官方的模型库)\n\n## 进行语音识别\n- html\n```html\n<script src=\"script.js\"></script>\n<style>\n    #result>div {\n        float: left;\n        padding: 20px;\n    }\n</style>\n<div id=\"result\"></div>\n```\n\n- js\n```javascript\n// 引入tf-models库提供的语音命令npm包\nimport * as speechCommands from '@tensorflow-models/speech-commands';\n\n//本地静态文件服务器地址\nconst MODEL_PATH = 'http://127.0.0.1:8080/speech';\n\nwindow.onload = async () => {\n\t// speechCommands文档：\n\t// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',\t//傅里叶变换\n        null,\n        MODEL_PATH + '/model.json',\n        MODEL_PATH + '/metadata.json'\n    );\n\n\t//加载模型\n    await recognizer.ensureModelLoaded();\n\n\t//显示模型能识别的语音类型\n    const labels = recognizer.wordLabels().slice(2);\n    const resultEl = document.querySelector('#result');\n    resultEl.innerHTML = labels.map(l => `\n        <div>${l}</div>\n\t`).join('');\n\t\n\t//浏览器监听语音\n    recognizer.listen(result => {\n        const { scores } = result;\n\t\tconst maxValue = Math.max(...scores);\n\t\t//拿到分类中 可能性最大的单词\n\t\tconst index = scores.indexOf(maxValue) - 2;\n\t\t//突出显示\n        resultEl.innerHTML = labels.map((l, i) => `\n        <div style=\"background: ${i === index && 'green'}\">${l}</div>\n        `).join('');\n    }, {\n        overlapFactor: 0.3,\t\t//识别频率\n        probabilityThreshold: 0.9\t//准确度阈值，超过0.9的准确度 就执行参数一的函数\n    });\n};\n```\n\n## 效果\n![语音指令识别](/images/ai/003.gif)\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_13_speech_recognition.md","raw":"---\ntitle: 【ML13】用tf官方的预训练模型-语音识别\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-04-28\ndescription: Javascript玩转机器学习13\ntoc: 1\ntop: 0\n---\n\n## 语音识别\n- 模型接受声音信息，输出分类信息\n- 声音在计算机里是声谱图，因此也可以使用卷积神经网络\n\n## 加载预训练语音识别模型(tf官网的模型)\n- 开本地静态服务器，获取语音识别模型文件\n- 使用tfjs-models的speech-commands包加载模型\n(tfjs-models是tf官方的模型库)\n\n## 进行语音识别\n- html\n```html\n<script src=\"script.js\"></script>\n<style>\n    #result>div {\n        float: left;\n        padding: 20px;\n    }\n</style>\n<div id=\"result\"></div>\n```\n\n- js\n```javascript\n// 引入tf-models库提供的语音命令npm包\nimport * as speechCommands from '@tensorflow-models/speech-commands';\n\n//本地静态文件服务器地址\nconst MODEL_PATH = 'http://127.0.0.1:8080/speech';\n\nwindow.onload = async () => {\n\t// speechCommands文档：\n\t// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',\t//傅里叶变换\n        null,\n        MODEL_PATH + '/model.json',\n        MODEL_PATH + '/metadata.json'\n    );\n\n\t//加载模型\n    await recognizer.ensureModelLoaded();\n\n\t//显示模型能识别的语音类型\n    const labels = recognizer.wordLabels().slice(2);\n    const resultEl = document.querySelector('#result');\n    resultEl.innerHTML = labels.map(l => `\n        <div>${l}</div>\n\t`).join('');\n\t\n\t//浏览器监听语音\n    recognizer.listen(result => {\n        const { scores } = result;\n\t\tconst maxValue = Math.max(...scores);\n\t\t//拿到分类中 可能性最大的单词\n\t\tconst index = scores.indexOf(maxValue) - 2;\n\t\t//突出显示\n        resultEl.innerHTML = labels.map((l, i) => `\n        <div style=\"background: ${i === index && 'green'}\">${l}</div>\n        `).join('');\n    }, {\n        overlapFactor: 0.3,\t\t//识别频率\n        probabilityThreshold: 0.9\t//准确度阈值，超过0.9的准确度 就执行参数一的函数\n    });\n};\n```\n\n## 效果\n![语音指令识别](/images/ai/003.gif)\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_13_speech_recognition","published":1,"updated":"2021-01-22T10:02:10.441Z","_id":"ckir88igm002sc8y6gqb6gj12","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"语音识别\"><a href=\"#语音识别\" class=\"headerlink\" title=\"语音识别\"></a>语音识别</h2><ul>\n<li>模型接受声音信息，输出分类信息</li>\n<li>声音在计算机里是声谱图，因此也可以使用卷积神经网络</li>\n</ul>\n<h2 id=\"加载预训练语音识别模型-tf官网的模型\"><a href=\"#加载预训练语音识别模型-tf官网的模型\" class=\"headerlink\" title=\"加载预训练语音识别模型(tf官网的模型)\"></a>加载预训练语音识别模型(tf官网的模型)</h2><ul>\n<li>开本地静态服务器，获取语音识别模型文件</li>\n<li>使用tfjs-models的speech-commands包加载模型<br>(tfjs-models是tf官方的模型库)</li>\n</ul>\n<h2 id=\"进行语音识别\"><a href=\"#进行语音识别\" class=\"headerlink\" title=\"进行语音识别\"></a>进行语音识别</h2><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#result</span>&gt;<span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        padding: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入tf-models库提供的语音命令npm包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> speechCommands <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow-models/speech-commands'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本地静态文件服务器地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080/speech'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// speechCommands文档：</span></span><br><span class=\"line\">\t<span class=\"comment\">// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,\t<span class=\"comment\">//傅里叶变换</span></span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/metadata.json'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//加载模型</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//显示模型能识别的语音类型</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> labels = recognizer.wordLabels().slice(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> resultEl = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#result'</span>);</span><br><span class=\"line\">    resultEl.innerHTML = labels.map(<span class=\"function\"><span class=\"params\">l</span> =&gt;</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;<span class=\"subst\">$&#123;l&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t`</span>).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//浏览器监听语音</span></span><br><span class=\"line\">    recognizer.listen(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; scores &#125; = result;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> maxValue = <span class=\"built_in\">Math</span>.max(...scores);</span><br><span class=\"line\">\t\t<span class=\"comment\">//拿到分类中 可能性最大的单词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = scores.indexOf(maxValue) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//突出显示</span></span><br><span class=\"line\">        resultEl.innerHTML = labels.map(<span class=\"function\">(<span class=\"params\">l, i</span>) =&gt;</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div style=\"background: <span class=\"subst\">$&#123;i === index &amp;&amp; <span class=\"string\">'green'</span>&#125;</span>\"&gt;<span class=\"subst\">$&#123;l&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        overlapFactor: <span class=\"number\">0.3</span>,\t\t<span class=\"comment\">//识别频率</span></span><br><span class=\"line\">        probabilityThreshold: <span class=\"number\">0.9</span>\t<span class=\"comment\">//准确度阈值，超过0.9的准确度 就执行参数一的函数</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"/images/ai/003.gif\" alt=\"语音指令识别\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"语音识别\"><a href=\"#语音识别\" class=\"headerlink\" title=\"语音识别\"></a>语音识别</h2><ul>\n<li>模型接受声音信息，输出分类信息</li>\n<li>声音在计算机里是声谱图，因此也可以使用卷积神经网络</li>\n</ul>\n<h2 id=\"加载预训练语音识别模型-tf官网的模型\"><a href=\"#加载预训练语音识别模型-tf官网的模型\" class=\"headerlink\" title=\"加载预训练语音识别模型(tf官网的模型)\"></a>加载预训练语音识别模型(tf官网的模型)</h2><ul>\n<li>开本地静态服务器，获取语音识别模型文件</li>\n<li>使用tfjs-models的speech-commands包加载模型<br>(tfjs-models是tf官方的模型库)</li>\n</ul>\n<h2 id=\"进行语音识别\"><a href=\"#进行语音识别\" class=\"headerlink\" title=\"进行语音识别\"></a>进行语音识别</h2><ul>\n<li><p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#result</span>&gt;<span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">        padding: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入tf-models库提供的语音命令npm包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> speechCommands <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow-models/speech-commands'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本地静态文件服务器地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080/speech'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// speechCommands文档：</span></span><br><span class=\"line\">\t<span class=\"comment\">// https://github.com/tensorflow/tfjs-models/tree/master/speech-commands</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,\t<span class=\"comment\">//傅里叶变换</span></span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/metadata.json'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//加载模型</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//显示模型能识别的语音类型</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> labels = recognizer.wordLabels().slice(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> resultEl = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#result'</span>);</span><br><span class=\"line\">    resultEl.innerHTML = labels.map(<span class=\"function\"><span class=\"params\">l</span> =&gt;</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;<span class=\"subst\">$&#123;l&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t`</span>).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//浏览器监听语音</span></span><br><span class=\"line\">    recognizer.listen(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; scores &#125; = result;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> maxValue = <span class=\"built_in\">Math</span>.max(...scores);</span><br><span class=\"line\">\t\t<span class=\"comment\">//拿到分类中 可能性最大的单词</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> index = scores.indexOf(maxValue) - <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//突出显示</span></span><br><span class=\"line\">        resultEl.innerHTML = labels.map(<span class=\"function\">(<span class=\"params\">l, i</span>) =&gt;</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div style=\"background: <span class=\"subst\">$&#123;i === index &amp;&amp; <span class=\"string\">'green'</span>&#125;</span>\"&gt;<span class=\"subst\">$&#123;l&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">        overlapFactor: <span class=\"number\">0.3</span>,\t\t<span class=\"comment\">//识别频率</span></span><br><span class=\"line\">        probabilityThreshold: <span class=\"number\">0.9</span>\t<span class=\"comment\">//准确度阈值，超过0.9的准确度 就执行参数一的函数</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"/images/ai/003.gif\" alt=\"语音指令识别\"></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML10】训练卷积神经网络 识别手写数字","date":"2020-04-24T16:00:00.000Z","description":"Javascript玩转机器学习10","toc":1,"top":0,"_content":"\n![先看一下简单训练的预测效果](/images/ai/001.gif)\n\n## 加载MNIST数据集\n- MNIST:巨大的训练集雪碧图,以手写数字图片组成\n\n- 资源文件位置\n```\n/js-ml-code/data/mnist\n  mnist_images.png\n  mnist_labels_uint8\n```\n\n- 给资源文件建立服务器供解析脚本访问\n```terminal,bash\nhs data --cors\n```\n其中--cors表示允许跨域访问\n\n- 加载20组数据\n```javascript\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { MnistData } from './data';\n\nwindow.onload = async () => {\n    const data = new MnistData();\n    await data.load();//加载资源\n    const examples = data.nextTestBatch(20);//获取20组验证集数据\n    console.log(examples)\n}\n```\n\n- 打印出的examples：\n![](/images/ai/55.png)\n![](/images/ai/57.png)\n\n- tensorflow的splice api\n![](/images/ai/58.png)\n\n- 用tensorflow的api和canvas显示出20组图片\n```javascript\nconst surface = tfvis.visor().surface({ name: '输入示例' });\nfor (let i = 0; i < 20; i += 1) {\n\n//截取出单个图片：从第1维的第i项+第二维的第1项开始截取，第一维截取长度是1，第二维截取长度是784\n//console.log(examples.xs.slice([i, 0], [1, 784]))\n\n//tf.tidy：用于优化webGl内存，防止tensor数据量过大导致内存泄漏\n\n//tf.browser.toPixels：转换成浏览器能识别的像素格式，传入二位参数就是黑白图片，三维就是彩色的\n\n//tensor.reshape：tensor格式转换\n    const imageTensor = tf.tidy(() => {\n        return examples.xs\n            .slice([i, 0], [1, 784])  \n            .reshape([28, 28, 1]);\t//将一维数组转换成三维黑白图片格式\n    });\n\n    const canvas = document.createElement('canvas');\n    canvas.width = 28;\n    canvas.height = 28;\n    canvas.style = 'margin: 4px';\n    await tf.browser.toPixels(imageTensor, canvas);\n    surface.drawArea.appendChild(canvas);\n}\n```\n\n- 显示效果：\n\n![](/images/ai/56.png)\n\n## 卷积神经网络\n\n#### 为什么要用卷积神经网络\n- 图片数据量大，运算量大，例如一个200\\*200像素的彩色图片：200\\*200\\*3=120,000\n- 卷积神经网络能模拟人类的视觉处理流程，高效提取特征\n\n\n#### 卷积神经网络的结构\n##### 卷积层\n- [image kernels网站了解图像卷积核](setosa.io/ev/image-kernels)\n- 图像卷积核是一个小的矩阵，用于施加一些效果，例如在Photoshop中可能会看到的效果，例如模糊，锐化，勾勒出轮廓或压花。它们还用于机器学习中的“特征提取”，这是一种确定图像最重要部分的技术。在这种情况下，该过程通常被称为“卷积”\n- ![卷积](/images/ai/59.png)\n- 图片上的3X3的小矩阵，就是用于卷积以提取图像特征的**图像卷积核**\n- 使用多个卷积核(filter/kernel)对图像进行卷积操作，提取多种特征并组合\n- **卷积层**有权重，需要训练，其权重就是**卷积核**\n\n##### 池化层\n- 优化层\n- 最大池化层用于提取**最强的特征**\n- 扩大感受视野，减少计算量\n- 池化层是固定的，不需要训练\n\n##### dense全链接层\n- 作为输出层\n- 作为分类器\n- 有权重，需要训练\n\n## 构建卷积神经网络代码\n```javascript\n\nconst model = tf.sequential();\n//添加一个二位卷积层\nmodel.add(tf.layers.conv2d({\n    inputShape: [28, 28, 1],\n    kernelSize: 5,\t//卷积核的大小是5X5的矩阵\n    filters: 8,\t//应用8种图像卷积核\n    strides: 1,\t//移动步长，每一个像素单元都进行卷积操作\n    activation: 'relu',\t//激活函数，移除掉无用的特征（特征<0就废弃\n    kernelInitializer: 'varianceScaling'\t//可以不设置，设置了可以加快收敛速度\n}));\n\n//最大池化层\nmodel.add(tf.layers.maxPool2d({\n    poolSize: [2, 2], //尺寸是2X2\n    strides: [2, 2]\t//移动步长，每隔两个像素单元进行一次卷积操作\n}));\n\n// 重复上述两个层\nmodel.add(tf.layers.conv2d({\n    kernelSize: 5,\n    filters: 16,\t//需要提取更多特征\n    strides: 1,\n    activation: 'relu',\n    kernelInitializer: 'varianceScaling'\n}));\nmodel.add(tf.layers.maxPool2d({\n    poolSize: [2, 2],\n    strides: [2, 2]\n}));\n\n//flatten层用于将多维的特征数据，转换为一维的分类数据，传入dense层\nmodel.add(tf.layers.flatten());\n\n\nmodel.add(tf.layers.dense({\n    units: 10,\t\t//最终输出0-9十个分类\n    activation: 'softmax',\n    kernelInitializer: 'varianceScaling'\n}));\n```\n\n## 训练模型\n```javascript\n//训练参数\nmodel.compile({\n    loss: 'categoricalCrossentropy',\t//交叉熵损失函数\n    optimizer: tf.train.adam(),\t//优化器\n    metrics: ['accuracy']\t//准确度度量\n});\n\n//训练集数据\nconst [trainXs, trainYs] = tf.tidy(() => {\n    const d = data.nextTrainBatch(1000);\n    return [\n        d.xs.reshape([1000, 28, 28, 1]),\n        d.labels\n    ];\n});\n\n//验证集数据\nconst [testXs, testYs] = tf.tidy(() => {\n    const d = data.nextTestBatch(200);\n    return [\n        d.xs.reshape([200, 28, 28, 1]),\n        d.labels\n    ];\n});\n\n//训练\nawait model.fit(trainXs, trainYs, {\n    validationData: [testXs, testYs],\n    batchSize: 500,\n    epochs: 50,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss', 'val_loss', 'acc', 'val_acc'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n```\n\n- 训练效果：\n![卷积训练](/images/ai/60.png)\n\n## 使用模型预测识别canvas绘制数字\n- html:\n```\n<script src=\"script.js\"></script>\n<canvas width=\"300\" height=\"300\" style=\"border: 2px solid #666;\"></canvas>\n<br>\n<button onclick=\"window.clear();\" style=\"margin: 4px;\">清除</button>\n<button onclick=\"window.predict();\" style=\"margin: 4px;\">预测</button>\n```\n\n- js:\n```javascript\nconst canvas = document.querySelector('canvas');\n\ncanvas.addEventListener('mousemove', (e) => {\nif (e.buttons === 1) {\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'rgb(255,255,255)';\n        ctx.fillRect(e.offsetX, e.offsetY, 25, 25);\n    }\n});\n\n//黑底画板\nwindow.clear = () => {\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgb(0,0,0)';\n    ctx.fillRect(0, 0, 300, 300);\n};\n\nclear();\n\n```\n\n- 进行预测：\n```javascript\nwindow.predict = () => {\nconst input = tf.tidy(() => {\n    return tf.image.resizeBilinear(\t\t//转换图像tensor尺寸\n        tf.browser.fromPixels(canvas),\t//canvas转换为tensor\n        [28, 28],\t//转换成28*28\n        true\n    ).slice([0, 0, 0], [28, 28, 1])\t//canvas图片是彩色图片，通过slice转换为黑白图片\n    .toFloat()\t//训练数据进行过归一化，因此预测值也要归一化\n    .div(255)\t//归一化\n    .reshape([1, 28, 28, 1]);\t//和神经网络第一层的输入格式统一\n});\nconst pred = model.predict(input).argMax(1);\nalert(`预测结果为 ${pred.dataSync()[0]}`);\n};\n```\n\n![预测效果](/images/ai/001.gif)\n\n---\n<small>总结：这一节有两个难点，一是卷积神经网络的构建，重在理解图像卷积核;二是图像与tensor格式的转换，需要多加练习与斟酌;<br/>\n本地训练结果正确率大概70%，可以通过增加训练集数据和训练次数来提升效果</small>\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_10_handwriting_number.md","raw":"---\ntitle: 【ML10】训练卷积神经网络 识别手写数字\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-04-25\ndescription: Javascript玩转机器学习10\ntoc: 1\ntop: 0\n---\n\n![先看一下简单训练的预测效果](/images/ai/001.gif)\n\n## 加载MNIST数据集\n- MNIST:巨大的训练集雪碧图,以手写数字图片组成\n\n- 资源文件位置\n```\n/js-ml-code/data/mnist\n  mnist_images.png\n  mnist_labels_uint8\n```\n\n- 给资源文件建立服务器供解析脚本访问\n```terminal,bash\nhs data --cors\n```\n其中--cors表示允许跨域访问\n\n- 加载20组数据\n```javascript\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { MnistData } from './data';\n\nwindow.onload = async () => {\n    const data = new MnistData();\n    await data.load();//加载资源\n    const examples = data.nextTestBatch(20);//获取20组验证集数据\n    console.log(examples)\n}\n```\n\n- 打印出的examples：\n![](/images/ai/55.png)\n![](/images/ai/57.png)\n\n- tensorflow的splice api\n![](/images/ai/58.png)\n\n- 用tensorflow的api和canvas显示出20组图片\n```javascript\nconst surface = tfvis.visor().surface({ name: '输入示例' });\nfor (let i = 0; i < 20; i += 1) {\n\n//截取出单个图片：从第1维的第i项+第二维的第1项开始截取，第一维截取长度是1，第二维截取长度是784\n//console.log(examples.xs.slice([i, 0], [1, 784]))\n\n//tf.tidy：用于优化webGl内存，防止tensor数据量过大导致内存泄漏\n\n//tf.browser.toPixels：转换成浏览器能识别的像素格式，传入二位参数就是黑白图片，三维就是彩色的\n\n//tensor.reshape：tensor格式转换\n    const imageTensor = tf.tidy(() => {\n        return examples.xs\n            .slice([i, 0], [1, 784])  \n            .reshape([28, 28, 1]);\t//将一维数组转换成三维黑白图片格式\n    });\n\n    const canvas = document.createElement('canvas');\n    canvas.width = 28;\n    canvas.height = 28;\n    canvas.style = 'margin: 4px';\n    await tf.browser.toPixels(imageTensor, canvas);\n    surface.drawArea.appendChild(canvas);\n}\n```\n\n- 显示效果：\n\n![](/images/ai/56.png)\n\n## 卷积神经网络\n\n#### 为什么要用卷积神经网络\n- 图片数据量大，运算量大，例如一个200\\*200像素的彩色图片：200\\*200\\*3=120,000\n- 卷积神经网络能模拟人类的视觉处理流程，高效提取特征\n\n\n#### 卷积神经网络的结构\n##### 卷积层\n- [image kernels网站了解图像卷积核](setosa.io/ev/image-kernels)\n- 图像卷积核是一个小的矩阵，用于施加一些效果，例如在Photoshop中可能会看到的效果，例如模糊，锐化，勾勒出轮廓或压花。它们还用于机器学习中的“特征提取”，这是一种确定图像最重要部分的技术。在这种情况下，该过程通常被称为“卷积”\n- ![卷积](/images/ai/59.png)\n- 图片上的3X3的小矩阵，就是用于卷积以提取图像特征的**图像卷积核**\n- 使用多个卷积核(filter/kernel)对图像进行卷积操作，提取多种特征并组合\n- **卷积层**有权重，需要训练，其权重就是**卷积核**\n\n##### 池化层\n- 优化层\n- 最大池化层用于提取**最强的特征**\n- 扩大感受视野，减少计算量\n- 池化层是固定的，不需要训练\n\n##### dense全链接层\n- 作为输出层\n- 作为分类器\n- 有权重，需要训练\n\n## 构建卷积神经网络代码\n```javascript\n\nconst model = tf.sequential();\n//添加一个二位卷积层\nmodel.add(tf.layers.conv2d({\n    inputShape: [28, 28, 1],\n    kernelSize: 5,\t//卷积核的大小是5X5的矩阵\n    filters: 8,\t//应用8种图像卷积核\n    strides: 1,\t//移动步长，每一个像素单元都进行卷积操作\n    activation: 'relu',\t//激活函数，移除掉无用的特征（特征<0就废弃\n    kernelInitializer: 'varianceScaling'\t//可以不设置，设置了可以加快收敛速度\n}));\n\n//最大池化层\nmodel.add(tf.layers.maxPool2d({\n    poolSize: [2, 2], //尺寸是2X2\n    strides: [2, 2]\t//移动步长，每隔两个像素单元进行一次卷积操作\n}));\n\n// 重复上述两个层\nmodel.add(tf.layers.conv2d({\n    kernelSize: 5,\n    filters: 16,\t//需要提取更多特征\n    strides: 1,\n    activation: 'relu',\n    kernelInitializer: 'varianceScaling'\n}));\nmodel.add(tf.layers.maxPool2d({\n    poolSize: [2, 2],\n    strides: [2, 2]\n}));\n\n//flatten层用于将多维的特征数据，转换为一维的分类数据，传入dense层\nmodel.add(tf.layers.flatten());\n\n\nmodel.add(tf.layers.dense({\n    units: 10,\t\t//最终输出0-9十个分类\n    activation: 'softmax',\n    kernelInitializer: 'varianceScaling'\n}));\n```\n\n## 训练模型\n```javascript\n//训练参数\nmodel.compile({\n    loss: 'categoricalCrossentropy',\t//交叉熵损失函数\n    optimizer: tf.train.adam(),\t//优化器\n    metrics: ['accuracy']\t//准确度度量\n});\n\n//训练集数据\nconst [trainXs, trainYs] = tf.tidy(() => {\n    const d = data.nextTrainBatch(1000);\n    return [\n        d.xs.reshape([1000, 28, 28, 1]),\n        d.labels\n    ];\n});\n\n//验证集数据\nconst [testXs, testYs] = tf.tidy(() => {\n    const d = data.nextTestBatch(200);\n    return [\n        d.xs.reshape([200, 28, 28, 1]),\n        d.labels\n    ];\n});\n\n//训练\nawait model.fit(trainXs, trainYs, {\n    validationData: [testXs, testYs],\n    batchSize: 500,\n    epochs: 50,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss', 'val_loss', 'acc', 'val_acc'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n```\n\n- 训练效果：\n![卷积训练](/images/ai/60.png)\n\n## 使用模型预测识别canvas绘制数字\n- html:\n```\n<script src=\"script.js\"></script>\n<canvas width=\"300\" height=\"300\" style=\"border: 2px solid #666;\"></canvas>\n<br>\n<button onclick=\"window.clear();\" style=\"margin: 4px;\">清除</button>\n<button onclick=\"window.predict();\" style=\"margin: 4px;\">预测</button>\n```\n\n- js:\n```javascript\nconst canvas = document.querySelector('canvas');\n\ncanvas.addEventListener('mousemove', (e) => {\nif (e.buttons === 1) {\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'rgb(255,255,255)';\n        ctx.fillRect(e.offsetX, e.offsetY, 25, 25);\n    }\n});\n\n//黑底画板\nwindow.clear = () => {\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'rgb(0,0,0)';\n    ctx.fillRect(0, 0, 300, 300);\n};\n\nclear();\n\n```\n\n- 进行预测：\n```javascript\nwindow.predict = () => {\nconst input = tf.tidy(() => {\n    return tf.image.resizeBilinear(\t\t//转换图像tensor尺寸\n        tf.browser.fromPixels(canvas),\t//canvas转换为tensor\n        [28, 28],\t//转换成28*28\n        true\n    ).slice([0, 0, 0], [28, 28, 1])\t//canvas图片是彩色图片，通过slice转换为黑白图片\n    .toFloat()\t//训练数据进行过归一化，因此预测值也要归一化\n    .div(255)\t//归一化\n    .reshape([1, 28, 28, 1]);\t//和神经网络第一层的输入格式统一\n});\nconst pred = model.predict(input).argMax(1);\nalert(`预测结果为 ${pred.dataSync()[0]}`);\n};\n```\n\n![预测效果](/images/ai/001.gif)\n\n---\n<small>总结：这一节有两个难点，一是卷积神经网络的构建，重在理解图像卷积核;二是图像与tensor格式的转换，需要多加练习与斟酌;<br/>\n本地训练结果正确率大概70%，可以通过增加训练集数据和训练次数来提升效果</small>\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_10_handwriting_number","published":1,"updated":"2021-01-22T10:01:36.101Z","_id":"ckir88igp002vc8y6b71gyjnn","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/ai/001.gif\" alt=\"先看一下简单训练的预测效果\"></p>\n<h2 id=\"加载MNIST数据集\"><a href=\"#加载MNIST数据集\" class=\"headerlink\" title=\"加载MNIST数据集\"></a>加载MNIST数据集</h2><ul>\n<li><p>MNIST:巨大的训练集雪碧图,以手写数字图片组成</p>\n</li>\n<li><p>资源文件位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/js-ml-code/data/mnist</span><br><span class=\"line\">  mnist_images.png</span><br><span class=\"line\">  mnist_labels_uint8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给资源文件建立服务器供解析脚本访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中–cors表示允许跨域访问</p>\n<ul>\n<li><p>加载20组数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MnistData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> MnistData();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> data.load();<span class=\"comment\">//加载资源</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> examples = data.nextTestBatch(<span class=\"number\">20</span>);<span class=\"comment\">//获取20组验证集数据</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(examples)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印出的examples：<br><img src=\"/images/ai/55.png\" alt><br><img src=\"/images/ai/57.png\" alt></p>\n</li>\n<li><p>tensorflow的splice api<br><img src=\"/images/ai/58.png\" alt></p>\n</li>\n<li><p>用tensorflow的api和canvas显示出20组图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> surface = tfvis.visor().surface(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'输入示例'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//截取出单个图片：从第1维的第i项+第二维的第1项开始截取，第一维截取长度是1，第二维截取长度是784</span></span><br><span class=\"line\"><span class=\"comment\">//console.log(examples.xs.slice([i, 0], [1, 784]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tf.tidy：用于优化webGl内存，防止tensor数据量过大导致内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tf.browser.toPixels：转换成浏览器能识别的像素格式，传入二位参数就是黑白图片，三维就是彩色的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tensor.reshape：tensor格式转换</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> imageTensor = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> examples.xs</span><br><span class=\"line\">            .slice([i, <span class=\"number\">0</span>], [<span class=\"number\">1</span>, <span class=\"number\">784</span>])  </span><br><span class=\"line\">            .reshape([<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]);\t<span class=\"comment\">//将一维数组转换成三维黑白图片格式</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">    canvas.width = <span class=\"number\">28</span>;</span><br><span class=\"line\">    canvas.height = <span class=\"number\">28</span>;</span><br><span class=\"line\">    canvas.style = <span class=\"string\">'margin: 4px'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> tf.browser.toPixels(imageTensor, canvas);</span><br><span class=\"line\">    surface.drawArea.appendChild(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示效果：</p>\n</li>\n</ul>\n<p><img src=\"/images/ai/56.png\" alt></p>\n<h2 id=\"卷积神经网络\"><a href=\"#卷积神经网络\" class=\"headerlink\" title=\"卷积神经网络\"></a>卷积神经网络</h2><h4 id=\"为什么要用卷积神经网络\"><a href=\"#为什么要用卷积神经网络\" class=\"headerlink\" title=\"为什么要用卷积神经网络\"></a>为什么要用卷积神经网络</h4><ul>\n<li>图片数据量大，运算量大，例如一个200*200像素的彩色图片：200*200*3=120,000</li>\n<li>卷积神经网络能模拟人类的视觉处理流程，高效提取特征</li>\n</ul>\n<h4 id=\"卷积神经网络的结构\"><a href=\"#卷积神经网络的结构\" class=\"headerlink\" title=\"卷积神经网络的结构\"></a>卷积神经网络的结构</h4><h5 id=\"卷积层\"><a href=\"#卷积层\" class=\"headerlink\" title=\"卷积层\"></a>卷积层</h5><ul>\n<li><a href=\"setosa.io/ev/image-kernels\">image kernels网站了解图像卷积核</a></li>\n<li>图像卷积核是一个小的矩阵，用于施加一些效果，例如在Photoshop中可能会看到的效果，例如模糊，锐化，勾勒出轮廓或压花。它们还用于机器学习中的“特征提取”，这是一种确定图像最重要部分的技术。在这种情况下，该过程通常被称为“卷积”</li>\n<li><img src=\"/images/ai/59.png\" alt=\"卷积\"></li>\n<li>图片上的3X3的小矩阵，就是用于卷积以提取图像特征的<strong>图像卷积核</strong></li>\n<li>使用多个卷积核(filter/kernel)对图像进行卷积操作，提取多种特征并组合</li>\n<li><strong>卷积层</strong>有权重，需要训练，其权重就是<strong>卷积核</strong></li>\n</ul>\n<h5 id=\"池化层\"><a href=\"#池化层\" class=\"headerlink\" title=\"池化层\"></a>池化层</h5><ul>\n<li>优化层</li>\n<li>最大池化层用于提取<strong>最强的特征</strong></li>\n<li>扩大感受视野，减少计算量</li>\n<li>池化层是固定的，不需要训练</li>\n</ul>\n<h5 id=\"dense全链接层\"><a href=\"#dense全链接层\" class=\"headerlink\" title=\"dense全链接层\"></a>dense全链接层</h5><ul>\n<li>作为输出层</li>\n<li>作为分类器</li>\n<li>有权重，需要训练</li>\n</ul>\n<h2 id=\"构建卷积神经网络代码\"><a href=\"#构建卷积神经网络代码\" class=\"headerlink\" title=\"构建卷积神经网络代码\"></a>构建卷积神经网络代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"><span class=\"comment\">//添加一个二位卷积层</span></span><br><span class=\"line\">model.add(tf.layers.conv2d(&#123;</span><br><span class=\"line\">    inputShape: [<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    kernelSize: <span class=\"number\">5</span>,\t<span class=\"comment\">//卷积核的大小是5X5的矩阵</span></span><br><span class=\"line\">    filters: <span class=\"number\">8</span>,\t<span class=\"comment\">//应用8种图像卷积核</span></span><br><span class=\"line\">    strides: <span class=\"number\">1</span>,\t<span class=\"comment\">//移动步长，每一个像素单元都进行卷积操作</span></span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span>,\t<span class=\"comment\">//激活函数，移除掉无用的特征（特征&lt;0就废弃</span></span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span>\t<span class=\"comment\">//可以不设置，设置了可以加快收敛速度</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大池化层</span></span><br><span class=\"line\">model.add(tf.layers.maxPool2d(&#123;</span><br><span class=\"line\">    poolSize: [<span class=\"number\">2</span>, <span class=\"number\">2</span>], <span class=\"comment\">//尺寸是2X2</span></span><br><span class=\"line\">    strides: [<span class=\"number\">2</span>, <span class=\"number\">2</span>]\t<span class=\"comment\">//移动步长，每隔两个像素单元进行一次卷积操作</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重复上述两个层</span></span><br><span class=\"line\">model.add(tf.layers.conv2d(&#123;</span><br><span class=\"line\">    kernelSize: <span class=\"number\">5</span>,</span><br><span class=\"line\">    filters: <span class=\"number\">16</span>,\t<span class=\"comment\">//需要提取更多特征</span></span><br><span class=\"line\">    strides: <span class=\"number\">1</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span>,</span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">model.add(tf.layers.maxPool2d(&#123;</span><br><span class=\"line\">    poolSize: [<span class=\"number\">2</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    strides: [<span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//flatten层用于将多维的特征数据，转换为一维的分类数据，传入dense层</span></span><br><span class=\"line\">model.add(tf.layers.flatten());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,\t\t<span class=\"comment\">//最终输出0-9十个分类</span></span><br><span class=\"line\">    activation: <span class=\"string\">'softmax'</span>,</span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练参数</span></span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: <span class=\"string\">'categoricalCrossentropy'</span>,\t<span class=\"comment\">//交叉熵损失函数</span></span><br><span class=\"line\">    optimizer: tf.train.adam(),\t<span class=\"comment\">//优化器</span></span><br><span class=\"line\">    metrics: [<span class=\"string\">'accuracy'</span>]\t<span class=\"comment\">//准确度度量</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//训练集数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [trainXs, trainYs] = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = data.nextTrainBatch(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        d.xs.reshape([<span class=\"number\">1000</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]),</span><br><span class=\"line\">        d.labels</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证集数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [testXs, testYs] = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = data.nextTestBatch(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        d.xs.reshape([<span class=\"number\">200</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]),</span><br><span class=\"line\">        d.labels</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//训练</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(trainXs, trainYs, &#123;</span><br><span class=\"line\">    validationData: [testXs, testYs],</span><br><span class=\"line\">    batchSize: <span class=\"number\">500</span>,</span><br><span class=\"line\">    epochs: <span class=\"number\">50</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>, <span class=\"string\">'val_loss'</span>, <span class=\"string\">'acc'</span>, <span class=\"string\">'val_acc'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练效果：<br><img src=\"/images/ai/60.png\" alt=\"卷积训练\"></li>\n</ul>\n<h2 id=\"使用模型预测识别canvas绘制数字\"><a href=\"#使用模型预测识别canvas绘制数字\" class=\"headerlink\" title=\"使用模型预测识别canvas绘制数字\"></a>使用模型预测识别canvas绘制数字</h2><ul>\n<li><p>html:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;canvas width=&quot;300&quot; height=&quot;300&quot; style=&quot;border: 2px solid #666;&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;window.clear();&quot; style=&quot;margin: 4px;&quot;&gt;清除&lt;/button&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;window.predict();&quot; style=&quot;margin: 4px;&quot;&gt;预测&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (e.buttons === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">        ctx.fillStyle = <span class=\"string\">'rgb(255,255,255)'</span>;</span><br><span class=\"line\">        ctx.fillRect(e.offsetX, e.offsetY, <span class=\"number\">25</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//黑底画板</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.clear = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">    ctx.fillStyle = <span class=\"string\">'rgb(0,0,0)'</span>;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">clear();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行预测：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.image.resizeBilinear(\t\t<span class=\"comment\">//转换图像tensor尺寸</span></span><br><span class=\"line\">        tf.browser.fromPixels(canvas),\t<span class=\"comment\">//canvas转换为tensor</span></span><br><span class=\"line\">        [<span class=\"number\">28</span>, <span class=\"number\">28</span>],\t<span class=\"comment\">//转换成28*28</span></span><br><span class=\"line\">        <span class=\"literal\">true</span></span><br><span class=\"line\">    ).slice([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>])\t<span class=\"comment\">//canvas图片是彩色图片，通过slice转换为黑白图片</span></span><br><span class=\"line\">    .toFloat()\t<span class=\"comment\">//训练数据进行过归一化，因此预测值也要归一化</span></span><br><span class=\"line\">    .div(<span class=\"number\">255</span>)\t<span class=\"comment\">//归一化</span></span><br><span class=\"line\">    .reshape([<span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]);\t<span class=\"comment\">//和神经网络第一层的输入格式统一</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pred = model.predict(input).argMax(<span class=\"number\">1</span>);</span><br><span class=\"line\">alert(<span class=\"string\">`预测结果为 <span class=\"subst\">$&#123;pred.dataSync()[<span class=\"number\">0</span>]&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/ai/001.gif\" alt=\"预测效果\"></p>\n<hr>\n<p><small>总结：这一节有两个难点，一是卷积神经网络的构建，重在理解图像卷积核;二是图像与tensor格式的转换，需要多加练习与斟酌;<br><br>本地训练结果正确率大概70%，可以通过增加训练集数据和训练次数来提升效果</small></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/ai/001.gif\" alt=\"先看一下简单训练的预测效果\"></p>\n<h2 id=\"加载MNIST数据集\"><a href=\"#加载MNIST数据集\" class=\"headerlink\" title=\"加载MNIST数据集\"></a>加载MNIST数据集</h2><ul>\n<li><p>MNIST:巨大的训练集雪碧图,以手写数字图片组成</p>\n</li>\n<li><p>资源文件位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/js-ml-code/data/mnist</span><br><span class=\"line\">  mnist_images.png</span><br><span class=\"line\">  mnist_labels_uint8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给资源文件建立服务器供解析脚本访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中–cors表示允许跨域访问</p>\n<ul>\n<li><p>加载20组数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; MnistData &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> MnistData();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> data.load();<span class=\"comment\">//加载资源</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> examples = data.nextTestBatch(<span class=\"number\">20</span>);<span class=\"comment\">//获取20组验证集数据</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(examples)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印出的examples：<br><img src=\"/images/ai/55.png\" alt><br><img src=\"/images/ai/57.png\" alt></p>\n</li>\n<li><p>tensorflow的splice api<br><img src=\"/images/ai/58.png\" alt></p>\n</li>\n<li><p>用tensorflow的api和canvas显示出20组图片</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> surface = tfvis.visor().surface(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'输入示例'</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//截取出单个图片：从第1维的第i项+第二维的第1项开始截取，第一维截取长度是1，第二维截取长度是784</span></span><br><span class=\"line\"><span class=\"comment\">//console.log(examples.xs.slice([i, 0], [1, 784]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tf.tidy：用于优化webGl内存，防止tensor数据量过大导致内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tf.browser.toPixels：转换成浏览器能识别的像素格式，传入二位参数就是黑白图片，三维就是彩色的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//tensor.reshape：tensor格式转换</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> imageTensor = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> examples.xs</span><br><span class=\"line\">            .slice([i, <span class=\"number\">0</span>], [<span class=\"number\">1</span>, <span class=\"number\">784</span>])  </span><br><span class=\"line\">            .reshape([<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]);\t<span class=\"comment\">//将一维数组转换成三维黑白图片格式</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">    canvas.width = <span class=\"number\">28</span>;</span><br><span class=\"line\">    canvas.height = <span class=\"number\">28</span>;</span><br><span class=\"line\">    canvas.style = <span class=\"string\">'margin: 4px'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> tf.browser.toPixels(imageTensor, canvas);</span><br><span class=\"line\">    surface.drawArea.appendChild(canvas);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示效果：</p>\n</li>\n</ul>\n<p><img src=\"/images/ai/56.png\" alt></p>\n<h2 id=\"卷积神经网络\"><a href=\"#卷积神经网络\" class=\"headerlink\" title=\"卷积神经网络\"></a>卷积神经网络</h2><h4 id=\"为什么要用卷积神经网络\"><a href=\"#为什么要用卷积神经网络\" class=\"headerlink\" title=\"为什么要用卷积神经网络\"></a>为什么要用卷积神经网络</h4><ul>\n<li>图片数据量大，运算量大，例如一个200*200像素的彩色图片：200*200*3=120,000</li>\n<li>卷积神经网络能模拟人类的视觉处理流程，高效提取特征</li>\n</ul>\n<h4 id=\"卷积神经网络的结构\"><a href=\"#卷积神经网络的结构\" class=\"headerlink\" title=\"卷积神经网络的结构\"></a>卷积神经网络的结构</h4><h5 id=\"卷积层\"><a href=\"#卷积层\" class=\"headerlink\" title=\"卷积层\"></a>卷积层</h5><ul>\n<li><a href=\"setosa.io/ev/image-kernels\">image kernels网站了解图像卷积核</a></li>\n<li>图像卷积核是一个小的矩阵，用于施加一些效果，例如在Photoshop中可能会看到的效果，例如模糊，锐化，勾勒出轮廓或压花。它们还用于机器学习中的“特征提取”，这是一种确定图像最重要部分的技术。在这种情况下，该过程通常被称为“卷积”</li>\n<li><img src=\"/images/ai/59.png\" alt=\"卷积\"></li>\n<li>图片上的3X3的小矩阵，就是用于卷积以提取图像特征的<strong>图像卷积核</strong></li>\n<li>使用多个卷积核(filter/kernel)对图像进行卷积操作，提取多种特征并组合</li>\n<li><strong>卷积层</strong>有权重，需要训练，其权重就是<strong>卷积核</strong></li>\n</ul>\n<h5 id=\"池化层\"><a href=\"#池化层\" class=\"headerlink\" title=\"池化层\"></a>池化层</h5><ul>\n<li>优化层</li>\n<li>最大池化层用于提取<strong>最强的特征</strong></li>\n<li>扩大感受视野，减少计算量</li>\n<li>池化层是固定的，不需要训练</li>\n</ul>\n<h5 id=\"dense全链接层\"><a href=\"#dense全链接层\" class=\"headerlink\" title=\"dense全链接层\"></a>dense全链接层</h5><ul>\n<li>作为输出层</li>\n<li>作为分类器</li>\n<li>有权重，需要训练</li>\n</ul>\n<h2 id=\"构建卷积神经网络代码\"><a href=\"#构建卷积神经网络代码\" class=\"headerlink\" title=\"构建卷积神经网络代码\"></a>构建卷积神经网络代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"><span class=\"comment\">//添加一个二位卷积层</span></span><br><span class=\"line\">model.add(tf.layers.conv2d(&#123;</span><br><span class=\"line\">    inputShape: [<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    kernelSize: <span class=\"number\">5</span>,\t<span class=\"comment\">//卷积核的大小是5X5的矩阵</span></span><br><span class=\"line\">    filters: <span class=\"number\">8</span>,\t<span class=\"comment\">//应用8种图像卷积核</span></span><br><span class=\"line\">    strides: <span class=\"number\">1</span>,\t<span class=\"comment\">//移动步长，每一个像素单元都进行卷积操作</span></span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span>,\t<span class=\"comment\">//激活函数，移除掉无用的特征（特征&lt;0就废弃</span></span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span>\t<span class=\"comment\">//可以不设置，设置了可以加快收敛速度</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最大池化层</span></span><br><span class=\"line\">model.add(tf.layers.maxPool2d(&#123;</span><br><span class=\"line\">    poolSize: [<span class=\"number\">2</span>, <span class=\"number\">2</span>], <span class=\"comment\">//尺寸是2X2</span></span><br><span class=\"line\">    strides: [<span class=\"number\">2</span>, <span class=\"number\">2</span>]\t<span class=\"comment\">//移动步长，每隔两个像素单元进行一次卷积操作</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重复上述两个层</span></span><br><span class=\"line\">model.add(tf.layers.conv2d(&#123;</span><br><span class=\"line\">    kernelSize: <span class=\"number\">5</span>,</span><br><span class=\"line\">    filters: <span class=\"number\">16</span>,\t<span class=\"comment\">//需要提取更多特征</span></span><br><span class=\"line\">    strides: <span class=\"number\">1</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span>,</span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">model.add(tf.layers.maxPool2d(&#123;</span><br><span class=\"line\">    poolSize: [<span class=\"number\">2</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    strides: [<span class=\"number\">2</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//flatten层用于将多维的特征数据，转换为一维的分类数据，传入dense层</span></span><br><span class=\"line\">model.add(tf.layers.flatten());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,\t\t<span class=\"comment\">//最终输出0-9十个分类</span></span><br><span class=\"line\">    activation: <span class=\"string\">'softmax'</span>,</span><br><span class=\"line\">    kernelInitializer: <span class=\"string\">'varianceScaling'</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练参数</span></span><br><span class=\"line\">model.compile(&#123;</span><br><span class=\"line\">    loss: <span class=\"string\">'categoricalCrossentropy'</span>,\t<span class=\"comment\">//交叉熵损失函数</span></span><br><span class=\"line\">    optimizer: tf.train.adam(),\t<span class=\"comment\">//优化器</span></span><br><span class=\"line\">    metrics: [<span class=\"string\">'accuracy'</span>]\t<span class=\"comment\">//准确度度量</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//训练集数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [trainXs, trainYs] = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = data.nextTrainBatch(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        d.xs.reshape([<span class=\"number\">1000</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]),</span><br><span class=\"line\">        d.labels</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证集数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [testXs, testYs] = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = data.nextTestBatch(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        d.xs.reshape([<span class=\"number\">200</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]),</span><br><span class=\"line\">        d.labels</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//训练</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(trainXs, trainYs, &#123;</span><br><span class=\"line\">    validationData: [testXs, testYs],</span><br><span class=\"line\">    batchSize: <span class=\"number\">500</span>,</span><br><span class=\"line\">    epochs: <span class=\"number\">50</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>, <span class=\"string\">'val_loss'</span>, <span class=\"string\">'acc'</span>, <span class=\"string\">'val_acc'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>训练效果：<br><img src=\"/images/ai/60.png\" alt=\"卷积训练\"></li>\n</ul>\n<h2 id=\"使用模型预测识别canvas绘制数字\"><a href=\"#使用模型预测识别canvas绘制数字\" class=\"headerlink\" title=\"使用模型预测识别canvas绘制数字\"></a>使用模型预测识别canvas绘制数字</h2><ul>\n<li><p>html:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;canvas width=&quot;300&quot; height=&quot;300&quot; style=&quot;border: 2px solid #666;&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;window.clear();&quot; style=&quot;margin: 4px;&quot;&gt;清除&lt;/button&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;window.predict();&quot; style=&quot;margin: 4px;&quot;&gt;预测&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.addEventListener(<span class=\"string\">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (e.buttons === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">        ctx.fillStyle = <span class=\"string\">'rgb(255,255,255)'</span>;</span><br><span class=\"line\">        ctx.fillRect(e.offsetX, e.offsetY, <span class=\"number\">25</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//黑底画板</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.clear = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">    ctx.fillStyle = <span class=\"string\">'rgb(0,0,0)'</span>;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">clear();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进行预测：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.image.resizeBilinear(\t\t<span class=\"comment\">//转换图像tensor尺寸</span></span><br><span class=\"line\">        tf.browser.fromPixels(canvas),\t<span class=\"comment\">//canvas转换为tensor</span></span><br><span class=\"line\">        [<span class=\"number\">28</span>, <span class=\"number\">28</span>],\t<span class=\"comment\">//转换成28*28</span></span><br><span class=\"line\">        <span class=\"literal\">true</span></span><br><span class=\"line\">    ).slice([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>], [<span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>])\t<span class=\"comment\">//canvas图片是彩色图片，通过slice转换为黑白图片</span></span><br><span class=\"line\">    .toFloat()\t<span class=\"comment\">//训练数据进行过归一化，因此预测值也要归一化</span></span><br><span class=\"line\">    .div(<span class=\"number\">255</span>)\t<span class=\"comment\">//归一化</span></span><br><span class=\"line\">    .reshape([<span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>]);\t<span class=\"comment\">//和神经网络第一层的输入格式统一</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pred = model.predict(input).argMax(<span class=\"number\">1</span>);</span><br><span class=\"line\">alert(<span class=\"string\">`预测结果为 <span class=\"subst\">$&#123;pred.dataSync()[<span class=\"number\">0</span>]&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/ai/001.gif\" alt=\"预测效果\"></p>\n<hr>\n<p><small>总结：这一节有两个难点，一是卷积神经网络的构建，重在理解图像卷积核;二是图像与tensor格式的转换，需要多加练习与斟酌;<br><br>本地训练结果正确率大概70%，可以通过增加训练集数据和训练次数来提升效果</small></p>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML12】基于迁移学习的图片分类-商标识别","date":"2020-04-26T16:00:00.000Z","description":"Javascript玩转机器学习12","toc":1,"top":0,"_content":"\n## 迁移学习\n- **是什么**：把已训练好的模型参数迁移到新的模型来帮助新模型训练\n- **为什么**：深度学习模型参数多，从头训练成本高\n- **怎么做**：删除原始模型的最后一层，基于此截断模型的输出训练一个新的（通常相当浅的）模型\n\n\n\n## 加载商标训练数据并可视化\n- 商标训练素材\n![训练素材](/images/ai/63.png)\n\n- 在本地为素材建立静态http服务器\n```\nhs data --cors\n```\n\n- 编写JS脚本加载训练图片及其标签\n```html\n// index.html\n<script src=\"script.js\"></script>\n<input type=\"file\" onchange=\"predict(this.files[0])\">\n<button onclick=\"download()\">下载模型</button>\n```\n```javascript\n// data.js\nconst loadImg =(src)=>{\n  return new Promise(resolve=>{\n    const img = document.createElement('img')\n    img.crossOrigin = 'anonymous'\n    img.src = src\n    img.width = 224   //以mobileNet为截断模型，其接收图片尺寸为224\n    img.height = 224\n    img.onload=()=>reslove(img)\n  })\n}\n\n// 返回Promise\nexport const getInputs = async()=>{\n  const loadImgs = []\n  const labels = []\n  for(let i=0;i<30;i+=1){\n    ['android','apple','windows'].forEach(label=>{\n      const imgP = loadImg(`http://127.0.0.1:8080/brand/train/${label}-${index}.jpg`)\n      loadImgs.push(imgP)\n      labels.push([\n        label === 'android' ? 1 :0,\n        label === 'apple' ? 1 :0,\n        label === 'windows' ? 1 :0,\n      ])\n    })\n  }\n  const inputs = await Promise.all(loadImgs)\n  return{ \n    inputs, labels\n  }\n}\n```\n\n\n```javascript\n// script.js\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { getInputs } from './data';\nimport { img2x, file2img } from './utils';\n\nconst MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/mobilenet/web_model/model.json';\nconst NUM_CLASSES = 3;\nconst BRAND_CLASSES = ['android', 'apple', 'windows'];\n\nwindow.onload = async () => {\n    const { inputs, labels } = await getInputs();\n    // console.log([inputs,labels])\n\n    //将加载的图片素材可视化\n    const surface = tfvis.visor().surface({ name: '输入示例', styles: { height: 250 } });\n    inputs.forEach(img => {\n        surface.drawArea.appendChild(img);\n    });\n};\n```\n\n- 可视化训练图片：\n![可视化训练图片](/images/ai/64.png)\n\n## 加载预训练好的模型Mobilenet\n```javascript\n//加载预训练好的模型Mobilenet\nconst mobilenet = await tf.loadLayersModel(MOBILENET_MODEL_PATH);\n\n//mobilenet的方法，给出其神经网络的概览\nmobilenet.summary();\n```\n\n\n![mobilenet模型概览](/images/ai/65.png)\n\n\n\n## 定义截断模型\n```javascript\n//获取中间层\nconst layer = mobilenet.getLayer('conv_pw_13_relu');\n\n//定义一个截断模型truncatedMobilenet\nconst truncatedMobilenet = tf.model({\n    inputs: mobilenet.inputs,\n    outputs: layer.output\n});\n```\n\n## 定义双层的迁移模型\n```javascript\n\n//定义一个模型\nconst model = tf.sequential();\n\n//添加一个flatten层（将截断模型提取的高维特征提取成一维向量，这一层没有参数，起转换作用\nmodel.add(tf.layers.flatten({\n    inputShape: layer.outputShape.slice(1)\n}));\n\n//添加一个全链接层：用于训练我们的商标图片\nmodel.add(tf.layers.dense({\n    units: 10,\n    activation: 'relu'\n}));\n\n//添加一个全链接层：用于做多分类\nmodel.add(tf.layers.dense({\n    units: NUM_CLASSES,\n    activation: 'softmax'\n}));\n\n//设置损失函数：分类交叉熵损失函数，优化器为adam\nmodel.compile({ loss: 'categoricalCrossentropy', optimizer: tf.train.adam() });\n\n```\n\n## 先用截断模型训练数据，转为可以用于迁移模型的数据\n```javascript\n//训练数据 先经过截断模型，转为可以用于迁移模型的数据\nconst { xs, ys } = tf.tidy(() => {\n    const xs = tf.concat(inputs.map(imgEl => truncatedMobilenet.predict(img2x(imgEl))));\n    const ys = tf.tensor(labels);\n    return { xs, ys };\n});\n```\n\n## 训练迁移模型\n```javascript\n//训练迁移模型\nawait model.fit(xs, ys, {\n    epochs: 20,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n```\n\n![迁移模型训练效率高](/images/ai/66.png)\n\n## 预测\n```javascript\nwindow.predict = async (file) => {\n    const img = await file2img(file);\n    document.body.appendChild(img);\n    const pred = tf.tidy(() => {\n        const x = img2x(img);\n        const input = truncatedMobilenet.predict(x);\n        return model.predict(input);\n    });\n\n    const index = pred.argMax(1).dataSync()[0];\n    setTimeout(() => {\n        alert(`预测结果：${BRAND_CLASSES[index]}`);\n    }, 0);\n};\n```\n\n\n![预测效果](/images/ai/002.gif)\n\n## 模型的保存和加载\n\n- 保存：把训练好的模型保存成文件或者 local storage变量\n\n```\nwindow.download = async () => {\n    await model.save('downloads://model');\n};\n```\n- 加载：从文件或者 local storage中加载模型\n- 原因：无需重复训练，便于复用到其他应用中\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_12_transfer_learning.md","raw":"---\ntitle: 【ML12】基于迁移学习的图片分类-商标识别\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-04-27\ndescription: Javascript玩转机器学习12\ntoc: 1\ntop: 0\n---\n\n## 迁移学习\n- **是什么**：把已训练好的模型参数迁移到新的模型来帮助新模型训练\n- **为什么**：深度学习模型参数多，从头训练成本高\n- **怎么做**：删除原始模型的最后一层，基于此截断模型的输出训练一个新的（通常相当浅的）模型\n\n\n\n## 加载商标训练数据并可视化\n- 商标训练素材\n![训练素材](/images/ai/63.png)\n\n- 在本地为素材建立静态http服务器\n```\nhs data --cors\n```\n\n- 编写JS脚本加载训练图片及其标签\n```html\n// index.html\n<script src=\"script.js\"></script>\n<input type=\"file\" onchange=\"predict(this.files[0])\">\n<button onclick=\"download()\">下载模型</button>\n```\n```javascript\n// data.js\nconst loadImg =(src)=>{\n  return new Promise(resolve=>{\n    const img = document.createElement('img')\n    img.crossOrigin = 'anonymous'\n    img.src = src\n    img.width = 224   //以mobileNet为截断模型，其接收图片尺寸为224\n    img.height = 224\n    img.onload=()=>reslove(img)\n  })\n}\n\n// 返回Promise\nexport const getInputs = async()=>{\n  const loadImgs = []\n  const labels = []\n  for(let i=0;i<30;i+=1){\n    ['android','apple','windows'].forEach(label=>{\n      const imgP = loadImg(`http://127.0.0.1:8080/brand/train/${label}-${index}.jpg`)\n      loadImgs.push(imgP)\n      labels.push([\n        label === 'android' ? 1 :0,\n        label === 'apple' ? 1 :0,\n        label === 'windows' ? 1 :0,\n      ])\n    })\n  }\n  const inputs = await Promise.all(loadImgs)\n  return{ \n    inputs, labels\n  }\n}\n```\n\n\n```javascript\n// script.js\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { getInputs } from './data';\nimport { img2x, file2img } from './utils';\n\nconst MOBILENET_MODEL_PATH = 'http://127.0.0.1:8080/mobilenet/web_model/model.json';\nconst NUM_CLASSES = 3;\nconst BRAND_CLASSES = ['android', 'apple', 'windows'];\n\nwindow.onload = async () => {\n    const { inputs, labels } = await getInputs();\n    // console.log([inputs,labels])\n\n    //将加载的图片素材可视化\n    const surface = tfvis.visor().surface({ name: '输入示例', styles: { height: 250 } });\n    inputs.forEach(img => {\n        surface.drawArea.appendChild(img);\n    });\n};\n```\n\n- 可视化训练图片：\n![可视化训练图片](/images/ai/64.png)\n\n## 加载预训练好的模型Mobilenet\n```javascript\n//加载预训练好的模型Mobilenet\nconst mobilenet = await tf.loadLayersModel(MOBILENET_MODEL_PATH);\n\n//mobilenet的方法，给出其神经网络的概览\nmobilenet.summary();\n```\n\n\n![mobilenet模型概览](/images/ai/65.png)\n\n\n\n## 定义截断模型\n```javascript\n//获取中间层\nconst layer = mobilenet.getLayer('conv_pw_13_relu');\n\n//定义一个截断模型truncatedMobilenet\nconst truncatedMobilenet = tf.model({\n    inputs: mobilenet.inputs,\n    outputs: layer.output\n});\n```\n\n## 定义双层的迁移模型\n```javascript\n\n//定义一个模型\nconst model = tf.sequential();\n\n//添加一个flatten层（将截断模型提取的高维特征提取成一维向量，这一层没有参数，起转换作用\nmodel.add(tf.layers.flatten({\n    inputShape: layer.outputShape.slice(1)\n}));\n\n//添加一个全链接层：用于训练我们的商标图片\nmodel.add(tf.layers.dense({\n    units: 10,\n    activation: 'relu'\n}));\n\n//添加一个全链接层：用于做多分类\nmodel.add(tf.layers.dense({\n    units: NUM_CLASSES,\n    activation: 'softmax'\n}));\n\n//设置损失函数：分类交叉熵损失函数，优化器为adam\nmodel.compile({ loss: 'categoricalCrossentropy', optimizer: tf.train.adam() });\n\n```\n\n## 先用截断模型训练数据，转为可以用于迁移模型的数据\n```javascript\n//训练数据 先经过截断模型，转为可以用于迁移模型的数据\nconst { xs, ys } = tf.tidy(() => {\n    const xs = tf.concat(inputs.map(imgEl => truncatedMobilenet.predict(img2x(imgEl))));\n    const ys = tf.tensor(labels);\n    return { xs, ys };\n});\n```\n\n## 训练迁移模型\n```javascript\n//训练迁移模型\nawait model.fit(xs, ys, {\n    epochs: 20,\n    callbacks: tfvis.show.fitCallbacks(\n        { name: '训练效果' },\n        ['loss'],\n        { callbacks: ['onEpochEnd'] }\n    )\n});\n```\n\n![迁移模型训练效率高](/images/ai/66.png)\n\n## 预测\n```javascript\nwindow.predict = async (file) => {\n    const img = await file2img(file);\n    document.body.appendChild(img);\n    const pred = tf.tidy(() => {\n        const x = img2x(img);\n        const input = truncatedMobilenet.predict(x);\n        return model.predict(input);\n    });\n\n    const index = pred.argMax(1).dataSync()[0];\n    setTimeout(() => {\n        alert(`预测结果：${BRAND_CLASSES[index]}`);\n    }, 0);\n};\n```\n\n\n![预测效果](/images/ai/002.gif)\n\n## 模型的保存和加载\n\n- 保存：把训练好的模型保存成文件或者 local storage变量\n\n```\nwindow.download = async () => {\n    await model.save('downloads://model');\n};\n```\n- 加载：从文件或者 local storage中加载模型\n- 原因：无需重复训练，便于复用到其他应用中\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_12_transfer_learning","published":1,"updated":"2021-01-22T10:02:03.409Z","_id":"ckir88igq002wc8y6o3usfy37","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"迁移学习\"><a href=\"#迁移学习\" class=\"headerlink\" title=\"迁移学习\"></a>迁移学习</h2><ul>\n<li><strong>是什么</strong>：把已训练好的模型参数迁移到新的模型来帮助新模型训练</li>\n<li><strong>为什么</strong>：深度学习模型参数多，从头训练成本高</li>\n<li><strong>怎么做</strong>：删除原始模型的最后一层，基于此截断模型的输出训练一个新的（通常相当浅的）模型</li>\n</ul>\n<h2 id=\"加载商标训练数据并可视化\"><a href=\"#加载商标训练数据并可视化\" class=\"headerlink\" title=\"加载商标训练数据并可视化\"></a>加载商标训练数据并可视化</h2><ul>\n<li><p>商标训练素材<br><img src=\"/images/ai/63.png\" alt=\"训练素材\"></p>\n</li>\n<li><p>在本地为素材建立静态http服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写JS脚本加载训练图片及其标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"predict(this.files[0])\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"download()\"</span>&gt;</span>下载模型<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> loadImg =<span class=\"function\">(<span class=\"params\">src</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">    img.crossOrigin = <span class=\"string\">'anonymous'</span></span><br><span class=\"line\">    img.src = src</span><br><span class=\"line\">    img.width = <span class=\"number\">224</span>   <span class=\"comment\">//以mobileNet为截断模型，其接收图片尺寸为224</span></span><br><span class=\"line\">    img.height = <span class=\"number\">224</span></span><br><span class=\"line\">    img.onload=<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>reslove(img)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回Promise</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getInputs = <span class=\"keyword\">async</span>()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loadImgs = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> labels = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">30</span>;i+=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    [<span class=\"string\">'android'</span>,<span class=\"string\">'apple'</span>,<span class=\"string\">'windows'</span>].forEach(<span class=\"function\"><span class=\"params\">label</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> imgP = loadImg(<span class=\"string\">`http://127.0.0.1:8080/brand/train/<span class=\"subst\">$&#123;label&#125;</span>-<span class=\"subst\">$&#123;index&#125;</span>.jpg`</span>)</span><br><span class=\"line\">      loadImgs.push(imgP)</span><br><span class=\"line\">      labels.push([</span><br><span class=\"line\">        label === <span class=\"string\">'android'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">        label === <span class=\"string\">'apple'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">        label === <span class=\"string\">'windows'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputs = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(loadImgs)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123; </span><br><span class=\"line\">    inputs, labels</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// script.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getInputs &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; img2x, file2img &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MOBILENET_MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080/mobilenet/web_model/model.json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> NUM_CLASSES = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> BRAND_CLASSES = [<span class=\"string\">'android'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'windows'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; inputs, labels &#125; = <span class=\"keyword\">await</span> getInputs();</span><br><span class=\"line\">    <span class=\"comment\">// console.log([inputs,labels])</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将加载的图片素材可视化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> surface = tfvis.visor().surface(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'输入示例'</span>, <span class=\"attr\">styles</span>: &#123; <span class=\"attr\">height</span>: <span class=\"number\">250</span> &#125; &#125;);</span><br><span class=\"line\">    inputs.forEach(<span class=\"function\"><span class=\"params\">img</span> =&gt;</span> &#123;</span><br><span class=\"line\">        surface.drawArea.appendChild(img);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化训练图片：<br><img src=\"/images/ai/64.png\" alt=\"可视化训练图片\"></li>\n</ul>\n<h2 id=\"加载预训练好的模型Mobilenet\"><a href=\"#加载预训练好的模型Mobilenet\" class=\"headerlink\" title=\"加载预训练好的模型Mobilenet\"></a>加载预训练好的模型Mobilenet</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加载预训练好的模型Mobilenet</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mobilenet = <span class=\"keyword\">await</span> tf.loadLayersModel(MOBILENET_MODEL_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mobilenet的方法，给出其神经网络的概览</span></span><br><span class=\"line\">mobilenet.summary();</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/65.png\" alt=\"mobilenet模型概览\"></p>\n<h2 id=\"定义截断模型\"><a href=\"#定义截断模型\" class=\"headerlink\" title=\"定义截断模型\"></a>定义截断模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取中间层</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> layer = mobilenet.getLayer(<span class=\"string\">'conv_pw_13_relu'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个截断模型truncatedMobilenet</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> truncatedMobilenet = tf.model(&#123;</span><br><span class=\"line\">    inputs: mobilenet.inputs,</span><br><span class=\"line\">    outputs: layer.output</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义双层的迁移模型\"><a href=\"#定义双层的迁移模型\" class=\"headerlink\" title=\"定义双层的迁移模型\"></a>定义双层的迁移模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个flatten层（将截断模型提取的高维特征提取成一维向量，这一层没有参数，起转换作用</span></span><br><span class=\"line\">model.add(tf.layers.flatten(&#123;</span><br><span class=\"line\">    inputShape: layer.outputShape.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个全链接层：用于训练我们的商标图片</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个全链接层：用于做多分类</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: NUM_CLASSES,</span><br><span class=\"line\">    activation: <span class=\"string\">'softmax'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置损失函数：分类交叉熵损失函数，优化器为adam</span></span><br><span class=\"line\">model.compile(&#123; <span class=\"attr\">loss</span>: <span class=\"string\">'categoricalCrossentropy'</span>, <span class=\"attr\">optimizer</span>: tf.train.adam() &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"先用截断模型训练数据，转为可以用于迁移模型的数据\"><a href=\"#先用截断模型训练数据，转为可以用于迁移模型的数据\" class=\"headerlink\" title=\"先用截断模型训练数据，转为可以用于迁移模型的数据\"></a>先用截断模型训练数据，转为可以用于迁移模型的数据</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练数据 先经过截断模型，转为可以用于迁移模型的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; xs, ys &#125; = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xs = tf.concat(inputs.map(<span class=\"function\"><span class=\"params\">imgEl</span> =&gt;</span> truncatedMobilenet.predict(img2x(imgEl))));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ys = tf.tensor(labels);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; xs, ys &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练迁移模型\"><a href=\"#训练迁移模型\" class=\"headerlink\" title=\"训练迁移模型\"></a>训练迁移模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练迁移模型</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(xs, ys, &#123;</span><br><span class=\"line\">    epochs: <span class=\"number\">20</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/66.png\" alt=\"迁移模型训练效率高\"></p>\n<h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"keyword\">async</span> (file) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">await</span> file2img(file);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> x = img2x(img);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> input = truncatedMobilenet.predict(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.predict(input);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = pred.argMax(<span class=\"number\">1</span>).dataSync()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;BRAND_CLASSES[index]&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/002.gif\" alt=\"预测效果\"></p>\n<h2 id=\"模型的保存和加载\"><a href=\"#模型的保存和加载\" class=\"headerlink\" title=\"模型的保存和加载\"></a>模型的保存和加载</h2><ul>\n<li>保存：把训练好的模型保存成文件或者 local storage变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.download = async () =&gt; &#123;</span><br><span class=\"line\">    await model.save(&apos;downloads://model&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加载：从文件或者 local storage中加载模型</li>\n<li>原因：无需重复训练，便于复用到其他应用中</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"迁移学习\"><a href=\"#迁移学习\" class=\"headerlink\" title=\"迁移学习\"></a>迁移学习</h2><ul>\n<li><strong>是什么</strong>：把已训练好的模型参数迁移到新的模型来帮助新模型训练</li>\n<li><strong>为什么</strong>：深度学习模型参数多，从头训练成本高</li>\n<li><strong>怎么做</strong>：删除原始模型的最后一层，基于此截断模型的输出训练一个新的（通常相当浅的）模型</li>\n</ul>\n<h2 id=\"加载商标训练数据并可视化\"><a href=\"#加载商标训练数据并可视化\" class=\"headerlink\" title=\"加载商标训练数据并可视化\"></a>加载商标训练数据并可视化</h2><ul>\n<li><p>商标训练素材<br><img src=\"/images/ai/63.png\" alt=\"训练素材\"></p>\n</li>\n<li><p>在本地为素材建立静态http服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hs data --cors</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写JS脚本加载训练图片及其标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"predict(this.files[0])\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"download()\"</span>&gt;</span>下载模型<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> loadImg =<span class=\"function\">(<span class=\"params\">src</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">    img.crossOrigin = <span class=\"string\">'anonymous'</span></span><br><span class=\"line\">    img.src = src</span><br><span class=\"line\">    img.width = <span class=\"number\">224</span>   <span class=\"comment\">//以mobileNet为截断模型，其接收图片尺寸为224</span></span><br><span class=\"line\">    img.height = <span class=\"number\">224</span></span><br><span class=\"line\">    img.onload=<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>reslove(img)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回Promise</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getInputs = <span class=\"keyword\">async</span>()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loadImgs = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> labels = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">30</span>;i+=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    [<span class=\"string\">'android'</span>,<span class=\"string\">'apple'</span>,<span class=\"string\">'windows'</span>].forEach(<span class=\"function\"><span class=\"params\">label</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> imgP = loadImg(<span class=\"string\">`http://127.0.0.1:8080/brand/train/<span class=\"subst\">$&#123;label&#125;</span>-<span class=\"subst\">$&#123;index&#125;</span>.jpg`</span>)</span><br><span class=\"line\">      loadImgs.push(imgP)</span><br><span class=\"line\">      labels.push([</span><br><span class=\"line\">        label === <span class=\"string\">'android'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">        label === <span class=\"string\">'apple'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">        label === <span class=\"string\">'windows'</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>,</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputs = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(loadImgs)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>&#123; </span><br><span class=\"line\">    inputs, labels</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// script.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tf <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getInputs &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./data'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; img2x, file2img &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MOBILENET_MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080/mobilenet/web_model/model.json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> NUM_CLASSES = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> BRAND_CLASSES = [<span class=\"string\">'android'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'windows'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; inputs, labels &#125; = <span class=\"keyword\">await</span> getInputs();</span><br><span class=\"line\">    <span class=\"comment\">// console.log([inputs,labels])</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将加载的图片素材可视化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> surface = tfvis.visor().surface(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'输入示例'</span>, <span class=\"attr\">styles</span>: &#123; <span class=\"attr\">height</span>: <span class=\"number\">250</span> &#125; &#125;);</span><br><span class=\"line\">    inputs.forEach(<span class=\"function\"><span class=\"params\">img</span> =&gt;</span> &#123;</span><br><span class=\"line\">        surface.drawArea.appendChild(img);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可视化训练图片：<br><img src=\"/images/ai/64.png\" alt=\"可视化训练图片\"></li>\n</ul>\n<h2 id=\"加载预训练好的模型Mobilenet\"><a href=\"#加载预训练好的模型Mobilenet\" class=\"headerlink\" title=\"加载预训练好的模型Mobilenet\"></a>加载预训练好的模型Mobilenet</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加载预训练好的模型Mobilenet</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mobilenet = <span class=\"keyword\">await</span> tf.loadLayersModel(MOBILENET_MODEL_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mobilenet的方法，给出其神经网络的概览</span></span><br><span class=\"line\">mobilenet.summary();</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/65.png\" alt=\"mobilenet模型概览\"></p>\n<h2 id=\"定义截断模型\"><a href=\"#定义截断模型\" class=\"headerlink\" title=\"定义截断模型\"></a>定义截断模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取中间层</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> layer = mobilenet.getLayer(<span class=\"string\">'conv_pw_13_relu'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个截断模型truncatedMobilenet</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> truncatedMobilenet = tf.model(&#123;</span><br><span class=\"line\">    inputs: mobilenet.inputs,</span><br><span class=\"line\">    outputs: layer.output</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义双层的迁移模型\"><a href=\"#定义双层的迁移模型\" class=\"headerlink\" title=\"定义双层的迁移模型\"></a>定义双层的迁移模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个模型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> model = tf.sequential();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个flatten层（将截断模型提取的高维特征提取成一维向量，这一层没有参数，起转换作用</span></span><br><span class=\"line\">model.add(tf.layers.flatten(&#123;</span><br><span class=\"line\">    inputShape: layer.outputShape.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个全链接层：用于训练我们的商标图片</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: <span class=\"number\">10</span>,</span><br><span class=\"line\">    activation: <span class=\"string\">'relu'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加一个全链接层：用于做多分类</span></span><br><span class=\"line\">model.add(tf.layers.dense(&#123;</span><br><span class=\"line\">    units: NUM_CLASSES,</span><br><span class=\"line\">    activation: <span class=\"string\">'softmax'</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置损失函数：分类交叉熵损失函数，优化器为adam</span></span><br><span class=\"line\">model.compile(&#123; <span class=\"attr\">loss</span>: <span class=\"string\">'categoricalCrossentropy'</span>, <span class=\"attr\">optimizer</span>: tf.train.adam() &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"先用截断模型训练数据，转为可以用于迁移模型的数据\"><a href=\"#先用截断模型训练数据，转为可以用于迁移模型的数据\" class=\"headerlink\" title=\"先用截断模型训练数据，转为可以用于迁移模型的数据\"></a>先用截断模型训练数据，转为可以用于迁移模型的数据</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练数据 先经过截断模型，转为可以用于迁移模型的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; xs, ys &#125; = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xs = tf.concat(inputs.map(<span class=\"function\"><span class=\"params\">imgEl</span> =&gt;</span> truncatedMobilenet.predict(img2x(imgEl))));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ys = tf.tensor(labels);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; xs, ys &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练迁移模型\"><a href=\"#训练迁移模型\" class=\"headerlink\" title=\"训练迁移模型\"></a>训练迁移模型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//训练迁移模型</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> model.fit(xs, ys, &#123;</span><br><span class=\"line\">    epochs: <span class=\"number\">20</span>,</span><br><span class=\"line\">    callbacks: tfvis.show.fitCallbacks(</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">'训练效果'</span> &#125;,</span><br><span class=\"line\">        [<span class=\"string\">'loss'</span>],</span><br><span class=\"line\">        &#123; <span class=\"attr\">callbacks</span>: [<span class=\"string\">'onEpochEnd'</span>] &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/66.png\" alt=\"迁移模型训练效率高\"></p>\n<h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.predict = <span class=\"keyword\">async</span> (file) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">await</span> file2img(file);</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pred = tf.tidy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> x = img2x(img);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> input = truncatedMobilenet.predict(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> model.predict(input);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = pred.argMax(<span class=\"number\">1</span>).dataSync()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">`预测结果：<span class=\"subst\">$&#123;BRAND_CLASSES[index]&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ai/002.gif\" alt=\"预测效果\"></p>\n<h2 id=\"模型的保存和加载\"><a href=\"#模型的保存和加载\" class=\"headerlink\" title=\"模型的保存和加载\"></a>模型的保存和加载</h2><ul>\n<li>保存：把训练好的模型保存成文件或者 local storage变量</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.download = async () =&gt; &#123;</span><br><span class=\"line\">    await model.save(&apos;downloads://model&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加载：从文件或者 local storage中加载模型</li>\n<li>原因：无需重复训练，便于复用到其他应用中</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"【ML14】声控轮播图 - 语音识别迁移学习","date":"2020-04-28T16:00:00.000Z","description":"Javascript玩转机器学习14","toc":1,"top":0,"_content":"## 在浏览器中收集中文语音训练数据\n- html\n\n```html\n<script src=\"script.js\"></script>\n<button onclick=\"collect(this)\">上一张</button>\n<button onclick=\"collect(this)\">下一张</button>\n<button onclick=\"collect(this)\">背景噪音</button>\n<button onclick=\"save()\">保存</button>\n<pre id=\"count\"></pre>\n<button onclick=\"train()\">训练</button>\n<br><br>\n监听开关：<input type=\"checkbox\" onchange=\"toggle(this.checked)\">\n```\n\n- js\n```javascript\nimport * as speechCommands from '@tensorflow-models/speech-commands';\nimport * as tfvis from '@tensorflow/tfjs-vis';\n\nconst MODEL_PATH = 'http://127.0.0.1:8080';\nlet transferRecognizer;\n\nwindow.onload = async () => {\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',  //浏览器的傅里叶变换(将声音转为声谱数据\n        null,\n        MODEL_PATH + '/speech/model.json',\n        MODEL_PATH + '/speech/metadata.json'\n    );\n    await recognizer.ensureModelLoaded();\n\n    //使用createTransfer接口创建迁移模型\n    transferRecognizer = recognizer.createTransfer('轮播图');\n};\n\nwindow.collect = async (btn) => {\n    btn.disabled = true;\n    const label = btn.innerText;\n    //用collectExample接口收集语音数据，传入语音命令名称，背景音名称是固定的_background_noise_\n    await transferRecognizer.collectExample(\n        label === '背景噪音' ? '_background_noise_' : label\n    );\n    btn.disabled = false;\n\n    //将收集的数据可视化\n    document.querySelector('#count').innerHTML = JSON.stringify(transferRecognizer.countExamples(), null, 2);\n};\n```\n\n\n\n## 语音训练数据的保存\n```javascript\nwindow.save = () => {\n    //用serializeExamples接口将收集的样例数据序列化\n    const arrayBuffer = transferRecognizer.serializeExamples();\n    const blob = new Blob([arrayBuffer]);\n    const link = document.createElement('a');\n    link.href = window.URL.createObjectURL(blob);\n    link.download = 'data.bin';\n    link.click();\n};\n```\n\n## 加载数据，用speech commands包行迁移学习，训练\n\n```javascript\nwindow.onload = async () => {\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',\n        null,\n        MODEL_PATH + '/speech/model.json',\n        MODEL_PATH + '/speech/metadata.json',\n    );\n    await recognizer.ensureModelLoaded();\n    transferRecognizer = recognizer.createTransfer('轮播图');\n    \n    //用fetch方法从本静态服务器拿到样例数据\n    const res = await fetch(MODEL_PATH + '/slider/data.bin');\n    //转为arrayBuffer格式\n    const arrayBuffer = await res.arrayBuffer();\n    //模型加载样例数据\n    transferRecognizer.loadExamples(arrayBuffer);\n    //模型训练\n    await transferRecognizer.train({ epochs: 30 });\n    console.log('done');\n};\n```\n\n## 轮播图html\n\n- html\n\n```html\n<script src=\"script.js\"></script>\n监听开关：<input type=\"checkbox\" onchange=\"toggle(this.checked)\">\n\n<style>\n    .slider {\n        width: 600px;\n        overflow: hidden;\n        margin: 10px auto;\n    }\n    .slider > div{\n        display: flex;\n        align-items: center;\n    }\n</style>\n<div class=\"slider\">\n    <div>\n        <img src=\"https://cdn.pixabay.com/photo/2019/10/29/15/57/vancouver-4587302__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/10/31/07/14/coffee-4591159__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/01/11/08/landscape-4593909__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/02/21/45/maple-leaf-4597501__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/02/03/13/in-xinjiang-4595560__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/01/22/45/reschensee-4595385__480.jpg\" alt=\"\" width=\"600\">\n    </div>\n</div>\n```\n\n## 监听&控制轮播\n\n```javascript\nawait transferRecognizer.listen(result => {\n    const { scores } = result;\n    const labels = transferRecognizer.wordLabels();\n    const index = scores.indexOf(Math.max(...scores));\n    window.play(labels[index]);\n}, {\n    overlapFactor: 0,\n    probabilityThreshold: 0.5\n});\n\nwindow.play = (label) => {\n    const div = document.querySelector('.slider>div');\n    if (label === '上一张') {\n        if (curIndex === 0) { return; }\n        curIndex -= 1;\n    } else {\n        if (curIndex === document.querySelectorAll('img').length - 1) { return; }\n        curIndex += 1;\n    }\n    div.style.transition = \"transform 1s\"\n    div.style.transform = `translateX(-${100 * curIndex}%)`;\n};\n```\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_14_slider.md","raw":"---\ntitle: 【ML14】声控轮播图 - 语音识别迁移学习\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-04-29\ndescription: Javascript玩转机器学习14\ntoc: 1\ntop: 0\n---\n## 在浏览器中收集中文语音训练数据\n- html\n\n```html\n<script src=\"script.js\"></script>\n<button onclick=\"collect(this)\">上一张</button>\n<button onclick=\"collect(this)\">下一张</button>\n<button onclick=\"collect(this)\">背景噪音</button>\n<button onclick=\"save()\">保存</button>\n<pre id=\"count\"></pre>\n<button onclick=\"train()\">训练</button>\n<br><br>\n监听开关：<input type=\"checkbox\" onchange=\"toggle(this.checked)\">\n```\n\n- js\n```javascript\nimport * as speechCommands from '@tensorflow-models/speech-commands';\nimport * as tfvis from '@tensorflow/tfjs-vis';\n\nconst MODEL_PATH = 'http://127.0.0.1:8080';\nlet transferRecognizer;\n\nwindow.onload = async () => {\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',  //浏览器的傅里叶变换(将声音转为声谱数据\n        null,\n        MODEL_PATH + '/speech/model.json',\n        MODEL_PATH + '/speech/metadata.json'\n    );\n    await recognizer.ensureModelLoaded();\n\n    //使用createTransfer接口创建迁移模型\n    transferRecognizer = recognizer.createTransfer('轮播图');\n};\n\nwindow.collect = async (btn) => {\n    btn.disabled = true;\n    const label = btn.innerText;\n    //用collectExample接口收集语音数据，传入语音命令名称，背景音名称是固定的_background_noise_\n    await transferRecognizer.collectExample(\n        label === '背景噪音' ? '_background_noise_' : label\n    );\n    btn.disabled = false;\n\n    //将收集的数据可视化\n    document.querySelector('#count').innerHTML = JSON.stringify(transferRecognizer.countExamples(), null, 2);\n};\n```\n\n\n\n## 语音训练数据的保存\n```javascript\nwindow.save = () => {\n    //用serializeExamples接口将收集的样例数据序列化\n    const arrayBuffer = transferRecognizer.serializeExamples();\n    const blob = new Blob([arrayBuffer]);\n    const link = document.createElement('a');\n    link.href = window.URL.createObjectURL(blob);\n    link.download = 'data.bin';\n    link.click();\n};\n```\n\n## 加载数据，用speech commands包行迁移学习，训练\n\n```javascript\nwindow.onload = async () => {\n    const recognizer = speechCommands.create(\n        'BROWSER_FFT',\n        null,\n        MODEL_PATH + '/speech/model.json',\n        MODEL_PATH + '/speech/metadata.json',\n    );\n    await recognizer.ensureModelLoaded();\n    transferRecognizer = recognizer.createTransfer('轮播图');\n    \n    //用fetch方法从本静态服务器拿到样例数据\n    const res = await fetch(MODEL_PATH + '/slider/data.bin');\n    //转为arrayBuffer格式\n    const arrayBuffer = await res.arrayBuffer();\n    //模型加载样例数据\n    transferRecognizer.loadExamples(arrayBuffer);\n    //模型训练\n    await transferRecognizer.train({ epochs: 30 });\n    console.log('done');\n};\n```\n\n## 轮播图html\n\n- html\n\n```html\n<script src=\"script.js\"></script>\n监听开关：<input type=\"checkbox\" onchange=\"toggle(this.checked)\">\n\n<style>\n    .slider {\n        width: 600px;\n        overflow: hidden;\n        margin: 10px auto;\n    }\n    .slider > div{\n        display: flex;\n        align-items: center;\n    }\n</style>\n<div class=\"slider\">\n    <div>\n        <img src=\"https://cdn.pixabay.com/photo/2019/10/29/15/57/vancouver-4587302__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/10/31/07/14/coffee-4591159__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/01/11/08/landscape-4593909__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/02/21/45/maple-leaf-4597501__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/02/03/13/in-xinjiang-4595560__480.jpg\" alt=\"\" width=\"600\">\n        <img src=\"https://cdn.pixabay.com/photo/2019/11/01/22/45/reschensee-4595385__480.jpg\" alt=\"\" width=\"600\">\n    </div>\n</div>\n```\n\n## 监听&控制轮播\n\n```javascript\nawait transferRecognizer.listen(result => {\n    const { scores } = result;\n    const labels = transferRecognizer.wordLabels();\n    const index = scores.indexOf(Math.max(...scores));\n    window.play(labels[index]);\n}, {\n    overlapFactor: 0,\n    probabilityThreshold: 0.5\n});\n\nwindow.play = (label) => {\n    const div = document.querySelector('.slider>div');\n    if (label === '上一张') {\n        if (curIndex === 0) { return; }\n        curIndex -= 1;\n    } else {\n        if (curIndex === document.querySelectorAll('img').length - 1) { return; }\n        curIndex += 1;\n    }\n    div.style.transition = \"transform 1s\"\n    div.style.transform = `translateX(-${100 * curIndex}%)`;\n};\n```\n\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_14_slider","published":1,"updated":"2021-01-22T10:02:15.418Z","_id":"ckir88igr002zc8y62xqp0lds","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"在浏览器中收集中文语音训练数据\"><a href=\"#在浏览器中收集中文语音训练数据\" class=\"headerlink\" title=\"在浏览器中收集中文语音训练数据\"></a>在浏览器中收集中文语音训练数据</h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>上一张<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>下一张<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>背景噪音<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"save()\"</span>&gt;</span>保存<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"train()\"</span>&gt;</span>训练<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">监听开关：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked)\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>js<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> speechCommands <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow-models/speech-commands'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> transferRecognizer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,  <span class=\"comment\">//浏览器的傅里叶变换(将声音转为声谱数据</span></span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/metadata.json'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用createTransfer接口创建迁移模型</span></span><br><span class=\"line\">    transferRecognizer = recognizer.createTransfer(<span class=\"string\">'轮播图'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.collect = <span class=\"keyword\">async</span> (btn) =&gt; &#123;</span><br><span class=\"line\">    btn.disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> label = btn.innerText;</span><br><span class=\"line\">    <span class=\"comment\">//用collectExample接口收集语音数据，传入语音命令名称，背景音名称是固定的_background_noise_</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> transferRecognizer.collectExample(</span><br><span class=\"line\">        label === <span class=\"string\">'背景噪音'</span> ? <span class=\"string\">'_background_noise_'</span> : label</span><br><span class=\"line\">    );</span><br><span class=\"line\">    btn.disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将收集的数据可视化</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#count'</span>).innerHTML = <span class=\"built_in\">JSON</span>.stringify(transferRecognizer.countExamples(), <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"语音训练数据的保存\"><a href=\"#语音训练数据的保存\" class=\"headerlink\" title=\"语音训练数据的保存\"></a>语音训练数据的保存</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.save = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用serializeExamples接口将收集的样例数据序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrayBuffer = transferRecognizer.serializeExamples();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob([arrayBuffer]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">    link.download = <span class=\"string\">'data.bin'</span>;</span><br><span class=\"line\">    link.click();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载数据，用speech-commands包行迁移学习，训练\"><a href=\"#加载数据，用speech-commands包行迁移学习，训练\" class=\"headerlink\" title=\"加载数据，用speech commands包行迁移学习，训练\"></a>加载数据，用speech commands包行迁移学习，训练</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,</span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/metadata.json'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\">    transferRecognizer = recognizer.createTransfer(<span class=\"string\">'轮播图'</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//用fetch方法从本静态服务器拿到样例数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> fetch(MODEL_PATH + <span class=\"string\">'/slider/data.bin'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//转为arrayBuffer格式</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrayBuffer = <span class=\"keyword\">await</span> res.arrayBuffer();</span><br><span class=\"line\">    <span class=\"comment\">//模型加载样例数据</span></span><br><span class=\"line\">    transferRecognizer.loadExamples(arrayBuffer);</span><br><span class=\"line\">    <span class=\"comment\">//模型训练</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> transferRecognizer.train(&#123; <span class=\"attr\">epochs</span>: <span class=\"number\">30</span> &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"轮播图html\"><a href=\"#轮播图html\" class=\"headerlink\" title=\"轮播图html\"></a>轮播图html</h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">监听开关：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked)\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.slider</span> &#123;</span></span><br><span class=\"line\">        width: 600px;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">        margin: 10px auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.slider</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span></span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        align-items: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slider\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/10/29/15/57/vancouver-4587302__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/10/31/07/14/coffee-4591159__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/01/11/08/landscape-4593909__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/02/21/45/maple-leaf-4597501__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/02/03/13/in-xinjiang-4595560__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/01/22/45/reschensee-4595385__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"监听-amp-控制轮播\"><a href=\"#监听-amp-控制轮播\" class=\"headerlink\" title=\"监听&amp;控制轮播\"></a>监听&amp;控制轮播</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> transferRecognizer.listen(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; scores &#125; = result;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> labels = transferRecognizer.wordLabels();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = scores.indexOf(<span class=\"built_in\">Math</span>.max(...scores));</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.play(labels[index]);</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    overlapFactor: <span class=\"number\">0</span>,</span><br><span class=\"line\">    probabilityThreshold: <span class=\"number\">0.5</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.play = <span class=\"function\">(<span class=\"params\">label</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.slider&gt;div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (label === <span class=\"string\">'上一张'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curIndex === <span class=\"number\">0</span>) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">        curIndex -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curIndex === <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'img'</span>).length - <span class=\"number\">1</span>) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">        curIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    div.style.transition = <span class=\"string\">\"transform 1s\"</span></span><br><span class=\"line\">    div.style.transform = <span class=\"string\">`translateX(-<span class=\"subst\">$&#123;<span class=\"number\">100</span> * curIndex&#125;</span>%)`</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在浏览器中收集中文语音训练数据\"><a href=\"#在浏览器中收集中文语音训练数据\" class=\"headerlink\" title=\"在浏览器中收集中文语音训练数据\"></a>在浏览器中收集中文语音训练数据</h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>上一张<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>下一张<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"collect(this)\"</span>&gt;</span>背景噪音<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"save()\"</span>&gt;</span>保存<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span> <span class=\"attr\">id</span>=<span class=\"string\">\"count\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"train()\"</span>&gt;</span>训练<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">监听开关：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked)\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>js<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> speechCommands <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow-models/speech-commands'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tfvis <span class=\"keyword\">from</span> <span class=\"string\">'@tensorflow/tfjs-vis'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MODEL_PATH = <span class=\"string\">'http://127.0.0.1:8080'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> transferRecognizer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,  <span class=\"comment\">//浏览器的傅里叶变换(将声音转为声谱数据</span></span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/metadata.json'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用createTransfer接口创建迁移模型</span></span><br><span class=\"line\">    transferRecognizer = recognizer.createTransfer(<span class=\"string\">'轮播图'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.collect = <span class=\"keyword\">async</span> (btn) =&gt; &#123;</span><br><span class=\"line\">    btn.disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> label = btn.innerText;</span><br><span class=\"line\">    <span class=\"comment\">//用collectExample接口收集语音数据，传入语音命令名称，背景音名称是固定的_background_noise_</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> transferRecognizer.collectExample(</span><br><span class=\"line\">        label === <span class=\"string\">'背景噪音'</span> ? <span class=\"string\">'_background_noise_'</span> : label</span><br><span class=\"line\">    );</span><br><span class=\"line\">    btn.disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将收集的数据可视化</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#count'</span>).innerHTML = <span class=\"built_in\">JSON</span>.stringify(transferRecognizer.countExamples(), <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"语音训练数据的保存\"><a href=\"#语音训练数据的保存\" class=\"headerlink\" title=\"语音训练数据的保存\"></a>语音训练数据的保存</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.save = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用serializeExamples接口将收集的样例数据序列化</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrayBuffer = transferRecognizer.serializeExamples();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob([arrayBuffer]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">    link.download = <span class=\"string\">'data.bin'</span>;</span><br><span class=\"line\">    link.click();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载数据，用speech-commands包行迁移学习，训练\"><a href=\"#加载数据，用speech-commands包行迁移学习，训练\" class=\"headerlink\" title=\"加载数据，用speech commands包行迁移学习，训练\"></a>加载数据，用speech commands包行迁移学习，训练</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> recognizer = speechCommands.create(</span><br><span class=\"line\">        <span class=\"string\">'BROWSER_FFT'</span>,</span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/model.json'</span>,</span><br><span class=\"line\">        MODEL_PATH + <span class=\"string\">'/speech/metadata.json'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">await</span> recognizer.ensureModelLoaded();</span><br><span class=\"line\">    transferRecognizer = recognizer.createTransfer(<span class=\"string\">'轮播图'</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//用fetch方法从本静态服务器拿到样例数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> fetch(MODEL_PATH + <span class=\"string\">'/slider/data.bin'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//转为arrayBuffer格式</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrayBuffer = <span class=\"keyword\">await</span> res.arrayBuffer();</span><br><span class=\"line\">    <span class=\"comment\">//模型加载样例数据</span></span><br><span class=\"line\">    transferRecognizer.loadExamples(arrayBuffer);</span><br><span class=\"line\">    <span class=\"comment\">//模型训练</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> transferRecognizer.train(&#123; <span class=\"attr\">epochs</span>: <span class=\"number\">30</span> &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"轮播图html\"><a href=\"#轮播图html\" class=\"headerlink\" title=\"轮播图html\"></a>轮播图html</h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">监听开关：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"toggle(this.checked)\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.slider</span> &#123;</span></span><br><span class=\"line\">        width: 600px;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">        margin: 10px auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.slider</span> &gt; <span class=\"selector-tag\">div</span>&#123;</span></span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        align-items: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slider\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/10/29/15/57/vancouver-4587302__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/10/31/07/14/coffee-4591159__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/01/11/08/landscape-4593909__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/02/21/45/maple-leaf-4597501__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/02/03/13/in-xinjiang-4595560__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.pixabay.com/photo/2019/11/01/22/45/reschensee-4595385__480.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"监听-amp-控制轮播\"><a href=\"#监听-amp-控制轮播\" class=\"headerlink\" title=\"监听&amp;控制轮播\"></a>监听&amp;控制轮播</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> transferRecognizer.listen(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; scores &#125; = result;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> labels = transferRecognizer.wordLabels();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = scores.indexOf(<span class=\"built_in\">Math</span>.max(...scores));</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.play(labels[index]);</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    overlapFactor: <span class=\"number\">0</span>,</span><br><span class=\"line\">    probabilityThreshold: <span class=\"number\">0.5</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.play = <span class=\"function\">(<span class=\"params\">label</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.slider&gt;div'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (label === <span class=\"string\">'上一张'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curIndex === <span class=\"number\">0</span>) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">        curIndex -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curIndex === <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'img'</span>).length - <span class=\"number\">1</span>) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">        curIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    div.style.transition = <span class=\"string\">\"transform 1s\"</span></span><br><span class=\"line\">    div.style.transform = <span class=\"string\">`translateX(-<span class=\"subst\">$&#123;<span class=\"number\">100</span> * curIndex&#125;</span>%)`</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"Grunt 学习总结","date":"2019-05-31T16:00:00.000Z","description":"自动化 压缩（minification）、编译、单元测试、linting等","toc":1,"top":0,"_content":"\n# 是什么 & 用途 & 场景\ngrunt本身是一种自动化任务处理工具，它是一个工具框架，有很多插件扩展它的功能。\n\n通过丰富的grunt插件可以实现以下功能：\n- jshint代码检查\n- 代码合并\n- 代码压缩--js/css/html都可以\n- SASS/LESS编译css\n- watch监听---文件发生改变自动执行任务\n\n# 相关\n- [官方github](https://github.com/gruntjs)\n- [官方网址（文档）](https://gruntjs.com/)\n- [中文文档](http://www.gruntjs.net/)\n- [插件列表](https://gruntjs.com/plugins)\n\n# 环境\ngrunt依赖Nodejs和npm环境\n\n使用npm安装全局grunt-cli命令行工具：`npm install -g grunt-cli`\n\n# demo\n1. 需求\n\n假设你手上有一个项目，叫gruntlearn，项目文件中你的源码存储在src目录下，包含四个模块的js文件，还没编译的scss文件，html文件，图片文件：\n\n![demo src 目录结构](/images/grunt/grunt01.png)\n\n现在你想用grunt，自动给你的源代码执行几个任务：\n- 将images/html和复制到 发布文件夹build下\n- 用jshint检查js语法\n- 合并四个js文件（分别合并，因为a,b用于不同的页面）\n- 编译scss文件\n- 压缩合并后的js文件，存储到build下\n- 调试：新建一个本地服务器监听文件改变自动刷新HTML文件\n\n2. 搭建环境\n\n- 在命令行里打开到gruntlearn的目录下，执行`npm init`\n- 安装 grunt 和 grunt-cli\n```bash\nnpm install grunt-cli --global\nnpm install grunt --save-dev\n```\n\n- 在项目中安装grunt和相关插件,根据第1步中的需求，需要用到一下插件：\n    - 复制文件：grunt-contrib-copy\n    - 合并文件：grunt-contrib-concat\n    - 语法检查：grunt-contrib-jshint\n    - Scss 编译：grunt-contrib-sass\n    - 压缩文件：grunt-contrib-uglify\n    - 监听文件变动：grunt-contrib-watch\n    - 建立本地服务器：grunt-contrib-connect\n- 安装插件：\n```bash\nnpm install --save-dev grunt-contrib-copy grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect\n```\n- 创建gruntfile.js文件，代码结构：\n![gruntfile.js 代码结构](/images/grunt/grunt02.png)\n\n- 根据demo需求配置gruntfile：\n```js\n//wrapper函数\nmodule.exports = function(grunt) {\n\n    //你可以像普通的js文件一样添加自己的代码\n    var sassStyle = 'expanded';\n\n    //1.配置任务 tasks--根据插件的文档来定义任务\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        //将html和图片从src复制到build\n        copy: { //task\n            html: { //target\n                files: [\n                    { expand: true, cwd: './src/html', src: '*', dest: './build/html/' }\n                ]\n            },\n            images: { //target\n                files: [\n                    { expand: true, cwd: './src/images', src: '*', dest: './build/images/' }\n                ]\n            }\n        },\n        //合并js\n        concat: {\n            /* options: {\n                separator: ';',//合并分隔符\n            }, */\n            dist: {\n                files: { //文件路径\n                    './src/js/a.all.js': ['./src/js/a.1.js', './src/js/a.2.js'],\n                    './src/js/b.all.js': ['./src/js/b.1.js', './src/js/b.2.js']\n                }\n            },\n        },\n        //task:编译sass\n        sass: {\n            output: { //target\n                options: { //target options\n                    style: sassStyle\n                },\n                files: {\n                    './build/css/style.css': './src/scss/style.scss' //'目标文件':'源文件'\n                }\n            }\n        },\n        //代码检查\n        jshint: {\n            all: ['./src/js/a.all.js', './src/js/b.all.js']\n        },\n        //压缩\n        uglify: {\n            uglifyjs: {\n                files: {\n                    './build/js/a.min.js': ['./src/js/a.all.js'],\n                    './build/js/b.min.js': ['./src/js/b.all.js']\n                }\n            }\n        },\n        //监听\n        watch: {\n            scripts: {\n                files: ['./src/js/a.1.js', './src/js/a.2.js', './src/js/b.1.js', '/src/js/b.2.js'],\n                tasks: ['concat', 'jshint', 'uglify']\n            },\n            sass: {\n                files: ['./src/scss/style.scss'],\n                tasks: ['sass']\n            },\n            livereload: {\n                options: {\n                    liverelload: '<%= connect.options.livereload %>'\n                },\n                files: [\n                    './src/html/index.html',\n                    './src/scss/style.scss',\n                    './src/js/a.1.js',\n                    './src/js/a.2.js',\n                    './src/js/b.1.js',\n                    './src/js/b.2.js'\n                ]\n            }\n        },\n        connect: {\n            options: {\n                port: 9000,\n                open: true,\n                livareload: 35729,\n                //change this to '0.0.0.0' to access the server from outside\n                hostname: 'localhost'\n            },\n            server: {\n                options: {\n                    port: 9001,\n                    base: './'\n                }\n            }\n        }\n    });\n\n    //2.加载插件\n    grunt.loadNpmTasks('grunt-contrib-copy');\n    grunt.loadNpmTasks('grunt-contrib-concat');\n    grunt.loadNpmTasks('grunt-contrib-sass');\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-connect');\n\n    //3.注册任务\n    grunt.registerTask('copyhtml', ['copy:html']); //可以用task：target的方法分别注册\n    grunt.registerTask('concatjs', ['concat']); //也可以只用task名称注册，默认执行task下全部target\n    grunt.registerTask('outputcss', ['sass']);\n    grunt.registerTask('watchit', ['concat', 'sass', 'jshint', 'uglify', 'connect', 'watch']);\n    grunt.registerTask('default', ['copy', 'concat', 'sass', 'jshint', 'uglify']);\n}\n```\n\n- 执行定义好的命令`grunt default`：\n![执行命令](/images/grunt/grunt03.png)\n\n- 执行后的项目目录结构：\n![执行后目录结构](/images/grunt/grunt04.png)\n","source":"_posts/grunt.md","raw":"---\ntitle: Grunt 学习总结\ncategories:\n    - 10技术 | 前端工具与工程化 # 一级分类\ntags:\ndate: 2019-06-01\ndescription: 自动化 压缩（minification）、编译、单元测试、linting等\ntoc: 1\ntop: 0\n---\n\n# 是什么 & 用途 & 场景\ngrunt本身是一种自动化任务处理工具，它是一个工具框架，有很多插件扩展它的功能。\n\n通过丰富的grunt插件可以实现以下功能：\n- jshint代码检查\n- 代码合并\n- 代码压缩--js/css/html都可以\n- SASS/LESS编译css\n- watch监听---文件发生改变自动执行任务\n\n# 相关\n- [官方github](https://github.com/gruntjs)\n- [官方网址（文档）](https://gruntjs.com/)\n- [中文文档](http://www.gruntjs.net/)\n- [插件列表](https://gruntjs.com/plugins)\n\n# 环境\ngrunt依赖Nodejs和npm环境\n\n使用npm安装全局grunt-cli命令行工具：`npm install -g grunt-cli`\n\n# demo\n1. 需求\n\n假设你手上有一个项目，叫gruntlearn，项目文件中你的源码存储在src目录下，包含四个模块的js文件，还没编译的scss文件，html文件，图片文件：\n\n![demo src 目录结构](/images/grunt/grunt01.png)\n\n现在你想用grunt，自动给你的源代码执行几个任务：\n- 将images/html和复制到 发布文件夹build下\n- 用jshint检查js语法\n- 合并四个js文件（分别合并，因为a,b用于不同的页面）\n- 编译scss文件\n- 压缩合并后的js文件，存储到build下\n- 调试：新建一个本地服务器监听文件改变自动刷新HTML文件\n\n2. 搭建环境\n\n- 在命令行里打开到gruntlearn的目录下，执行`npm init`\n- 安装 grunt 和 grunt-cli\n```bash\nnpm install grunt-cli --global\nnpm install grunt --save-dev\n```\n\n- 在项目中安装grunt和相关插件,根据第1步中的需求，需要用到一下插件：\n    - 复制文件：grunt-contrib-copy\n    - 合并文件：grunt-contrib-concat\n    - 语法检查：grunt-contrib-jshint\n    - Scss 编译：grunt-contrib-sass\n    - 压缩文件：grunt-contrib-uglify\n    - 监听文件变动：grunt-contrib-watch\n    - 建立本地服务器：grunt-contrib-connect\n- 安装插件：\n```bash\nnpm install --save-dev grunt-contrib-copy grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect\n```\n- 创建gruntfile.js文件，代码结构：\n![gruntfile.js 代码结构](/images/grunt/grunt02.png)\n\n- 根据demo需求配置gruntfile：\n```js\n//wrapper函数\nmodule.exports = function(grunt) {\n\n    //你可以像普通的js文件一样添加自己的代码\n    var sassStyle = 'expanded';\n\n    //1.配置任务 tasks--根据插件的文档来定义任务\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        //将html和图片从src复制到build\n        copy: { //task\n            html: { //target\n                files: [\n                    { expand: true, cwd: './src/html', src: '*', dest: './build/html/' }\n                ]\n            },\n            images: { //target\n                files: [\n                    { expand: true, cwd: './src/images', src: '*', dest: './build/images/' }\n                ]\n            }\n        },\n        //合并js\n        concat: {\n            /* options: {\n                separator: ';',//合并分隔符\n            }, */\n            dist: {\n                files: { //文件路径\n                    './src/js/a.all.js': ['./src/js/a.1.js', './src/js/a.2.js'],\n                    './src/js/b.all.js': ['./src/js/b.1.js', './src/js/b.2.js']\n                }\n            },\n        },\n        //task:编译sass\n        sass: {\n            output: { //target\n                options: { //target options\n                    style: sassStyle\n                },\n                files: {\n                    './build/css/style.css': './src/scss/style.scss' //'目标文件':'源文件'\n                }\n            }\n        },\n        //代码检查\n        jshint: {\n            all: ['./src/js/a.all.js', './src/js/b.all.js']\n        },\n        //压缩\n        uglify: {\n            uglifyjs: {\n                files: {\n                    './build/js/a.min.js': ['./src/js/a.all.js'],\n                    './build/js/b.min.js': ['./src/js/b.all.js']\n                }\n            }\n        },\n        //监听\n        watch: {\n            scripts: {\n                files: ['./src/js/a.1.js', './src/js/a.2.js', './src/js/b.1.js', '/src/js/b.2.js'],\n                tasks: ['concat', 'jshint', 'uglify']\n            },\n            sass: {\n                files: ['./src/scss/style.scss'],\n                tasks: ['sass']\n            },\n            livereload: {\n                options: {\n                    liverelload: '<%= connect.options.livereload %>'\n                },\n                files: [\n                    './src/html/index.html',\n                    './src/scss/style.scss',\n                    './src/js/a.1.js',\n                    './src/js/a.2.js',\n                    './src/js/b.1.js',\n                    './src/js/b.2.js'\n                ]\n            }\n        },\n        connect: {\n            options: {\n                port: 9000,\n                open: true,\n                livareload: 35729,\n                //change this to '0.0.0.0' to access the server from outside\n                hostname: 'localhost'\n            },\n            server: {\n                options: {\n                    port: 9001,\n                    base: './'\n                }\n            }\n        }\n    });\n\n    //2.加载插件\n    grunt.loadNpmTasks('grunt-contrib-copy');\n    grunt.loadNpmTasks('grunt-contrib-concat');\n    grunt.loadNpmTasks('grunt-contrib-sass');\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-connect');\n\n    //3.注册任务\n    grunt.registerTask('copyhtml', ['copy:html']); //可以用task：target的方法分别注册\n    grunt.registerTask('concatjs', ['concat']); //也可以只用task名称注册，默认执行task下全部target\n    grunt.registerTask('outputcss', ['sass']);\n    grunt.registerTask('watchit', ['concat', 'sass', 'jshint', 'uglify', 'connect', 'watch']);\n    grunt.registerTask('default', ['copy', 'concat', 'sass', 'jshint', 'uglify']);\n}\n```\n\n- 执行定义好的命令`grunt default`：\n![执行命令](/images/grunt/grunt03.png)\n\n- 执行后的项目目录结构：\n![执行后目录结构](/images/grunt/grunt04.png)\n","slug":"grunt","published":1,"updated":"2020-09-03T07:00:54.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88igs0030c8y612t6unlg","content":"<h1 id=\"是什么-amp-用途-amp-场景\"><a href=\"#是什么-amp-用途-amp-场景\" class=\"headerlink\" title=\"是什么 &amp; 用途 &amp; 场景\"></a>是什么 &amp; 用途 &amp; 场景</h1><p>grunt本身是一种自动化任务处理工具，它是一个工具框架，有很多插件扩展它的功能。</p>\n<p>通过丰富的grunt插件可以实现以下功能：</p>\n<ul>\n<li>jshint代码检查</li>\n<li>代码合并</li>\n<li>代码压缩–js/css/html都可以</li>\n<li>SASS/LESS编译css</li>\n<li>watch监听—文件发生改变自动执行任务</li>\n</ul>\n<h1 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h1><ul>\n<li><a href=\"https://github.com/gruntjs\" target=\"_blank\" rel=\"noopener\">官方github</a></li>\n<li><a href=\"https://gruntjs.com/\" target=\"_blank\" rel=\"noopener\">官方网址（文档）</a></li>\n<li><a href=\"http://www.gruntjs.net/\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n<li><a href=\"https://gruntjs.com/plugins\" target=\"_blank\" rel=\"noopener\">插件列表</a></li>\n</ul>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>grunt依赖Nodejs和npm环境</p>\n<p>使用npm安装全局grunt-cli命令行工具：<code>npm install -g grunt-cli</code></p>\n<h1 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h1><ol>\n<li>需求</li>\n</ol>\n<p>假设你手上有一个项目，叫gruntlearn，项目文件中你的源码存储在src目录下，包含四个模块的js文件，还没编译的scss文件，html文件，图片文件：</p>\n<p><img src=\"/images/grunt/grunt01.png\" alt=\"demo src 目录结构\"></p>\n<p>现在你想用grunt，自动给你的源代码执行几个任务：</p>\n<ul>\n<li>将images/html和复制到 发布文件夹build下</li>\n<li>用jshint检查js语法</li>\n<li>合并四个js文件（分别合并，因为a,b用于不同的页面）</li>\n<li>编译scss文件</li>\n<li>压缩合并后的js文件，存储到build下</li>\n<li>调试：新建一个本地服务器监听文件改变自动刷新HTML文件</li>\n</ul>\n<ol start=\"2\">\n<li>搭建环境</li>\n</ol>\n<ul>\n<li>在命令行里打开到gruntlearn的目录下，执行<code>npm init</code></li>\n<li><p>安装 grunt 和 grunt-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install grunt-cli --global</span><br><span class=\"line\">npm install grunt --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在项目中安装grunt和相关插件,根据第1步中的需求，需要用到一下插件：</p>\n<ul>\n<li>复制文件：grunt-contrib-copy</li>\n<li>合并文件：grunt-contrib-concat</li>\n<li>语法检查：grunt-contrib-jshint</li>\n<li>Scss 编译：grunt-contrib-sass</li>\n<li>压缩文件：grunt-contrib-uglify</li>\n<li>监听文件变动：grunt-contrib-watch</li>\n<li>建立本地服务器：grunt-contrib-connect</li>\n</ul>\n</li>\n<li><p>安装插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev grunt-contrib-copy grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建gruntfile.js文件，代码结构：<br><img src=\"/images/grunt/grunt02.png\" alt=\"gruntfile.js 代码结构\"></p>\n</li>\n<li><p>根据demo需求配置gruntfile：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//wrapper函数</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//你可以像普通的js文件一样添加自己的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sassStyle = <span class=\"string\">'expanded'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.配置任务 tasks--根据插件的文档来定义任务</span></span><br><span class=\"line\">    grunt.initConfig(&#123;</span><br><span class=\"line\">        pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</span><br><span class=\"line\">        <span class=\"comment\">//将html和图片从src复制到build</span></span><br><span class=\"line\">        copy: &#123; <span class=\"comment\">//task</span></span><br><span class=\"line\">            html: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">expand</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cwd</span>: <span class=\"string\">'./src/html'</span>, <span class=\"attr\">src</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">dest</span>: <span class=\"string\">'./build/html/'</span> &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            images: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">expand</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cwd</span>: <span class=\"string\">'./src/images'</span>, <span class=\"attr\">src</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">dest</span>: <span class=\"string\">'./build/images/'</span> &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//合并js</span></span><br><span class=\"line\">        concat: &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* options: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                separator: ';',//合并分隔符</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;, */</span></span><br><span class=\"line\">            dist: &#123;</span><br><span class=\"line\">                files: &#123; <span class=\"comment\">//文件路径</span></span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.all.js'</span>: [<span class=\"string\">'./src/js/a.1.js'</span>, <span class=\"string\">'./src/js/a.2.js'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.all.js'</span>: [<span class=\"string\">'./src/js/b.1.js'</span>, <span class=\"string\">'./src/js/b.2.js'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//task:编译sass</span></span><br><span class=\"line\">        sass: &#123;</span><br><span class=\"line\">            output: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                options: &#123; <span class=\"comment\">//target options</span></span><br><span class=\"line\">                    style: sassStyle</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                files: &#123;</span><br><span class=\"line\">                    <span class=\"string\">'./build/css/style.css'</span>: <span class=\"string\">'./src/scss/style.scss'</span> <span class=\"comment\">//'目标文件':'源文件'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//代码检查</span></span><br><span class=\"line\">        jshint: &#123;</span><br><span class=\"line\">            all: [<span class=\"string\">'./src/js/a.all.js'</span>, <span class=\"string\">'./src/js/b.all.js'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//压缩</span></span><br><span class=\"line\">        uglify: &#123;</span><br><span class=\"line\">            uglifyjs: &#123;</span><br><span class=\"line\">                files: &#123;</span><br><span class=\"line\">                    <span class=\"string\">'./build/js/a.min.js'</span>: [<span class=\"string\">'./src/js/a.all.js'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'./build/js/b.min.js'</span>: [<span class=\"string\">'./src/js/b.all.js'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//监听</span></span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\">            scripts: &#123;</span><br><span class=\"line\">                files: [<span class=\"string\">'./src/js/a.1.js'</span>, <span class=\"string\">'./src/js/a.2.js'</span>, <span class=\"string\">'./src/js/b.1.js'</span>, <span class=\"string\">'/src/js/b.2.js'</span>],</span><br><span class=\"line\">                tasks: [<span class=\"string\">'concat'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            sass: &#123;</span><br><span class=\"line\">                files: [<span class=\"string\">'./src/scss/style.scss'</span>],</span><br><span class=\"line\">                tasks: [<span class=\"string\">'sass'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            livereload: &#123;</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    liverelload: <span class=\"string\">'&lt;%= connect.options.livereload %&gt;'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    <span class=\"string\">'./src/html/index.html'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/scss/style.scss'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.1.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.2.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.1.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.2.js'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        connect: &#123;</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">                port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">                open: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                livareload: <span class=\"number\">35729</span>,</span><br><span class=\"line\">                <span class=\"comment\">//change this to '0.0.0.0' to access the server from outside</span></span><br><span class=\"line\">                hostname: <span class=\"string\">'localhost'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            server: &#123;</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    port: <span class=\"number\">9001</span>,</span><br><span class=\"line\">                    base: <span class=\"string\">'./'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.加载插件</span></span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-copy'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-concat'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-sass'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-jshint'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-connect'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.注册任务</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'copyhtml'</span>, [<span class=\"string\">'copy:html'</span>]); <span class=\"comment\">//可以用task：target的方法分别注册</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'concatjs'</span>, [<span class=\"string\">'concat'</span>]); <span class=\"comment\">//也可以只用task名称注册，默认执行task下全部target</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'outputcss'</span>, [<span class=\"string\">'sass'</span>]);</span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'watchit'</span>, [<span class=\"string\">'concat'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>, <span class=\"string\">'connect'</span>, <span class=\"string\">'watch'</span>]);</span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'copy'</span>, <span class=\"string\">'concat'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行定义好的命令<code>grunt default</code>：<br><img src=\"/images/grunt/grunt03.png\" alt=\"执行命令\"></p>\n</li>\n<li><p>执行后的项目目录结构：<br><img src=\"/images/grunt/grunt04.png\" alt=\"执行后目录结构\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"是什么-amp-用途-amp-场景\"><a href=\"#是什么-amp-用途-amp-场景\" class=\"headerlink\" title=\"是什么 &amp; 用途 &amp; 场景\"></a>是什么 &amp; 用途 &amp; 场景</h1><p>grunt本身是一种自动化任务处理工具，它是一个工具框架，有很多插件扩展它的功能。</p>\n<p>通过丰富的grunt插件可以实现以下功能：</p>\n<ul>\n<li>jshint代码检查</li>\n<li>代码合并</li>\n<li>代码压缩–js/css/html都可以</li>\n<li>SASS/LESS编译css</li>\n<li>watch监听—文件发生改变自动执行任务</li>\n</ul>\n<h1 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h1><ul>\n<li><a href=\"https://github.com/gruntjs\" target=\"_blank\" rel=\"noopener\">官方github</a></li>\n<li><a href=\"https://gruntjs.com/\" target=\"_blank\" rel=\"noopener\">官方网址（文档）</a></li>\n<li><a href=\"http://www.gruntjs.net/\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n<li><a href=\"https://gruntjs.com/plugins\" target=\"_blank\" rel=\"noopener\">插件列表</a></li>\n</ul>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>grunt依赖Nodejs和npm环境</p>\n<p>使用npm安装全局grunt-cli命令行工具：<code>npm install -g grunt-cli</code></p>\n<h1 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h1><ol>\n<li>需求</li>\n</ol>\n<p>假设你手上有一个项目，叫gruntlearn，项目文件中你的源码存储在src目录下，包含四个模块的js文件，还没编译的scss文件，html文件，图片文件：</p>\n<p><img src=\"/images/grunt/grunt01.png\" alt=\"demo src 目录结构\"></p>\n<p>现在你想用grunt，自动给你的源代码执行几个任务：</p>\n<ul>\n<li>将images/html和复制到 发布文件夹build下</li>\n<li>用jshint检查js语法</li>\n<li>合并四个js文件（分别合并，因为a,b用于不同的页面）</li>\n<li>编译scss文件</li>\n<li>压缩合并后的js文件，存储到build下</li>\n<li>调试：新建一个本地服务器监听文件改变自动刷新HTML文件</li>\n</ul>\n<ol start=\"2\">\n<li>搭建环境</li>\n</ol>\n<ul>\n<li>在命令行里打开到gruntlearn的目录下，执行<code>npm init</code></li>\n<li><p>安装 grunt 和 grunt-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install grunt-cli --global</span><br><span class=\"line\">npm install grunt --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在项目中安装grunt和相关插件,根据第1步中的需求，需要用到一下插件：</p>\n<ul>\n<li>复制文件：grunt-contrib-copy</li>\n<li>合并文件：grunt-contrib-concat</li>\n<li>语法检查：grunt-contrib-jshint</li>\n<li>Scss 编译：grunt-contrib-sass</li>\n<li>压缩文件：grunt-contrib-uglify</li>\n<li>监听文件变动：grunt-contrib-watch</li>\n<li>建立本地服务器：grunt-contrib-connect</li>\n</ul>\n</li>\n<li><p>安装插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev grunt-contrib-copy grunt-contrib-concat grunt-contrib-jshint grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建gruntfile.js文件，代码结构：<br><img src=\"/images/grunt/grunt02.png\" alt=\"gruntfile.js 代码结构\"></p>\n</li>\n<li><p>根据demo需求配置gruntfile：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//wrapper函数</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//你可以像普通的js文件一样添加自己的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sassStyle = <span class=\"string\">'expanded'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.配置任务 tasks--根据插件的文档来定义任务</span></span><br><span class=\"line\">    grunt.initConfig(&#123;</span><br><span class=\"line\">        pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</span><br><span class=\"line\">        <span class=\"comment\">//将html和图片从src复制到build</span></span><br><span class=\"line\">        copy: &#123; <span class=\"comment\">//task</span></span><br><span class=\"line\">            html: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">expand</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cwd</span>: <span class=\"string\">'./src/html'</span>, <span class=\"attr\">src</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">dest</span>: <span class=\"string\">'./build/html/'</span> &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            images: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">expand</span>: <span class=\"literal\">true</span>, <span class=\"attr\">cwd</span>: <span class=\"string\">'./src/images'</span>, <span class=\"attr\">src</span>: <span class=\"string\">'*'</span>, <span class=\"attr\">dest</span>: <span class=\"string\">'./build/images/'</span> &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//合并js</span></span><br><span class=\"line\">        concat: &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* options: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                separator: ';',//合并分隔符</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;, */</span></span><br><span class=\"line\">            dist: &#123;</span><br><span class=\"line\">                files: &#123; <span class=\"comment\">//文件路径</span></span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.all.js'</span>: [<span class=\"string\">'./src/js/a.1.js'</span>, <span class=\"string\">'./src/js/a.2.js'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.all.js'</span>: [<span class=\"string\">'./src/js/b.1.js'</span>, <span class=\"string\">'./src/js/b.2.js'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//task:编译sass</span></span><br><span class=\"line\">        sass: &#123;</span><br><span class=\"line\">            output: &#123; <span class=\"comment\">//target</span></span><br><span class=\"line\">                options: &#123; <span class=\"comment\">//target options</span></span><br><span class=\"line\">                    style: sassStyle</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                files: &#123;</span><br><span class=\"line\">                    <span class=\"string\">'./build/css/style.css'</span>: <span class=\"string\">'./src/scss/style.scss'</span> <span class=\"comment\">//'目标文件':'源文件'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//代码检查</span></span><br><span class=\"line\">        jshint: &#123;</span><br><span class=\"line\">            all: [<span class=\"string\">'./src/js/a.all.js'</span>, <span class=\"string\">'./src/js/b.all.js'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//压缩</span></span><br><span class=\"line\">        uglify: &#123;</span><br><span class=\"line\">            uglifyjs: &#123;</span><br><span class=\"line\">                files: &#123;</span><br><span class=\"line\">                    <span class=\"string\">'./build/js/a.min.js'</span>: [<span class=\"string\">'./src/js/a.all.js'</span>],</span><br><span class=\"line\">                    <span class=\"string\">'./build/js/b.min.js'</span>: [<span class=\"string\">'./src/js/b.all.js'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//监听</span></span><br><span class=\"line\">        watch: &#123;</span><br><span class=\"line\">            scripts: &#123;</span><br><span class=\"line\">                files: [<span class=\"string\">'./src/js/a.1.js'</span>, <span class=\"string\">'./src/js/a.2.js'</span>, <span class=\"string\">'./src/js/b.1.js'</span>, <span class=\"string\">'/src/js/b.2.js'</span>],</span><br><span class=\"line\">                tasks: [<span class=\"string\">'concat'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            sass: &#123;</span><br><span class=\"line\">                files: [<span class=\"string\">'./src/scss/style.scss'</span>],</span><br><span class=\"line\">                tasks: [<span class=\"string\">'sass'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            livereload: &#123;</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    liverelload: <span class=\"string\">'&lt;%= connect.options.livereload %&gt;'</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                files: [</span><br><span class=\"line\">                    <span class=\"string\">'./src/html/index.html'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/scss/style.scss'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.1.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/a.2.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.1.js'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'./src/js/b.2.js'</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        connect: &#123;</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">                port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">                open: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                livareload: <span class=\"number\">35729</span>,</span><br><span class=\"line\">                <span class=\"comment\">//change this to '0.0.0.0' to access the server from outside</span></span><br><span class=\"line\">                hostname: <span class=\"string\">'localhost'</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            server: &#123;</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    port: <span class=\"number\">9001</span>,</span><br><span class=\"line\">                    base: <span class=\"string\">'./'</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.加载插件</span></span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-copy'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-concat'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-sass'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-jshint'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</span><br><span class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-connect'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3.注册任务</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'copyhtml'</span>, [<span class=\"string\">'copy:html'</span>]); <span class=\"comment\">//可以用task：target的方法分别注册</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'concatjs'</span>, [<span class=\"string\">'concat'</span>]); <span class=\"comment\">//也可以只用task名称注册，默认执行task下全部target</span></span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'outputcss'</span>, [<span class=\"string\">'sass'</span>]);</span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'watchit'</span>, [<span class=\"string\">'concat'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>, <span class=\"string\">'connect'</span>, <span class=\"string\">'watch'</span>]);</span><br><span class=\"line\">    grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'copy'</span>, <span class=\"string\">'concat'</span>, <span class=\"string\">'sass'</span>, <span class=\"string\">'jshint'</span>, <span class=\"string\">'uglify'</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行定义好的命令<code>grunt default</code>：<br><img src=\"/images/grunt/grunt03.png\" alt=\"执行命令\"></p>\n</li>\n<li><p>执行后的项目目录结构：<br><img src=\"/images/grunt/grunt04.png\" alt=\"执行后目录结构\"></p>\n</li>\n</ul>\n"},{"title":"函数式编程","date":"2020-05-07T16:00:00.000Z","description":"改变引发错误，最小化改变","toc":1,"top":0,"status":"Continuous Updates","img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211225823.png","_content":"\n## 函数式编程\n\n- 函数式编程是一种解决方案简单，功能独立，对作用域外没有任何副作用的**编程范式**。\n- `INPUT -> PROCESS -> OUTPUT`\n- 函数式编程是一种基于函数计算的软件开发方法。\n- 像数学一样，函数在编程中通过输入产生输出。\n- 可以通过多种方式组合基本功能来构建越来越复杂的程序。\n- 函数式编程式将程序分成小的、可测试的部分\n\n## 函数式编程原则\n\n### 功能独立,显式声明依赖关系\n\n不依赖程序状态或全局变量，**只依赖于传递给它们的参数进行计算**\n\n如果函数依赖于一个变量或对象，那么将该变量或对象作为参数直接传递到函数中。\n\n1. 不要更改变量或对象——创建新变量和对象，并在需要时从函数返回它们。\n2. 声明函数参数——**函数内的任何计算仅取决于参数，而不取决于任何全局对象或变量**。\n\n### 有限的副作用\n\n可以严格地限制函数外部对状态的更改导致的状态变化\n\n在变量，数组或对象上调用一个函数，这个函数可能会改变对象中的变量或其他东西。\n函数式编程的核心原则之一是不改变任何东西，**变化会导致错误**。\n如果一个函数不改变传入的参数、全局变量等数据，那么它造成问题的可能性就会小很多。\n\n在函数式编程中，改变或变更叫做**mutation**\n\n这种改变的结果叫做“副作用”（**side effect**\n\n理想情况下，函数应该是不会产生任何副作用的纯函数（**pure function**\n\n### 纯函数\n\n同一个输入永远能得到同一个输出\n\n### 限制更改程序状态\n\n避免更改保存数据的全局对象\n\n## 不改变原数组的 数组方法：\n\n### concat 连接数组\n\n### slice 提取数组一部分（代替splice从数组删除元素\n\n### map 迭代数组返回新数组（callback return 新元素\n\n### filter 迭代数组返回新数组（callback return true/false\n\n### reduce 是 JavaScript 所有数组操作中最通用的方法。\n\n几乎可以用reduce方法解决所有数组处理问题。\nfilter和map方法不支持对数组中两个不同元素的交互。举个例子，如果你想把数组中的元素拿来比较或者相加，用filter和map是做不到的。\nreduce方法允许更通用的数组处理方式，而且filter和map方法都可以当作是reduce的特殊实现。\nreduce(acc，cur，idx，arr)\n\n### sort排序 会改变原数组：利用concat([])返回新数组排序\n\n```jsx\nvar globalArray = [5, 6, 3, 2, 9];\nfunction nonMutatingSort(arr) {\n  return arr.concat([]).sort((a,b)=>a-b)\n}\nnonMutatingSort(globalArray);\n```\n\n### every方法，检查数组每个元素都通过检验，返回boolean\n\n### some方法，检查数组有元素通过检验，返回boolean\n\n## 不改变String的方法:\n\n### split\n\n### toUpperCase\n\n### trim\n\n### +-运算\n\n## 函数柯里化\n\narity是函数所需的形参的数量。函数Currying意思是把接受多个arity的函数变换成接受单一arity的函数。\n\n重构函数让它接收一个参数，然后返回接收下一个参数的函数，依此类推。\n\n```jsx\n//Un-curried function\nfunction unCurried(x, y) {\n  return x + y;\n}\n\n// 柯里化函数\nfunction curried(x) {\n  return function(y) {\n    return x + y;\n  }\n}\ncurried(1)(2) // 返回 3\n```\n\n柯里化在不能一次为函数提供所有参数情况下很有用。因为它可以将每个函数的调用保存到一个变量中，该变量将保存返回的函数引用，该引用在下一个参数可用时接受该参数。下面是使用curried函数的例子：\n\n```jsx\n// Call a curried function in parts:\nvar funcForY = curried(1);\nconsole.log(funcForY(2)); // 打印 3\n```\n\n**partial application**的意思是一次对一个函数应用几个参数，然后返回另一个应用更多参数的函数。\n\n```jsx\n//Impartial function\nfunction impartial(x, y, z) {\n  return x + y + z;\n}\nvar partialFn = impartial.bind(this, 1, 2);\npartialFn(10); // 返回 13\n```","source":"_posts/functional_programing.md","raw":"---\ntitle: 函数式编程\ncategories:\n    - 10技术 | JavaScript # 一级分类\ntags:\ndate: 2020-05-08\ndescription: 改变引发错误，最小化改变\ntoc: 1\ntop: 0\nstatus: Continuous Updates\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211225823.png\n---\n\n## 函数式编程\n\n- 函数式编程是一种解决方案简单，功能独立，对作用域外没有任何副作用的**编程范式**。\n- `INPUT -> PROCESS -> OUTPUT`\n- 函数式编程是一种基于函数计算的软件开发方法。\n- 像数学一样，函数在编程中通过输入产生输出。\n- 可以通过多种方式组合基本功能来构建越来越复杂的程序。\n- 函数式编程式将程序分成小的、可测试的部分\n\n## 函数式编程原则\n\n### 功能独立,显式声明依赖关系\n\n不依赖程序状态或全局变量，**只依赖于传递给它们的参数进行计算**\n\n如果函数依赖于一个变量或对象，那么将该变量或对象作为参数直接传递到函数中。\n\n1. 不要更改变量或对象——创建新变量和对象，并在需要时从函数返回它们。\n2. 声明函数参数——**函数内的任何计算仅取决于参数，而不取决于任何全局对象或变量**。\n\n### 有限的副作用\n\n可以严格地限制函数外部对状态的更改导致的状态变化\n\n在变量，数组或对象上调用一个函数，这个函数可能会改变对象中的变量或其他东西。\n函数式编程的核心原则之一是不改变任何东西，**变化会导致错误**。\n如果一个函数不改变传入的参数、全局变量等数据，那么它造成问题的可能性就会小很多。\n\n在函数式编程中，改变或变更叫做**mutation**\n\n这种改变的结果叫做“副作用”（**side effect**\n\n理想情况下，函数应该是不会产生任何副作用的纯函数（**pure function**\n\n### 纯函数\n\n同一个输入永远能得到同一个输出\n\n### 限制更改程序状态\n\n避免更改保存数据的全局对象\n\n## 不改变原数组的 数组方法：\n\n### concat 连接数组\n\n### slice 提取数组一部分（代替splice从数组删除元素\n\n### map 迭代数组返回新数组（callback return 新元素\n\n### filter 迭代数组返回新数组（callback return true/false\n\n### reduce 是 JavaScript 所有数组操作中最通用的方法。\n\n几乎可以用reduce方法解决所有数组处理问题。\nfilter和map方法不支持对数组中两个不同元素的交互。举个例子，如果你想把数组中的元素拿来比较或者相加，用filter和map是做不到的。\nreduce方法允许更通用的数组处理方式，而且filter和map方法都可以当作是reduce的特殊实现。\nreduce(acc，cur，idx，arr)\n\n### sort排序 会改变原数组：利用concat([])返回新数组排序\n\n```jsx\nvar globalArray = [5, 6, 3, 2, 9];\nfunction nonMutatingSort(arr) {\n  return arr.concat([]).sort((a,b)=>a-b)\n}\nnonMutatingSort(globalArray);\n```\n\n### every方法，检查数组每个元素都通过检验，返回boolean\n\n### some方法，检查数组有元素通过检验，返回boolean\n\n## 不改变String的方法:\n\n### split\n\n### toUpperCase\n\n### trim\n\n### +-运算\n\n## 函数柯里化\n\narity是函数所需的形参的数量。函数Currying意思是把接受多个arity的函数变换成接受单一arity的函数。\n\n重构函数让它接收一个参数，然后返回接收下一个参数的函数，依此类推。\n\n```jsx\n//Un-curried function\nfunction unCurried(x, y) {\n  return x + y;\n}\n\n// 柯里化函数\nfunction curried(x) {\n  return function(y) {\n    return x + y;\n  }\n}\ncurried(1)(2) // 返回 3\n```\n\n柯里化在不能一次为函数提供所有参数情况下很有用。因为它可以将每个函数的调用保存到一个变量中，该变量将保存返回的函数引用，该引用在下一个参数可用时接受该参数。下面是使用curried函数的例子：\n\n```jsx\n// Call a curried function in parts:\nvar funcForY = curried(1);\nconsole.log(funcForY(2)); // 打印 3\n```\n\n**partial application**的意思是一次对一个函数应用几个参数，然后返回另一个应用更多参数的函数。\n\n```jsx\n//Impartial function\nfunction impartial(x, y, z) {\n  return x + y + z;\n}\nvar partialFn = impartial.bind(this, 1, 2);\npartialFn(10); // 返回 13\n```","slug":"functional_programing","published":1,"updated":"2020-12-11T14:58:39.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88igu0033c8y63dp93z5v","content":"<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><ul>\n<li>函数式编程是一种解决方案简单，功能独立，对作用域外没有任何副作用的<strong>编程范式</strong>。</li>\n<li><code>INPUT -&gt; PROCESS -&gt; OUTPUT</code></li>\n<li>函数式编程是一种基于函数计算的软件开发方法。</li>\n<li>像数学一样，函数在编程中通过输入产生输出。</li>\n<li>可以通过多种方式组合基本功能来构建越来越复杂的程序。</li>\n<li>函数式编程式将程序分成小的、可测试的部分</li>\n</ul>\n<h2 id=\"函数式编程原则\"><a href=\"#函数式编程原则\" class=\"headerlink\" title=\"函数式编程原则\"></a>函数式编程原则</h2><h3 id=\"功能独立-显式声明依赖关系\"><a href=\"#功能独立-显式声明依赖关系\" class=\"headerlink\" title=\"功能独立,显式声明依赖关系\"></a>功能独立,显式声明依赖关系</h3><p>不依赖程序状态或全局变量，<strong>只依赖于传递给它们的参数进行计算</strong></p>\n<p>如果函数依赖于一个变量或对象，那么将该变量或对象作为参数直接传递到函数中。</p>\n<ol>\n<li>不要更改变量或对象——创建新变量和对象，并在需要时从函数返回它们。</li>\n<li>声明函数参数——<strong>函数内的任何计算仅取决于参数，而不取决于任何全局对象或变量</strong>。</li>\n</ol>\n<h3 id=\"有限的副作用\"><a href=\"#有限的副作用\" class=\"headerlink\" title=\"有限的副作用\"></a>有限的副作用</h3><p>可以严格地限制函数外部对状态的更改导致的状态变化</p>\n<p>在变量，数组或对象上调用一个函数，这个函数可能会改变对象中的变量或其他东西。<br>函数式编程的核心原则之一是不改变任何东西，<strong>变化会导致错误</strong>。<br>如果一个函数不改变传入的参数、全局变量等数据，那么它造成问题的可能性就会小很多。</p>\n<p>在函数式编程中，改变或变更叫做<strong>mutation</strong></p>\n<p>这种改变的结果叫做“副作用”（<strong>side effect</strong></p>\n<p>理想情况下，函数应该是不会产生任何副作用的纯函数（<strong>pure function</strong></p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>同一个输入永远能得到同一个输出</p>\n<h3 id=\"限制更改程序状态\"><a href=\"#限制更改程序状态\" class=\"headerlink\" title=\"限制更改程序状态\"></a>限制更改程序状态</h3><p>避免更改保存数据的全局对象</p>\n<h2 id=\"不改变原数组的-数组方法：\"><a href=\"#不改变原数组的-数组方法：\" class=\"headerlink\" title=\"不改变原数组的 数组方法：\"></a>不改变原数组的 数组方法：</h2><h3 id=\"concat-连接数组\"><a href=\"#concat-连接数组\" class=\"headerlink\" title=\"concat 连接数组\"></a>concat 连接数组</h3><h3 id=\"slice-提取数组一部分（代替splice从数组删除元素\"><a href=\"#slice-提取数组一部分（代替splice从数组删除元素\" class=\"headerlink\" title=\"slice 提取数组一部分（代替splice从数组删除元素\"></a>slice 提取数组一部分（代替splice从数组删除元素</h3><h3 id=\"map-迭代数组返回新数组（callback-return-新元素\"><a href=\"#map-迭代数组返回新数组（callback-return-新元素\" class=\"headerlink\" title=\"map 迭代数组返回新数组（callback return 新元素\"></a>map 迭代数组返回新数组（callback return 新元素</h3><h3 id=\"filter-迭代数组返回新数组（callback-return-true-false\"><a href=\"#filter-迭代数组返回新数组（callback-return-true-false\" class=\"headerlink\" title=\"filter 迭代数组返回新数组（callback return true/false\"></a>filter 迭代数组返回新数组（callback return true/false</h3><h3 id=\"reduce-是-JavaScript-所有数组操作中最通用的方法。\"><a href=\"#reduce-是-JavaScript-所有数组操作中最通用的方法。\" class=\"headerlink\" title=\"reduce 是 JavaScript 所有数组操作中最通用的方法。\"></a>reduce 是 JavaScript 所有数组操作中最通用的方法。</h3><p>几乎可以用reduce方法解决所有数组处理问题。<br>filter和map方法不支持对数组中两个不同元素的交互。举个例子，如果你想把数组中的元素拿来比较或者相加，用filter和map是做不到的。<br>reduce方法允许更通用的数组处理方式，而且filter和map方法都可以当作是reduce的特殊实现。<br>reduce(acc，cur，idx，arr)</p>\n<h3 id=\"sort排序-会改变原数组：利用concat-返回新数组排序\"><a href=\"#sort排序-会改变原数组：利用concat-返回新数组排序\" class=\"headerlink\" title=\"sort排序 会改变原数组：利用concat([])返回新数组排序\"></a>sort排序 会改变原数组：利用concat([])返回新数组排序</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> globalArray = [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nonMutatingSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.concat([]).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nonMutatingSort(globalArray);</span><br></pre></td></tr></table></figure>\n<h3 id=\"every方法，检查数组每个元素都通过检验，返回boolean\"><a href=\"#every方法，检查数组每个元素都通过检验，返回boolean\" class=\"headerlink\" title=\"every方法，检查数组每个元素都通过检验，返回boolean\"></a>every方法，检查数组每个元素都通过检验，返回boolean</h3><h3 id=\"some方法，检查数组有元素通过检验，返回boolean\"><a href=\"#some方法，检查数组有元素通过检验，返回boolean\" class=\"headerlink\" title=\"some方法，检查数组有元素通过检验，返回boolean\"></a>some方法，检查数组有元素通过检验，返回boolean</h3><h2 id=\"不改变String的方法\"><a href=\"#不改变String的方法\" class=\"headerlink\" title=\"不改变String的方法:\"></a>不改变String的方法:</h2><h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h3><h3 id=\"toUpperCase\"><a href=\"#toUpperCase\" class=\"headerlink\" title=\"toUpperCase\"></a>toUpperCase</h3><h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"trim\"></a>trim</h3><h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"+-运算\"></a>+-运算</h3><h2 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h2><p>arity是函数所需的形参的数量。函数Currying意思是把接受多个arity的函数变换成接受单一arity的函数。</p>\n<p>重构函数让它接收一个参数，然后返回接收下一个参数的函数，依此类推。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Un-curried function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unCurried</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curried</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>) <span class=\"comment\">// 返回 3</span></span><br></pre></td></tr></table></figure>\n<p>柯里化在不能一次为函数提供所有参数情况下很有用。因为它可以将每个函数的调用保存到一个变量中，该变量将保存返回的函数引用，该引用在下一个参数可用时接受该参数。下面是使用curried函数的例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Call a curried function in parts:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcForY = curried(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(funcForY(<span class=\"number\">2</span>)); <span class=\"comment\">// 打印 3</span></span><br></pre></td></tr></table></figure>\n<p><strong>partial application</strong>的意思是一次对一个函数应用几个参数，然后返回另一个应用更多参数的函数。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Impartial function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">impartial</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> partialFn = impartial.bind(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">partialFn(<span class=\"number\">10</span>); <span class=\"comment\">// 返回 13</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><ul>\n<li>函数式编程是一种解决方案简单，功能独立，对作用域外没有任何副作用的<strong>编程范式</strong>。</li>\n<li><code>INPUT -&gt; PROCESS -&gt; OUTPUT</code></li>\n<li>函数式编程是一种基于函数计算的软件开发方法。</li>\n<li>像数学一样，函数在编程中通过输入产生输出。</li>\n<li>可以通过多种方式组合基本功能来构建越来越复杂的程序。</li>\n<li>函数式编程式将程序分成小的、可测试的部分</li>\n</ul>\n<h2 id=\"函数式编程原则\"><a href=\"#函数式编程原则\" class=\"headerlink\" title=\"函数式编程原则\"></a>函数式编程原则</h2><h3 id=\"功能独立-显式声明依赖关系\"><a href=\"#功能独立-显式声明依赖关系\" class=\"headerlink\" title=\"功能独立,显式声明依赖关系\"></a>功能独立,显式声明依赖关系</h3><p>不依赖程序状态或全局变量，<strong>只依赖于传递给它们的参数进行计算</strong></p>\n<p>如果函数依赖于一个变量或对象，那么将该变量或对象作为参数直接传递到函数中。</p>\n<ol>\n<li>不要更改变量或对象——创建新变量和对象，并在需要时从函数返回它们。</li>\n<li>声明函数参数——<strong>函数内的任何计算仅取决于参数，而不取决于任何全局对象或变量</strong>。</li>\n</ol>\n<h3 id=\"有限的副作用\"><a href=\"#有限的副作用\" class=\"headerlink\" title=\"有限的副作用\"></a>有限的副作用</h3><p>可以严格地限制函数外部对状态的更改导致的状态变化</p>\n<p>在变量，数组或对象上调用一个函数，这个函数可能会改变对象中的变量或其他东西。<br>函数式编程的核心原则之一是不改变任何东西，<strong>变化会导致错误</strong>。<br>如果一个函数不改变传入的参数、全局变量等数据，那么它造成问题的可能性就会小很多。</p>\n<p>在函数式编程中，改变或变更叫做<strong>mutation</strong></p>\n<p>这种改变的结果叫做“副作用”（<strong>side effect</strong></p>\n<p>理想情况下，函数应该是不会产生任何副作用的纯函数（<strong>pure function</strong></p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>同一个输入永远能得到同一个输出</p>\n<h3 id=\"限制更改程序状态\"><a href=\"#限制更改程序状态\" class=\"headerlink\" title=\"限制更改程序状态\"></a>限制更改程序状态</h3><p>避免更改保存数据的全局对象</p>\n<h2 id=\"不改变原数组的-数组方法：\"><a href=\"#不改变原数组的-数组方法：\" class=\"headerlink\" title=\"不改变原数组的 数组方法：\"></a>不改变原数组的 数组方法：</h2><h3 id=\"concat-连接数组\"><a href=\"#concat-连接数组\" class=\"headerlink\" title=\"concat 连接数组\"></a>concat 连接数组</h3><h3 id=\"slice-提取数组一部分（代替splice从数组删除元素\"><a href=\"#slice-提取数组一部分（代替splice从数组删除元素\" class=\"headerlink\" title=\"slice 提取数组一部分（代替splice从数组删除元素\"></a>slice 提取数组一部分（代替splice从数组删除元素</h3><h3 id=\"map-迭代数组返回新数组（callback-return-新元素\"><a href=\"#map-迭代数组返回新数组（callback-return-新元素\" class=\"headerlink\" title=\"map 迭代数组返回新数组（callback return 新元素\"></a>map 迭代数组返回新数组（callback return 新元素</h3><h3 id=\"filter-迭代数组返回新数组（callback-return-true-false\"><a href=\"#filter-迭代数组返回新数组（callback-return-true-false\" class=\"headerlink\" title=\"filter 迭代数组返回新数组（callback return true/false\"></a>filter 迭代数组返回新数组（callback return true/false</h3><h3 id=\"reduce-是-JavaScript-所有数组操作中最通用的方法。\"><a href=\"#reduce-是-JavaScript-所有数组操作中最通用的方法。\" class=\"headerlink\" title=\"reduce 是 JavaScript 所有数组操作中最通用的方法。\"></a>reduce 是 JavaScript 所有数组操作中最通用的方法。</h3><p>几乎可以用reduce方法解决所有数组处理问题。<br>filter和map方法不支持对数组中两个不同元素的交互。举个例子，如果你想把数组中的元素拿来比较或者相加，用filter和map是做不到的。<br>reduce方法允许更通用的数组处理方式，而且filter和map方法都可以当作是reduce的特殊实现。<br>reduce(acc，cur，idx，arr)</p>\n<h3 id=\"sort排序-会改变原数组：利用concat-返回新数组排序\"><a href=\"#sort排序-会改变原数组：利用concat-返回新数组排序\" class=\"headerlink\" title=\"sort排序 会改变原数组：利用concat([])返回新数组排序\"></a>sort排序 会改变原数组：利用concat([])返回新数组排序</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> globalArray = [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nonMutatingSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.concat([]).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nonMutatingSort(globalArray);</span><br></pre></td></tr></table></figure>\n<h3 id=\"every方法，检查数组每个元素都通过检验，返回boolean\"><a href=\"#every方法，检查数组每个元素都通过检验，返回boolean\" class=\"headerlink\" title=\"every方法，检查数组每个元素都通过检验，返回boolean\"></a>every方法，检查数组每个元素都通过检验，返回boolean</h3><h3 id=\"some方法，检查数组有元素通过检验，返回boolean\"><a href=\"#some方法，检查数组有元素通过检验，返回boolean\" class=\"headerlink\" title=\"some方法，检查数组有元素通过检验，返回boolean\"></a>some方法，检查数组有元素通过检验，返回boolean</h3><h2 id=\"不改变String的方法\"><a href=\"#不改变String的方法\" class=\"headerlink\" title=\"不改变String的方法:\"></a>不改变String的方法:</h2><h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h3><h3 id=\"toUpperCase\"><a href=\"#toUpperCase\" class=\"headerlink\" title=\"toUpperCase\"></a>toUpperCase</h3><h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"trim\"></a>trim</h3><h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"+-运算\"></a>+-运算</h3><h2 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h2><p>arity是函数所需的形参的数量。函数Currying意思是把接受多个arity的函数变换成接受单一arity的函数。</p>\n<p>重构函数让它接收一个参数，然后返回接收下一个参数的函数，依此类推。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Un-curried function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unCurried</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curried</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>) <span class=\"comment\">// 返回 3</span></span><br></pre></td></tr></table></figure>\n<p>柯里化在不能一次为函数提供所有参数情况下很有用。因为它可以将每个函数的调用保存到一个变量中，该变量将保存返回的函数引用，该引用在下一个参数可用时接受该参数。下面是使用curried函数的例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Call a curried function in parts:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcForY = curried(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(funcForY(<span class=\"number\">2</span>)); <span class=\"comment\">// 打印 3</span></span><br></pre></td></tr></table></figure>\n<p><strong>partial application</strong>的意思是一次对一个函数应用几个参数，然后返回另一个应用更多参数的函数。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Impartial function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">impartial</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> partialFn = impartial.bind(<span class=\"keyword\">this</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">partialFn(<span class=\"number\">10</span>); <span class=\"comment\">// 返回 13</span></span><br></pre></td></tr></table></figure>"},{"title":"【ML15】Python与Js模型互转","date":"2020-04-29T16:00:00.000Z","description":"Javascript玩转机器学习15","toc":1,"top":0,"_content":"## Python模型\n- 通过 Python版 Tensorflow/ Keras生成模型\n- 类型包括： Tensorflow Saved Model、 Keras HDF5mode等\n- 获取：开源网站下载/算法同事提供\n\n## Javascript模型\n- 可以在 TensorflowJs中运行的模型\n- 类型包括： tijs layers model， tojs graph model等\n- 获取：开源网站/通过TFJS生成/由 Python模型转化而来\n\n## 为什么要互转\n-  Python to JavaScript： JavaScript模型可以在浏览器中运行\n-  JavaScript to Python：少见，为了在更多平台运行\n-  JavaScript to JavaScript：分片/量化/加速\n\n## TensorFlow.js Converter\n- 命令行转换器\n- 依赖Python-3.6.8（可以使用Anaconda工具创建环境\n- 在命令行指定输入输出的路径和模型格式即可\n- [地址](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter)\n\n\n## JavaScript：分片/量化/加速\n- 分片：将模型切分，提升加载速度\n- 量化：通过牺牲一部分精度，压缩模型的大小\n- 加速：将模型转换为tfjs_graph_model格式可以加速模型\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","source":"_posts/fed_ml_15_py_model.md","raw":"---\ntitle: 【ML15】Python与Js模型互转\ncategories:\n    - 10技术 | 前端机器学习 # 一级分类\ntags:\ndate: 2020-04-30\ndescription: Javascript玩转机器学习15\ntoc: 1\ntop: 0\n---\n## Python模型\n- 通过 Python版 Tensorflow/ Keras生成模型\n- 类型包括： Tensorflow Saved Model、 Keras HDF5mode等\n- 获取：开源网站下载/算法同事提供\n\n## Javascript模型\n- 可以在 TensorflowJs中运行的模型\n- 类型包括： tijs layers model， tojs graph model等\n- 获取：开源网站/通过TFJS生成/由 Python模型转化而来\n\n## 为什么要互转\n-  Python to JavaScript： JavaScript模型可以在浏览器中运行\n-  JavaScript to Python：少见，为了在更多平台运行\n-  JavaScript to JavaScript：分片/量化/加速\n\n## TensorFlow.js Converter\n- 命令行转换器\n- 依赖Python-3.6.8（可以使用Anaconda工具创建环境\n- 在命令行指定输入输出的路径和模型格式即可\n- [地址](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter)\n\n\n## JavaScript：分片/量化/加速\n- 分片：将模型切分，提升加载速度\n- 量化：通过牺牲一部分精度，压缩模型的大小\n- 加速：将模型转换为tfjs_graph_model格式可以加速模型\n\n---\n[代码仓库](https://github.com/scarsu/js-ml.git)","slug":"fed_ml_15_py_model","published":1,"updated":"2021-01-22T10:02:23.657Z","_id":"ckir88igv0034c8y6pqz7ffmk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Python模型\"><a href=\"#Python模型\" class=\"headerlink\" title=\"Python模型\"></a>Python模型</h2><ul>\n<li>通过 Python版 Tensorflow/ Keras生成模型</li>\n<li>类型包括： Tensorflow Saved Model、 Keras HDF5mode等</li>\n<li>获取：开源网站下载/算法同事提供</li>\n</ul>\n<h2 id=\"Javascript模型\"><a href=\"#Javascript模型\" class=\"headerlink\" title=\"Javascript模型\"></a>Javascript模型</h2><ul>\n<li>可以在 TensorflowJs中运行的模型</li>\n<li>类型包括： tijs layers model， tojs graph model等</li>\n<li>获取：开源网站/通过TFJS生成/由 Python模型转化而来</li>\n</ul>\n<h2 id=\"为什么要互转\"><a href=\"#为什么要互转\" class=\"headerlink\" title=\"为什么要互转\"></a>为什么要互转</h2><ul>\n<li>Python to JavaScript： JavaScript模型可以在浏览器中运行</li>\n<li>JavaScript to Python：少见，为了在更多平台运行</li>\n<li>JavaScript to JavaScript：分片/量化/加速</li>\n</ul>\n<h2 id=\"TensorFlow-js-Converter\"><a href=\"#TensorFlow-js-Converter\" class=\"headerlink\" title=\"TensorFlow.js Converter\"></a>TensorFlow.js Converter</h2><ul>\n<li>命令行转换器</li>\n<li>依赖Python-3.6.8（可以使用Anaconda工具创建环境</li>\n<li>在命令行指定输入输出的路径和模型格式即可</li>\n<li><a href=\"https://github.com/tensorflow/tfjs/tree/master/tfjs-converter\" target=\"_blank\" rel=\"noopener\">地址</a></li>\n</ul>\n<h2 id=\"JavaScript：分片-量化-加速\"><a href=\"#JavaScript：分片-量化-加速\" class=\"headerlink\" title=\"JavaScript：分片/量化/加速\"></a>JavaScript：分片/量化/加速</h2><ul>\n<li>分片：将模型切分，提升加载速度</li>\n<li>量化：通过牺牲一部分精度，压缩模型的大小</li>\n<li>加速：将模型转换为tfjs_graph_model格式可以加速模型</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python模型\"><a href=\"#Python模型\" class=\"headerlink\" title=\"Python模型\"></a>Python模型</h2><ul>\n<li>通过 Python版 Tensorflow/ Keras生成模型</li>\n<li>类型包括： Tensorflow Saved Model、 Keras HDF5mode等</li>\n<li>获取：开源网站下载/算法同事提供</li>\n</ul>\n<h2 id=\"Javascript模型\"><a href=\"#Javascript模型\" class=\"headerlink\" title=\"Javascript模型\"></a>Javascript模型</h2><ul>\n<li>可以在 TensorflowJs中运行的模型</li>\n<li>类型包括： tijs layers model， tojs graph model等</li>\n<li>获取：开源网站/通过TFJS生成/由 Python模型转化而来</li>\n</ul>\n<h2 id=\"为什么要互转\"><a href=\"#为什么要互转\" class=\"headerlink\" title=\"为什么要互转\"></a>为什么要互转</h2><ul>\n<li>Python to JavaScript： JavaScript模型可以在浏览器中运行</li>\n<li>JavaScript to Python：少见，为了在更多平台运行</li>\n<li>JavaScript to JavaScript：分片/量化/加速</li>\n</ul>\n<h2 id=\"TensorFlow-js-Converter\"><a href=\"#TensorFlow-js-Converter\" class=\"headerlink\" title=\"TensorFlow.js Converter\"></a>TensorFlow.js Converter</h2><ul>\n<li>命令行转换器</li>\n<li>依赖Python-3.6.8（可以使用Anaconda工具创建环境</li>\n<li>在命令行指定输入输出的路径和模型格式即可</li>\n<li><a href=\"https://github.com/tensorflow/tfjs/tree/master/tfjs-converter\" target=\"_blank\" rel=\"noopener\">地址</a></li>\n</ul>\n<h2 id=\"JavaScript：分片-量化-加速\"><a href=\"#JavaScript：分片-量化-加速\" class=\"headerlink\" title=\"JavaScript：分片/量化/加速\"></a>JavaScript：分片/量化/加速</h2><ul>\n<li>分片：将模型切分，提升加载速度</li>\n<li>量化：通过牺牲一部分精度，压缩模型的大小</li>\n<li>加速：将模型转换为tfjs_graph_model格式可以加速模型</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/scarsu/js-ml.git\" target=\"_blank\" rel=\"noopener\">代码仓库</a></p>\n"},{"title":"本博客搭建指南[ Hexo + Netlify ]","comments":1,"date":"2017-12-31T16:00:00.000Z","description":"免费 高效 自动部署 markdown友好。","toc":0,"_content":"\n## 搭建工具\n\n#### 1. [Hexo](https://hexo.io) - 快速、简洁且高效的博客框架\n- Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n- Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n- Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。\n\n\n#### 2. [Netlify](https://www.netlify.com/) - 自动化构建、部署、持续集成，自动化HTTPS\n1. 配置代码仓库\n2. 添加构建设置\n3. 自动部署\n\n## 为什么选择这两个工具\n\n1. `Markdown赛高`：习惯于 markdown 输出内容，一直以来都是用 md 来写笔记存在有道云，简单纯净更适合技术文档。\n2. `提交代码 自动构建部署`：每次写完笔记只需要把 md 文件丢在项目路径里，然后提交代码到github，就会触发Netlify自动构建部署，快速更新，只关注于笔记本身。\n3. `自定义域名 无需服务器 HTTPS`：不需要买服务器，可以使用Netlify的子域名，也可以自己买域名配置(例如我的scarsu.com和doc.scarsu.com这两个域名，都是托管在NetlifyDNS服务器上，与我在github上的博客仓库和gitbook仓库关联即可)。\n4. `可定制`：hexo默认/hexo主题中又很多可配置项，另外主题的源码是用pug模板写的，前端er易于上手更改\n5. 作为参考，`vuejs.org`官方文档构建的解决方案也是hexo+netlify\n\n## 相关配置\n\n- Hexo 主题：[Maupassant Theme](https://github.com/tufu9441/maupassant-hexo/)\n- 本博客代码仓库地址 [github scarsu/ScarSuHexo_Netlify](https://github.com/scarsu/ScarSuHexo_Netlify)\n\n\n## 本地搭建步骤：\n```bash\n#克隆代码仓库到本地\ngit clone https://github.com/scarsu/ScarSuHexo_Netlify.git\n#全局安装hexo\nnpm install hexo -g \n#安装相关依赖\nnpm install \n#构建打包\nhexo d -g \n#运行本地服务器\nhexo s \n```\n\n\n## 本站git仓库目录结构\n```bash\n.\n├── _config.yml    #网站配置\n├── package.json    #npm包信息\n├── scaffolds   #模板文件夹\n├── public   #生成的静态资源文件夹（需要添加到.gitignore文件中）\n├── node_modules   #项目依赖的node模块（需要添加到.gitignore文件中）\n├── source      #资源文件夹\n|   ├── _posts     #markown文档文件夹（日常更新md文章存放路径）\n|   ├── _xx      #所有_开头的文件夹会被编译器忽略\n|   └── xx      #不会被编译器识别的普通文件夹 但是会直接打包的资源目录 （可访问）\n└── themes      #主题\n    └── maupassant     #maupassant主题包\n            ├── languages      #多语言文件\n            ├── layout      #布局模板文件\n            ├── source      #主题资源\n            └── _config.yml      #主题配置\n\n```\n\n\n\n---\n\n     免费 高效 自动部署 markdown友好。\n","source":"_posts/hello_hexo.md","raw":"---\ntitle: 本博客搭建指南[ Hexo + Netlify ] # 文章标题\ncategories:\n    - 01关于 # 一级分类\ntags:\ncomments: true #开启评论\ndate: 2018-01-01\ndescription: 免费 高效 自动部署 markdown友好。\ntoc: 0\n---\n\n## 搭建工具\n\n#### 1. [Hexo](https://hexo.io) - 快速、简洁且高效的博客框架\n- Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n- Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。\n- Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。\n\n\n#### 2. [Netlify](https://www.netlify.com/) - 自动化构建、部署、持续集成，自动化HTTPS\n1. 配置代码仓库\n2. 添加构建设置\n3. 自动部署\n\n## 为什么选择这两个工具\n\n1. `Markdown赛高`：习惯于 markdown 输出内容，一直以来都是用 md 来写笔记存在有道云，简单纯净更适合技术文档。\n2. `提交代码 自动构建部署`：每次写完笔记只需要把 md 文件丢在项目路径里，然后提交代码到github，就会触发Netlify自动构建部署，快速更新，只关注于笔记本身。\n3. `自定义域名 无需服务器 HTTPS`：不需要买服务器，可以使用Netlify的子域名，也可以自己买域名配置(例如我的scarsu.com和doc.scarsu.com这两个域名，都是托管在NetlifyDNS服务器上，与我在github上的博客仓库和gitbook仓库关联即可)。\n4. `可定制`：hexo默认/hexo主题中又很多可配置项，另外主题的源码是用pug模板写的，前端er易于上手更改\n5. 作为参考，`vuejs.org`官方文档构建的解决方案也是hexo+netlify\n\n## 相关配置\n\n- Hexo 主题：[Maupassant Theme](https://github.com/tufu9441/maupassant-hexo/)\n- 本博客代码仓库地址 [github scarsu/ScarSuHexo_Netlify](https://github.com/scarsu/ScarSuHexo_Netlify)\n\n\n## 本地搭建步骤：\n```bash\n#克隆代码仓库到本地\ngit clone https://github.com/scarsu/ScarSuHexo_Netlify.git\n#全局安装hexo\nnpm install hexo -g \n#安装相关依赖\nnpm install \n#构建打包\nhexo d -g \n#运行本地服务器\nhexo s \n```\n\n\n## 本站git仓库目录结构\n```bash\n.\n├── _config.yml    #网站配置\n├── package.json    #npm包信息\n├── scaffolds   #模板文件夹\n├── public   #生成的静态资源文件夹（需要添加到.gitignore文件中）\n├── node_modules   #项目依赖的node模块（需要添加到.gitignore文件中）\n├── source      #资源文件夹\n|   ├── _posts     #markown文档文件夹（日常更新md文章存放路径）\n|   ├── _xx      #所有_开头的文件夹会被编译器忽略\n|   └── xx      #不会被编译器识别的普通文件夹 但是会直接打包的资源目录 （可访问）\n└── themes      #主题\n    └── maupassant     #maupassant主题包\n            ├── languages      #多语言文件\n            ├── layout      #布局模板文件\n            ├── source      #主题资源\n            └── _config.yml      #主题配置\n\n```\n\n\n\n---\n\n     免费 高效 自动部署 markdown友好。\n","slug":"hello_hexo","published":1,"updated":"2021-01-22T03:28:21.137Z","_id":"ckir88igw0037c8y6agf88jqd","layout":"post","photos":[],"link":"","content":"<h2 id=\"搭建工具\"><a href=\"#搭建工具\" class=\"headerlink\" title=\"搭建工具\"></a>搭建工具</h2><h4 id=\"1-Hexo-快速、简洁且高效的博客框架\"><a href=\"#1-Hexo-快速、简洁且高效的博客框架\" class=\"headerlink\" title=\"1. Hexo - 快速、简洁且高效的博客框架\"></a>1. <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> - 快速、简洁且高效的博客框架</h4><ul>\n<li>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>\n<li>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>\n<li>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li>\n</ul>\n<h4 id=\"2-Netlify-自动化构建、部署、持续集成，自动化HTTPS\"><a href=\"#2-Netlify-自动化构建、部署、持续集成，自动化HTTPS\" class=\"headerlink\" title=\"2. Netlify - 自动化构建、部署、持续集成，自动化HTTPS\"></a>2. <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">Netlify</a> - 自动化构建、部署、持续集成，自动化HTTPS</h4><ol>\n<li>配置代码仓库</li>\n<li>添加构建设置</li>\n<li>自动部署</li>\n</ol>\n<h2 id=\"为什么选择这两个工具\"><a href=\"#为什么选择这两个工具\" class=\"headerlink\" title=\"为什么选择这两个工具\"></a>为什么选择这两个工具</h2><ol>\n<li><code>Markdown赛高</code>：习惯于 markdown 输出内容，一直以来都是用 md 来写笔记存在有道云，简单纯净更适合技术文档。</li>\n<li><code>提交代码 自动构建部署</code>：每次写完笔记只需要把 md 文件丢在项目路径里，然后提交代码到github，就会触发Netlify自动构建部署，快速更新，只关注于笔记本身。</li>\n<li><code>自定义域名 无需服务器 HTTPS</code>：不需要买服务器，可以使用Netlify的子域名，也可以自己买域名配置(例如我的scarsu.com和doc.scarsu.com这两个域名，都是托管在NetlifyDNS服务器上，与我在github上的博客仓库和gitbook仓库关联即可)。</li>\n<li><code>可定制</code>：hexo默认/hexo主题中又很多可配置项，另外主题的源码是用pug模板写的，前端er易于上手更改</li>\n<li>作为参考，<code>vuejs.org</code>官方文档构建的解决方案也是hexo+netlify</li>\n</ol>\n<h2 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h2><ul>\n<li>Hexo 主题：<a href=\"https://github.com/tufu9441/maupassant-hexo/\" target=\"_blank\" rel=\"noopener\">Maupassant Theme</a></li>\n<li>本博客代码仓库地址 <a href=\"https://github.com/scarsu/ScarSuHexo_Netlify\" target=\"_blank\" rel=\"noopener\">github scarsu/ScarSuHexo_Netlify</a></li>\n</ul>\n<h2 id=\"本地搭建步骤：\"><a href=\"#本地搭建步骤：\" class=\"headerlink\" title=\"本地搭建步骤：\"></a>本地搭建步骤：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#克隆代码仓库到本地</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/scarsu/ScarSuHexo_Netlify.git</span><br><span class=\"line\"><span class=\"comment\">#全局安装hexo</span></span><br><span class=\"line\">npm install hexo -g </span><br><span class=\"line\"><span class=\"comment\">#安装相关依赖</span></span><br><span class=\"line\">npm install </span><br><span class=\"line\"><span class=\"comment\">#构建打包</span></span><br><span class=\"line\">hexo d -g </span><br><span class=\"line\"><span class=\"comment\">#运行本地服务器</span></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h2 id=\"本站git仓库目录结构\"><a href=\"#本站git仓库目录结构\" class=\"headerlink\" title=\"本站git仓库目录结构\"></a>本站git仓库目录结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml    <span class=\"comment\">#网站配置</span></span><br><span class=\"line\">├── package.json    <span class=\"comment\">#npm包信息</span></span><br><span class=\"line\">├── scaffolds   <span class=\"comment\">#模板文件夹</span></span><br><span class=\"line\">├── public   <span class=\"comment\">#生成的静态资源文件夹（需要添加到.gitignore文件中）</span></span><br><span class=\"line\">├── node_modules   <span class=\"comment\">#项目依赖的node模块（需要添加到.gitignore文件中）</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>      <span class=\"comment\">#资源文件夹</span></span><br><span class=\"line\">|   ├── _posts     <span class=\"comment\">#markown文档文件夹（日常更新md文章存放路径）</span></span><br><span class=\"line\">|   ├── _xx      <span class=\"comment\">#所有_开头的文件夹会被编译器忽略</span></span><br><span class=\"line\">|   └── xx      <span class=\"comment\">#不会被编译器识别的普通文件夹 但是会直接打包的资源目录 （可访问）</span></span><br><span class=\"line\">└── themes      <span class=\"comment\">#主题</span></span><br><span class=\"line\">    └── maupassant     <span class=\"comment\">#maupassant主题包</span></span><br><span class=\"line\">            ├── languages      <span class=\"comment\">#多语言文件</span></span><br><span class=\"line\">            ├── layout      <span class=\"comment\">#布局模板文件</span></span><br><span class=\"line\">            ├── <span class=\"built_in\">source</span>      <span class=\"comment\">#主题资源</span></span><br><span class=\"line\">            └── _config.yml      <span class=\"comment\">#主题配置</span></span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>免费 高效 自动部署 markdown友好。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搭建工具\"><a href=\"#搭建工具\" class=\"headerlink\" title=\"搭建工具\"></a>搭建工具</h2><h4 id=\"1-Hexo-快速、简洁且高效的博客框架\"><a href=\"#1-Hexo-快速、简洁且高效的博客框架\" class=\"headerlink\" title=\"1. Hexo - 快速、简洁且高效的博客框架\"></a>1. <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a> - 快速、简洁且高效的博客框架</h4><ul>\n<li>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>\n<li>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>\n<li>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</li>\n</ul>\n<h4 id=\"2-Netlify-自动化构建、部署、持续集成，自动化HTTPS\"><a href=\"#2-Netlify-自动化构建、部署、持续集成，自动化HTTPS\" class=\"headerlink\" title=\"2. Netlify - 自动化构建、部署、持续集成，自动化HTTPS\"></a>2. <a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">Netlify</a> - 自动化构建、部署、持续集成，自动化HTTPS</h4><ol>\n<li>配置代码仓库</li>\n<li>添加构建设置</li>\n<li>自动部署</li>\n</ol>\n<h2 id=\"为什么选择这两个工具\"><a href=\"#为什么选择这两个工具\" class=\"headerlink\" title=\"为什么选择这两个工具\"></a>为什么选择这两个工具</h2><ol>\n<li><code>Markdown赛高</code>：习惯于 markdown 输出内容，一直以来都是用 md 来写笔记存在有道云，简单纯净更适合技术文档。</li>\n<li><code>提交代码 自动构建部署</code>：每次写完笔记只需要把 md 文件丢在项目路径里，然后提交代码到github，就会触发Netlify自动构建部署，快速更新，只关注于笔记本身。</li>\n<li><code>自定义域名 无需服务器 HTTPS</code>：不需要买服务器，可以使用Netlify的子域名，也可以自己买域名配置(例如我的scarsu.com和doc.scarsu.com这两个域名，都是托管在NetlifyDNS服务器上，与我在github上的博客仓库和gitbook仓库关联即可)。</li>\n<li><code>可定制</code>：hexo默认/hexo主题中又很多可配置项，另外主题的源码是用pug模板写的，前端er易于上手更改</li>\n<li>作为参考，<code>vuejs.org</code>官方文档构建的解决方案也是hexo+netlify</li>\n</ol>\n<h2 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h2><ul>\n<li>Hexo 主题：<a href=\"https://github.com/tufu9441/maupassant-hexo/\" target=\"_blank\" rel=\"noopener\">Maupassant Theme</a></li>\n<li>本博客代码仓库地址 <a href=\"https://github.com/scarsu/ScarSuHexo_Netlify\" target=\"_blank\" rel=\"noopener\">github scarsu/ScarSuHexo_Netlify</a></li>\n</ul>\n<h2 id=\"本地搭建步骤：\"><a href=\"#本地搭建步骤：\" class=\"headerlink\" title=\"本地搭建步骤：\"></a>本地搭建步骤：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#克隆代码仓库到本地</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/scarsu/ScarSuHexo_Netlify.git</span><br><span class=\"line\"><span class=\"comment\">#全局安装hexo</span></span><br><span class=\"line\">npm install hexo -g </span><br><span class=\"line\"><span class=\"comment\">#安装相关依赖</span></span><br><span class=\"line\">npm install </span><br><span class=\"line\"><span class=\"comment\">#构建打包</span></span><br><span class=\"line\">hexo d -g </span><br><span class=\"line\"><span class=\"comment\">#运行本地服务器</span></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h2 id=\"本站git仓库目录结构\"><a href=\"#本站git仓库目录结构\" class=\"headerlink\" title=\"本站git仓库目录结构\"></a>本站git仓库目录结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml    <span class=\"comment\">#网站配置</span></span><br><span class=\"line\">├── package.json    <span class=\"comment\">#npm包信息</span></span><br><span class=\"line\">├── scaffolds   <span class=\"comment\">#模板文件夹</span></span><br><span class=\"line\">├── public   <span class=\"comment\">#生成的静态资源文件夹（需要添加到.gitignore文件中）</span></span><br><span class=\"line\">├── node_modules   <span class=\"comment\">#项目依赖的node模块（需要添加到.gitignore文件中）</span></span><br><span class=\"line\">├── <span class=\"built_in\">source</span>      <span class=\"comment\">#资源文件夹</span></span><br><span class=\"line\">|   ├── _posts     <span class=\"comment\">#markown文档文件夹（日常更新md文章存放路径）</span></span><br><span class=\"line\">|   ├── _xx      <span class=\"comment\">#所有_开头的文件夹会被编译器忽略</span></span><br><span class=\"line\">|   └── xx      <span class=\"comment\">#不会被编译器识别的普通文件夹 但是会直接打包的资源目录 （可访问）</span></span><br><span class=\"line\">└── themes      <span class=\"comment\">#主题</span></span><br><span class=\"line\">    └── maupassant     <span class=\"comment\">#maupassant主题包</span></span><br><span class=\"line\">            ├── languages      <span class=\"comment\">#多语言文件</span></span><br><span class=\"line\">            ├── layout      <span class=\"comment\">#布局模板文件</span></span><br><span class=\"line\">            ├── <span class=\"built_in\">source</span>      <span class=\"comment\">#主题资源</span></span><br><span class=\"line\">            └── _config.yml      <span class=\"comment\">#主题配置</span></span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>免费 高效 自动部署 markdown友好。\n</code></pre>"},{"title":"高可定+低维护的博客搭建指南","date":"2018-12-07T16:00:00.000Z","description":"Markdown赛高d=====(￣▽￣*)b","toc":1,"top":0,"_content":"\n## 为什么要有博客\n\n博客之于程序员意义重大，因为，**输出**是一个程序员的基本素养和技能，**开源分享**是科学技术发展和人类社会进步的重要美德和推动力，而博客正是输出分享的重要途径之一。\n\n为什么输出分享对程序员来说十分重要，我有以下几点看法。\n\n-   从技术角度考虑，技术的提升依赖于专业知识的学习以及实际经验的积累，而人的大脑需要不断地进行重复记忆，才能将这些知识经验留在自己的知识库里。因此，无论是学习新知识还是通过实践得到的经验，有了即时的输出记录，才便于复盘与巩固。\n\n-   在实际工作中，当我们面临复杂大型的项目，和其中大量的代码时，如果只根据个人喜好而不根据代码规范去开发，写完后不留存开发文档以及接口文档，必然给项目的维护带来更高的代价，给团队中的其他开发者带来困扰。因此，代码规范和开发文档的输出也相当必要。\n\n如果你还不相信，坚持输出给程序员带来好处的例子很多，我随意举几个。\n\n-   例如 IT 圈出名的[阮一峰](http://www.ruanyifeng.com)，[张鑫旭](https://www.zhangxinxu.com/)，stormzhang(这位已经不再分享技术了)等等大佬，他们有今天这种影响力的一个重要因素就是输出分享；\n\n-   我也曾不止一次吸取前辈的经验以及建议，前端圈的[小爝](https://www.zhihu.com/people/xiao-jue-83/activities)大佬在知乎的某个[回答](https://www.zhihu.com/question/301802742/answer/528508203)当中提到过“长期坚持技术输出和总结分享”在找工作面试中是一个亮点和加分项；\n\n-   “前端桃园”公号的运营者桃翁也十分提倡坚持输出，他在他星球小圈子中给我们分享过他自己 因为坚持输出提升了影响力 而多次收到阿里面试邀请的经历。\n\n还有很多例子，不一一例举，分享本文的原因也就写到这，不再赘述。\n\n（当然输出分享的途径很多，本文以介绍博客为目的，如果选择其他途径可以忽略下文）\n\n## 如何选择博客\n\n现在网络上有各式各样的博客，有基于第三方的平台（如博客园、csdn 等）\n\n也有可供个人搭建的工具（如 Hexo、Ghost、wordpress、jekyll 等）\n\n自建博客的选择丰富多彩，选择一个最适合自己的最重要。\n\n作为一个博客，我最重视的有两个方面：\n\n1. 可自定义，可个性化。\n\n因为每个人追求的博客风格不同，想要展示的内容和格式也有所不同。\n\n2. 高效转化。\n\n我指的转化，是你的输出原文档 到 博客文本的转化，这一转化的过程对于想要存档原文，或不习惯于博客编辑器，不习惯于博客网页格式的人之分重要。\n\n我推崇用 markdown 来写笔记，因为 markdown 足够简约优雅，兼容性也十分强，\n\n> Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。\n>\n> 非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。\n>\n> 就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。\n\n因此今天推荐的博客搭建工具，就是[Hexo](https://hexo.io).\n\n-   通过 Hexo，你可以高定制化的 DIY 自己的博客（可以选择主题）\n-   搭建后，只需要将 md 文档源文件丢尽指定目录，输一个命令，hexo 就可以自动生成页面\n-   生成静态文件后，可以无需服务器+域名，直接将静态文件丢在 GithubPages 上即可\n\n## Hexo 博客搭建 & DIY & 使用指南\n\n> 具体 api 请看 hexo 官网文档，下面只分享搭建+DIY+使用流程\n\n1. 安装 node 和 git\n2. npm 安装 hexo 和相关依赖\n3. 根据 hexo 命令 初始化 博客文件夹，在 config 中添加博客相关信息和配置\n4. 在 hexo 官网/themes 选择相关主题，或使用默认主题，以我使用的简约主题[maupassant](https://github.com/tufu9441/maupassant-hexo)为例\n\n主题默认样式如图：\n\n![maupassant](/images/maupassant.jpg)\n\n5. 除了默认的首页/归档等 tab 页，可以在配置中添加更多 tab 页，tab 的内容也可以从 markdown 渲染。\n\n例如添加/Demo 分页，可以再配置文件中新增一项 tab 配置，在 source 文件夹下添加/demo/index.md 即可，可以在 post.pug 模板中更改 tab 分页渲染 index.md 的方式。\n\n配置:\n\n![hexo1](/images/hexo1.jpg)\n\npost.pug 模板代码:\n\n![hexo2](/images/hexo2.jpg)\n\n实现效果：\n\n![hexo3](/images/hexo3.jpg)\n\n6. 其他的各种折腾，其实原理都类似，找到对应的 pug 模板代码进行增删改即可，包括样式、脚本、内容。（注：pug，即前 jade，前端的一种模板引擎，api 参见[文档](https://pugjs.org)）\n7. 调试的过程也很方便，使用 hexo server 命令可以启动本地环境，并且会自动 watch 你的更改（包括配置+scss+pug 模板），并自动重新生成，这个过程也很快，大概一口茶不到的功夫。\n8. 搭建完成后，日常使用只需要将 md 源文件放入 source/\\_post 文件夹下，再运行一个简单的命令，即可自动生成+部署到 git\n\n```\nhexo generate --deploy\nhexo g -d\n```\n\n9. 一些其他的实用功能也很多，例如：根据 markdown#标题，自动生成 toc 目录；可以方便的引入各大评论网站的脚本，只需要账号，第三方存储评论留言不需要维护；引入百度/busuanzi 等的访问量统计；文章字数统计和预计阅读时间；等等很多，不一一例举。**总之 DIY 自由度极高，适合开发者**\n\n## 写在最后\n\n最近有一些感悟，以技术为目标的人，不要浮躁，莫逞他人嘴上快，莫争浮世虚功名，心无旁骛，沉下心来钻研技术就好。\n","source":"_posts/highly_configurable_low_maintenance_blog_build_guide.md","raw":"---\ntitle: 高可定+低维护的博客搭建指南\ncategories:\n    - 01关于 # 一级分类\ntags:\ndate: 2018-12-08\ndescription: Markdown赛高d=====(￣▽￣*)b\ntoc: 1\ntop: 0\n---\n\n## 为什么要有博客\n\n博客之于程序员意义重大，因为，**输出**是一个程序员的基本素养和技能，**开源分享**是科学技术发展和人类社会进步的重要美德和推动力，而博客正是输出分享的重要途径之一。\n\n为什么输出分享对程序员来说十分重要，我有以下几点看法。\n\n-   从技术角度考虑，技术的提升依赖于专业知识的学习以及实际经验的积累，而人的大脑需要不断地进行重复记忆，才能将这些知识经验留在自己的知识库里。因此，无论是学习新知识还是通过实践得到的经验，有了即时的输出记录，才便于复盘与巩固。\n\n-   在实际工作中，当我们面临复杂大型的项目，和其中大量的代码时，如果只根据个人喜好而不根据代码规范去开发，写完后不留存开发文档以及接口文档，必然给项目的维护带来更高的代价，给团队中的其他开发者带来困扰。因此，代码规范和开发文档的输出也相当必要。\n\n如果你还不相信，坚持输出给程序员带来好处的例子很多，我随意举几个。\n\n-   例如 IT 圈出名的[阮一峰](http://www.ruanyifeng.com)，[张鑫旭](https://www.zhangxinxu.com/)，stormzhang(这位已经不再分享技术了)等等大佬，他们有今天这种影响力的一个重要因素就是输出分享；\n\n-   我也曾不止一次吸取前辈的经验以及建议，前端圈的[小爝](https://www.zhihu.com/people/xiao-jue-83/activities)大佬在知乎的某个[回答](https://www.zhihu.com/question/301802742/answer/528508203)当中提到过“长期坚持技术输出和总结分享”在找工作面试中是一个亮点和加分项；\n\n-   “前端桃园”公号的运营者桃翁也十分提倡坚持输出，他在他星球小圈子中给我们分享过他自己 因为坚持输出提升了影响力 而多次收到阿里面试邀请的经历。\n\n还有很多例子，不一一例举，分享本文的原因也就写到这，不再赘述。\n\n（当然输出分享的途径很多，本文以介绍博客为目的，如果选择其他途径可以忽略下文）\n\n## 如何选择博客\n\n现在网络上有各式各样的博客，有基于第三方的平台（如博客园、csdn 等）\n\n也有可供个人搭建的工具（如 Hexo、Ghost、wordpress、jekyll 等）\n\n自建博客的选择丰富多彩，选择一个最适合自己的最重要。\n\n作为一个博客，我最重视的有两个方面：\n\n1. 可自定义，可个性化。\n\n因为每个人追求的博客风格不同，想要展示的内容和格式也有所不同。\n\n2. 高效转化。\n\n我指的转化，是你的输出原文档 到 博客文本的转化，这一转化的过程对于想要存档原文，或不习惯于博客编辑器，不习惯于博客网页格式的人之分重要。\n\n我推崇用 markdown 来写笔记，因为 markdown 足够简约优雅，兼容性也十分强，\n\n> Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。\n>\n> 非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。\n>\n> 就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。\n\n因此今天推荐的博客搭建工具，就是[Hexo](https://hexo.io).\n\n-   通过 Hexo，你可以高定制化的 DIY 自己的博客（可以选择主题）\n-   搭建后，只需要将 md 文档源文件丢尽指定目录，输一个命令，hexo 就可以自动生成页面\n-   生成静态文件后，可以无需服务器+域名，直接将静态文件丢在 GithubPages 上即可\n\n## Hexo 博客搭建 & DIY & 使用指南\n\n> 具体 api 请看 hexo 官网文档，下面只分享搭建+DIY+使用流程\n\n1. 安装 node 和 git\n2. npm 安装 hexo 和相关依赖\n3. 根据 hexo 命令 初始化 博客文件夹，在 config 中添加博客相关信息和配置\n4. 在 hexo 官网/themes 选择相关主题，或使用默认主题，以我使用的简约主题[maupassant](https://github.com/tufu9441/maupassant-hexo)为例\n\n主题默认样式如图：\n\n![maupassant](/images/maupassant.jpg)\n\n5. 除了默认的首页/归档等 tab 页，可以在配置中添加更多 tab 页，tab 的内容也可以从 markdown 渲染。\n\n例如添加/Demo 分页，可以再配置文件中新增一项 tab 配置，在 source 文件夹下添加/demo/index.md 即可，可以在 post.pug 模板中更改 tab 分页渲染 index.md 的方式。\n\n配置:\n\n![hexo1](/images/hexo1.jpg)\n\npost.pug 模板代码:\n\n![hexo2](/images/hexo2.jpg)\n\n实现效果：\n\n![hexo3](/images/hexo3.jpg)\n\n6. 其他的各种折腾，其实原理都类似，找到对应的 pug 模板代码进行增删改即可，包括样式、脚本、内容。（注：pug，即前 jade，前端的一种模板引擎，api 参见[文档](https://pugjs.org)）\n7. 调试的过程也很方便，使用 hexo server 命令可以启动本地环境，并且会自动 watch 你的更改（包括配置+scss+pug 模板），并自动重新生成，这个过程也很快，大概一口茶不到的功夫。\n8. 搭建完成后，日常使用只需要将 md 源文件放入 source/\\_post 文件夹下，再运行一个简单的命令，即可自动生成+部署到 git\n\n```\nhexo generate --deploy\nhexo g -d\n```\n\n9. 一些其他的实用功能也很多，例如：根据 markdown#标题，自动生成 toc 目录；可以方便的引入各大评论网站的脚本，只需要账号，第三方存储评论留言不需要维护；引入百度/busuanzi 等的访问量统计；文章字数统计和预计阅读时间；等等很多，不一一例举。**总之 DIY 自由度极高，适合开发者**\n\n## 写在最后\n\n最近有一些感悟，以技术为目标的人，不要浮躁，莫逞他人嘴上快，莫争浮世虚功名，心无旁骛，沉下心来钻研技术就好。\n","slug":"highly_configurable_low_maintenance_blog_build_guide","published":1,"updated":"2021-01-22T03:28:21.131Z","_id":"ckir88igx0039c8y6rqyn76kb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要有博客\"><a href=\"#为什么要有博客\" class=\"headerlink\" title=\"为什么要有博客\"></a>为什么要有博客</h2><p>博客之于程序员意义重大，因为，<strong>输出</strong>是一个程序员的基本素养和技能，<strong>开源分享</strong>是科学技术发展和人类社会进步的重要美德和推动力，而博客正是输出分享的重要途径之一。</p>\n<p>为什么输出分享对程序员来说十分重要，我有以下几点看法。</p>\n<ul>\n<li><p>从技术角度考虑，技术的提升依赖于专业知识的学习以及实际经验的积累，而人的大脑需要不断地进行重复记忆，才能将这些知识经验留在自己的知识库里。因此，无论是学习新知识还是通过实践得到的经验，有了即时的输出记录，才便于复盘与巩固。</p>\n</li>\n<li><p>在实际工作中，当我们面临复杂大型的项目，和其中大量的代码时，如果只根据个人喜好而不根据代码规范去开发，写完后不留存开发文档以及接口文档，必然给项目的维护带来更高的代价，给团队中的其他开发者带来困扰。因此，代码规范和开发文档的输出也相当必要。</p>\n</li>\n</ul>\n<p>如果你还不相信，坚持输出给程序员带来好处的例子很多，我随意举几个。</p>\n<ul>\n<li><p>例如 IT 圈出名的<a href=\"http://www.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\">阮一峰</a>，<a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>，stormzhang(这位已经不再分享技术了)等等大佬，他们有今天这种影响力的一个重要因素就是输出分享；</p>\n</li>\n<li><p>我也曾不止一次吸取前辈的经验以及建议，前端圈的<a href=\"https://www.zhihu.com/people/xiao-jue-83/activities\" target=\"_blank\" rel=\"noopener\">小爝</a>大佬在知乎的某个<a href=\"https://www.zhihu.com/question/301802742/answer/528508203\" target=\"_blank\" rel=\"noopener\">回答</a>当中提到过“长期坚持技术输出和总结分享”在找工作面试中是一个亮点和加分项；</p>\n</li>\n<li><p>“前端桃园”公号的运营者桃翁也十分提倡坚持输出，他在他星球小圈子中给我们分享过他自己 因为坚持输出提升了影响力 而多次收到阿里面试邀请的经历。</p>\n</li>\n</ul>\n<p>还有很多例子，不一一例举，分享本文的原因也就写到这，不再赘述。</p>\n<p>（当然输出分享的途径很多，本文以介绍博客为目的，如果选择其他途径可以忽略下文）</p>\n<h2 id=\"如何选择博客\"><a href=\"#如何选择博客\" class=\"headerlink\" title=\"如何选择博客\"></a>如何选择博客</h2><p>现在网络上有各式各样的博客，有基于第三方的平台（如博客园、csdn 等）</p>\n<p>也有可供个人搭建的工具（如 Hexo、Ghost、wordpress、jekyll 等）</p>\n<p>自建博客的选择丰富多彩，选择一个最适合自己的最重要。</p>\n<p>作为一个博客，我最重视的有两个方面：</p>\n<ol>\n<li>可自定义，可个性化。</li>\n</ol>\n<p>因为每个人追求的博客风格不同，想要展示的内容和格式也有所不同。</p>\n<ol start=\"2\">\n<li>高效转化。</li>\n</ol>\n<p>我指的转化，是你的输出原文档 到 博客文本的转化，这一转化的过程对于想要存档原文，或不习惯于博客编辑器，不习惯于博客网页格式的人之分重要。</p>\n<p>我推崇用 markdown 来写笔记，因为 markdown 足够简约优雅，兼容性也十分强，</p>\n<blockquote>\n<p>Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。</p>\n<p>非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p>\n<p>就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。</p>\n</blockquote>\n<p>因此今天推荐的博客搭建工具，就是<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>.</p>\n<ul>\n<li>通过 Hexo，你可以高定制化的 DIY 自己的博客（可以选择主题）</li>\n<li>搭建后，只需要将 md 文档源文件丢尽指定目录，输一个命令，hexo 就可以自动生成页面</li>\n<li>生成静态文件后，可以无需服务器+域名，直接将静态文件丢在 GithubPages 上即可</li>\n</ul>\n<h2 id=\"Hexo-博客搭建-amp-DIY-amp-使用指南\"><a href=\"#Hexo-博客搭建-amp-DIY-amp-使用指南\" class=\"headerlink\" title=\"Hexo 博客搭建 &amp; DIY &amp; 使用指南\"></a>Hexo 博客搭建 &amp; DIY &amp; 使用指南</h2><blockquote>\n<p>具体 api 请看 hexo 官网文档，下面只分享搭建+DIY+使用流程</p>\n</blockquote>\n<ol>\n<li>安装 node 和 git</li>\n<li>npm 安装 hexo 和相关依赖</li>\n<li>根据 hexo 命令 初始化 博客文件夹，在 config 中添加博客相关信息和配置</li>\n<li>在 hexo 官网/themes 选择相关主题，或使用默认主题，以我使用的简约主题<a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"noopener\">maupassant</a>为例</li>\n</ol>\n<p>主题默认样式如图：</p>\n<p><img src=\"/images/maupassant.jpg\" alt=\"maupassant\"></p>\n<ol start=\"5\">\n<li>除了默认的首页/归档等 tab 页，可以在配置中添加更多 tab 页，tab 的内容也可以从 markdown 渲染。</li>\n</ol>\n<p>例如添加/Demo 分页，可以再配置文件中新增一项 tab 配置，在 source 文件夹下添加/demo/index.md 即可，可以在 post.pug 模板中更改 tab 分页渲染 index.md 的方式。</p>\n<p>配置:</p>\n<p><img src=\"/images/hexo1.jpg\" alt=\"hexo1\"></p>\n<p>post.pug 模板代码:</p>\n<p><img src=\"/images/hexo2.jpg\" alt=\"hexo2\"></p>\n<p>实现效果：</p>\n<p><img src=\"/images/hexo3.jpg\" alt=\"hexo3\"></p>\n<ol start=\"6\">\n<li>其他的各种折腾，其实原理都类似，找到对应的 pug 模板代码进行增删改即可，包括样式、脚本、内容。（注：pug，即前 jade，前端的一种模板引擎，api 参见<a href=\"https://pugjs.org\" target=\"_blank\" rel=\"noopener\">文档</a>）</li>\n<li>调试的过程也很方便，使用 hexo server 命令可以启动本地环境，并且会自动 watch 你的更改（包括配置+scss+pug 模板），并自动重新生成，这个过程也很快，大概一口茶不到的功夫。</li>\n<li>搭建完成后，日常使用只需要将 md 源文件放入 source/_post 文件夹下，再运行一个简单的命令，即可自动生成+部署到 git</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>一些其他的实用功能也很多，例如：根据 markdown#标题，自动生成 toc 目录；可以方便的引入各大评论网站的脚本，只需要账号，第三方存储评论留言不需要维护；引入百度/busuanzi 等的访问量统计；文章字数统计和预计阅读时间；等等很多，不一一例举。<strong>总之 DIY 自由度极高，适合开发者</strong></li>\n</ol>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>最近有一些感悟，以技术为目标的人，不要浮躁，莫逞他人嘴上快，莫争浮世虚功名，心无旁骛，沉下心来钻研技术就好。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要有博客\"><a href=\"#为什么要有博客\" class=\"headerlink\" title=\"为什么要有博客\"></a>为什么要有博客</h2><p>博客之于程序员意义重大，因为，<strong>输出</strong>是一个程序员的基本素养和技能，<strong>开源分享</strong>是科学技术发展和人类社会进步的重要美德和推动力，而博客正是输出分享的重要途径之一。</p>\n<p>为什么输出分享对程序员来说十分重要，我有以下几点看法。</p>\n<ul>\n<li><p>从技术角度考虑，技术的提升依赖于专业知识的学习以及实际经验的积累，而人的大脑需要不断地进行重复记忆，才能将这些知识经验留在自己的知识库里。因此，无论是学习新知识还是通过实践得到的经验，有了即时的输出记录，才便于复盘与巩固。</p>\n</li>\n<li><p>在实际工作中，当我们面临复杂大型的项目，和其中大量的代码时，如果只根据个人喜好而不根据代码规范去开发，写完后不留存开发文档以及接口文档，必然给项目的维护带来更高的代价，给团队中的其他开发者带来困扰。因此，代码规范和开发文档的输出也相当必要。</p>\n</li>\n</ul>\n<p>如果你还不相信，坚持输出给程序员带来好处的例子很多，我随意举几个。</p>\n<ul>\n<li><p>例如 IT 圈出名的<a href=\"http://www.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\">阮一峰</a>，<a href=\"https://www.zhangxinxu.com/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>，stormzhang(这位已经不再分享技术了)等等大佬，他们有今天这种影响力的一个重要因素就是输出分享；</p>\n</li>\n<li><p>我也曾不止一次吸取前辈的经验以及建议，前端圈的<a href=\"https://www.zhihu.com/people/xiao-jue-83/activities\" target=\"_blank\" rel=\"noopener\">小爝</a>大佬在知乎的某个<a href=\"https://www.zhihu.com/question/301802742/answer/528508203\" target=\"_blank\" rel=\"noopener\">回答</a>当中提到过“长期坚持技术输出和总结分享”在找工作面试中是一个亮点和加分项；</p>\n</li>\n<li><p>“前端桃园”公号的运营者桃翁也十分提倡坚持输出，他在他星球小圈子中给我们分享过他自己 因为坚持输出提升了影响力 而多次收到阿里面试邀请的经历。</p>\n</li>\n</ul>\n<p>还有很多例子，不一一例举，分享本文的原因也就写到这，不再赘述。</p>\n<p>（当然输出分享的途径很多，本文以介绍博客为目的，如果选择其他途径可以忽略下文）</p>\n<h2 id=\"如何选择博客\"><a href=\"#如何选择博客\" class=\"headerlink\" title=\"如何选择博客\"></a>如何选择博客</h2><p>现在网络上有各式各样的博客，有基于第三方的平台（如博客园、csdn 等）</p>\n<p>也有可供个人搭建的工具（如 Hexo、Ghost、wordpress、jekyll 等）</p>\n<p>自建博客的选择丰富多彩，选择一个最适合自己的最重要。</p>\n<p>作为一个博客，我最重视的有两个方面：</p>\n<ol>\n<li>可自定义，可个性化。</li>\n</ol>\n<p>因为每个人追求的博客风格不同，想要展示的内容和格式也有所不同。</p>\n<ol start=\"2\">\n<li>高效转化。</li>\n</ol>\n<p>我指的转化，是你的输出原文档 到 博客文本的转化，这一转化的过程对于想要存档原文，或不习惯于博客编辑器，不习惯于博客网页格式的人之分重要。</p>\n<p>我推崇用 markdown 来写笔记，因为 markdown 足够简约优雅，兼容性也十分强，</p>\n<blockquote>\n<p>Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。</p>\n<p>非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p>\n<p>就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。</p>\n</blockquote>\n<p>因此今天推荐的博客搭建工具，就是<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>.</p>\n<ul>\n<li>通过 Hexo，你可以高定制化的 DIY 自己的博客（可以选择主题）</li>\n<li>搭建后，只需要将 md 文档源文件丢尽指定目录，输一个命令，hexo 就可以自动生成页面</li>\n<li>生成静态文件后，可以无需服务器+域名，直接将静态文件丢在 GithubPages 上即可</li>\n</ul>\n<h2 id=\"Hexo-博客搭建-amp-DIY-amp-使用指南\"><a href=\"#Hexo-博客搭建-amp-DIY-amp-使用指南\" class=\"headerlink\" title=\"Hexo 博客搭建 &amp; DIY &amp; 使用指南\"></a>Hexo 博客搭建 &amp; DIY &amp; 使用指南</h2><blockquote>\n<p>具体 api 请看 hexo 官网文档，下面只分享搭建+DIY+使用流程</p>\n</blockquote>\n<ol>\n<li>安装 node 和 git</li>\n<li>npm 安装 hexo 和相关依赖</li>\n<li>根据 hexo 命令 初始化 博客文件夹，在 config 中添加博客相关信息和配置</li>\n<li>在 hexo 官网/themes 选择相关主题，或使用默认主题，以我使用的简约主题<a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"noopener\">maupassant</a>为例</li>\n</ol>\n<p>主题默认样式如图：</p>\n<p><img src=\"/images/maupassant.jpg\" alt=\"maupassant\"></p>\n<ol start=\"5\">\n<li>除了默认的首页/归档等 tab 页，可以在配置中添加更多 tab 页，tab 的内容也可以从 markdown 渲染。</li>\n</ol>\n<p>例如添加/Demo 分页，可以再配置文件中新增一项 tab 配置，在 source 文件夹下添加/demo/index.md 即可，可以在 post.pug 模板中更改 tab 分页渲染 index.md 的方式。</p>\n<p>配置:</p>\n<p><img src=\"/images/hexo1.jpg\" alt=\"hexo1\"></p>\n<p>post.pug 模板代码:</p>\n<p><img src=\"/images/hexo2.jpg\" alt=\"hexo2\"></p>\n<p>实现效果：</p>\n<p><img src=\"/images/hexo3.jpg\" alt=\"hexo3\"></p>\n<ol start=\"6\">\n<li>其他的各种折腾，其实原理都类似，找到对应的 pug 模板代码进行增删改即可，包括样式、脚本、内容。（注：pug，即前 jade，前端的一种模板引擎，api 参见<a href=\"https://pugjs.org\" target=\"_blank\" rel=\"noopener\">文档</a>）</li>\n<li>调试的过程也很方便，使用 hexo server 命令可以启动本地环境，并且会自动 watch 你的更改（包括配置+scss+pug 模板），并自动重新生成，这个过程也很快，大概一口茶不到的功夫。</li>\n<li>搭建完成后，日常使用只需要将 md 源文件放入 source/_post 文件夹下，再运行一个简单的命令，即可自动生成+部署到 git</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>一些其他的实用功能也很多，例如：根据 markdown#标题，自动生成 toc 目录；可以方便的引入各大评论网站的脚本，只需要账号，第三方存储评论留言不需要维护；引入百度/busuanzi 等的访问量统计；文章字数统计和预计阅读时间；等等很多，不一一例举。<strong>总之 DIY 自由度极高，适合开发者</strong></li>\n</ol>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>最近有一些感悟，以技术为目标的人，不要浮躁，莫逞他人嘴上快，莫争浮世虚功名，心无旁骛，沉下心来钻研技术就好。</p>\n"},{"title":"前端图标的那些事","date":"2021-02-12T16:00:00.000Z","description":"更新svg-symbol","toc":1,"top":0,"_content":"\n- 初次发布于2020-02-19\n- 第二次编辑于2021-03-13，更新svg-symbol\n---\n\n## 前言\n```\n用了矢量图标\n\n用mac的UI再也不吐槽你页面的图标放大后有点糊了...\n\nPM再也不会嫌弃你画的页面图片太大，太占load time了...\n\n你也不用因为一个hover状态，就写一段换图片src的逻辑了...\n\n```\n\n## 矢量图标\n- 不会因为放大/缩小而导致图标变模糊，即可以任意定义尺寸的icon。\n- 在现代前端项目中，除了任意定义尺寸，对图标的要求还有定义颜色等等\n\n## 字体图标\n- 以字体的形式定义的图标，可以像字体一样定义尺寸,颜色\n- 优点：体积小（用到的图标越多性价比越高）；样式便于控制，与字体一样可以调节font-size，color，阴影，旋转，透明度，且兼容低版本浏览器\n- 主流的字体图标库:fontAwesome,阿里的iconfont\n- 使用方法：矢量图片(UI) -> 转换成字体文件(工具) -> 定义font-face(前端)\n- 设计师上传svg矢量图\n\n![设计师上传svg矢量图](https://www.scarsu.com/images/gitbook/web_font03.png)\n\n- 前端下载代码，解压后目录结构：\n\n![iconfont目录结构](https://www.scarsu.com/images/gitbook/web_font04.png)\n\n- 缺点：需要UI合作；图标变更需要重新生成字体文件，定义font-face\n- 前端引用iconfont主流方式：\n1. Unicode\n    - 兼容性最好，支持 IE6+，及所有现代浏览器。\n    - 支持按字体的方式去动态调整图标大小，颜色等等。\n    - 但是因为是字体，所以不支持多色。\n    ```css\n    /*第一步：自定义@font-face，引用字体文件*/\n    @font-face {\n        font-family: 'iconfont';\n        src: url('iconfont.eot');\n        src: url('iconfont.eot?#iefix') format('embedded-opentype'),\n            url('iconfont.woff2') format('woff2'),\n            url('iconfont.woff') format('woff'),\n            url('iconfont.ttf') format('truetype'),\n            url('iconfont.svg#iconfont') format('svg');\n    }\n    /*第二步：定义使用 iconfont 的样式*/\n    .iconfont {\n        font-family: \"iconfont\" !important;\n        font-size: 16px;\n        font-style: normal;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    /*第三步：挑选相应图标并获取unicode编码，应用于页面*/\n    <span class=\"iconfont\">&#x33;</span>\n    ```\n\n2. font-class（使用最多）\n    - unicode变体，解决了unicode编码语义不明确的问题，书写更直观。可以很容易分辨这个 icon 是什么，著名的**FontAwesome**即使用该方式\n    - 兼容性良好，支持 IE8+，及所有现代浏览器。\n    - 因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。\n    - 本质上还是字体，所以多色图标还是不支持的。\n    ```css\n    /*第一步：自定义@font-face，引用字体文件*/\n    @font-face {\n        font-family: 'iconfont';\n        src: url('iconfont.eot');\n        src: url('iconfont.eot?#iefix') format('embedded-opentype'),\n            url('iconfont.woff2') format('woff2'),\n            url('iconfont.woff') format('woff'),\n            url('iconfont.ttf') format('truetype'),\n            url('iconfont.svg#iconfont') format('svg');\n    }\n    /*第二步：定义iconfont样式*/\n    .iconfont {\n        font-family: \"iconfont\" !important;\n        font-size: 16px;\n        font-style: normal;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    /*第三步：定义每个icon unicode 样式类*/\n    .icon-gouwuche:before {\n        content: \"\\e669\";\n    }\n    ```\n    ```html\n    <!-- 第四步：引入1，2步的css -->\n    <link rel=\"stylesheet\" href=\"./iconfont.css\">\n    <!-- 第五步：挑选相应图标并使用定义的类名，应用于页面： -->\n    <span class=\"iconfont icon-xxx\"></span>\n    ```\n\n\n3. Symbol\n    - 本质是svg，支持多色。\n    - 较新的使用方式，兼容性较差，支持 IE9+，及现代浏览器。\n    - 通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。\n    - 浏览器渲染 SVG 的性能一般，还不如 png。\n    ```html\n    <!-- 第一步：引入js代码 -->\n    <script src=\"./iconfont.js\"></script>\n    ```\n    ```css\n    /* 第二步：加入通用css样式（引入一次即可） */\n    .icon {\n        width: 1em;\n        height: 1em;\n        vertical-align: -0.15em;\n        fill: currentColor;\n        overflow: hidden;\n    }\n    ```\n    ```html\n    <!-- 第三步：挑选相应图标并获取类名，应用于页面： -->\n    <svg class=\"icon\" aria-hidden=\"true\">\n        <use xlink:href=\"#icon-xxx\"></use>\n    </svg>\n    ```\n\n## icon最佳实践：svg图标\n- 除了字体图标，现代前端项目中使用更多的是Svg图标\n- `<svg>`及其一系列元素，用于矢量图像的结构、绘制与布局\n- `<symbol>元素`，是可复用的svg图像，用来定义一个图形模板对象，它可以用一个`<use>`元素实例化。\n```xml\n<svg>\n  <!-- symbol定义模板（symbol本身不会显示图像 -->\n  <symbol id=\"sym01\" viewBox=\"0 0 150 110\">\n    <circle cx=\"50\" cy=\"50\" r=\"40\" stroke-width=\"8\" stroke=\"red\" fill=\"red\"/>\n    <circle cx=\"90\" cy=\"60\" r=\"40\" stroke-width=\"8\" stroke=\"green\" fill=\"white\"/>\n  </symbol>\n\n  <!-- 使用use元素才能实例化 -->\n  <use xlink:href=\"#sym01\"\n      x=\"0\" y=\"0\" width=\"100\" height=\"50\"/>\n  <use xlink:href=\"#sym01\"\n      x=\"0\" y=\"50\" width=\"75\" height=\"38\"/>\n  <use xlink:href=\"#sym01\"\n      x=\"0\" y=\"100\" width=\"50\" height=\"25\"/>\n</svg>\n```\n- `symbolId`:在`<use>`元素的`xlink:href`属性需要指向symbol元素的id\n- 优点：\n  1. svg图标拥有字体图标的各种优点此外\n  2. svg不需要UI转成字体、定义font-face，只需要原始的svg代码，即可使用。\n  3. 通过现代前端工具整合，svg图标变更时，只需要变更单个svg文件，耦合度低\n\n## svg symbol应用于现代前端框架\n- 创建svg目录，存放一个svg文件，例如`@/assets/svg/test.svg`\n- 在webpack中配置`svg-sprite-loader`，匹配上述的svg文件，并将其symbolId配置为svg文件名,详情参考[`svg-sprite-loader`文档](https://www.npmjs.com/package/svg-sprite-loader#configuration)\n```js\n// 以下为vue cli4的配置\nmodule.exports = {\n\tchainWebpack(config){\n\t  // 1. 将./src/assets/svg排除在vue的默认webpack配置的svg规则之外\n\t  config.module.rule('svg')\n\t    .exclude.add(resolve('./src/assets/svg'))\n\t  // 2. 添加一条icons规则\n\t  config.module.rule('icons')\n\t    .test(/\\.svg$/) // 匹配svg后缀的文件\n\t    .include.add(resolve('./src/assets/svg')).end()  // 添加规则生效的路径\n\t    .use('svg-sprite-loader') // 使用svg-sprite-loader插件\n\t    .loader('svg-sprite-loader')  // 加载svg-sprite-loader插件\n\t      .options({symbolId: 'icon-[name]'}) // name:文件名，此处的symbolId即svg的xlink:href属性，xlink:href=\"#icon-文件名\"\n\t}\n...\n}\n```\n- 在vue模板中即可直接使用\n```\n// text.vue\n<template>\n  ...\n  <svg :class=\"svgClass\" v-on=\"$listeners\">\n    <use xlink:href=\"#icon-test\"></use>\n  </svg>\n  ...\n</template>\n\nimport '@/assets/svg/test.svg';\n...\n```\n- 更进一步的封装：不需要每个icon都import;`<svg-icon>`组件;\n\n1. 通过webpack上下文，将svg文件作为固定上下文，即可避免手动import，用到了webpack中的[require.context api](https://webpack.js.org/guides/dependency-management/#requirecontext)\n```js\n// @/assets/svg/index.js\n// 使用 webpack提供的require.context()指定svg为固定上下文\nfunction importAll (r) {\n  r.keys().forEach(r)\n}\nimportAll(require.context('@/assets/svg', false, /\\.svg$/))\n```\n\n2. 在main.js中引入上述js文件\n```js\nimport '@/assets/svg/index.js' // svg上下文\n```\n\n3. 封装icon组件\n```vue\n<template>\n  <svg :class=\"svgClass\" v-on=\"$listeners\">\n    <use :xlink:href=\"iconName\" />\n  </svg>\n</template>\n\n<script>\nexport default {\n  name: 'SvgIcon',\n  props: {\n    // iconClass要和svg的文件名一致\n    iconClass: {\n      type: String,\n      required: true\n    },\n    // className可以用来定制样式\n    className: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    iconName () {\n      return `#icon-${this.iconClass}`\n    },\n    svgClass () {\n      if (this.className) {\n        return 'svg-icon ' + this.className\n      } else {\n        return 'svg-icon'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.svg-icon {\n  width: 1em;\n  height: 1em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n}\n</style>\n```\n\n4. 在main.js中注册全局组件\n```\nimport SvgIcon from '@/components/common/SvgIcon.vue'\nVue.component('SvgIcon', SvgIcon)\n```\n\n5. 使用\n```\n<svg-icon iconClass=\"test\"></svg-icon>\n```\n","source":"_posts/iconfont.md","raw":"---\ntitle: 前端图标的那些事\ncategories:\n    - 10技术 | CSS # 一级分类\ntags:\ndate: 2021-02-13\ndescription: 更新svg-symbol\ntoc: 1\ntop: 0\n---\n\n- 初次发布于2020-02-19\n- 第二次编辑于2021-03-13，更新svg-symbol\n---\n\n## 前言\n```\n用了矢量图标\n\n用mac的UI再也不吐槽你页面的图标放大后有点糊了...\n\nPM再也不会嫌弃你画的页面图片太大，太占load time了...\n\n你也不用因为一个hover状态，就写一段换图片src的逻辑了...\n\n```\n\n## 矢量图标\n- 不会因为放大/缩小而导致图标变模糊，即可以任意定义尺寸的icon。\n- 在现代前端项目中，除了任意定义尺寸，对图标的要求还有定义颜色等等\n\n## 字体图标\n- 以字体的形式定义的图标，可以像字体一样定义尺寸,颜色\n- 优点：体积小（用到的图标越多性价比越高）；样式便于控制，与字体一样可以调节font-size，color，阴影，旋转，透明度，且兼容低版本浏览器\n- 主流的字体图标库:fontAwesome,阿里的iconfont\n- 使用方法：矢量图片(UI) -> 转换成字体文件(工具) -> 定义font-face(前端)\n- 设计师上传svg矢量图\n\n![设计师上传svg矢量图](https://www.scarsu.com/images/gitbook/web_font03.png)\n\n- 前端下载代码，解压后目录结构：\n\n![iconfont目录结构](https://www.scarsu.com/images/gitbook/web_font04.png)\n\n- 缺点：需要UI合作；图标变更需要重新生成字体文件，定义font-face\n- 前端引用iconfont主流方式：\n1. Unicode\n    - 兼容性最好，支持 IE6+，及所有现代浏览器。\n    - 支持按字体的方式去动态调整图标大小，颜色等等。\n    - 但是因为是字体，所以不支持多色。\n    ```css\n    /*第一步：自定义@font-face，引用字体文件*/\n    @font-face {\n        font-family: 'iconfont';\n        src: url('iconfont.eot');\n        src: url('iconfont.eot?#iefix') format('embedded-opentype'),\n            url('iconfont.woff2') format('woff2'),\n            url('iconfont.woff') format('woff'),\n            url('iconfont.ttf') format('truetype'),\n            url('iconfont.svg#iconfont') format('svg');\n    }\n    /*第二步：定义使用 iconfont 的样式*/\n    .iconfont {\n        font-family: \"iconfont\" !important;\n        font-size: 16px;\n        font-style: normal;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    /*第三步：挑选相应图标并获取unicode编码，应用于页面*/\n    <span class=\"iconfont\">&#x33;</span>\n    ```\n\n2. font-class（使用最多）\n    - unicode变体，解决了unicode编码语义不明确的问题，书写更直观。可以很容易分辨这个 icon 是什么，著名的**FontAwesome**即使用该方式\n    - 兼容性良好，支持 IE8+，及所有现代浏览器。\n    - 因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。\n    - 本质上还是字体，所以多色图标还是不支持的。\n    ```css\n    /*第一步：自定义@font-face，引用字体文件*/\n    @font-face {\n        font-family: 'iconfont';\n        src: url('iconfont.eot');\n        src: url('iconfont.eot?#iefix') format('embedded-opentype'),\n            url('iconfont.woff2') format('woff2'),\n            url('iconfont.woff') format('woff'),\n            url('iconfont.ttf') format('truetype'),\n            url('iconfont.svg#iconfont') format('svg');\n    }\n    /*第二步：定义iconfont样式*/\n    .iconfont {\n        font-family: \"iconfont\" !important;\n        font-size: 16px;\n        font-style: normal;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n    /*第三步：定义每个icon unicode 样式类*/\n    .icon-gouwuche:before {\n        content: \"\\e669\";\n    }\n    ```\n    ```html\n    <!-- 第四步：引入1，2步的css -->\n    <link rel=\"stylesheet\" href=\"./iconfont.css\">\n    <!-- 第五步：挑选相应图标并使用定义的类名，应用于页面： -->\n    <span class=\"iconfont icon-xxx\"></span>\n    ```\n\n\n3. Symbol\n    - 本质是svg，支持多色。\n    - 较新的使用方式，兼容性较差，支持 IE9+，及现代浏览器。\n    - 通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。\n    - 浏览器渲染 SVG 的性能一般，还不如 png。\n    ```html\n    <!-- 第一步：引入js代码 -->\n    <script src=\"./iconfont.js\"></script>\n    ```\n    ```css\n    /* 第二步：加入通用css样式（引入一次即可） */\n    .icon {\n        width: 1em;\n        height: 1em;\n        vertical-align: -0.15em;\n        fill: currentColor;\n        overflow: hidden;\n    }\n    ```\n    ```html\n    <!-- 第三步：挑选相应图标并获取类名，应用于页面： -->\n    <svg class=\"icon\" aria-hidden=\"true\">\n        <use xlink:href=\"#icon-xxx\"></use>\n    </svg>\n    ```\n\n## icon最佳实践：svg图标\n- 除了字体图标，现代前端项目中使用更多的是Svg图标\n- `<svg>`及其一系列元素，用于矢量图像的结构、绘制与布局\n- `<symbol>元素`，是可复用的svg图像，用来定义一个图形模板对象，它可以用一个`<use>`元素实例化。\n```xml\n<svg>\n  <!-- symbol定义模板（symbol本身不会显示图像 -->\n  <symbol id=\"sym01\" viewBox=\"0 0 150 110\">\n    <circle cx=\"50\" cy=\"50\" r=\"40\" stroke-width=\"8\" stroke=\"red\" fill=\"red\"/>\n    <circle cx=\"90\" cy=\"60\" r=\"40\" stroke-width=\"8\" stroke=\"green\" fill=\"white\"/>\n  </symbol>\n\n  <!-- 使用use元素才能实例化 -->\n  <use xlink:href=\"#sym01\"\n      x=\"0\" y=\"0\" width=\"100\" height=\"50\"/>\n  <use xlink:href=\"#sym01\"\n      x=\"0\" y=\"50\" width=\"75\" height=\"38\"/>\n  <use xlink:href=\"#sym01\"\n      x=\"0\" y=\"100\" width=\"50\" height=\"25\"/>\n</svg>\n```\n- `symbolId`:在`<use>`元素的`xlink:href`属性需要指向symbol元素的id\n- 优点：\n  1. svg图标拥有字体图标的各种优点此外\n  2. svg不需要UI转成字体、定义font-face，只需要原始的svg代码，即可使用。\n  3. 通过现代前端工具整合，svg图标变更时，只需要变更单个svg文件，耦合度低\n\n## svg symbol应用于现代前端框架\n- 创建svg目录，存放一个svg文件，例如`@/assets/svg/test.svg`\n- 在webpack中配置`svg-sprite-loader`，匹配上述的svg文件，并将其symbolId配置为svg文件名,详情参考[`svg-sprite-loader`文档](https://www.npmjs.com/package/svg-sprite-loader#configuration)\n```js\n// 以下为vue cli4的配置\nmodule.exports = {\n\tchainWebpack(config){\n\t  // 1. 将./src/assets/svg排除在vue的默认webpack配置的svg规则之外\n\t  config.module.rule('svg')\n\t    .exclude.add(resolve('./src/assets/svg'))\n\t  // 2. 添加一条icons规则\n\t  config.module.rule('icons')\n\t    .test(/\\.svg$/) // 匹配svg后缀的文件\n\t    .include.add(resolve('./src/assets/svg')).end()  // 添加规则生效的路径\n\t    .use('svg-sprite-loader') // 使用svg-sprite-loader插件\n\t    .loader('svg-sprite-loader')  // 加载svg-sprite-loader插件\n\t      .options({symbolId: 'icon-[name]'}) // name:文件名，此处的symbolId即svg的xlink:href属性，xlink:href=\"#icon-文件名\"\n\t}\n...\n}\n```\n- 在vue模板中即可直接使用\n```\n// text.vue\n<template>\n  ...\n  <svg :class=\"svgClass\" v-on=\"$listeners\">\n    <use xlink:href=\"#icon-test\"></use>\n  </svg>\n  ...\n</template>\n\nimport '@/assets/svg/test.svg';\n...\n```\n- 更进一步的封装：不需要每个icon都import;`<svg-icon>`组件;\n\n1. 通过webpack上下文，将svg文件作为固定上下文，即可避免手动import，用到了webpack中的[require.context api](https://webpack.js.org/guides/dependency-management/#requirecontext)\n```js\n// @/assets/svg/index.js\n// 使用 webpack提供的require.context()指定svg为固定上下文\nfunction importAll (r) {\n  r.keys().forEach(r)\n}\nimportAll(require.context('@/assets/svg', false, /\\.svg$/))\n```\n\n2. 在main.js中引入上述js文件\n```js\nimport '@/assets/svg/index.js' // svg上下文\n```\n\n3. 封装icon组件\n```vue\n<template>\n  <svg :class=\"svgClass\" v-on=\"$listeners\">\n    <use :xlink:href=\"iconName\" />\n  </svg>\n</template>\n\n<script>\nexport default {\n  name: 'SvgIcon',\n  props: {\n    // iconClass要和svg的文件名一致\n    iconClass: {\n      type: String,\n      required: true\n    },\n    // className可以用来定制样式\n    className: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    iconName () {\n      return `#icon-${this.iconClass}`\n    },\n    svgClass () {\n      if (this.className) {\n        return 'svg-icon ' + this.className\n      } else {\n        return 'svg-icon'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.svg-icon {\n  width: 1em;\n  height: 1em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n}\n</style>\n```\n\n4. 在main.js中注册全局组件\n```\nimport SvgIcon from '@/components/common/SvgIcon.vue'\nVue.component('SvgIcon', SvgIcon)\n```\n\n5. 使用\n```\n<svg-icon iconClass=\"test\"></svg-icon>\n```\n","slug":"iconfont","published":1,"updated":"2021-03-24T08:05:48.327Z","_id":"ckir88igz003cc8y64vphv3lm","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>初次发布于2020-02-19</li>\n<li>第二次编辑于2021-03-13，更新svg-symbol</li>\n</ul>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用了矢量图标</span><br><span class=\"line\"></span><br><span class=\"line\">用mac的UI再也不吐槽你页面的图标放大后有点糊了...</span><br><span class=\"line\"></span><br><span class=\"line\">PM再也不会嫌弃你画的页面图片太大，太占load time了...</span><br><span class=\"line\"></span><br><span class=\"line\">你也不用因为一个hover状态，就写一段换图片src的逻辑了...</span><br></pre></td></tr></table></figure>\n<h2 id=\"矢量图标\"><a href=\"#矢量图标\" class=\"headerlink\" title=\"矢量图标\"></a>矢量图标</h2><ul>\n<li>不会因为放大/缩小而导致图标变模糊，即可以任意定义尺寸的icon。</li>\n<li>在现代前端项目中，除了任意定义尺寸，对图标的要求还有定义颜色等等</li>\n</ul>\n<h2 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h2><ul>\n<li>以字体的形式定义的图标，可以像字体一样定义尺寸,颜色</li>\n<li>优点：体积小（用到的图标越多性价比越高）；样式便于控制，与字体一样可以调节font-size，color，阴影，旋转，透明度，且兼容低版本浏览器</li>\n<li>主流的字体图标库:fontAwesome,阿里的iconfont</li>\n<li>使用方法：矢量图片(UI) -&gt; 转换成字体文件(工具) -&gt; 定义font-face(前端)</li>\n<li>设计师上传svg矢量图</li>\n</ul>\n<p><img src=\"https://www.scarsu.com/images/gitbook/web_font03.png\" alt=\"设计师上传svg矢量图\"></p>\n<ul>\n<li>前端下载代码，解压后目录结构：</li>\n</ul>\n<p><img src=\"https://www.scarsu.com/images/gitbook/web_font04.png\" alt=\"iconfont目录结构\"></p>\n<ul>\n<li>缺点：需要UI合作；图标变更需要重新生成字体文件，定义font-face</li>\n<li>前端引用iconfont主流方式：</li>\n</ul>\n<ol>\n<li><p>Unicode</p>\n<ul>\n<li>兼容性最好，支持 IE6+，及所有现代浏览器。</li>\n<li>支持按字体的方式去动态调整图标大小，颜色等等。</li>\n<li>但是因为是字体，所以不支持多色。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一步：自定义@font-face，引用字体文件*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'iconfont'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff2'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff2'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.svg#iconfont'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第二步：定义使用 iconfont 的样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第三步：挑选相应图标并获取unicode编码，应用于页面*/</span></span><br><span class=\"line\">&lt;span class=\"iconfont\"&gt;&amp;#x33;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>font-class（使用最多）</p>\n<ul>\n<li>unicode变体，解决了unicode编码语义不明确的问题，书写更直观。可以很容易分辨这个 icon 是什么，著名的<strong>FontAwesome</strong>即使用该方式</li>\n<li>兼容性良好，支持 IE8+，及所有现代浏览器。</li>\n<li>因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。</li>\n<li><p>本质上还是字体，所以多色图标还是不支持的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一步：自定义@font-face，引用字体文件*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'iconfont'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff2'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff2'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.svg#iconfont'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第二步：定义iconfont样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第三步：定义每个icon unicode 样式类*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-gouwuche</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\e669\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第四步：引入1，2步的css --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./iconfont.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第五步：挑选相应图标并使用定义的类名，应用于页面： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Symbol</p>\n<ul>\n<li>本质是svg，支持多色。</li>\n<li>较新的使用方式，兼容性较差，支持 IE9+，及现代浏览器。</li>\n<li>通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。</li>\n<li><p>浏览器渲染 SVG 的性能一般，还不如 png。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第一步：引入js代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./iconfont.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 第二步：加入通用css样式（引入一次即可） */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: -<span class=\"number\">0.15em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: currentColor;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第三步：挑选相应图标并获取类名，应用于页面： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"icon最佳实践：svg图标\"><a href=\"#icon最佳实践：svg图标\" class=\"headerlink\" title=\"icon最佳实践：svg图标\"></a>icon最佳实践：svg图标</h2><ul>\n<li>除了字体图标，现代前端项目中使用更多的是Svg图标</li>\n<li><code>&lt;svg&gt;</code>及其一系列元素，用于矢量图像的结构、绘制与布局</li>\n<li><p><code>&lt;symbol&gt;元素</code>，是可复用的svg图像，用来定义一个图形模板对象，它可以用一个<code>&lt;use&gt;</code>元素实例化。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- symbol定义模板（symbol本身不会显示图像 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">symbol</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sym01\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 150 110\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"red\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"90\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"60\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"green\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"white\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">symbol</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 使用use元素才能实例化 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#sym01\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#sym01\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"75\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"38\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#sym01\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"25\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>symbolId</code>:在<code>&lt;use&gt;</code>元素的<code>xlink:href</code>属性需要指向symbol元素的id</p>\n</li>\n<li>优点：<ol>\n<li>svg图标拥有字体图标的各种优点此外</li>\n<li>svg不需要UI转成字体、定义font-face，只需要原始的svg代码，即可使用。</li>\n<li>通过现代前端工具整合，svg图标变更时，只需要变更单个svg文件，耦合度低</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"svg-symbol应用于现代前端框架\"><a href=\"#svg-symbol应用于现代前端框架\" class=\"headerlink\" title=\"svg symbol应用于现代前端框架\"></a>svg symbol应用于现代前端框架</h2><ul>\n<li>创建svg目录，存放一个svg文件，例如<code>@/assets/svg/test.svg</code></li>\n<li><p>在webpack中配置<code>svg-sprite-loader</code>，匹配上述的svg文件，并将其symbolId配置为svg文件名,详情参考<a href=\"https://www.npmjs.com/package/svg-sprite-loader#configuration\" target=\"_blank\" rel=\"noopener\"><code>svg-sprite-loader</code>文档</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下为vue cli4的配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tchainWebpack(config)&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">// 1. 将./src/assets/svg排除在vue的默认webpack配置的svg规则之外</span></span><br><span class=\"line\">\t  config.module.rule(<span class=\"string\">'svg'</span>)</span><br><span class=\"line\">\t    .exclude.add(resolve(<span class=\"string\">'./src/assets/svg'</span>))</span><br><span class=\"line\">\t  <span class=\"comment\">// 2. 添加一条icons规则</span></span><br><span class=\"line\">\t  config.module.rule(<span class=\"string\">'icons'</span>)</span><br><span class=\"line\">\t    .test(<span class=\"regexp\">/\\.svg$/</span>) <span class=\"comment\">// 匹配svg后缀的文件</span></span><br><span class=\"line\">\t    .include.add(resolve(<span class=\"string\">'./src/assets/svg'</span>)).end()  <span class=\"comment\">// 添加规则生效的路径</span></span><br><span class=\"line\">\t    .use(<span class=\"string\">'svg-sprite-loader'</span>) <span class=\"comment\">// 使用svg-sprite-loader插件</span></span><br><span class=\"line\">\t    .loader(<span class=\"string\">'svg-sprite-loader'</span>)  <span class=\"comment\">// 加载svg-sprite-loader插件</span></span><br><span class=\"line\">\t      .options(&#123;<span class=\"attr\">symbolId</span>: <span class=\"string\">'icon-[name]'</span>&#125;) <span class=\"comment\">// name:文件名，此处的symbolId即svg的xlink:href属性，xlink:href=\"#icon-文件名\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在vue模板中即可直接使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// text.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;svg :class=&quot;svgClass&quot; v-on=&quot;$listeners&quot;&gt;</span><br><span class=\"line\">    &lt;use xlink:href=&quot;#icon-test&quot;&gt;&lt;/use&gt;</span><br><span class=\"line\">  &lt;/svg&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;@/assets/svg/test.svg&apos;;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更进一步的封装：不需要每个icon都import;<code>&lt;svg-icon&gt;</code>组件;</p>\n</li>\n</ul>\n<ol>\n<li><p>通过webpack上下文，将svg文件作为固定上下文，即可避免手动import，用到了webpack中的<a href=\"https://webpack.js.org/guides/dependency-management/#requirecontext\" target=\"_blank\" rel=\"noopener\">require.context api</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// @/assets/svg/index.js</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 webpack提供的require.context()指定svg为固定上下文</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">importAll</span> (<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">  r.keys().forEach(r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">importAll(<span class=\"built_in\">require</span>.context(<span class=\"string\">'@/assets/svg'</span>, <span class=\"literal\">false</span>, /\\.svg$/))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js中引入上述js文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@/assets/svg/index.js'</span> <span class=\"comment\">// svg上下文</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>封装icon组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;svg :class=&quot;svgClass&quot; v-on=&quot;$listeners&quot;&gt;</span><br><span class=\"line\">    &lt;use :xlink:href=&quot;iconName&quot; /&gt;</span><br><span class=\"line\">  &lt;/svg&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;SvgIcon&apos;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    // iconClass要和svg的文件名一致</span><br><span class=\"line\">    iconClass: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      required: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // className可以用来定制样式</span><br><span class=\"line\">    className: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    iconName () &#123;</span><br><span class=\"line\">      return `#icon-$&#123;this.iconClass&#125;`</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    svgClass () &#123;</span><br><span class=\"line\">      if (this.className) &#123;</span><br><span class=\"line\">        return &apos;svg-icon &apos; + this.className</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        return &apos;svg-icon&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.svg-icon &#123;</span><br><span class=\"line\">  width: 1em;</span><br><span class=\"line\">  height: 1em;</span><br><span class=\"line\">  vertical-align: -0.15em;</span><br><span class=\"line\">  fill: currentColor;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js中注册全局组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import SvgIcon from &apos;@/components/common/SvgIcon.vue&apos;</span><br><span class=\"line\">Vue.component(&apos;SvgIcon&apos;, SvgIcon)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg-icon iconClass=&quot;test&quot;&gt;&lt;/svg-icon&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>初次发布于2020-02-19</li>\n<li>第二次编辑于2021-03-13，更新svg-symbol</li>\n</ul>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用了矢量图标</span><br><span class=\"line\"></span><br><span class=\"line\">用mac的UI再也不吐槽你页面的图标放大后有点糊了...</span><br><span class=\"line\"></span><br><span class=\"line\">PM再也不会嫌弃你画的页面图片太大，太占load time了...</span><br><span class=\"line\"></span><br><span class=\"line\">你也不用因为一个hover状态，就写一段换图片src的逻辑了...</span><br></pre></td></tr></table></figure>\n<h2 id=\"矢量图标\"><a href=\"#矢量图标\" class=\"headerlink\" title=\"矢量图标\"></a>矢量图标</h2><ul>\n<li>不会因为放大/缩小而导致图标变模糊，即可以任意定义尺寸的icon。</li>\n<li>在现代前端项目中，除了任意定义尺寸，对图标的要求还有定义颜色等等</li>\n</ul>\n<h2 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h2><ul>\n<li>以字体的形式定义的图标，可以像字体一样定义尺寸,颜色</li>\n<li>优点：体积小（用到的图标越多性价比越高）；样式便于控制，与字体一样可以调节font-size，color，阴影，旋转，透明度，且兼容低版本浏览器</li>\n<li>主流的字体图标库:fontAwesome,阿里的iconfont</li>\n<li>使用方法：矢量图片(UI) -&gt; 转换成字体文件(工具) -&gt; 定义font-face(前端)</li>\n<li>设计师上传svg矢量图</li>\n</ul>\n<p><img src=\"https://www.scarsu.com/images/gitbook/web_font03.png\" alt=\"设计师上传svg矢量图\"></p>\n<ul>\n<li>前端下载代码，解压后目录结构：</li>\n</ul>\n<p><img src=\"https://www.scarsu.com/images/gitbook/web_font04.png\" alt=\"iconfont目录结构\"></p>\n<ul>\n<li>缺点：需要UI合作；图标变更需要重新生成字体文件，定义font-face</li>\n<li>前端引用iconfont主流方式：</li>\n</ul>\n<ol>\n<li><p>Unicode</p>\n<ul>\n<li>兼容性最好，支持 IE6+，及所有现代浏览器。</li>\n<li>支持按字体的方式去动态调整图标大小，颜色等等。</li>\n<li>但是因为是字体，所以不支持多色。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一步：自定义@font-face，引用字体文件*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'iconfont'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff2'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff2'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.svg#iconfont'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第二步：定义使用 iconfont 的样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第三步：挑选相应图标并获取unicode编码，应用于页面*/</span></span><br><span class=\"line\">&lt;span class=\"iconfont\"&gt;&amp;#x33;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>font-class（使用最多）</p>\n<ul>\n<li>unicode变体，解决了unicode编码语义不明确的问题，书写更直观。可以很容易分辨这个 icon 是什么，著名的<strong>FontAwesome</strong>即使用该方式</li>\n<li>兼容性良好，支持 IE8+，及所有现代浏览器。</li>\n<li>因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。</li>\n<li><p>本质上还是字体，所以多色图标还是不支持的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*第一步：自定义@font-face，引用字体文件*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'iconfont'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot'</span>);</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff2'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff2'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>),</span><br><span class=\"line\">        <span class=\"built_in\">url</span>(<span class=\"string\">'iconfont.svg#iconfont'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第二步：定义iconfont样式*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.iconfont</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"iconfont\"</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*第三步：定义每个icon unicode 样式类*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon-gouwuche</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\\e669\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第四步：引入1，2步的css --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./iconfont.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第五步：挑选相应图标并使用定义的类名，应用于页面： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Symbol</p>\n<ul>\n<li>本质是svg，支持多色。</li>\n<li>较新的使用方式，兼容性较差，支持 IE9+，及现代浏览器。</li>\n<li>通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。</li>\n<li><p>浏览器渲染 SVG 的性能一般，还不如 png。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第一步：引入js代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./iconfont.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 第二步：加入通用css样式（引入一次即可） */</span></span><br><span class=\"line\"><span class=\"selector-class\">.icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: -<span class=\"number\">0.15em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: currentColor;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 第三步：挑选相应图标并获取类名，应用于页面： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"icon最佳实践：svg图标\"><a href=\"#icon最佳实践：svg图标\" class=\"headerlink\" title=\"icon最佳实践：svg图标\"></a>icon最佳实践：svg图标</h2><ul>\n<li>除了字体图标，现代前端项目中使用更多的是Svg图标</li>\n<li><code>&lt;svg&gt;</code>及其一系列元素，用于矢量图像的结构、绘制与布局</li>\n<li><p><code>&lt;symbol&gt;元素</code>，是可复用的svg图像，用来定义一个图形模板对象，它可以用一个<code>&lt;use&gt;</code>元素实例化。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- symbol定义模板（symbol本身不会显示图像 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">symbol</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sym01\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 150 110\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"red\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"90\"</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"60\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"40\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"green\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"white\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">symbol</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 使用use元素才能实例化 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#sym01\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#sym01\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"75\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"38\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#sym01\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"25\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>symbolId</code>:在<code>&lt;use&gt;</code>元素的<code>xlink:href</code>属性需要指向symbol元素的id</p>\n</li>\n<li>优点：<ol>\n<li>svg图标拥有字体图标的各种优点此外</li>\n<li>svg不需要UI转成字体、定义font-face，只需要原始的svg代码，即可使用。</li>\n<li>通过现代前端工具整合，svg图标变更时，只需要变更单个svg文件，耦合度低</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"svg-symbol应用于现代前端框架\"><a href=\"#svg-symbol应用于现代前端框架\" class=\"headerlink\" title=\"svg symbol应用于现代前端框架\"></a>svg symbol应用于现代前端框架</h2><ul>\n<li>创建svg目录，存放一个svg文件，例如<code>@/assets/svg/test.svg</code></li>\n<li><p>在webpack中配置<code>svg-sprite-loader</code>，匹配上述的svg文件，并将其symbolId配置为svg文件名,详情参考<a href=\"https://www.npmjs.com/package/svg-sprite-loader#configuration\" target=\"_blank\" rel=\"noopener\"><code>svg-sprite-loader</code>文档</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下为vue cli4的配置</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tchainWebpack(config)&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">// 1. 将./src/assets/svg排除在vue的默认webpack配置的svg规则之外</span></span><br><span class=\"line\">\t  config.module.rule(<span class=\"string\">'svg'</span>)</span><br><span class=\"line\">\t    .exclude.add(resolve(<span class=\"string\">'./src/assets/svg'</span>))</span><br><span class=\"line\">\t  <span class=\"comment\">// 2. 添加一条icons规则</span></span><br><span class=\"line\">\t  config.module.rule(<span class=\"string\">'icons'</span>)</span><br><span class=\"line\">\t    .test(<span class=\"regexp\">/\\.svg$/</span>) <span class=\"comment\">// 匹配svg后缀的文件</span></span><br><span class=\"line\">\t    .include.add(resolve(<span class=\"string\">'./src/assets/svg'</span>)).end()  <span class=\"comment\">// 添加规则生效的路径</span></span><br><span class=\"line\">\t    .use(<span class=\"string\">'svg-sprite-loader'</span>) <span class=\"comment\">// 使用svg-sprite-loader插件</span></span><br><span class=\"line\">\t    .loader(<span class=\"string\">'svg-sprite-loader'</span>)  <span class=\"comment\">// 加载svg-sprite-loader插件</span></span><br><span class=\"line\">\t      .options(&#123;<span class=\"attr\">symbolId</span>: <span class=\"string\">'icon-[name]'</span>&#125;) <span class=\"comment\">// name:文件名，此处的symbolId即svg的xlink:href属性，xlink:href=\"#icon-文件名\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在vue模板中即可直接使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// text.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;svg :class=&quot;svgClass&quot; v-on=&quot;$listeners&quot;&gt;</span><br><span class=\"line\">    &lt;use xlink:href=&quot;#icon-test&quot;&gt;&lt;/use&gt;</span><br><span class=\"line\">  &lt;/svg&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;@/assets/svg/test.svg&apos;;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更进一步的封装：不需要每个icon都import;<code>&lt;svg-icon&gt;</code>组件;</p>\n</li>\n</ul>\n<ol>\n<li><p>通过webpack上下文，将svg文件作为固定上下文，即可避免手动import，用到了webpack中的<a href=\"https://webpack.js.org/guides/dependency-management/#requirecontext\" target=\"_blank\" rel=\"noopener\">require.context api</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// @/assets/svg/index.js</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 webpack提供的require.context()指定svg为固定上下文</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">importAll</span> (<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">  r.keys().forEach(r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">importAll(<span class=\"built_in\">require</span>.context(<span class=\"string\">'@/assets/svg'</span>, <span class=\"literal\">false</span>, /\\.svg$/))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js中引入上述js文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@/assets/svg/index.js'</span> <span class=\"comment\">// svg上下文</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>封装icon组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;svg :class=&quot;svgClass&quot; v-on=&quot;$listeners&quot;&gt;</span><br><span class=\"line\">    &lt;use :xlink:href=&quot;iconName&quot; /&gt;</span><br><span class=\"line\">  &lt;/svg&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;SvgIcon&apos;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    // iconClass要和svg的文件名一致</span><br><span class=\"line\">    iconClass: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      required: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // className可以用来定制样式</span><br><span class=\"line\">    className: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    iconName () &#123;</span><br><span class=\"line\">      return `#icon-$&#123;this.iconClass&#125;`</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    svgClass () &#123;</span><br><span class=\"line\">      if (this.className) &#123;</span><br><span class=\"line\">        return &apos;svg-icon &apos; + this.className</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        return &apos;svg-icon&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.svg-icon &#123;</span><br><span class=\"line\">  width: 1em;</span><br><span class=\"line\">  height: 1em;</span><br><span class=\"line\">  vertical-align: -0.15em;</span><br><span class=\"line\">  fill: currentColor;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在main.js中注册全局组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import SvgIcon from &apos;@/components/common/SvgIcon.vue&apos;</span><br><span class=\"line\">Vue.component(&apos;SvgIcon&apos;, SvgIcon)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg-icon iconClass=&quot;test&quot;&gt;&lt;/svg-icon&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"【Harmony OS】作为前端技术人，体验刚开源的鸿蒙OS","date":"2020-09-11T16:00:00.000Z","description":"鸿蒙OS中的轻量级响应式前端框架","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211124024.png","_content":"\n![](/images/hmos/000.png)\n\n华为2020开发者大会在9月10号如约而至\n\n从2019年大会鸿蒙发布后，很多人的目光都聚焦在了鸿蒙OS的开源计划上，“PPT系统”的声音不绝于耳\n\n今天发布会之前，吃瓜的我无意间在gitee上看到了这个横幅👇，我知道，终于它来了\n\n![HDC2020](/images/hmos/001.png)\n\n截至到我发稿前，开源仓库已经有了2k+ star\n\n![鸿蒙OS即将开源](/images/hmos/002.png)\n\n并且提供了看起来比较完善的中文文档\n\n![鸿蒙OS开源](/images/hmos/003.png)\n\n同时发布了一款配套的IDE **「DevEco Studio」**，注册开发者即可下载\n\n![鸿蒙OS - DevEco Studio](/images/hmos/004.png)\n\n## 前端er上手体验\n\n作为一个前端技术人，比较令我兴奋的是，鸿蒙OS有一套基于**前端技术栈**的UI开发框架\n\n![鸿蒙OS - JS框架](/images/hmos/005.png)\n\n于是我上手体验了一下，下面简单介绍一下步骤。\n\n安装IDE之后，创建项目，这里我选择了一个TV设备的项目模板\n\n![鸿蒙OS](/images/hmos/006.png)\n\n做一些简单的配置\n\n![鸿蒙OS](/images/hmos/007.png)\n\n然后会自动打包构建出一个demo项目，并且在IDE内提供了远程模拟设备\n\n![鸿蒙OS](/images/hmos/008.png)\n\n选取合适的模拟设备后，就可以运行项目了，得到的效果是这样的\n\n![鸿蒙OS](/images/hmos/009.png)\n\n## 代码\n\n效果图这样的一个电视页面，用到了 **hml+css+js** 三部分代码\n\nhml：\n\n```html\n<div class=\"container\">\n    <div class=\"tv_box\">\n        <div class=\"title_box\">\n            <text class=\"title\">{{title}}</text>\n            <text class=\"title\">酥鱼TVtest</text>\n            <button type=\"circle\" icon=\"{{icon_src}}\" class=\"setting_box\" onfocus=\"iconFocusFunc\"\n                    onblur=\"iconBlurFunc\"></button>\n        </div>\n        <tabs class=\"tab_box\">\n            <tab-bar mode=\"scrollable\" class=\"bar_box\">\n                <block for=\"[1,2,3,4,5,6,7,8,9]\">\n                    <text class=\"tab_text\">{{$t('strings.tab')}}\n                    </text>\n                </block>\n            </tab-bar>\n            <tab-content>\n                <block for=\"[1,2,3,4,5,6,7,8,9]\">\n                    <div class=\"content_box\">\n                        <list class=\"content_img\">\n                            <block for=\"[1,2,3,4]\">\n                                <list-item type=\"listItem\" class=\"list_img\">\n                                    <image focusable=\"true\" class=\"tab_img\" src=\"/common/img-large.png\"></image>\n                                </list-item>\n                            </block>\n                        </list>\n                        ...\n                    </div>\n                </block>\n            </tab-content>\n        </tabs>\n    </div>\n</div>\n\n```\n\njs:\n\n```javascript\nimport app from '@system.app';\nexport default {\n    data: {\n        title: \"\",\n        subtitle: \"\",\n        icon_src: \"/common/plus.png\",\n        appName: app.getInfo().appName\n    },\n    onInit() {\n        this.title = this.appName;\n        this.subtitle = this.$t('strings.subtitle');\n    },\n    iconFocusFunc: function () {\n        this.icon_src = \"/common/plus-black.png\";\n    },\n    iconBlurFunc: function () {\n        this.icon_src = \"/common/plus-white.png\";\n    }\n}\n```\n\ncss:\n\n```css\n.container {\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background-color: #000000;\n}\n\n.title_box {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 60px;\n}\n\n.title {\n    font-size: 36px;\n    color: rgba(255, 255, 255, 0.9);\n    margin-left: 48px;\n}\n...\n\n```\n\n## JS架构和源码\n\n鸿蒙的 JS 框架 **ace_lite_jsfwk**,官方介绍是“轻量级 JS 核心开发框架”\n\n<!-- ![架构图](https://gitee.com/openharmony/docs/raw/master/readme/figures/js-framework.png) -->\n![鸿蒙OS 前端框架 架构图](/images/hmos/012.png)\n\n> 提供了一套跨平台的类web应用开发框架，通过Toolkit将开发者编写的**HML、CSS和JS** 文件编译打包成**JS Bundle**，然后再将JS Bundle**解析运行成C++ native UI的View 组件**进行渲染。通过支持三方开发者使用声明式的API进行应用开发，以数据驱动视图变化，避免了大量的视图操作，大大降低了应用开发难度，提升开发者开发体验。\n\n源码的地址在：[https://openharmony.gitee.com/openharmony/ace_lite_jsfwk](https://openharmony.gitee.com/openharmony/ace_lite_jsfwk)\n\n其中JS的核心代码，主要在以下几个文件\n\n```bash\nruntime-core\\src\\core\\index.js\nruntime-core\\src\\observer\\\n                    |----observer.js\n                    |----subject.js\n                    |----utils.js\nruntime-core\\src\\profiler\\index.js\n```\n\n也提供了一些测试用例：\n\n![鸿蒙OS](/images/hmos/010.png)\n\n从源码看，实现了一个轻量的响应式MVVM系统，使用了 vue2 同样的属性劫持技术，即 `Object.defineProperty` API。\n\n## 总结\n\n整体体验下来，感觉开发过程还是很丝滑的，api和开发模式很有vue的味道，应该存在借鉴。对于vue技术栈的前端er来说应该很好上手\n\n![鸿蒙OS](/images/hmos/011.png)\n\n自从去年的贸易战到后来的疫情，国际局势日趋复杂，鸿蒙OS的开源，对于国家和国内技术行业都有非凡的意义\n\n单从前端行业的角度来看，鸿蒙OS的发布，给前端技术人提供了web之外，扩展向物联网行业的，更广的发挥空间和更多的应用场景\n\n值得前端技术人向国内鸿蒙开源社区，提供更多的关注，注入更多的技术力量\n\n## 资源\n\n- [鸿蒙OS开源地址](https://openharmony.gitee.com/openharmony)\n- [鸿蒙OS IDE下载](https://developer.harmonyos.com/cn/develop/deveco-studio#download)\n- [鸿蒙OS开发者文档](https://gitee.com/openharmony/docs)\n- [鸿蒙OS前端js框架文档](https://developer.harmonyos.com/cn/docs/documentation/js-framework-file-0000000000611396)\n- [鸿蒙OS前端js框架源码](https://openharmony.gitee.com/openharmony/ace_lite_jsfwk)\n","source":"_posts/hmos.md","raw":"---\ntitle: 【Harmony OS】作为前端技术人，体验刚开源的鸿蒙OS\ncategories:\n    - 10技术 | JS # 一级分类\ntags:\ndate: 2020-09-12\ndescription: 鸿蒙OS中的轻量级响应式前端框架\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211124024.png\n---\n\n![](/images/hmos/000.png)\n\n华为2020开发者大会在9月10号如约而至\n\n从2019年大会鸿蒙发布后，很多人的目光都聚焦在了鸿蒙OS的开源计划上，“PPT系统”的声音不绝于耳\n\n今天发布会之前，吃瓜的我无意间在gitee上看到了这个横幅👇，我知道，终于它来了\n\n![HDC2020](/images/hmos/001.png)\n\n截至到我发稿前，开源仓库已经有了2k+ star\n\n![鸿蒙OS即将开源](/images/hmos/002.png)\n\n并且提供了看起来比较完善的中文文档\n\n![鸿蒙OS开源](/images/hmos/003.png)\n\n同时发布了一款配套的IDE **「DevEco Studio」**，注册开发者即可下载\n\n![鸿蒙OS - DevEco Studio](/images/hmos/004.png)\n\n## 前端er上手体验\n\n作为一个前端技术人，比较令我兴奋的是，鸿蒙OS有一套基于**前端技术栈**的UI开发框架\n\n![鸿蒙OS - JS框架](/images/hmos/005.png)\n\n于是我上手体验了一下，下面简单介绍一下步骤。\n\n安装IDE之后，创建项目，这里我选择了一个TV设备的项目模板\n\n![鸿蒙OS](/images/hmos/006.png)\n\n做一些简单的配置\n\n![鸿蒙OS](/images/hmos/007.png)\n\n然后会自动打包构建出一个demo项目，并且在IDE内提供了远程模拟设备\n\n![鸿蒙OS](/images/hmos/008.png)\n\n选取合适的模拟设备后，就可以运行项目了，得到的效果是这样的\n\n![鸿蒙OS](/images/hmos/009.png)\n\n## 代码\n\n效果图这样的一个电视页面，用到了 **hml+css+js** 三部分代码\n\nhml：\n\n```html\n<div class=\"container\">\n    <div class=\"tv_box\">\n        <div class=\"title_box\">\n            <text class=\"title\">{{title}}</text>\n            <text class=\"title\">酥鱼TVtest</text>\n            <button type=\"circle\" icon=\"{{icon_src}}\" class=\"setting_box\" onfocus=\"iconFocusFunc\"\n                    onblur=\"iconBlurFunc\"></button>\n        </div>\n        <tabs class=\"tab_box\">\n            <tab-bar mode=\"scrollable\" class=\"bar_box\">\n                <block for=\"[1,2,3,4,5,6,7,8,9]\">\n                    <text class=\"tab_text\">{{$t('strings.tab')}}\n                    </text>\n                </block>\n            </tab-bar>\n            <tab-content>\n                <block for=\"[1,2,3,4,5,6,7,8,9]\">\n                    <div class=\"content_box\">\n                        <list class=\"content_img\">\n                            <block for=\"[1,2,3,4]\">\n                                <list-item type=\"listItem\" class=\"list_img\">\n                                    <image focusable=\"true\" class=\"tab_img\" src=\"/common/img-large.png\"></image>\n                                </list-item>\n                            </block>\n                        </list>\n                        ...\n                    </div>\n                </block>\n            </tab-content>\n        </tabs>\n    </div>\n</div>\n\n```\n\njs:\n\n```javascript\nimport app from '@system.app';\nexport default {\n    data: {\n        title: \"\",\n        subtitle: \"\",\n        icon_src: \"/common/plus.png\",\n        appName: app.getInfo().appName\n    },\n    onInit() {\n        this.title = this.appName;\n        this.subtitle = this.$t('strings.subtitle');\n    },\n    iconFocusFunc: function () {\n        this.icon_src = \"/common/plus-black.png\";\n    },\n    iconBlurFunc: function () {\n        this.icon_src = \"/common/plus-white.png\";\n    }\n}\n```\n\ncss:\n\n```css\n.container {\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background-color: #000000;\n}\n\n.title_box {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 60px;\n}\n\n.title {\n    font-size: 36px;\n    color: rgba(255, 255, 255, 0.9);\n    margin-left: 48px;\n}\n...\n\n```\n\n## JS架构和源码\n\n鸿蒙的 JS 框架 **ace_lite_jsfwk**,官方介绍是“轻量级 JS 核心开发框架”\n\n<!-- ![架构图](https://gitee.com/openharmony/docs/raw/master/readme/figures/js-framework.png) -->\n![鸿蒙OS 前端框架 架构图](/images/hmos/012.png)\n\n> 提供了一套跨平台的类web应用开发框架，通过Toolkit将开发者编写的**HML、CSS和JS** 文件编译打包成**JS Bundle**，然后再将JS Bundle**解析运行成C++ native UI的View 组件**进行渲染。通过支持三方开发者使用声明式的API进行应用开发，以数据驱动视图变化，避免了大量的视图操作，大大降低了应用开发难度，提升开发者开发体验。\n\n源码的地址在：[https://openharmony.gitee.com/openharmony/ace_lite_jsfwk](https://openharmony.gitee.com/openharmony/ace_lite_jsfwk)\n\n其中JS的核心代码，主要在以下几个文件\n\n```bash\nruntime-core\\src\\core\\index.js\nruntime-core\\src\\observer\\\n                    |----observer.js\n                    |----subject.js\n                    |----utils.js\nruntime-core\\src\\profiler\\index.js\n```\n\n也提供了一些测试用例：\n\n![鸿蒙OS](/images/hmos/010.png)\n\n从源码看，实现了一个轻量的响应式MVVM系统，使用了 vue2 同样的属性劫持技术，即 `Object.defineProperty` API。\n\n## 总结\n\n整体体验下来，感觉开发过程还是很丝滑的，api和开发模式很有vue的味道，应该存在借鉴。对于vue技术栈的前端er来说应该很好上手\n\n![鸿蒙OS](/images/hmos/011.png)\n\n自从去年的贸易战到后来的疫情，国际局势日趋复杂，鸿蒙OS的开源，对于国家和国内技术行业都有非凡的意义\n\n单从前端行业的角度来看，鸿蒙OS的发布，给前端技术人提供了web之外，扩展向物联网行业的，更广的发挥空间和更多的应用场景\n\n值得前端技术人向国内鸿蒙开源社区，提供更多的关注，注入更多的技术力量\n\n## 资源\n\n- [鸿蒙OS开源地址](https://openharmony.gitee.com/openharmony)\n- [鸿蒙OS IDE下载](https://developer.harmonyos.com/cn/develop/deveco-studio#download)\n- [鸿蒙OS开发者文档](https://gitee.com/openharmony/docs)\n- [鸿蒙OS前端js框架文档](https://developer.harmonyos.com/cn/docs/documentation/js-framework-file-0000000000611396)\n- [鸿蒙OS前端js框架源码](https://openharmony.gitee.com/openharmony/ace_lite_jsfwk)\n","slug":"hmos","published":1,"updated":"2021-01-22T10:02:45.678Z","_id":"ckir88ih1003ec8y6ws8nihh1","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/hmos/000.png\" alt></p>\n<p>华为2020开发者大会在9月10号如约而至</p>\n<p>从2019年大会鸿蒙发布后，很多人的目光都聚焦在了鸿蒙OS的开源计划上，“PPT系统”的声音不绝于耳</p>\n<p>今天发布会之前，吃瓜的我无意间在gitee上看到了这个横幅👇，我知道，终于它来了</p>\n<p><img src=\"/images/hmos/001.png\" alt=\"HDC2020\"></p>\n<p>截至到我发稿前，开源仓库已经有了2k+ star</p>\n<p><img src=\"/images/hmos/002.png\" alt=\"鸿蒙OS即将开源\"></p>\n<p>并且提供了看起来比较完善的中文文档</p>\n<p><img src=\"/images/hmos/003.png\" alt=\"鸿蒙OS开源\"></p>\n<p>同时发布了一款配套的IDE <strong>「DevEco Studio」</strong>，注册开发者即可下载</p>\n<p><img src=\"/images/hmos/004.png\" alt=\"鸿蒙OS - DevEco Studio\"></p>\n<h2 id=\"前端er上手体验\"><a href=\"#前端er上手体验\" class=\"headerlink\" title=\"前端er上手体验\"></a>前端er上手体验</h2><p>作为一个前端技术人，比较令我兴奋的是，鸿蒙OS有一套基于<strong>前端技术栈</strong>的UI开发框架</p>\n<p><img src=\"/images/hmos/005.png\" alt=\"鸿蒙OS - JS框架\"></p>\n<p>于是我上手体验了一下，下面简单介绍一下步骤。</p>\n<p>安装IDE之后，创建项目，这里我选择了一个TV设备的项目模板</p>\n<p><img src=\"/images/hmos/006.png\" alt=\"鸿蒙OS\"></p>\n<p>做一些简单的配置</p>\n<p><img src=\"/images/hmos/007.png\" alt=\"鸿蒙OS\"></p>\n<p>然后会自动打包构建出一个demo项目，并且在IDE内提供了远程模拟设备</p>\n<p><img src=\"/images/hmos/008.png\" alt=\"鸿蒙OS\"></p>\n<p>选取合适的模拟设备后，就可以运行项目了，得到的效果是这样的</p>\n<p><img src=\"/images/hmos/009.png\" alt=\"鸿蒙OS\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>效果图这样的一个电视页面，用到了 <strong>hml+css+js</strong> 三部分代码</p>\n<p>hml：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tv_box\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title_box\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>酥鱼TVtest<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"circle\"</span> <span class=\"attr\">icon</span>=<span class=\"string\">\"&#123;&#123;icon_src&#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"setting_box\"</span> <span class=\"attr\">onfocus</span>=<span class=\"string\">\"iconFocusFunc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">onblur</span>=<span class=\"string\">\"iconBlurFunc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tabs</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab_box\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tab-bar</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"scrollable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bar_box\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">for</span>=<span class=\"string\">\"[1,2,3,4,5,6,7,8,9]\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab_text\"</span>&gt;</span>&#123;&#123;$t('strings.tab')&#125;&#125;</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tab-bar</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tab-content</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">for</span>=<span class=\"string\">\"[1,2,3,4,5,6,7,8,9]\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content_box\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">list</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content_img\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">for</span>=<span class=\"string\">\"[1,2,3,4]\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">list-item</span> <span class=\"attr\">type</span>=<span class=\"string\">\"listItem\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list_img\"</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">focusable</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab_img\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/common/img-large.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">list-item</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tab-content</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tabs</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> app <span class=\"keyword\">from</span> <span class=\"string\">'@system.app'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        subtitle: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        icon_src: <span class=\"string\">\"/common/plus.png\"</span>,</span><br><span class=\"line\">        appName: app.getInfo().appName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onInit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = <span class=\"keyword\">this</span>.appName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subtitle = <span class=\"keyword\">this</span>.$t(<span class=\"string\">'strings.subtitle'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    iconFocusFunc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.icon_src = <span class=\"string\">\"/common/plus-black.png\"</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    iconBlurFunc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.icon_src = <span class=\"string\">\"/common/plus-white.png\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.title_box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">36px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0.9</span>);</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"JS架构和源码\"><a href=\"#JS架构和源码\" class=\"headerlink\" title=\"JS架构和源码\"></a>JS架构和源码</h2><p>鸿蒙的 JS 框架 <strong>ace_lite_jsfwk</strong>,官方介绍是“轻量级 JS 核心开发框架”</p>\n<!-- ![架构图](https://gitee.com/openharmony/docs/raw/master/readme/figures/js-framework.png) -->\n<p><img src=\"/images/hmos/012.png\" alt=\"鸿蒙OS 前端框架 架构图\"></p>\n<blockquote>\n<p>提供了一套跨平台的类web应用开发框架，通过Toolkit将开发者编写的<strong>HML、CSS和JS</strong> 文件编译打包成<strong>JS Bundle</strong>，然后再将JS Bundle<strong>解析运行成C++ native UI的View 组件</strong>进行渲染。通过支持三方开发者使用声明式的API进行应用开发，以数据驱动视图变化，避免了大量的视图操作，大大降低了应用开发难度，提升开发者开发体验。</p>\n</blockquote>\n<p>源码的地址在：<a href=\"https://openharmony.gitee.com/openharmony/ace_lite_jsfwk\" target=\"_blank\" rel=\"noopener\">https://openharmony.gitee.com/openharmony/ace_lite_jsfwk</a></p>\n<p>其中JS的核心代码，主要在以下几个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime-core\\src\\core\\index.js</span><br><span class=\"line\">runtime-core\\src\\observer\\</span><br><span class=\"line\">                    |----observer.js</span><br><span class=\"line\">                    |----subject.js</span><br><span class=\"line\">                    |----utils.js</span><br><span class=\"line\">runtime-core\\src\\profiler\\index.js</span><br></pre></td></tr></table></figure>\n<p>也提供了一些测试用例：</p>\n<p><img src=\"/images/hmos/010.png\" alt=\"鸿蒙OS\"></p>\n<p>从源码看，实现了一个轻量的响应式MVVM系统，使用了 vue2 同样的属性劫持技术，即 <code>Object.defineProperty</code> API。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>整体体验下来，感觉开发过程还是很丝滑的，api和开发模式很有vue的味道，应该存在借鉴。对于vue技术栈的前端er来说应该很好上手</p>\n<p><img src=\"/images/hmos/011.png\" alt=\"鸿蒙OS\"></p>\n<p>自从去年的贸易战到后来的疫情，国际局势日趋复杂，鸿蒙OS的开源，对于国家和国内技术行业都有非凡的意义</p>\n<p>单从前端行业的角度来看，鸿蒙OS的发布，给前端技术人提供了web之外，扩展向物联网行业的，更广的发挥空间和更多的应用场景</p>\n<p>值得前端技术人向国内鸿蒙开源社区，提供更多的关注，注入更多的技术力量</p>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"https://openharmony.gitee.com/openharmony\" target=\"_blank\" rel=\"noopener\">鸿蒙OS开源地址</a></li>\n<li><a href=\"https://developer.harmonyos.com/cn/develop/deveco-studio#download\" target=\"_blank\" rel=\"noopener\">鸿蒙OS IDE下载</a></li>\n<li><a href=\"https://gitee.com/openharmony/docs\" target=\"_blank\" rel=\"noopener\">鸿蒙OS开发者文档</a></li>\n<li><a href=\"https://developer.harmonyos.com/cn/docs/documentation/js-framework-file-0000000000611396\" target=\"_blank\" rel=\"noopener\">鸿蒙OS前端js框架文档</a></li>\n<li><a href=\"https://openharmony.gitee.com/openharmony/ace_lite_jsfwk\" target=\"_blank\" rel=\"noopener\">鸿蒙OS前端js框架源码</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/hmos/000.png\" alt></p>\n<p>华为2020开发者大会在9月10号如约而至</p>\n<p>从2019年大会鸿蒙发布后，很多人的目光都聚焦在了鸿蒙OS的开源计划上，“PPT系统”的声音不绝于耳</p>\n<p>今天发布会之前，吃瓜的我无意间在gitee上看到了这个横幅👇，我知道，终于它来了</p>\n<p><img src=\"/images/hmos/001.png\" alt=\"HDC2020\"></p>\n<p>截至到我发稿前，开源仓库已经有了2k+ star</p>\n<p><img src=\"/images/hmos/002.png\" alt=\"鸿蒙OS即将开源\"></p>\n<p>并且提供了看起来比较完善的中文文档</p>\n<p><img src=\"/images/hmos/003.png\" alt=\"鸿蒙OS开源\"></p>\n<p>同时发布了一款配套的IDE <strong>「DevEco Studio」</strong>，注册开发者即可下载</p>\n<p><img src=\"/images/hmos/004.png\" alt=\"鸿蒙OS - DevEco Studio\"></p>\n<h2 id=\"前端er上手体验\"><a href=\"#前端er上手体验\" class=\"headerlink\" title=\"前端er上手体验\"></a>前端er上手体验</h2><p>作为一个前端技术人，比较令我兴奋的是，鸿蒙OS有一套基于<strong>前端技术栈</strong>的UI开发框架</p>\n<p><img src=\"/images/hmos/005.png\" alt=\"鸿蒙OS - JS框架\"></p>\n<p>于是我上手体验了一下，下面简单介绍一下步骤。</p>\n<p>安装IDE之后，创建项目，这里我选择了一个TV设备的项目模板</p>\n<p><img src=\"/images/hmos/006.png\" alt=\"鸿蒙OS\"></p>\n<p>做一些简单的配置</p>\n<p><img src=\"/images/hmos/007.png\" alt=\"鸿蒙OS\"></p>\n<p>然后会自动打包构建出一个demo项目，并且在IDE内提供了远程模拟设备</p>\n<p><img src=\"/images/hmos/008.png\" alt=\"鸿蒙OS\"></p>\n<p>选取合适的模拟设备后，就可以运行项目了，得到的效果是这样的</p>\n<p><img src=\"/images/hmos/009.png\" alt=\"鸿蒙OS\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>效果图这样的一个电视页面，用到了 <strong>hml+css+js</strong> 三部分代码</p>\n<p>hml：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tv_box\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title_box\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>酥鱼TVtest<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"circle\"</span> <span class=\"attr\">icon</span>=<span class=\"string\">\"&#123;&#123;icon_src&#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"setting_box\"</span> <span class=\"attr\">onfocus</span>=<span class=\"string\">\"iconFocusFunc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">onblur</span>=<span class=\"string\">\"iconBlurFunc\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tabs</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab_box\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tab-bar</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"scrollable\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bar_box\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">for</span>=<span class=\"string\">\"[1,2,3,4,5,6,7,8,9]\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab_text\"</span>&gt;</span>&#123;&#123;$t('strings.tab')&#125;&#125;</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tab-bar</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tab-content</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">for</span>=<span class=\"string\">\"[1,2,3,4,5,6,7,8,9]\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content_box\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">list</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content_img\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">for</span>=<span class=\"string\">\"[1,2,3,4]\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">list-item</span> <span class=\"attr\">type</span>=<span class=\"string\">\"listItem\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list_img\"</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">focusable</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tab_img\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/common/img-large.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">list-item</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tab-content</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tabs</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> app <span class=\"keyword\">from</span> <span class=\"string\">'@system.app'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        subtitle: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        icon_src: <span class=\"string\">\"/common/plus.png\"</span>,</span><br><span class=\"line\">        appName: app.getInfo().appName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onInit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = <span class=\"keyword\">this</span>.appName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subtitle = <span class=\"keyword\">this</span>.$t(<span class=\"string\">'strings.subtitle'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    iconFocusFunc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.icon_src = <span class=\"string\">\"/common/plus-black.png\"</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    iconBlurFunc: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.icon_src = <span class=\"string\">\"/common/plus-white.png\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.title_box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">36px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0.9</span>);</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"JS架构和源码\"><a href=\"#JS架构和源码\" class=\"headerlink\" title=\"JS架构和源码\"></a>JS架构和源码</h2><p>鸿蒙的 JS 框架 <strong>ace_lite_jsfwk</strong>,官方介绍是“轻量级 JS 核心开发框架”</p>\n<!-- ![架构图](https://gitee.com/openharmony/docs/raw/master/readme/figures/js-framework.png) -->\n<p><img src=\"/images/hmos/012.png\" alt=\"鸿蒙OS 前端框架 架构图\"></p>\n<blockquote>\n<p>提供了一套跨平台的类web应用开发框架，通过Toolkit将开发者编写的<strong>HML、CSS和JS</strong> 文件编译打包成<strong>JS Bundle</strong>，然后再将JS Bundle<strong>解析运行成C++ native UI的View 组件</strong>进行渲染。通过支持三方开发者使用声明式的API进行应用开发，以数据驱动视图变化，避免了大量的视图操作，大大降低了应用开发难度，提升开发者开发体验。</p>\n</blockquote>\n<p>源码的地址在：<a href=\"https://openharmony.gitee.com/openharmony/ace_lite_jsfwk\" target=\"_blank\" rel=\"noopener\">https://openharmony.gitee.com/openharmony/ace_lite_jsfwk</a></p>\n<p>其中JS的核心代码，主要在以下几个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime-core\\src\\core\\index.js</span><br><span class=\"line\">runtime-core\\src\\observer\\</span><br><span class=\"line\">                    |----observer.js</span><br><span class=\"line\">                    |----subject.js</span><br><span class=\"line\">                    |----utils.js</span><br><span class=\"line\">runtime-core\\src\\profiler\\index.js</span><br></pre></td></tr></table></figure>\n<p>也提供了一些测试用例：</p>\n<p><img src=\"/images/hmos/010.png\" alt=\"鸿蒙OS\"></p>\n<p>从源码看，实现了一个轻量的响应式MVVM系统，使用了 vue2 同样的属性劫持技术，即 <code>Object.defineProperty</code> API。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>整体体验下来，感觉开发过程还是很丝滑的，api和开发模式很有vue的味道，应该存在借鉴。对于vue技术栈的前端er来说应该很好上手</p>\n<p><img src=\"/images/hmos/011.png\" alt=\"鸿蒙OS\"></p>\n<p>自从去年的贸易战到后来的疫情，国际局势日趋复杂，鸿蒙OS的开源，对于国家和国内技术行业都有非凡的意义</p>\n<p>单从前端行业的角度来看，鸿蒙OS的发布，给前端技术人提供了web之外，扩展向物联网行业的，更广的发挥空间和更多的应用场景</p>\n<p>值得前端技术人向国内鸿蒙开源社区，提供更多的关注，注入更多的技术力量</p>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"https://openharmony.gitee.com/openharmony\" target=\"_blank\" rel=\"noopener\">鸿蒙OS开源地址</a></li>\n<li><a href=\"https://developer.harmonyos.com/cn/develop/deveco-studio#download\" target=\"_blank\" rel=\"noopener\">鸿蒙OS IDE下载</a></li>\n<li><a href=\"https://gitee.com/openharmony/docs\" target=\"_blank\" rel=\"noopener\">鸿蒙OS开发者文档</a></li>\n<li><a href=\"https://developer.harmonyos.com/cn/docs/documentation/js-framework-file-0000000000611396\" target=\"_blank\" rel=\"noopener\">鸿蒙OS前端js框架文档</a></li>\n<li><a href=\"https://openharmony.gitee.com/openharmony/ace_lite_jsfwk\" target=\"_blank\" rel=\"noopener\">鸿蒙OS前端js框架源码</a></li>\n</ul>\n"},{"title":"MongoDB配置","date":"2018-03-05T16:00:00.000Z","description":"MongoDB被我选来做毕设的数据库，在此记录配置过程。","toc":1,"top":0,"_content":"\n## 官网下载安装\n\n    （我版本3.0.15\n    [官网下载地址](https://www.mongodb.com/download-center?jmp=nav)\n\n## 安装路径\n\n    将C:\\Program Files\\MongoDB\\Server\\3.0\\bin(windows下的默认路径)添加到环境变量\n    即可在任何位置使用\n    mongo   使用数据库\n    mongod  开机\n    mongoimport  导入数据\n\n## 新建\n\n    C:\\data\\db路径作为数据库\n\n## 开机 cmd 命令：\n\n    mongod --dbpath c:\\data\\db\n    （保持该cmd窗口才能正常运行mongodb）\n    （其他数据操作另外开cmd）\n    --dbpath是选择数据库文档所在文件夹\n    即，mongodb中数据库有物理文件\n\n## use\n\n    use 数据库名字\n    使用一个数据库\n    如果想新建数据库，也是use。use一个不存在的，就是新建。\n\n## 查看当前所在数据库\n\n    db\n\n## 插入数据\n\n    数据库中不能直接插入数据，\n    只能往集合(collections)中插入数据\n    db.userid.insert({\"id\":\"zengsuyu\",\"password\":\"123456789\"});\n    此处的userid就是集合\n\n## 删除当前所在的数据库\n\n    db.dropDatabase();\n\n## 导入外部 json 数据\n\n    用sublime在外部写好json数据库的形式，然后导入数据库：\n    -db 数据库名（选择数据库\n    --collection 集合名（ 选择集合\n    --drop （把集合清空\n    --file json文件名（选择要导入的json文件\n\n## 查找数据:\n\n    db.集合名.find() （列出所有数据\n    db.集合名.find({\"key\":\"value\"})  (精确匹配key为value值的数据\n    db.集合名.find().sort(\"\")  （升降排序\n\n## mongoose\n\n    不用直接操作数据库，操作对象，对象自动持久\n\n-   连接 Mongo 数据库\n\n```\nvar mongoose = require('mongoose');\nvar db = mongoose.connect('mongodb://localhost/geekChat');//；连接数据库\n```\n\n-   监听 open 事件\n\n```\ndb.once('open', function (callback) {\n    console.log(\"数据库成功连接\");\n});\n```\n\n-   创建类\n\n```\n//创建了一个模型。猫的模型。所有的猫，都有名字，是字符串。“类”。\nvar Cat = mongoose.model('Cat', { name: String });\n//实例化一只猫\nvar kitty = new Cat({ name: 'Zildjian' });\n//调用这只猫的save方法，保存这只猫\nkitty.save(function (err) {\n  console.log('喵喵喵');\n});\n```\n\n-   创建模型\n\n```\nvar Schema = mongoose.Schema;\nvar userScheMa = new Schema({\n    name: String,\n    password: String\n}); //  定义了一个新的模型，但是此模式还未和users集合有关联\nexports.user = db.model('user', userScheMa); //  与users集合关联\n\nref 数据表关联\n```\n\n---\n\n    这次不皮了\n","source":"_posts/mongoDB_configuration.md","raw":"---\ntitle: MongoDB配置\ncategories:\n    - 10技术 | 数据库\ntags:\ndate: 2018-03-06\ndescription: MongoDB被我选来做毕设的数据库，在此记录配置过程。\ntoc: 1\ntop: 0\n---\n\n## 官网下载安装\n\n    （我版本3.0.15\n    [官网下载地址](https://www.mongodb.com/download-center?jmp=nav)\n\n## 安装路径\n\n    将C:\\Program Files\\MongoDB\\Server\\3.0\\bin(windows下的默认路径)添加到环境变量\n    即可在任何位置使用\n    mongo   使用数据库\n    mongod  开机\n    mongoimport  导入数据\n\n## 新建\n\n    C:\\data\\db路径作为数据库\n\n## 开机 cmd 命令：\n\n    mongod --dbpath c:\\data\\db\n    （保持该cmd窗口才能正常运行mongodb）\n    （其他数据操作另外开cmd）\n    --dbpath是选择数据库文档所在文件夹\n    即，mongodb中数据库有物理文件\n\n## use\n\n    use 数据库名字\n    使用一个数据库\n    如果想新建数据库，也是use。use一个不存在的，就是新建。\n\n## 查看当前所在数据库\n\n    db\n\n## 插入数据\n\n    数据库中不能直接插入数据，\n    只能往集合(collections)中插入数据\n    db.userid.insert({\"id\":\"zengsuyu\",\"password\":\"123456789\"});\n    此处的userid就是集合\n\n## 删除当前所在的数据库\n\n    db.dropDatabase();\n\n## 导入外部 json 数据\n\n    用sublime在外部写好json数据库的形式，然后导入数据库：\n    -db 数据库名（选择数据库\n    --collection 集合名（ 选择集合\n    --drop （把集合清空\n    --file json文件名（选择要导入的json文件\n\n## 查找数据:\n\n    db.集合名.find() （列出所有数据\n    db.集合名.find({\"key\":\"value\"})  (精确匹配key为value值的数据\n    db.集合名.find().sort(\"\")  （升降排序\n\n## mongoose\n\n    不用直接操作数据库，操作对象，对象自动持久\n\n-   连接 Mongo 数据库\n\n```\nvar mongoose = require('mongoose');\nvar db = mongoose.connect('mongodb://localhost/geekChat');//；连接数据库\n```\n\n-   监听 open 事件\n\n```\ndb.once('open', function (callback) {\n    console.log(\"数据库成功连接\");\n});\n```\n\n-   创建类\n\n```\n//创建了一个模型。猫的模型。所有的猫，都有名字，是字符串。“类”。\nvar Cat = mongoose.model('Cat', { name: String });\n//实例化一只猫\nvar kitty = new Cat({ name: 'Zildjian' });\n//调用这只猫的save方法，保存这只猫\nkitty.save(function (err) {\n  console.log('喵喵喵');\n});\n```\n\n-   创建模型\n\n```\nvar Schema = mongoose.Schema;\nvar userScheMa = new Schema({\n    name: String,\n    password: String\n}); //  定义了一个新的模型，但是此模式还未和users集合有关联\nexports.user = db.model('user', userScheMa); //  与users集合关联\n\nref 数据表关联\n```\n\n---\n\n    这次不皮了\n","slug":"mongoDB_configuration","published":1,"updated":"2020-09-03T07:00:54.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88ih3003hc8y6f7mhh9mh","content":"<h2 id=\"官网下载安装\"><a href=\"#官网下载安装\" class=\"headerlink\" title=\"官网下载安装\"></a>官网下载安装</h2><pre><code>（我版本3.0.15\n[官网下载地址](https://www.mongodb.com/download-center?jmp=nav)\n</code></pre><h2 id=\"安装路径\"><a href=\"#安装路径\" class=\"headerlink\" title=\"安装路径\"></a>安装路径</h2><pre><code>将C:\\Program Files\\MongoDB\\Server\\3.0\\bin(windows下的默认路径)添加到环境变量\n即可在任何位置使用\nmongo   使用数据库\nmongod  开机\nmongoimport  导入数据\n</code></pre><h2 id=\"新建\"><a href=\"#新建\" class=\"headerlink\" title=\"新建\"></a>新建</h2><pre><code>C:\\data\\db路径作为数据库\n</code></pre><h2 id=\"开机-cmd-命令：\"><a href=\"#开机-cmd-命令：\" class=\"headerlink\" title=\"开机 cmd 命令：\"></a>开机 cmd 命令：</h2><pre><code>mongod --dbpath c:\\data\\db\n（保持该cmd窗口才能正常运行mongodb）\n（其他数据操作另外开cmd）\n--dbpath是选择数据库文档所在文件夹\n即，mongodb中数据库有物理文件\n</code></pre><h2 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use\"></a>use</h2><pre><code>use 数据库名字\n使用一个数据库\n如果想新建数据库，也是use。use一个不存在的，就是新建。\n</code></pre><h2 id=\"查看当前所在数据库\"><a href=\"#查看当前所在数据库\" class=\"headerlink\" title=\"查看当前所在数据库\"></a>查看当前所在数据库</h2><pre><code>db\n</code></pre><h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><pre><code>数据库中不能直接插入数据，\n只能往集合(collections)中插入数据\ndb.userid.insert({&quot;id&quot;:&quot;zengsuyu&quot;,&quot;password&quot;:&quot;123456789&quot;});\n此处的userid就是集合\n</code></pre><h2 id=\"删除当前所在的数据库\"><a href=\"#删除当前所在的数据库\" class=\"headerlink\" title=\"删除当前所在的数据库\"></a>删除当前所在的数据库</h2><pre><code>db.dropDatabase();\n</code></pre><h2 id=\"导入外部-json-数据\"><a href=\"#导入外部-json-数据\" class=\"headerlink\" title=\"导入外部 json 数据\"></a>导入外部 json 数据</h2><pre><code>用sublime在外部写好json数据库的形式，然后导入数据库：\n-db 数据库名（选择数据库\n--collection 集合名（ 选择集合\n--drop （把集合清空\n--file json文件名（选择要导入的json文件\n</code></pre><h2 id=\"查找数据\"><a href=\"#查找数据\" class=\"headerlink\" title=\"查找数据:\"></a>查找数据:</h2><pre><code>db.集合名.find() （列出所有数据\ndb.集合名.find({&quot;key&quot;:&quot;value&quot;})  (精确匹配key为value值的数据\ndb.集合名.find().sort(&quot;&quot;)  （升降排序\n</code></pre><h2 id=\"mongoose\"><a href=\"#mongoose\" class=\"headerlink\" title=\"mongoose\"></a>mongoose</h2><pre><code>不用直接操作数据库，操作对象，对象自动持久\n</code></pre><ul>\n<li>连接 Mongo 数据库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\">var db = mongoose.connect(&apos;mongodb://localhost/geekChat&apos;);//；连接数据库</span><br></pre></td></tr></table></figure>\n<ul>\n<li>监听 open 事件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.once(&apos;open&apos;, function (callback) &#123;</span><br><span class=\"line\">    console.log(&quot;数据库成功连接&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建了一个模型。猫的模型。所有的猫，都有名字，是字符串。“类”。</span><br><span class=\"line\">var Cat = mongoose.model(&apos;Cat&apos;, &#123; name: String &#125;);</span><br><span class=\"line\">//实例化一只猫</span><br><span class=\"line\">var kitty = new Cat(&#123; name: &apos;Zildjian&apos; &#125;);</span><br><span class=\"line\">//调用这只猫的save方法，保存这只猫</span><br><span class=\"line\">kitty.save(function (err) &#123;</span><br><span class=\"line\">  console.log(&apos;喵喵喵&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Schema = mongoose.Schema;</span><br><span class=\"line\">var userScheMa = new Schema(&#123;</span><br><span class=\"line\">    name: String,</span><br><span class=\"line\">    password: String</span><br><span class=\"line\">&#125;); //  定义了一个新的模型，但是此模式还未和users集合有关联</span><br><span class=\"line\">exports.user = db.model(&apos;user&apos;, userScheMa); //  与users集合关联</span><br><span class=\"line\"></span><br><span class=\"line\">ref 数据表关联</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>这次不皮了\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"官网下载安装\"><a href=\"#官网下载安装\" class=\"headerlink\" title=\"官网下载安装\"></a>官网下载安装</h2><pre><code>（我版本3.0.15\n[官网下载地址](https://www.mongodb.com/download-center?jmp=nav)\n</code></pre><h2 id=\"安装路径\"><a href=\"#安装路径\" class=\"headerlink\" title=\"安装路径\"></a>安装路径</h2><pre><code>将C:\\Program Files\\MongoDB\\Server\\3.0\\bin(windows下的默认路径)添加到环境变量\n即可在任何位置使用\nmongo   使用数据库\nmongod  开机\nmongoimport  导入数据\n</code></pre><h2 id=\"新建\"><a href=\"#新建\" class=\"headerlink\" title=\"新建\"></a>新建</h2><pre><code>C:\\data\\db路径作为数据库\n</code></pre><h2 id=\"开机-cmd-命令：\"><a href=\"#开机-cmd-命令：\" class=\"headerlink\" title=\"开机 cmd 命令：\"></a>开机 cmd 命令：</h2><pre><code>mongod --dbpath c:\\data\\db\n（保持该cmd窗口才能正常运行mongodb）\n（其他数据操作另外开cmd）\n--dbpath是选择数据库文档所在文件夹\n即，mongodb中数据库有物理文件\n</code></pre><h2 id=\"use\"><a href=\"#use\" class=\"headerlink\" title=\"use\"></a>use</h2><pre><code>use 数据库名字\n使用一个数据库\n如果想新建数据库，也是use。use一个不存在的，就是新建。\n</code></pre><h2 id=\"查看当前所在数据库\"><a href=\"#查看当前所在数据库\" class=\"headerlink\" title=\"查看当前所在数据库\"></a>查看当前所在数据库</h2><pre><code>db\n</code></pre><h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><pre><code>数据库中不能直接插入数据，\n只能往集合(collections)中插入数据\ndb.userid.insert({&quot;id&quot;:&quot;zengsuyu&quot;,&quot;password&quot;:&quot;123456789&quot;});\n此处的userid就是集合\n</code></pre><h2 id=\"删除当前所在的数据库\"><a href=\"#删除当前所在的数据库\" class=\"headerlink\" title=\"删除当前所在的数据库\"></a>删除当前所在的数据库</h2><pre><code>db.dropDatabase();\n</code></pre><h2 id=\"导入外部-json-数据\"><a href=\"#导入外部-json-数据\" class=\"headerlink\" title=\"导入外部 json 数据\"></a>导入外部 json 数据</h2><pre><code>用sublime在外部写好json数据库的形式，然后导入数据库：\n-db 数据库名（选择数据库\n--collection 集合名（ 选择集合\n--drop （把集合清空\n--file json文件名（选择要导入的json文件\n</code></pre><h2 id=\"查找数据\"><a href=\"#查找数据\" class=\"headerlink\" title=\"查找数据:\"></a>查找数据:</h2><pre><code>db.集合名.find() （列出所有数据\ndb.集合名.find({&quot;key&quot;:&quot;value&quot;})  (精确匹配key为value值的数据\ndb.集合名.find().sort(&quot;&quot;)  （升降排序\n</code></pre><h2 id=\"mongoose\"><a href=\"#mongoose\" class=\"headerlink\" title=\"mongoose\"></a>mongoose</h2><pre><code>不用直接操作数据库，操作对象，对象自动持久\n</code></pre><ul>\n<li>连接 Mongo 数据库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mongoose = require(&apos;mongoose&apos;);</span><br><span class=\"line\">var db = mongoose.connect(&apos;mongodb://localhost/geekChat&apos;);//；连接数据库</span><br></pre></td></tr></table></figure>\n<ul>\n<li>监听 open 事件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.once(&apos;open&apos;, function (callback) &#123;</span><br><span class=\"line\">    console.log(&quot;数据库成功连接&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建了一个模型。猫的模型。所有的猫，都有名字，是字符串。“类”。</span><br><span class=\"line\">var Cat = mongoose.model(&apos;Cat&apos;, &#123; name: String &#125;);</span><br><span class=\"line\">//实例化一只猫</span><br><span class=\"line\">var kitty = new Cat(&#123; name: &apos;Zildjian&apos; &#125;);</span><br><span class=\"line\">//调用这只猫的save方法，保存这只猫</span><br><span class=\"line\">kitty.save(function (err) &#123;</span><br><span class=\"line\">  console.log(&apos;喵喵喵&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建模型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Schema = mongoose.Schema;</span><br><span class=\"line\">var userScheMa = new Schema(&#123;</span><br><span class=\"line\">    name: String,</span><br><span class=\"line\">    password: String</span><br><span class=\"line\">&#125;); //  定义了一个新的模型，但是此模式还未和users集合有关联</span><br><span class=\"line\">exports.user = db.model(&apos;user&apos;, userScheMa); //  与users集合关联</span><br><span class=\"line\"></span><br><span class=\"line\">ref 数据表关联</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>这次不皮了\n</code></pre>"},{"title":"【如何学习源码】如何高效学习一个新知识","date":"2020-05-13T16:00:00.000Z","description":"学习轮子源码是提升自我技术的有效途径，也是高阶程序员的必备技能。这套方法也适用于绝大多数知识体系的学习~","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211140022.png","_content":"\n![](/images/learning2.png)\n\n## 什么时候看源码\n\n对于复杂的开源项目，一上来就看源码是不合理的，可能导致效率低下，适得其反。\n\n往往看一个开源项目源码前，我们会经历以下几个阶段：\n\n- 刚接触一个开源项目，跟着官方文档，运行一些demo实例\n- 在工作项目中应用、实践、踩坑\n- 能够熟练使用，了解它的一些设计思想，但是还不知道设计原理\n\n经历过以上几个阶段后，就是开始看源码的最佳时期\n\n## 如何看源码\n\n### 1. 检索收集信息\n\n如果你不是一个走在行业最前端的人，那么你踩过的坑，一定有前人踩过。你想学的东西，也一定有前辈早已研究透彻。\n\n如果一定有人走过我们要走的路，那么我们就应该利用好这个互联网大世界，在踏出征途前，先从无数优秀前辈身上，汲取一些“旅行攻略”。\n\n不光是学习源码，对于绝大多数我们即将要做的事情来说，**检索收集信息**都应该是第一步，甚至要放在计划制定之前。\n\n学习开源项目源码之前，带着它的名称 + “如何学习” 作为关键词，检索信息，对于我们程序员，甚至可以先搜一搜这个项目相关的面试题。\n\n这有助于我们用最短的时间，去了解这个项目最值得我们学习的地方，让我们更加清楚我们想要什么；也有助于我们收集学习资料，提高学习效率。\n\n\n### 2. 宏观了解\n\n从全局的视角去了解整个项目，这有助于形成整体的知识结构，上来就从细微处硬啃，效率极低。\n\n可以从以下几个方面着手：\n\n- 项目的背景、项目作者亲述的背后的故事、项目纪录片\n- 项目解决的问题\n- 浏览代码仓库，了解其Issue报告规则、PR规则、贡献规则、开发环境...\n- 源码的目录结构\n- 项目的元数据。例如package.json，看看项目的依赖/脚本\n- 构建方式，运行环境，入口，构建输出\n- 项目的历史版本和当前版本的区别，未来的发展方向\n- 项目的技术选型：项目的技术依赖，优化方案，类型控制，格式检查，代码规范，API接口设计，单元测试等\n\n### 3. 重点切入\n\n有了你对项目的熟练使用，有了对项目设计思想的了解，有了对项目整体的认知，那么我们就可以开始带着问题细啃源码，去了解这个项目的重点的实现原理。\n\n- 比如这个项目最重要的核心思想，是如何实现的；\n- 比如你在实践中经常踩坑的点，是如何产生的；\n- 比如那道最高频的面试题，面试官到底想考我们什么；\n- 比如那些你在实践中经常用到的特性，是如何实现的\n- ...\n\n带着这些切入点去看源码，逐一击破，最终就可以建立一个完整的知识体系。\n\n### 4. 模仿实现\n\n当掌握了项目的宏观结构 + 重点特性的实现原理后。就可以开始自己动手，尝试实现一个类似的简单小项目。\n\n这个项目不需要完整的重复造轮子，不需要完美的关注细节，只需要把我们所学到的结构应用其中，把关键特性模仿实现即可。\n\n这个过程有助于我们查漏补缺，在自己动手踩坑的过程当中，把学到知识融会贯通。\n\n### 5. 开源贡献\n\n当我们掌握了知识之后，根据**费曼**的**以教为学**的方法，我们最后应该做的就是`输出`。比如：\n\n- 输出学习总结\n- 反馈项目社区:参与共建，做开源贡献，解决issue，做插件开发\n\n## 举一反三\n\n`这套方法其实适用于绝大多数知识体系的学习`","source":"_posts/how_to_learn_wheels_source_code.md","raw":"---\ntitle: 【如何学习源码】如何高效学习一个新知识\ncategories:\n    - 03成长 | 自我管理\ntags:\ndate: 2020-05-14\ndescription: 学习轮子源码是提升自我技术的有效途径，也是高阶程序员的必备技能。这套方法也适用于绝大多数知识体系的学习~\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211140022.png\n---\n\n![](/images/learning2.png)\n\n## 什么时候看源码\n\n对于复杂的开源项目，一上来就看源码是不合理的，可能导致效率低下，适得其反。\n\n往往看一个开源项目源码前，我们会经历以下几个阶段：\n\n- 刚接触一个开源项目，跟着官方文档，运行一些demo实例\n- 在工作项目中应用、实践、踩坑\n- 能够熟练使用，了解它的一些设计思想，但是还不知道设计原理\n\n经历过以上几个阶段后，就是开始看源码的最佳时期\n\n## 如何看源码\n\n### 1. 检索收集信息\n\n如果你不是一个走在行业最前端的人，那么你踩过的坑，一定有前人踩过。你想学的东西，也一定有前辈早已研究透彻。\n\n如果一定有人走过我们要走的路，那么我们就应该利用好这个互联网大世界，在踏出征途前，先从无数优秀前辈身上，汲取一些“旅行攻略”。\n\n不光是学习源码，对于绝大多数我们即将要做的事情来说，**检索收集信息**都应该是第一步，甚至要放在计划制定之前。\n\n学习开源项目源码之前，带着它的名称 + “如何学习” 作为关键词，检索信息，对于我们程序员，甚至可以先搜一搜这个项目相关的面试题。\n\n这有助于我们用最短的时间，去了解这个项目最值得我们学习的地方，让我们更加清楚我们想要什么；也有助于我们收集学习资料，提高学习效率。\n\n\n### 2. 宏观了解\n\n从全局的视角去了解整个项目，这有助于形成整体的知识结构，上来就从细微处硬啃，效率极低。\n\n可以从以下几个方面着手：\n\n- 项目的背景、项目作者亲述的背后的故事、项目纪录片\n- 项目解决的问题\n- 浏览代码仓库，了解其Issue报告规则、PR规则、贡献规则、开发环境...\n- 源码的目录结构\n- 项目的元数据。例如package.json，看看项目的依赖/脚本\n- 构建方式，运行环境，入口，构建输出\n- 项目的历史版本和当前版本的区别，未来的发展方向\n- 项目的技术选型：项目的技术依赖，优化方案，类型控制，格式检查，代码规范，API接口设计，单元测试等\n\n### 3. 重点切入\n\n有了你对项目的熟练使用，有了对项目设计思想的了解，有了对项目整体的认知，那么我们就可以开始带着问题细啃源码，去了解这个项目的重点的实现原理。\n\n- 比如这个项目最重要的核心思想，是如何实现的；\n- 比如你在实践中经常踩坑的点，是如何产生的；\n- 比如那道最高频的面试题，面试官到底想考我们什么；\n- 比如那些你在实践中经常用到的特性，是如何实现的\n- ...\n\n带着这些切入点去看源码，逐一击破，最终就可以建立一个完整的知识体系。\n\n### 4. 模仿实现\n\n当掌握了项目的宏观结构 + 重点特性的实现原理后。就可以开始自己动手，尝试实现一个类似的简单小项目。\n\n这个项目不需要完整的重复造轮子，不需要完美的关注细节，只需要把我们所学到的结构应用其中，把关键特性模仿实现即可。\n\n这个过程有助于我们查漏补缺，在自己动手踩坑的过程当中，把学到知识融会贯通。\n\n### 5. 开源贡献\n\n当我们掌握了知识之后，根据**费曼**的**以教为学**的方法，我们最后应该做的就是`输出`。比如：\n\n- 输出学习总结\n- 反馈项目社区:参与共建，做开源贡献，解决issue，做插件开发\n\n## 举一反三\n\n`这套方法其实适用于绝大多数知识体系的学习`","slug":"how_to_learn_wheels_source_code","published":1,"updated":"2021-01-27T08:49:56.954Z","_id":"ckir88ih9003jc8y6cod164t0","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/learning2.png\" alt></p>\n<h2 id=\"什么时候看源码\"><a href=\"#什么时候看源码\" class=\"headerlink\" title=\"什么时候看源码\"></a>什么时候看源码</h2><p>对于复杂的开源项目，一上来就看源码是不合理的，可能导致效率低下，适得其反。</p>\n<p>往往看一个开源项目源码前，我们会经历以下几个阶段：</p>\n<ul>\n<li>刚接触一个开源项目，跟着官方文档，运行一些demo实例</li>\n<li>在工作项目中应用、实践、踩坑</li>\n<li>能够熟练使用，了解它的一些设计思想，但是还不知道设计原理</li>\n</ul>\n<p>经历过以上几个阶段后，就是开始看源码的最佳时期</p>\n<h2 id=\"如何看源码\"><a href=\"#如何看源码\" class=\"headerlink\" title=\"如何看源码\"></a>如何看源码</h2><h3 id=\"1-检索收集信息\"><a href=\"#1-检索收集信息\" class=\"headerlink\" title=\"1. 检索收集信息\"></a>1. 检索收集信息</h3><p>如果你不是一个走在行业最前端的人，那么你踩过的坑，一定有前人踩过。你想学的东西，也一定有前辈早已研究透彻。</p>\n<p>如果一定有人走过我们要走的路，那么我们就应该利用好这个互联网大世界，在踏出征途前，先从无数优秀前辈身上，汲取一些“旅行攻略”。</p>\n<p>不光是学习源码，对于绝大多数我们即将要做的事情来说，<strong>检索收集信息</strong>都应该是第一步，甚至要放在计划制定之前。</p>\n<p>学习开源项目源码之前，带着它的名称 + “如何学习” 作为关键词，检索信息，对于我们程序员，甚至可以先搜一搜这个项目相关的面试题。</p>\n<p>这有助于我们用最短的时间，去了解这个项目最值得我们学习的地方，让我们更加清楚我们想要什么；也有助于我们收集学习资料，提高学习效率。</p>\n<h3 id=\"2-宏观了解\"><a href=\"#2-宏观了解\" class=\"headerlink\" title=\"2. 宏观了解\"></a>2. 宏观了解</h3><p>从全局的视角去了解整个项目，这有助于形成整体的知识结构，上来就从细微处硬啃，效率极低。</p>\n<p>可以从以下几个方面着手：</p>\n<ul>\n<li>项目的背景、项目作者亲述的背后的故事、项目纪录片</li>\n<li>项目解决的问题</li>\n<li>浏览代码仓库，了解其Issue报告规则、PR规则、贡献规则、开发环境…</li>\n<li>源码的目录结构</li>\n<li>项目的元数据。例如package.json，看看项目的依赖/脚本</li>\n<li>构建方式，运行环境，入口，构建输出</li>\n<li>项目的历史版本和当前版本的区别，未来的发展方向</li>\n<li>项目的技术选型：项目的技术依赖，优化方案，类型控制，格式检查，代码规范，API接口设计，单元测试等</li>\n</ul>\n<h3 id=\"3-重点切入\"><a href=\"#3-重点切入\" class=\"headerlink\" title=\"3. 重点切入\"></a>3. 重点切入</h3><p>有了你对项目的熟练使用，有了对项目设计思想的了解，有了对项目整体的认知，那么我们就可以开始带着问题细啃源码，去了解这个项目的重点的实现原理。</p>\n<ul>\n<li>比如这个项目最重要的核心思想，是如何实现的；</li>\n<li>比如你在实践中经常踩坑的点，是如何产生的；</li>\n<li>比如那道最高频的面试题，面试官到底想考我们什么；</li>\n<li>比如那些你在实践中经常用到的特性，是如何实现的</li>\n<li>…</li>\n</ul>\n<p>带着这些切入点去看源码，逐一击破，最终就可以建立一个完整的知识体系。</p>\n<h3 id=\"4-模仿实现\"><a href=\"#4-模仿实现\" class=\"headerlink\" title=\"4. 模仿实现\"></a>4. 模仿实现</h3><p>当掌握了项目的宏观结构 + 重点特性的实现原理后。就可以开始自己动手，尝试实现一个类似的简单小项目。</p>\n<p>这个项目不需要完整的重复造轮子，不需要完美的关注细节，只需要把我们所学到的结构应用其中，把关键特性模仿实现即可。</p>\n<p>这个过程有助于我们查漏补缺，在自己动手踩坑的过程当中，把学到知识融会贯通。</p>\n<h3 id=\"5-开源贡献\"><a href=\"#5-开源贡献\" class=\"headerlink\" title=\"5. 开源贡献\"></a>5. 开源贡献</h3><p>当我们掌握了知识之后，根据<strong>费曼</strong>的<strong>以教为学</strong>的方法，我们最后应该做的就是<code>输出</code>。比如：</p>\n<ul>\n<li>输出学习总结</li>\n<li>反馈项目社区:参与共建，做开源贡献，解决issue，做插件开发</li>\n</ul>\n<h2 id=\"举一反三\"><a href=\"#举一反三\" class=\"headerlink\" title=\"举一反三\"></a>举一反三</h2><p><code>这套方法其实适用于绝大多数知识体系的学习</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/learning2.png\" alt></p>\n<h2 id=\"什么时候看源码\"><a href=\"#什么时候看源码\" class=\"headerlink\" title=\"什么时候看源码\"></a>什么时候看源码</h2><p>对于复杂的开源项目，一上来就看源码是不合理的，可能导致效率低下，适得其反。</p>\n<p>往往看一个开源项目源码前，我们会经历以下几个阶段：</p>\n<ul>\n<li>刚接触一个开源项目，跟着官方文档，运行一些demo实例</li>\n<li>在工作项目中应用、实践、踩坑</li>\n<li>能够熟练使用，了解它的一些设计思想，但是还不知道设计原理</li>\n</ul>\n<p>经历过以上几个阶段后，就是开始看源码的最佳时期</p>\n<h2 id=\"如何看源码\"><a href=\"#如何看源码\" class=\"headerlink\" title=\"如何看源码\"></a>如何看源码</h2><h3 id=\"1-检索收集信息\"><a href=\"#1-检索收集信息\" class=\"headerlink\" title=\"1. 检索收集信息\"></a>1. 检索收集信息</h3><p>如果你不是一个走在行业最前端的人，那么你踩过的坑，一定有前人踩过。你想学的东西，也一定有前辈早已研究透彻。</p>\n<p>如果一定有人走过我们要走的路，那么我们就应该利用好这个互联网大世界，在踏出征途前，先从无数优秀前辈身上，汲取一些“旅行攻略”。</p>\n<p>不光是学习源码，对于绝大多数我们即将要做的事情来说，<strong>检索收集信息</strong>都应该是第一步，甚至要放在计划制定之前。</p>\n<p>学习开源项目源码之前，带着它的名称 + “如何学习” 作为关键词，检索信息，对于我们程序员，甚至可以先搜一搜这个项目相关的面试题。</p>\n<p>这有助于我们用最短的时间，去了解这个项目最值得我们学习的地方，让我们更加清楚我们想要什么；也有助于我们收集学习资料，提高学习效率。</p>\n<h3 id=\"2-宏观了解\"><a href=\"#2-宏观了解\" class=\"headerlink\" title=\"2. 宏观了解\"></a>2. 宏观了解</h3><p>从全局的视角去了解整个项目，这有助于形成整体的知识结构，上来就从细微处硬啃，效率极低。</p>\n<p>可以从以下几个方面着手：</p>\n<ul>\n<li>项目的背景、项目作者亲述的背后的故事、项目纪录片</li>\n<li>项目解决的问题</li>\n<li>浏览代码仓库，了解其Issue报告规则、PR规则、贡献规则、开发环境…</li>\n<li>源码的目录结构</li>\n<li>项目的元数据。例如package.json，看看项目的依赖/脚本</li>\n<li>构建方式，运行环境，入口，构建输出</li>\n<li>项目的历史版本和当前版本的区别，未来的发展方向</li>\n<li>项目的技术选型：项目的技术依赖，优化方案，类型控制，格式检查，代码规范，API接口设计，单元测试等</li>\n</ul>\n<h3 id=\"3-重点切入\"><a href=\"#3-重点切入\" class=\"headerlink\" title=\"3. 重点切入\"></a>3. 重点切入</h3><p>有了你对项目的熟练使用，有了对项目设计思想的了解，有了对项目整体的认知，那么我们就可以开始带着问题细啃源码，去了解这个项目的重点的实现原理。</p>\n<ul>\n<li>比如这个项目最重要的核心思想，是如何实现的；</li>\n<li>比如你在实践中经常踩坑的点，是如何产生的；</li>\n<li>比如那道最高频的面试题，面试官到底想考我们什么；</li>\n<li>比如那些你在实践中经常用到的特性，是如何实现的</li>\n<li>…</li>\n</ul>\n<p>带着这些切入点去看源码，逐一击破，最终就可以建立一个完整的知识体系。</p>\n<h3 id=\"4-模仿实现\"><a href=\"#4-模仿实现\" class=\"headerlink\" title=\"4. 模仿实现\"></a>4. 模仿实现</h3><p>当掌握了项目的宏观结构 + 重点特性的实现原理后。就可以开始自己动手，尝试实现一个类似的简单小项目。</p>\n<p>这个项目不需要完整的重复造轮子，不需要完美的关注细节，只需要把我们所学到的结构应用其中，把关键特性模仿实现即可。</p>\n<p>这个过程有助于我们查漏补缺，在自己动手踩坑的过程当中，把学到知识融会贯通。</p>\n<h3 id=\"5-开源贡献\"><a href=\"#5-开源贡献\" class=\"headerlink\" title=\"5. 开源贡献\"></a>5. 开源贡献</h3><p>当我们掌握了知识之后，根据<strong>费曼</strong>的<strong>以教为学</strong>的方法，我们最后应该做的就是<code>输出</code>。比如：</p>\n<ul>\n<li>输出学习总结</li>\n<li>反馈项目社区:参与共建，做开源贡献，解决issue，做插件开发</li>\n</ul>\n<h2 id=\"举一反三\"><a href=\"#举一反三\" class=\"headerlink\" title=\"举一反三\"></a>举一反三</h2><p><code>这套方法其实适用于绝大多数知识体系的学习</code></p>\n"},{"title":"【Event Loop】结合Event Loop谈谈对Vue中nextTick的理解","date":"2020-06-09T16:00:00.000Z","description":"tick这个词到底时什么意思😯？","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133145.png","_content":"## 带着问题看这篇文章\n- tick这个单词有点抽象,应该怎么理解?\n- 通过nextTick包装的回调,到底何时执行?\n- nextTick存在的意义是什么?\n\n## event loop 中任务执行顺序\n\n1. 同步代码执行，直至调用栈清空\n2. microtask：调用栈清空后，优先执行**所有**的microtask，如果有新的microtask，**继续执行新microtask，**直至microtask queue清空（**微任务**）\n3. task queue：执行task queue第一个任务，后续的task暂不处理（**宏任务**）\n4. 每当调用栈清空后，重复2-3步骤\n\n（关于 Event Loop的细节,我写过一篇很详细的总结[试图解释清楚Javascript Event Loop](https://www.scarsu.com/event_loop/)。）\n\n## 微任务与宏任务\n根据event loop的执行机制,微任务的调度优先级比宏任务高.\n\n微任务异步API:Promise.then,MutationObserver\n\n宏任务异步API:setTimeout,MessageChannel,postMessage,setImmediate\n\n## Vue中nextTick的实现\n\nvue中的 nextTick 实现在 util 模块的单个文件中，代码总共100多行：\n\n```javascript\n// src\\core\\util\\next-tick.js\n\nimport { noop } from 'shared/util'\nimport { handleError } from './error'\nimport { isIE, isIOS, isNative } from './env'\n\nconst callbacks = []\nlet pending = false\n\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n\nlet timerFunc\n\n// nextTick行为利用了微任务队列，微任务队列可以通过原生Promise.then或MutationObserver访问到。 \n// MutationObserver具有更广泛的支持，但是在iOS> = 9.3.3中的UIWebView中，在触摸事件处理程序中触发时会发生错误。触发几次后，它将完全停止工作\n// 因此，如果原生Promise可用，优先使用Promise：\n\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    // 在有问题的UIWebViews中，会出现奇怪的状态：微任务队列中有回调但是不被清空，直到浏览器有其他任务，例如处理计时器\n    // 因此此处使用一个空计时器，来强制触发微任务队列执行\n    if (isIOS) setTimeout(noop)\n  }\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // setImmediate,宏任务,但是相比 setTimeout 是个更好的选择\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  // setTimeout 0 宏任务\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n\n源码中, `Vue.nextTick/vm.$nextTick` 的具体逻辑：\n\n- 定义一个 `callbacks` 数组，用于存储 nextTick 接口传来的回调函数们\n- 定义一个 `flushCallbacks`  方法，用于遍历执行 callbacks 数组中的所有回调函数\n- 调用 `timerFunc` 方法，将 flushCallbacks  方法作为回调任务，添加到异步队列\n- timerFunc由环境决定，**微任务**优先，宏任务作为折衷方案， `Promise.then > MutationObserver > setImmediate > setTimeout 0` \n\n**一句话总结**：将回调作为异步任务，添加到(微/宏)任务队列，在当前调用栈清空后再执行。\n\n## 对nextTick这个词的理解\n\n对于**tick**我的理解是:`每次从调用栈开始有函数帧，直到调用栈被清空为止的过程`，这个过程可能是：\n\n- 页面初始加载时**同步脚本执行**的过程\n- 也可能是任何一个**异步任务回调执行**的过程\n\n对于**nextTick(cb)**：回调函数cb不在当前调用栈执行期间立即执行，而是被立即添加在任务队列中，在当前调用栈清空后执行。\n\n使用nextTick的目的：必须等待当前调用栈的后续代码执行完，才能执行回调，例如这种情况:回调函数中,需要依赖上一个调用栈操作后的某些状态。\n\n**举个例子：**\n\n画一个 echarts 图表，希望根据数据的长度来动态调整图表的宽度\n\n\n```\n..\n<template>\n\t<div id=\"chart\" :style='{width:chartWidth,height:\"200px\"}' \n</template>\n\n...\nthis.chartWidth = getWidthByData(data)\nthis.nextTick(()=>{\n\tlet chart= echarts.init(document.getElementById('chart'))\n\tchart.setOption({...})  //echarts渲染\n})\n```\n宽度属性chartWidth存在vue data中，由于vue data是`响应式`的，变更data值后，div#chart的宽度并不是立即变更的，中间存在一系列过程：\n\n- chartWidth 属性上的 descriptor `setter` 向其依赖的(vue组件的`renderWatcher`)发布更新\n- watcher 的更新也是一个**异步**过程（queueWatcher，通过nextTick来调度）\n\n因此在chartWidth变更后，对应的dom宽度不是立即更新的，此时如果立即执行echarts的渲染工作，会导致echarts不能按照最新宽度来渲染。","source":"_posts/nextTick.md","raw":"---\ntitle: 【Event Loop】结合Event Loop谈谈对Vue中nextTick的理解\ncategories:\n    - 10技术 | JavaScript # 一级分类\ntags:\ndate: 2020-06-10\ndescription: tick这个词到底时什么意思😯？\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133145.png\n---\n## 带着问题看这篇文章\n- tick这个单词有点抽象,应该怎么理解?\n- 通过nextTick包装的回调,到底何时执行?\n- nextTick存在的意义是什么?\n\n## event loop 中任务执行顺序\n\n1. 同步代码执行，直至调用栈清空\n2. microtask：调用栈清空后，优先执行**所有**的microtask，如果有新的microtask，**继续执行新microtask，**直至microtask queue清空（**微任务**）\n3. task queue：执行task queue第一个任务，后续的task暂不处理（**宏任务**）\n4. 每当调用栈清空后，重复2-3步骤\n\n（关于 Event Loop的细节,我写过一篇很详细的总结[试图解释清楚Javascript Event Loop](https://www.scarsu.com/event_loop/)。）\n\n## 微任务与宏任务\n根据event loop的执行机制,微任务的调度优先级比宏任务高.\n\n微任务异步API:Promise.then,MutationObserver\n\n宏任务异步API:setTimeout,MessageChannel,postMessage,setImmediate\n\n## Vue中nextTick的实现\n\nvue中的 nextTick 实现在 util 模块的单个文件中，代码总共100多行：\n\n```javascript\n// src\\core\\util\\next-tick.js\n\nimport { noop } from 'shared/util'\nimport { handleError } from './error'\nimport { isIE, isIOS, isNative } from './env'\n\nconst callbacks = []\nlet pending = false\n\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n\nlet timerFunc\n\n// nextTick行为利用了微任务队列，微任务队列可以通过原生Promise.then或MutationObserver访问到。 \n// MutationObserver具有更广泛的支持，但是在iOS> = 9.3.3中的UIWebView中，在触摸事件处理程序中触发时会发生错误。触发几次后，它将完全停止工作\n// 因此，如果原生Promise可用，优先使用Promise：\n\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    // 在有问题的UIWebViews中，会出现奇怪的状态：微任务队列中有回调但是不被清空，直到浏览器有其他任务，例如处理计时器\n    // 因此此处使用一个空计时器，来强制触发微任务队列执行\n    if (isIOS) setTimeout(noop)\n  }\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // setImmediate,宏任务,但是相比 setTimeout 是个更好的选择\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  // setTimeout 0 宏任务\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n\n源码中, `Vue.nextTick/vm.$nextTick` 的具体逻辑：\n\n- 定义一个 `callbacks` 数组，用于存储 nextTick 接口传来的回调函数们\n- 定义一个 `flushCallbacks`  方法，用于遍历执行 callbacks 数组中的所有回调函数\n- 调用 `timerFunc` 方法，将 flushCallbacks  方法作为回调任务，添加到异步队列\n- timerFunc由环境决定，**微任务**优先，宏任务作为折衷方案， `Promise.then > MutationObserver > setImmediate > setTimeout 0` \n\n**一句话总结**：将回调作为异步任务，添加到(微/宏)任务队列，在当前调用栈清空后再执行。\n\n## 对nextTick这个词的理解\n\n对于**tick**我的理解是:`每次从调用栈开始有函数帧，直到调用栈被清空为止的过程`，这个过程可能是：\n\n- 页面初始加载时**同步脚本执行**的过程\n- 也可能是任何一个**异步任务回调执行**的过程\n\n对于**nextTick(cb)**：回调函数cb不在当前调用栈执行期间立即执行，而是被立即添加在任务队列中，在当前调用栈清空后执行。\n\n使用nextTick的目的：必须等待当前调用栈的后续代码执行完，才能执行回调，例如这种情况:回调函数中,需要依赖上一个调用栈操作后的某些状态。\n\n**举个例子：**\n\n画一个 echarts 图表，希望根据数据的长度来动态调整图表的宽度\n\n\n```\n..\n<template>\n\t<div id=\"chart\" :style='{width:chartWidth,height:\"200px\"}' \n</template>\n\n...\nthis.chartWidth = getWidthByData(data)\nthis.nextTick(()=>{\n\tlet chart= echarts.init(document.getElementById('chart'))\n\tchart.setOption({...})  //echarts渲染\n})\n```\n宽度属性chartWidth存在vue data中，由于vue data是`响应式`的，变更data值后，div#chart的宽度并不是立即变更的，中间存在一系列过程：\n\n- chartWidth 属性上的 descriptor `setter` 向其依赖的(vue组件的`renderWatcher`)发布更新\n- watcher 的更新也是一个**异步**过程（queueWatcher，通过nextTick来调度）\n\n因此在chartWidth变更后，对应的dom宽度不是立即更新的，此时如果立即执行echarts的渲染工作，会导致echarts不能按照最新宽度来渲染。","slug":"nextTick","published":1,"updated":"2021-01-22T10:03:22.045Z","_id":"ckir88ihb003mc8y6l27z2ffz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"带着问题看这篇文章\"><a href=\"#带着问题看这篇文章\" class=\"headerlink\" title=\"带着问题看这篇文章\"></a>带着问题看这篇文章</h2><ul>\n<li>tick这个单词有点抽象,应该怎么理解?</li>\n<li>通过nextTick包装的回调,到底何时执行?</li>\n<li>nextTick存在的意义是什么?</li>\n</ul>\n<h2 id=\"event-loop-中任务执行顺序\"><a href=\"#event-loop-中任务执行顺序\" class=\"headerlink\" title=\"event loop 中任务执行顺序\"></a>event loop 中任务执行顺序</h2><ol>\n<li>同步代码执行，直至调用栈清空</li>\n<li>microtask：调用栈清空后，优先执行<strong>所有</strong>的microtask，如果有新的microtask，<strong>继续执行新microtask，</strong>直至microtask queue清空（<strong>微任务</strong>）</li>\n<li>task queue：执行task queue第一个任务，后续的task暂不处理（<strong>宏任务</strong>）</li>\n<li>每当调用栈清空后，重复2-3步骤</li>\n</ol>\n<p>（关于 Event Loop的细节,我写过一篇很详细的总结<a href=\"https://www.scarsu.com/event_loop/\">试图解释清楚Javascript Event Loop</a>。）</p>\n<h2 id=\"微任务与宏任务\"><a href=\"#微任务与宏任务\" class=\"headerlink\" title=\"微任务与宏任务\"></a>微任务与宏任务</h2><p>根据event loop的执行机制,微任务的调度优先级比宏任务高.</p>\n<p>微任务异步API:Promise.then,MutationObserver</p>\n<p>宏任务异步API:setTimeout,MessageChannel,postMessage,setImmediate</p>\n<h2 id=\"Vue中nextTick的实现\"><a href=\"#Vue中nextTick的实现\" class=\"headerlink\" title=\"Vue中nextTick的实现\"></a>Vue中nextTick的实现</h2><p>vue中的 nextTick 实现在 util 模块的单个文件中，代码总共100多行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src\\core\\util\\next-tick.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; noop &#125; <span class=\"keyword\">from</span> <span class=\"string\">'shared/util'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; handleError &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./error'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isIE, isIOS, isNative &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./env'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushCallbacks</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.slice(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.length; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// nextTick行为利用了微任务队列，微任务队列可以通过原生Promise.then或MutationObserver访问到。 </span></span><br><span class=\"line\"><span class=\"comment\">// MutationObserver具有更广泛的支持，但是在iOS&gt; = 9.3.3中的UIWebView中，在触摸事件处理程序中触发时会发生错误。触发几次后，它将完全停止工作</span></span><br><span class=\"line\"><span class=\"comment\">// 因此，如果原生Promise可用，优先使用Promise：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; isNative(<span class=\"built_in\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    p.then(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// 在有问题的UIWebViews中，会出现奇怪的状态：微任务队列中有回调但是不被清空，直到浏览器有其他任务，例如处理计时器</span></span><br><span class=\"line\">    <span class=\"comment\">// 因此此处使用一个空计时器，来强制触发微任务队列执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) setTimeout(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">'undefined'</span> &amp;&amp; (</span><br><span class=\"line\">  isNative(MutationObserver) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">  MutationObserver.toString() === <span class=\"string\">'[object MutationObserverConstructor]'</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> MutationObserver(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"built_in\">String</span>(counter))</span><br><span class=\"line\">  observer.observe(textNode, &#123;</span><br><span class=\"line\">    characterData: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.data = <span class=\"built_in\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// setImmediate,宏任务,但是相比 setTimeout 是个更好的选择</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setImmediate(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// setTimeout 0 宏任务</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTick</span> (<span class=\"params\">cb?: Function, ctx?: Object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.call(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        handleError(e, ctx, <span class=\"string\">'nextTick'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      _resolve(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    timerFunc()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码中, <code>Vue.nextTick/vm.$nextTick</code> 的具体逻辑：</p>\n<ul>\n<li>定义一个 <code>callbacks</code> 数组，用于存储 nextTick 接口传来的回调函数们</li>\n<li>定义一个 <code>flushCallbacks</code>  方法，用于遍历执行 callbacks 数组中的所有回调函数</li>\n<li>调用 <code>timerFunc</code> 方法，将 flushCallbacks  方法作为回调任务，添加到异步队列</li>\n<li>timerFunc由环境决定，<strong>微任务</strong>优先，宏任务作为折衷方案， <code>Promise.then &gt; MutationObserver &gt; setImmediate &gt; setTimeout 0</code> </li>\n</ul>\n<p><strong>一句话总结</strong>：将回调作为异步任务，添加到(微/宏)任务队列，在当前调用栈清空后再执行。</p>\n<h2 id=\"对nextTick这个词的理解\"><a href=\"#对nextTick这个词的理解\" class=\"headerlink\" title=\"对nextTick这个词的理解\"></a>对nextTick这个词的理解</h2><p>对于<strong>tick</strong>我的理解是:<code>每次从调用栈开始有函数帧，直到调用栈被清空为止的过程</code>，这个过程可能是：</p>\n<ul>\n<li>页面初始加载时<strong>同步脚本执行</strong>的过程</li>\n<li>也可能是任何一个<strong>异步任务回调执行</strong>的过程</li>\n</ul>\n<p>对于<strong>nextTick(cb)</strong>：回调函数cb不在当前调用栈执行期间立即执行，而是被立即添加在任务队列中，在当前调用栈清空后执行。</p>\n<p>使用nextTick的目的：必须等待当前调用栈的后续代码执行完，才能执行回调，例如这种情况:回调函数中,需要依赖上一个调用栈操作后的某些状态。</p>\n<p><strong>举个例子：</strong></p>\n<p>画一个 echarts 图表，希望根据数据的长度来动态调整图表的宽度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;chart&quot; :style=&apos;&#123;width:chartWidth,height:&quot;200px&quot;&#125;&apos; </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">this.chartWidth = getWidthByData(data)</span><br><span class=\"line\">this.nextTick(()=&gt;&#123;</span><br><span class=\"line\">\tlet chart= echarts.init(document.getElementById(&apos;chart&apos;))</span><br><span class=\"line\">\tchart.setOption(&#123;...&#125;)  //echarts渲染</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>宽度属性chartWidth存在vue data中，由于vue data是<code>响应式</code>的，变更data值后，div#chart的宽度并不是立即变更的，中间存在一系列过程：</p>\n<ul>\n<li>chartWidth 属性上的 descriptor <code>setter</code> 向其依赖的(vue组件的<code>renderWatcher</code>)发布更新</li>\n<li>watcher 的更新也是一个<strong>异步</strong>过程（queueWatcher，通过nextTick来调度）</li>\n</ul>\n<p>因此在chartWidth变更后，对应的dom宽度不是立即更新的，此时如果立即执行echarts的渲染工作，会导致echarts不能按照最新宽度来渲染。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"带着问题看这篇文章\"><a href=\"#带着问题看这篇文章\" class=\"headerlink\" title=\"带着问题看这篇文章\"></a>带着问题看这篇文章</h2><ul>\n<li>tick这个单词有点抽象,应该怎么理解?</li>\n<li>通过nextTick包装的回调,到底何时执行?</li>\n<li>nextTick存在的意义是什么?</li>\n</ul>\n<h2 id=\"event-loop-中任务执行顺序\"><a href=\"#event-loop-中任务执行顺序\" class=\"headerlink\" title=\"event loop 中任务执行顺序\"></a>event loop 中任务执行顺序</h2><ol>\n<li>同步代码执行，直至调用栈清空</li>\n<li>microtask：调用栈清空后，优先执行<strong>所有</strong>的microtask，如果有新的microtask，<strong>继续执行新microtask，</strong>直至microtask queue清空（<strong>微任务</strong>）</li>\n<li>task queue：执行task queue第一个任务，后续的task暂不处理（<strong>宏任务</strong>）</li>\n<li>每当调用栈清空后，重复2-3步骤</li>\n</ol>\n<p>（关于 Event Loop的细节,我写过一篇很详细的总结<a href=\"https://www.scarsu.com/event_loop/\">试图解释清楚Javascript Event Loop</a>。）</p>\n<h2 id=\"微任务与宏任务\"><a href=\"#微任务与宏任务\" class=\"headerlink\" title=\"微任务与宏任务\"></a>微任务与宏任务</h2><p>根据event loop的执行机制,微任务的调度优先级比宏任务高.</p>\n<p>微任务异步API:Promise.then,MutationObserver</p>\n<p>宏任务异步API:setTimeout,MessageChannel,postMessage,setImmediate</p>\n<h2 id=\"Vue中nextTick的实现\"><a href=\"#Vue中nextTick的实现\" class=\"headerlink\" title=\"Vue中nextTick的实现\"></a>Vue中nextTick的实现</h2><p>vue中的 nextTick 实现在 util 模块的单个文件中，代码总共100多行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src\\core\\util\\next-tick.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; noop &#125; <span class=\"keyword\">from</span> <span class=\"string\">'shared/util'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; handleError &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./error'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isIE, isIOS, isNative &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./env'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushCallbacks</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.slice(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.length; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// nextTick行为利用了微任务队列，微任务队列可以通过原生Promise.then或MutationObserver访问到。 </span></span><br><span class=\"line\"><span class=\"comment\">// MutationObserver具有更广泛的支持，但是在iOS&gt; = 9.3.3中的UIWebView中，在触摸事件处理程序中触发时会发生错误。触发几次后，它将完全停止工作</span></span><br><span class=\"line\"><span class=\"comment\">// 因此，如果原生Promise可用，优先使用Promise：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; isNative(<span class=\"built_in\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    p.then(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// 在有问题的UIWebViews中，会出现奇怪的状态：微任务队列中有回调但是不被清空，直到浏览器有其他任务，例如处理计时器</span></span><br><span class=\"line\">    <span class=\"comment\">// 因此此处使用一个空计时器，来强制触发微任务队列执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) setTimeout(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">'undefined'</span> &amp;&amp; (</span><br><span class=\"line\">  isNative(MutationObserver) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">  MutationObserver.toString() === <span class=\"string\">'[object MutationObserverConstructor]'</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> MutationObserver(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"built_in\">String</span>(counter))</span><br><span class=\"line\">  observer.observe(textNode, &#123;</span><br><span class=\"line\">    characterData: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.data = <span class=\"built_in\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// setImmediate,宏任务,但是相比 setTimeout 是个更好的选择</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setImmediate(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// setTimeout 0 宏任务</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTick</span> (<span class=\"params\">cb?: Function, ctx?: Object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.call(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        handleError(e, ctx, <span class=\"string\">'nextTick'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      _resolve(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    timerFunc()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码中, <code>Vue.nextTick/vm.$nextTick</code> 的具体逻辑：</p>\n<ul>\n<li>定义一个 <code>callbacks</code> 数组，用于存储 nextTick 接口传来的回调函数们</li>\n<li>定义一个 <code>flushCallbacks</code>  方法，用于遍历执行 callbacks 数组中的所有回调函数</li>\n<li>调用 <code>timerFunc</code> 方法，将 flushCallbacks  方法作为回调任务，添加到异步队列</li>\n<li>timerFunc由环境决定，<strong>微任务</strong>优先，宏任务作为折衷方案， <code>Promise.then &gt; MutationObserver &gt; setImmediate &gt; setTimeout 0</code> </li>\n</ul>\n<p><strong>一句话总结</strong>：将回调作为异步任务，添加到(微/宏)任务队列，在当前调用栈清空后再执行。</p>\n<h2 id=\"对nextTick这个词的理解\"><a href=\"#对nextTick这个词的理解\" class=\"headerlink\" title=\"对nextTick这个词的理解\"></a>对nextTick这个词的理解</h2><p>对于<strong>tick</strong>我的理解是:<code>每次从调用栈开始有函数帧，直到调用栈被清空为止的过程</code>，这个过程可能是：</p>\n<ul>\n<li>页面初始加载时<strong>同步脚本执行</strong>的过程</li>\n<li>也可能是任何一个<strong>异步任务回调执行</strong>的过程</li>\n</ul>\n<p>对于<strong>nextTick(cb)</strong>：回调函数cb不在当前调用栈执行期间立即执行，而是被立即添加在任务队列中，在当前调用栈清空后执行。</p>\n<p>使用nextTick的目的：必须等待当前调用栈的后续代码执行完，才能执行回调，例如这种情况:回调函数中,需要依赖上一个调用栈操作后的某些状态。</p>\n<p><strong>举个例子：</strong></p>\n<p>画一个 echarts 图表，希望根据数据的长度来动态调整图表的宽度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;chart&quot; :style=&apos;&#123;width:chartWidth,height:&quot;200px&quot;&#125;&apos; </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">this.chartWidth = getWidthByData(data)</span><br><span class=\"line\">this.nextTick(()=&gt;&#123;</span><br><span class=\"line\">\tlet chart= echarts.init(document.getElementById(&apos;chart&apos;))</span><br><span class=\"line\">\tchart.setOption(&#123;...&#125;)  //echarts渲染</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>宽度属性chartWidth存在vue data中，由于vue data是<code>响应式</code>的，变更data值后，div#chart的宽度并不是立即变更的，中间存在一系列过程：</p>\n<ul>\n<li>chartWidth 属性上的 descriptor <code>setter</code> 向其依赖的(vue组件的<code>renderWatcher</code>)发布更新</li>\n<li>watcher 的更新也是一个<strong>异步</strong>过程（queueWatcher，通过nextTick来调度）</li>\n</ul>\n<p>因此在chartWidth变更后，对应的dom宽度不是立即更新的，此时如果立即执行echarts的渲染工作，会导致echarts不能按照最新宽度来渲染。</p>\n"},{"title":"《被讨厌的勇气》：一切的人际烦恼都可以用8个字来释怀","date":"2019-11-08T16:00:00.000Z","description":"“课题分离：与我何关，与你何关”、“自由就是被人讨厌”、“一切烦恼皆来自于人际关系”","status":"Work in Progress","toc":1,"top":0,"_content":"\n## 简介\n## 我们的不幸是谁的错？\n## 一切烦恼都来自于人际关系\n## 让干涉你的人见鬼去\n## 要有被讨厌的勇气\n## 认真的人生活在“当下”\n\n---\n有的人并不是天生的脾气暴躁，而是明白了有时候合适的时机散播怒火，才能有效的达到目的。","source":"_posts/life_courage.md","raw":"---\ntitle: 《被讨厌的勇气》：一切的人际烦恼都可以用8个字来释怀\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\n    - 阿德勒心理学\ndate: 2019-11-09\ndescription: “课题分离：与我何关，与你何关”、“自由就是被人讨厌”、“一切烦恼皆来自于人际关系”\nstatus: Work in Progress\ntoc: 1\ntop: 0\n---\n\n## 简介\n## 我们的不幸是谁的错？\n## 一切烦恼都来自于人际关系\n## 让干涉你的人见鬼去\n## 要有被讨厌的勇气\n## 认真的人生活在“当下”\n\n---\n有的人并不是天生的脾气暴躁，而是明白了有时候合适的时机散播怒火，才能有效的达到目的。","slug":"life_courage","published":1,"updated":"2021-04-21T06:53:37.287Z","_id":"ckir88ihc003oc8y69x8gu0cu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"我们的不幸是谁的错？\"><a href=\"#我们的不幸是谁的错？\" class=\"headerlink\" title=\"我们的不幸是谁的错？\"></a>我们的不幸是谁的错？</h2><h2 id=\"一切烦恼都来自于人际关系\"><a href=\"#一切烦恼都来自于人际关系\" class=\"headerlink\" title=\"一切烦恼都来自于人际关系\"></a>一切烦恼都来自于人际关系</h2><h2 id=\"让干涉你的人见鬼去\"><a href=\"#让干涉你的人见鬼去\" class=\"headerlink\" title=\"让干涉你的人见鬼去\"></a>让干涉你的人见鬼去</h2><h2 id=\"要有被讨厌的勇气\"><a href=\"#要有被讨厌的勇气\" class=\"headerlink\" title=\"要有被讨厌的勇气\"></a>要有被讨厌的勇气</h2><h2 id=\"认真的人生活在“当下”\"><a href=\"#认真的人生活在“当下”\" class=\"headerlink\" title=\"认真的人生活在“当下”\"></a>认真的人生活在“当下”</h2><hr>\n<p>有的人并不是天生的脾气暴躁，而是明白了有时候合适的时机散播怒火，才能有效的达到目的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"我们的不幸是谁的错？\"><a href=\"#我们的不幸是谁的错？\" class=\"headerlink\" title=\"我们的不幸是谁的错？\"></a>我们的不幸是谁的错？</h2><h2 id=\"一切烦恼都来自于人际关系\"><a href=\"#一切烦恼都来自于人际关系\" class=\"headerlink\" title=\"一切烦恼都来自于人际关系\"></a>一切烦恼都来自于人际关系</h2><h2 id=\"让干涉你的人见鬼去\"><a href=\"#让干涉你的人见鬼去\" class=\"headerlink\" title=\"让干涉你的人见鬼去\"></a>让干涉你的人见鬼去</h2><h2 id=\"要有被讨厌的勇气\"><a href=\"#要有被讨厌的勇气\" class=\"headerlink\" title=\"要有被讨厌的勇气\"></a>要有被讨厌的勇气</h2><h2 id=\"认真的人生活在“当下”\"><a href=\"#认真的人生活在“当下”\" class=\"headerlink\" title=\"认真的人生活在“当下”\"></a>认真的人生活在“当下”</h2><hr>\n<p>有的人并不是天生的脾气暴躁，而是明白了有时候合适的时机散播怒火，才能有效的达到目的。</p>\n"},{"title":"Node版本管理工具 nvm for windows","date":"2018-09-28T16:00:00.000Z","description":"node版本更新那么快，怎么才能在机子上多装几版node？还能一句命令切换？","toc":1,"top":0,"_content":"\n# nvm\n\n只支持 linux 和 cent os\n\n# nvm for windows\n\n[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases)\n\n# 安装\n\n    0. 安装前卸载干净已经有的node\n    1. 设置nvm安装路径（不能有空格，否则nvm use 报错）\n    2. 设置node路径（当前使用的node的存放路径，会被添加到环境变量）\n\n# 常用命令\n\n```\nnvm list -当前安装的node版本\nnvm list available -可获取的版本\nnvm install xx.xx.xx -安装某版本node\nnvm use xx.xx.xx -使用某版本node\nnvm uninstall xx.xx.xx -卸载某版本node\n```\n\n# 其他命令\n\n```\nnvm arch -查看当前系统位数\nnvm on/off -打开/关闭nvm（好像并没有什么区别\nnvm proxy [url] -设置代理下载地址\nnvm root [path] -nvm安装路径\nnvm node_mirror [url] -node下载库路径\nnvm npm_mirror [url] -npm下载库路径\n```\n\n---\n\n    “重点是node为什么更新那么快？”\n","source":"_posts/nvm_for_windows.md","raw":"---\ntitle: Node版本管理工具 nvm for windows\ncategories:\n    - 10技术 | 前端工具与工程化 # 一级分类\ntags:\ndate: 2018-09-29\ndescription: node版本更新那么快，怎么才能在机子上多装几版node？还能一句命令切换？\ntoc: 1\ntop: 0\n---\n\n# nvm\n\n只支持 linux 和 cent os\n\n# nvm for windows\n\n[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases)\n\n# 安装\n\n    0. 安装前卸载干净已经有的node\n    1. 设置nvm安装路径（不能有空格，否则nvm use 报错）\n    2. 设置node路径（当前使用的node的存放路径，会被添加到环境变量）\n\n# 常用命令\n\n```\nnvm list -当前安装的node版本\nnvm list available -可获取的版本\nnvm install xx.xx.xx -安装某版本node\nnvm use xx.xx.xx -使用某版本node\nnvm uninstall xx.xx.xx -卸载某版本node\n```\n\n# 其他命令\n\n```\nnvm arch -查看当前系统位数\nnvm on/off -打开/关闭nvm（好像并没有什么区别\nnvm proxy [url] -设置代理下载地址\nnvm root [path] -nvm安装路径\nnvm node_mirror [url] -node下载库路径\nnvm npm_mirror [url] -npm下载库路径\n```\n\n---\n\n    “重点是node为什么更新那么快？”\n","slug":"nvm_for_windows","published":1,"updated":"2021-01-28T02:48:55.734Z","_id":"ckir88ihd003rc8y6qhp9zbns","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"nvm\"><a href=\"#nvm\" class=\"headerlink\" title=\"nvm\"></a>nvm</h1><p>只支持 linux 和 cent os</p>\n<h1 id=\"nvm-for-windows\"><a href=\"#nvm-for-windows\" class=\"headerlink\" title=\"nvm for windows\"></a>nvm for windows</h1><p><a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm-windows/releases</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>0. 安装前卸载干净已经有的node\n1. 设置nvm安装路径（不能有空格，否则nvm use 报错）\n2. 设置node路径（当前使用的node的存放路径，会被添加到环境变量）\n</code></pre><h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm list -当前安装的node版本</span><br><span class=\"line\">nvm list available -可获取的版本</span><br><span class=\"line\">nvm install xx.xx.xx -安装某版本node</span><br><span class=\"line\">nvm use xx.xx.xx -使用某版本node</span><br><span class=\"line\">nvm uninstall xx.xx.xx -卸载某版本node</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm arch -查看当前系统位数</span><br><span class=\"line\">nvm on/off -打开/关闭nvm（好像并没有什么区别</span><br><span class=\"line\">nvm proxy [url] -设置代理下载地址</span><br><span class=\"line\">nvm root [path] -nvm安装路径</span><br><span class=\"line\">nvm node_mirror [url] -node下载库路径</span><br><span class=\"line\">nvm npm_mirror [url] -npm下载库路径</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>“重点是node为什么更新那么快？”\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"nvm\"><a href=\"#nvm\" class=\"headerlink\" title=\"nvm\"></a>nvm</h1><p>只支持 linux 和 cent os</p>\n<h1 id=\"nvm-for-windows\"><a href=\"#nvm-for-windows\" class=\"headerlink\" title=\"nvm for windows\"></a>nvm for windows</h1><p><a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm-windows/releases</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>0. 安装前卸载干净已经有的node\n1. 设置nvm安装路径（不能有空格，否则nvm use 报错）\n2. 设置node路径（当前使用的node的存放路径，会被添加到环境变量）\n</code></pre><h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm list -当前安装的node版本</span><br><span class=\"line\">nvm list available -可获取的版本</span><br><span class=\"line\">nvm install xx.xx.xx -安装某版本node</span><br><span class=\"line\">nvm use xx.xx.xx -使用某版本node</span><br><span class=\"line\">nvm uninstall xx.xx.xx -卸载某版本node</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm arch -查看当前系统位数</span><br><span class=\"line\">nvm on/off -打开/关闭nvm（好像并没有什么区别</span><br><span class=\"line\">nvm proxy [url] -设置代理下载地址</span><br><span class=\"line\">nvm root [path] -nvm安装路径</span><br><span class=\"line\">nvm node_mirror [url] -node下载库路径</span><br><span class=\"line\">nvm npm_mirror [url] -npm下载库路径</span><br></pre></td></tr></table></figure>\n<hr>\n<pre><code>“重点是node为什么更新那么快？”\n</code></pre>"},{"title":"《贫穷的本质：我们为什么摆脱不了贫穷》读书输出","date":"2020-01-01T16:00:00.000Z","description":"2019诺贝尔经济学家获奖作品、贫穷的本质&如何逃离贫穷陷阱","status":"Work in Progress","toc":1,"top":0,"_content":"\n## 简介\n- 作者[印度]阿比吉特·班纳吉（Abhijit V.Banerjee）、[法]埃斯特·迪弗洛 （Esther Duflo）\n- 两位作者深入五大洲多个国家的穷人世界，调查贫困人群最集中的18个国家和地区，从穷人生活的多个方面，探寻贫穷真正的根源\n- 该书用九章大篇幅，从**营养、健康、教育、生育、风险管理、贷款、存款、创业、政治参与**等九个方面探讨穷人的生存、选择和突围，以及援助、制度对穷人的意义。\n\n- 为什么穷人吃不饱饭还要买电视？\n- 为什么他们的孩子即使上了学也不爱学习？\n- 为什么他们放着免费的健康生活不去享受，却要自己花钱买药？\n- 为什么他们能创业却难以守业？\n- 为什么大多数人认为小额信贷、穷人银行没什么效用？\n\n\n\n\n---\n这本书太难啃了，未完待续","source":"_posts/poor_economics.md","raw":"---\ntitle: 《贫穷的本质：我们为什么摆脱不了贫穷》读书输出\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2020-01-02\ndescription: 2019诺贝尔经济学家获奖作品、贫穷的本质&如何逃离贫穷陷阱\nstatus: Work in Progress\ntoc: 1\ntop: 0\n---\n\n## 简介\n- 作者[印度]阿比吉特·班纳吉（Abhijit V.Banerjee）、[法]埃斯特·迪弗洛 （Esther Duflo）\n- 两位作者深入五大洲多个国家的穷人世界，调查贫困人群最集中的18个国家和地区，从穷人生活的多个方面，探寻贫穷真正的根源\n- 该书用九章大篇幅，从**营养、健康、教育、生育、风险管理、贷款、存款、创业、政治参与**等九个方面探讨穷人的生存、选择和突围，以及援助、制度对穷人的意义。\n\n- 为什么穷人吃不饱饭还要买电视？\n- 为什么他们的孩子即使上了学也不爱学习？\n- 为什么他们放着免费的健康生活不去享受，却要自己花钱买药？\n- 为什么他们能创业却难以守业？\n- 为什么大多数人认为小额信贷、穷人银行没什么效用？\n\n\n\n\n---\n这本书太难啃了，未完待续","slug":"poor_economics","published":1,"updated":"2021-04-21T06:53:37.262Z","_id":"ckir88ihf003uc8y6gadqdzdm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>作者[印度]阿比吉特·班纳吉（Abhijit V.Banerjee）、[法]埃斯特·迪弗洛 （Esther Duflo）</li>\n<li>两位作者深入五大洲多个国家的穷人世界，调查贫困人群最集中的18个国家和地区，从穷人生活的多个方面，探寻贫穷真正的根源</li>\n<li><p>该书用九章大篇幅，从<strong>营养、健康、教育、生育、风险管理、贷款、存款、创业、政治参与</strong>等九个方面探讨穷人的生存、选择和突围，以及援助、制度对穷人的意义。</p>\n</li>\n<li><p>为什么穷人吃不饱饭还要买电视？</p>\n</li>\n<li>为什么他们的孩子即使上了学也不爱学习？</li>\n<li>为什么他们放着免费的健康生活不去享受，却要自己花钱买药？</li>\n<li>为什么他们能创业却难以守业？</li>\n<li>为什么大多数人认为小额信贷、穷人银行没什么效用？</li>\n</ul>\n<hr>\n<p>这本书太难啃了，未完待续</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>作者[印度]阿比吉特·班纳吉（Abhijit V.Banerjee）、[法]埃斯特·迪弗洛 （Esther Duflo）</li>\n<li>两位作者深入五大洲多个国家的穷人世界，调查贫困人群最集中的18个国家和地区，从穷人生活的多个方面，探寻贫穷真正的根源</li>\n<li><p>该书用九章大篇幅，从<strong>营养、健康、教育、生育、风险管理、贷款、存款、创业、政治参与</strong>等九个方面探讨穷人的生存、选择和突围，以及援助、制度对穷人的意义。</p>\n</li>\n<li><p>为什么穷人吃不饱饭还要买电视？</p>\n</li>\n<li>为什么他们的孩子即使上了学也不爱学习？</li>\n<li>为什么他们放着免费的健康生活不去享受，却要自己花钱买药？</li>\n<li>为什么他们能创业却难以守业？</li>\n<li>为什么大多数人认为小额信贷、穷人银行没什么效用？</li>\n</ul>\n<hr>\n<p>这本书太难啃了，未完待续</p>\n"},{"title":"《自控力》：即时反馈&延迟折扣","date":"2019-09-18T16:00:00.000Z","description":"了解意志力/欲望的生理心理精神学原理，从而更好的掌控自己","toc":1,"top":0,"_content":"\n## 《自控力》介绍\n- “斯坦福大学广受欢迎的心理学课程”\n- 总结 意志力/欲望的现象\n- 分析 意志力/欲望的 生理 心理 精神学原理\n- 找出 提升自控力/控制欲望 的对策\n\n#### 思维导图\n![《自控力思维导图》](/images/self_control.png)\n\n## 意志力的本质\n1. `我要`的力量：行动\n2. `我不要`的力量：抵制\n3. `我想要`的力量：目标\n\n\n## 意志力的生理特征\n- 意志力像`肌肉`一样有限制。\n- 意志力被消耗，会导致失控。\n- 意志力从早到晚，逐渐减弱——把需要意志力的事情放在`早上`（意志力最强的时候）做。\n- 饥饿/疲惫/紧张会影响意志力。\n- 意志力可以训练：在一些小事上持续自控会提升整体的意志力\n\n## 增强意志力的生理方法\n- `运动`：坚持运动，能提升意志力\n- `睡眠`：睡眠是对能量的恢复，早上的意志力最强\n- `放松`：压力会消耗意志力\n- `呼吸等待`：做失控决定前深呼吸，告诉自己等待几分钟再去做\n- `训练`：通过持续性的小事自控来训练意志力\n- `动力`：找出“我想要”的动力，让它环绕在你的生活的角角落落\n\n\n## 引起“失控”的几种心理\n- `自我感觉良好`会让自己更易纵容。\n- `把进步当作放纵的接口`：前进一小步，后退两大步\n- `透支成就感`：向未来赊账\n\n\n## 多巴胺 & 欲望vs幸福\n\n#### 多巴胺：让人产生欲望，而不是快乐\n- 人脑的多巴胺系统，与快感中心不是同一个部分。\n- 多巴胺系统刺激人原始动力系统的一部分。\n- 使人产生欲望，预见快感，追逐欲望，而不是真正使人快乐。\n- 过量的多巴胺：上瘾\n\n#### 欲望 != 幸福\n- 没有欲望不幸福，欲望过多使人失控。\n- 好欲望-》产生动力-》促进意志力\n- 坏欲望-》屈服于诱惑-》失控\n- 所以要合理利用欲望，分清“欲望”和“幸福”\n\n#### 多巴胺系统的特点\n- 对新鲜事物/未知奖励敏感\n- 对多样性敏感\n\n#### 多巴胺对策\n- “多巴胺化”：把不喜欢的东西 和 能促进多巴胺的事联系起来。\n- “鱼缸奖励法”：完成目标时，抽取未知的不同的奖励，而不是小儿稳定的奖励。\n\n\n## 压力带来的“失控负循环”\n\n![压力带来的“失控负循环”](/images/stress_circle.png)\n\n\n#### 打破循环的方法\n- 及时止损，不要破罐子破摔\n- “自我谅解”，而不是加深自责加深压力促进循环\n- “行动”而不是“发誓改变”，不要满足于指定计划，这种满足感来源于“对想象中未来成就感的透支”\n- 用有效的方式解压↓\n\n#### 有效的解压方式\n- 运动\n- 培养爱好\n- 社交\n- 音乐\n- 阅读\n- 牢牢记住以上方式解压后愉悦的心情\n\n\n## 现代 vs 未来\n\n#### `即时反馈`&`延迟折扣`\n- `多巴胺系统`使人乐于追求即时反馈\n- 眼前的“小奖励” 比 “未来的大奖励” 更有诱惑力\n- 延迟折扣：需要等待时间越久的奖励，诱惑力越低\n\n#### 抵制即时反馈\n- 拉开与诱惑的距离：时间 & 空间\n- “10分钟法则”：决定放纵前，先等待10分钟（利用延迟折扣，诱惑力会降低\n- 放大未来的奖励，降低折扣率，让想要的未来离自己更近，例如把偶像/目标贴在经常能看到的地方\n\n#### 缩小“现在的自己” 与“未来的自己”的差距\n- 不要高看未来的自己\n- 不要一切都拖到未来去做\n\n\n## 意志力会传染\n- 人生来就具有社会性：不可能脱离社会生存，要与他人产生联系\n#### `社会认同感`\n- “自豪”，“惭愧”等社会性情绪，会促进人的自控\n- 让自己相信“大多数人都自控”，“自控是个社会规范”，更有利于自控\n\n#### `镜像神经元`的行为：\n- 无意识的模仿他人\n- 情绪传染\n- 自控力传染\n\n#### 对策\n- 增强免疫力\n- 坚定自我\n- 远离不自控人群\n\n## 讽刺性反弹\n#### “我不要”的神经学原理\n1. 大脑的“操作系统”：消耗能力去自控（耗能高）\n2. 大脑的“监控系统”：充满了“不要xxx”的警告\n（自动机制，耗能很低）\n- 当人的精力不足时，1、2失去平衡，不断的执行2，不断的想起不能做的事情，却没有足够的能量去执行1去抵制，就会导致失控\n\n#### 讽刺性反弹的结果\n- “我不要”的力量，有时候会产生相反的效果\n- 通过“抑制想法”来抵抗诱惑，可能会适得其反\n- 越压抑人的本能，越容易适得其反\n\n#### 对策\n- 了解认知偏见：认知偏见：想起xx的次数多，容易让人对xx的真实性产生误判。要知道自己不断想起的事情不一定是真的，不一定是对的\n- 放弃控制内心的感受，坦率的面对与接受，关注自己的想法与感受，去理解分析，判断真实性的对错\n- `直面自身的欲望，但不去行动`：对内接受自我，对外控制行为\n- 把“我不要”转为“我想要”效果更好。\n\n\n<small>注：书中列出的观点，大多数都有实验数据支撑，都是很有趣的实验，建议亲自阅读</small>","source":"_posts/self_control.md","raw":"---\ntitle: 《自控力》：即时反馈&延迟折扣\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2019-09-19\ndescription: 了解意志力/欲望的生理心理精神学原理，从而更好的掌控自己\ntoc: 1\ntop: 0\n---\n\n## 《自控力》介绍\n- “斯坦福大学广受欢迎的心理学课程”\n- 总结 意志力/欲望的现象\n- 分析 意志力/欲望的 生理 心理 精神学原理\n- 找出 提升自控力/控制欲望 的对策\n\n#### 思维导图\n![《自控力思维导图》](/images/self_control.png)\n\n## 意志力的本质\n1. `我要`的力量：行动\n2. `我不要`的力量：抵制\n3. `我想要`的力量：目标\n\n\n## 意志力的生理特征\n- 意志力像`肌肉`一样有限制。\n- 意志力被消耗，会导致失控。\n- 意志力从早到晚，逐渐减弱——把需要意志力的事情放在`早上`（意志力最强的时候）做。\n- 饥饿/疲惫/紧张会影响意志力。\n- 意志力可以训练：在一些小事上持续自控会提升整体的意志力\n\n## 增强意志力的生理方法\n- `运动`：坚持运动，能提升意志力\n- `睡眠`：睡眠是对能量的恢复，早上的意志力最强\n- `放松`：压力会消耗意志力\n- `呼吸等待`：做失控决定前深呼吸，告诉自己等待几分钟再去做\n- `训练`：通过持续性的小事自控来训练意志力\n- `动力`：找出“我想要”的动力，让它环绕在你的生活的角角落落\n\n\n## 引起“失控”的几种心理\n- `自我感觉良好`会让自己更易纵容。\n- `把进步当作放纵的接口`：前进一小步，后退两大步\n- `透支成就感`：向未来赊账\n\n\n## 多巴胺 & 欲望vs幸福\n\n#### 多巴胺：让人产生欲望，而不是快乐\n- 人脑的多巴胺系统，与快感中心不是同一个部分。\n- 多巴胺系统刺激人原始动力系统的一部分。\n- 使人产生欲望，预见快感，追逐欲望，而不是真正使人快乐。\n- 过量的多巴胺：上瘾\n\n#### 欲望 != 幸福\n- 没有欲望不幸福，欲望过多使人失控。\n- 好欲望-》产生动力-》促进意志力\n- 坏欲望-》屈服于诱惑-》失控\n- 所以要合理利用欲望，分清“欲望”和“幸福”\n\n#### 多巴胺系统的特点\n- 对新鲜事物/未知奖励敏感\n- 对多样性敏感\n\n#### 多巴胺对策\n- “多巴胺化”：把不喜欢的东西 和 能促进多巴胺的事联系起来。\n- “鱼缸奖励法”：完成目标时，抽取未知的不同的奖励，而不是小儿稳定的奖励。\n\n\n## 压力带来的“失控负循环”\n\n![压力带来的“失控负循环”](/images/stress_circle.png)\n\n\n#### 打破循环的方法\n- 及时止损，不要破罐子破摔\n- “自我谅解”，而不是加深自责加深压力促进循环\n- “行动”而不是“发誓改变”，不要满足于指定计划，这种满足感来源于“对想象中未来成就感的透支”\n- 用有效的方式解压↓\n\n#### 有效的解压方式\n- 运动\n- 培养爱好\n- 社交\n- 音乐\n- 阅读\n- 牢牢记住以上方式解压后愉悦的心情\n\n\n## 现代 vs 未来\n\n#### `即时反馈`&`延迟折扣`\n- `多巴胺系统`使人乐于追求即时反馈\n- 眼前的“小奖励” 比 “未来的大奖励” 更有诱惑力\n- 延迟折扣：需要等待时间越久的奖励，诱惑力越低\n\n#### 抵制即时反馈\n- 拉开与诱惑的距离：时间 & 空间\n- “10分钟法则”：决定放纵前，先等待10分钟（利用延迟折扣，诱惑力会降低\n- 放大未来的奖励，降低折扣率，让想要的未来离自己更近，例如把偶像/目标贴在经常能看到的地方\n\n#### 缩小“现在的自己” 与“未来的自己”的差距\n- 不要高看未来的自己\n- 不要一切都拖到未来去做\n\n\n## 意志力会传染\n- 人生来就具有社会性：不可能脱离社会生存，要与他人产生联系\n#### `社会认同感`\n- “自豪”，“惭愧”等社会性情绪，会促进人的自控\n- 让自己相信“大多数人都自控”，“自控是个社会规范”，更有利于自控\n\n#### `镜像神经元`的行为：\n- 无意识的模仿他人\n- 情绪传染\n- 自控力传染\n\n#### 对策\n- 增强免疫力\n- 坚定自我\n- 远离不自控人群\n\n## 讽刺性反弹\n#### “我不要”的神经学原理\n1. 大脑的“操作系统”：消耗能力去自控（耗能高）\n2. 大脑的“监控系统”：充满了“不要xxx”的警告\n（自动机制，耗能很低）\n- 当人的精力不足时，1、2失去平衡，不断的执行2，不断的想起不能做的事情，却没有足够的能量去执行1去抵制，就会导致失控\n\n#### 讽刺性反弹的结果\n- “我不要”的力量，有时候会产生相反的效果\n- 通过“抑制想法”来抵抗诱惑，可能会适得其反\n- 越压抑人的本能，越容易适得其反\n\n#### 对策\n- 了解认知偏见：认知偏见：想起xx的次数多，容易让人对xx的真实性产生误判。要知道自己不断想起的事情不一定是真的，不一定是对的\n- 放弃控制内心的感受，坦率的面对与接受，关注自己的想法与感受，去理解分析，判断真实性的对错\n- `直面自身的欲望，但不去行动`：对内接受自我，对外控制行为\n- 把“我不要”转为“我想要”效果更好。\n\n\n<small>注：书中列出的观点，大多数都有实验数据支撑，都是很有趣的实验，建议亲自阅读</small>","slug":"self_control","published":1,"updated":"2021-04-21T06:53:37.262Z","_id":"ckir88ihg003xc8y64243bnnq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"《自控力》介绍\"><a href=\"#《自控力》介绍\" class=\"headerlink\" title=\"《自控力》介绍\"></a>《自控力》介绍</h2><ul>\n<li>“斯坦福大学广受欢迎的心理学课程”</li>\n<li>总结 意志力/欲望的现象</li>\n<li>分析 意志力/欲望的 生理 心理 精神学原理</li>\n<li>找出 提升自控力/控制欲望 的对策</li>\n</ul>\n<h4 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h4><p><img src=\"/images/self_control.png\" alt=\"《自控力思维导图》\"></p>\n<h2 id=\"意志力的本质\"><a href=\"#意志力的本质\" class=\"headerlink\" title=\"意志力的本质\"></a>意志力的本质</h2><ol>\n<li><code>我要</code>的力量：行动</li>\n<li><code>我不要</code>的力量：抵制</li>\n<li><code>我想要</code>的力量：目标</li>\n</ol>\n<h2 id=\"意志力的生理特征\"><a href=\"#意志力的生理特征\" class=\"headerlink\" title=\"意志力的生理特征\"></a>意志力的生理特征</h2><ul>\n<li>意志力像<code>肌肉</code>一样有限制。</li>\n<li>意志力被消耗，会导致失控。</li>\n<li>意志力从早到晚，逐渐减弱——把需要意志力的事情放在<code>早上</code>（意志力最强的时候）做。</li>\n<li>饥饿/疲惫/紧张会影响意志力。</li>\n<li>意志力可以训练：在一些小事上持续自控会提升整体的意志力</li>\n</ul>\n<h2 id=\"增强意志力的生理方法\"><a href=\"#增强意志力的生理方法\" class=\"headerlink\" title=\"增强意志力的生理方法\"></a>增强意志力的生理方法</h2><ul>\n<li><code>运动</code>：坚持运动，能提升意志力</li>\n<li><code>睡眠</code>：睡眠是对能量的恢复，早上的意志力最强</li>\n<li><code>放松</code>：压力会消耗意志力</li>\n<li><code>呼吸等待</code>：做失控决定前深呼吸，告诉自己等待几分钟再去做</li>\n<li><code>训练</code>：通过持续性的小事自控来训练意志力</li>\n<li><code>动力</code>：找出“我想要”的动力，让它环绕在你的生活的角角落落</li>\n</ul>\n<h2 id=\"引起“失控”的几种心理\"><a href=\"#引起“失控”的几种心理\" class=\"headerlink\" title=\"引起“失控”的几种心理\"></a>引起“失控”的几种心理</h2><ul>\n<li><code>自我感觉良好</code>会让自己更易纵容。</li>\n<li><code>把进步当作放纵的接口</code>：前进一小步，后退两大步</li>\n<li><code>透支成就感</code>：向未来赊账</li>\n</ul>\n<h2 id=\"多巴胺-amp-欲望vs幸福\"><a href=\"#多巴胺-amp-欲望vs幸福\" class=\"headerlink\" title=\"多巴胺 &amp; 欲望vs幸福\"></a>多巴胺 &amp; 欲望vs幸福</h2><h4 id=\"多巴胺：让人产生欲望，而不是快乐\"><a href=\"#多巴胺：让人产生欲望，而不是快乐\" class=\"headerlink\" title=\"多巴胺：让人产生欲望，而不是快乐\"></a>多巴胺：让人产生欲望，而不是快乐</h4><ul>\n<li>人脑的多巴胺系统，与快感中心不是同一个部分。</li>\n<li>多巴胺系统刺激人原始动力系统的一部分。</li>\n<li>使人产生欲望，预见快感，追逐欲望，而不是真正使人快乐。</li>\n<li>过量的多巴胺：上瘾</li>\n</ul>\n<h4 id=\"欲望-幸福\"><a href=\"#欲望-幸福\" class=\"headerlink\" title=\"欲望 != 幸福\"></a>欲望 != 幸福</h4><ul>\n<li>没有欲望不幸福，欲望过多使人失控。</li>\n<li>好欲望-》产生动力-》促进意志力</li>\n<li>坏欲望-》屈服于诱惑-》失控</li>\n<li>所以要合理利用欲望，分清“欲望”和“幸福”</li>\n</ul>\n<h4 id=\"多巴胺系统的特点\"><a href=\"#多巴胺系统的特点\" class=\"headerlink\" title=\"多巴胺系统的特点\"></a>多巴胺系统的特点</h4><ul>\n<li>对新鲜事物/未知奖励敏感</li>\n<li>对多样性敏感</li>\n</ul>\n<h4 id=\"多巴胺对策\"><a href=\"#多巴胺对策\" class=\"headerlink\" title=\"多巴胺对策\"></a>多巴胺对策</h4><ul>\n<li>“多巴胺化”：把不喜欢的东西 和 能促进多巴胺的事联系起来。</li>\n<li>“鱼缸奖励法”：完成目标时，抽取未知的不同的奖励，而不是小儿稳定的奖励。</li>\n</ul>\n<h2 id=\"压力带来的“失控负循环”\"><a href=\"#压力带来的“失控负循环”\" class=\"headerlink\" title=\"压力带来的“失控负循环”\"></a>压力带来的“失控负循环”</h2><p><img src=\"/images/stress_circle.png\" alt=\"压力带来的“失控负循环”\"></p>\n<h4 id=\"打破循环的方法\"><a href=\"#打破循环的方法\" class=\"headerlink\" title=\"打破循环的方法\"></a>打破循环的方法</h4><ul>\n<li>及时止损，不要破罐子破摔</li>\n<li>“自我谅解”，而不是加深自责加深压力促进循环</li>\n<li>“行动”而不是“发誓改变”，不要满足于指定计划，这种满足感来源于“对想象中未来成就感的透支”</li>\n<li>用有效的方式解压↓</li>\n</ul>\n<h4 id=\"有效的解压方式\"><a href=\"#有效的解压方式\" class=\"headerlink\" title=\"有效的解压方式\"></a>有效的解压方式</h4><ul>\n<li>运动</li>\n<li>培养爱好</li>\n<li>社交</li>\n<li>音乐</li>\n<li>阅读</li>\n<li>牢牢记住以上方式解压后愉悦的心情</li>\n</ul>\n<h2 id=\"现代-vs-未来\"><a href=\"#现代-vs-未来\" class=\"headerlink\" title=\"现代 vs 未来\"></a>现代 vs 未来</h2><h4 id=\"即时反馈-amp-延迟折扣\"><a href=\"#即时反馈-amp-延迟折扣\" class=\"headerlink\" title=\"即时反馈&amp;延迟折扣\"></a><code>即时反馈</code>&amp;<code>延迟折扣</code></h4><ul>\n<li><code>多巴胺系统</code>使人乐于追求即时反馈</li>\n<li>眼前的“小奖励” 比 “未来的大奖励” 更有诱惑力</li>\n<li>延迟折扣：需要等待时间越久的奖励，诱惑力越低</li>\n</ul>\n<h4 id=\"抵制即时反馈\"><a href=\"#抵制即时反馈\" class=\"headerlink\" title=\"抵制即时反馈\"></a>抵制即时反馈</h4><ul>\n<li>拉开与诱惑的距离：时间 &amp; 空间</li>\n<li>“10分钟法则”：决定放纵前，先等待10分钟（利用延迟折扣，诱惑力会降低</li>\n<li>放大未来的奖励，降低折扣率，让想要的未来离自己更近，例如把偶像/目标贴在经常能看到的地方</li>\n</ul>\n<h4 id=\"缩小“现在的自己”-与“未来的自己”的差距\"><a href=\"#缩小“现在的自己”-与“未来的自己”的差距\" class=\"headerlink\" title=\"缩小“现在的自己” 与“未来的自己”的差距\"></a>缩小“现在的自己” 与“未来的自己”的差距</h4><ul>\n<li>不要高看未来的自己</li>\n<li>不要一切都拖到未来去做</li>\n</ul>\n<h2 id=\"意志力会传染\"><a href=\"#意志力会传染\" class=\"headerlink\" title=\"意志力会传染\"></a>意志力会传染</h2><ul>\n<li>人生来就具有社会性：不可能脱离社会生存，要与他人产生联系<h4 id=\"社会认同感\"><a href=\"#社会认同感\" class=\"headerlink\" title=\"社会认同感\"></a><code>社会认同感</code></h4></li>\n<li>“自豪”，“惭愧”等社会性情绪，会促进人的自控</li>\n<li>让自己相信“大多数人都自控”，“自控是个社会规范”，更有利于自控</li>\n</ul>\n<h4 id=\"镜像神经元的行为：\"><a href=\"#镜像神经元的行为：\" class=\"headerlink\" title=\"镜像神经元的行为：\"></a><code>镜像神经元</code>的行为：</h4><ul>\n<li>无意识的模仿他人</li>\n<li>情绪传染</li>\n<li>自控力传染</li>\n</ul>\n<h4 id=\"对策\"><a href=\"#对策\" class=\"headerlink\" title=\"对策\"></a>对策</h4><ul>\n<li>增强免疫力</li>\n<li>坚定自我</li>\n<li>远离不自控人群</li>\n</ul>\n<h2 id=\"讽刺性反弹\"><a href=\"#讽刺性反弹\" class=\"headerlink\" title=\"讽刺性反弹\"></a>讽刺性反弹</h2><h4 id=\"“我不要”的神经学原理\"><a href=\"#“我不要”的神经学原理\" class=\"headerlink\" title=\"“我不要”的神经学原理\"></a>“我不要”的神经学原理</h4><ol>\n<li>大脑的“操作系统”：消耗能力去自控（耗能高）</li>\n<li>大脑的“监控系统”：充满了“不要xxx”的警告<br>（自动机制，耗能很低）</li>\n</ol>\n<ul>\n<li>当人的精力不足时，1、2失去平衡，不断的执行2，不断的想起不能做的事情，却没有足够的能量去执行1去抵制，就会导致失控</li>\n</ul>\n<h4 id=\"讽刺性反弹的结果\"><a href=\"#讽刺性反弹的结果\" class=\"headerlink\" title=\"讽刺性反弹的结果\"></a>讽刺性反弹的结果</h4><ul>\n<li>“我不要”的力量，有时候会产生相反的效果</li>\n<li>通过“抑制想法”来抵抗诱惑，可能会适得其反</li>\n<li>越压抑人的本能，越容易适得其反</li>\n</ul>\n<h4 id=\"对策-1\"><a href=\"#对策-1\" class=\"headerlink\" title=\"对策\"></a>对策</h4><ul>\n<li>了解认知偏见：认知偏见：想起xx的次数多，容易让人对xx的真实性产生误判。要知道自己不断想起的事情不一定是真的，不一定是对的</li>\n<li>放弃控制内心的感受，坦率的面对与接受，关注自己的想法与感受，去理解分析，判断真实性的对错</li>\n<li><code>直面自身的欲望，但不去行动</code>：对内接受自我，对外控制行为</li>\n<li>把“我不要”转为“我想要”效果更好。</li>\n</ul>\n<p><small>注：书中列出的观点，大多数都有实验数据支撑，都是很有趣的实验，建议亲自阅读</small></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"《自控力》介绍\"><a href=\"#《自控力》介绍\" class=\"headerlink\" title=\"《自控力》介绍\"></a>《自控力》介绍</h2><ul>\n<li>“斯坦福大学广受欢迎的心理学课程”</li>\n<li>总结 意志力/欲望的现象</li>\n<li>分析 意志力/欲望的 生理 心理 精神学原理</li>\n<li>找出 提升自控力/控制欲望 的对策</li>\n</ul>\n<h4 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h4><p><img src=\"/images/self_control.png\" alt=\"《自控力思维导图》\"></p>\n<h2 id=\"意志力的本质\"><a href=\"#意志力的本质\" class=\"headerlink\" title=\"意志力的本质\"></a>意志力的本质</h2><ol>\n<li><code>我要</code>的力量：行动</li>\n<li><code>我不要</code>的力量：抵制</li>\n<li><code>我想要</code>的力量：目标</li>\n</ol>\n<h2 id=\"意志力的生理特征\"><a href=\"#意志力的生理特征\" class=\"headerlink\" title=\"意志力的生理特征\"></a>意志力的生理特征</h2><ul>\n<li>意志力像<code>肌肉</code>一样有限制。</li>\n<li>意志力被消耗，会导致失控。</li>\n<li>意志力从早到晚，逐渐减弱——把需要意志力的事情放在<code>早上</code>（意志力最强的时候）做。</li>\n<li>饥饿/疲惫/紧张会影响意志力。</li>\n<li>意志力可以训练：在一些小事上持续自控会提升整体的意志力</li>\n</ul>\n<h2 id=\"增强意志力的生理方法\"><a href=\"#增强意志力的生理方法\" class=\"headerlink\" title=\"增强意志力的生理方法\"></a>增强意志力的生理方法</h2><ul>\n<li><code>运动</code>：坚持运动，能提升意志力</li>\n<li><code>睡眠</code>：睡眠是对能量的恢复，早上的意志力最强</li>\n<li><code>放松</code>：压力会消耗意志力</li>\n<li><code>呼吸等待</code>：做失控决定前深呼吸，告诉自己等待几分钟再去做</li>\n<li><code>训练</code>：通过持续性的小事自控来训练意志力</li>\n<li><code>动力</code>：找出“我想要”的动力，让它环绕在你的生活的角角落落</li>\n</ul>\n<h2 id=\"引起“失控”的几种心理\"><a href=\"#引起“失控”的几种心理\" class=\"headerlink\" title=\"引起“失控”的几种心理\"></a>引起“失控”的几种心理</h2><ul>\n<li><code>自我感觉良好</code>会让自己更易纵容。</li>\n<li><code>把进步当作放纵的接口</code>：前进一小步，后退两大步</li>\n<li><code>透支成就感</code>：向未来赊账</li>\n</ul>\n<h2 id=\"多巴胺-amp-欲望vs幸福\"><a href=\"#多巴胺-amp-欲望vs幸福\" class=\"headerlink\" title=\"多巴胺 &amp; 欲望vs幸福\"></a>多巴胺 &amp; 欲望vs幸福</h2><h4 id=\"多巴胺：让人产生欲望，而不是快乐\"><a href=\"#多巴胺：让人产生欲望，而不是快乐\" class=\"headerlink\" title=\"多巴胺：让人产生欲望，而不是快乐\"></a>多巴胺：让人产生欲望，而不是快乐</h4><ul>\n<li>人脑的多巴胺系统，与快感中心不是同一个部分。</li>\n<li>多巴胺系统刺激人原始动力系统的一部分。</li>\n<li>使人产生欲望，预见快感，追逐欲望，而不是真正使人快乐。</li>\n<li>过量的多巴胺：上瘾</li>\n</ul>\n<h4 id=\"欲望-幸福\"><a href=\"#欲望-幸福\" class=\"headerlink\" title=\"欲望 != 幸福\"></a>欲望 != 幸福</h4><ul>\n<li>没有欲望不幸福，欲望过多使人失控。</li>\n<li>好欲望-》产生动力-》促进意志力</li>\n<li>坏欲望-》屈服于诱惑-》失控</li>\n<li>所以要合理利用欲望，分清“欲望”和“幸福”</li>\n</ul>\n<h4 id=\"多巴胺系统的特点\"><a href=\"#多巴胺系统的特点\" class=\"headerlink\" title=\"多巴胺系统的特点\"></a>多巴胺系统的特点</h4><ul>\n<li>对新鲜事物/未知奖励敏感</li>\n<li>对多样性敏感</li>\n</ul>\n<h4 id=\"多巴胺对策\"><a href=\"#多巴胺对策\" class=\"headerlink\" title=\"多巴胺对策\"></a>多巴胺对策</h4><ul>\n<li>“多巴胺化”：把不喜欢的东西 和 能促进多巴胺的事联系起来。</li>\n<li>“鱼缸奖励法”：完成目标时，抽取未知的不同的奖励，而不是小儿稳定的奖励。</li>\n</ul>\n<h2 id=\"压力带来的“失控负循环”\"><a href=\"#压力带来的“失控负循环”\" class=\"headerlink\" title=\"压力带来的“失控负循环”\"></a>压力带来的“失控负循环”</h2><p><img src=\"/images/stress_circle.png\" alt=\"压力带来的“失控负循环”\"></p>\n<h4 id=\"打破循环的方法\"><a href=\"#打破循环的方法\" class=\"headerlink\" title=\"打破循环的方法\"></a>打破循环的方法</h4><ul>\n<li>及时止损，不要破罐子破摔</li>\n<li>“自我谅解”，而不是加深自责加深压力促进循环</li>\n<li>“行动”而不是“发誓改变”，不要满足于指定计划，这种满足感来源于“对想象中未来成就感的透支”</li>\n<li>用有效的方式解压↓</li>\n</ul>\n<h4 id=\"有效的解压方式\"><a href=\"#有效的解压方式\" class=\"headerlink\" title=\"有效的解压方式\"></a>有效的解压方式</h4><ul>\n<li>运动</li>\n<li>培养爱好</li>\n<li>社交</li>\n<li>音乐</li>\n<li>阅读</li>\n<li>牢牢记住以上方式解压后愉悦的心情</li>\n</ul>\n<h2 id=\"现代-vs-未来\"><a href=\"#现代-vs-未来\" class=\"headerlink\" title=\"现代 vs 未来\"></a>现代 vs 未来</h2><h4 id=\"即时反馈-amp-延迟折扣\"><a href=\"#即时反馈-amp-延迟折扣\" class=\"headerlink\" title=\"即时反馈&amp;延迟折扣\"></a><code>即时反馈</code>&amp;<code>延迟折扣</code></h4><ul>\n<li><code>多巴胺系统</code>使人乐于追求即时反馈</li>\n<li>眼前的“小奖励” 比 “未来的大奖励” 更有诱惑力</li>\n<li>延迟折扣：需要等待时间越久的奖励，诱惑力越低</li>\n</ul>\n<h4 id=\"抵制即时反馈\"><a href=\"#抵制即时反馈\" class=\"headerlink\" title=\"抵制即时反馈\"></a>抵制即时反馈</h4><ul>\n<li>拉开与诱惑的距离：时间 &amp; 空间</li>\n<li>“10分钟法则”：决定放纵前，先等待10分钟（利用延迟折扣，诱惑力会降低</li>\n<li>放大未来的奖励，降低折扣率，让想要的未来离自己更近，例如把偶像/目标贴在经常能看到的地方</li>\n</ul>\n<h4 id=\"缩小“现在的自己”-与“未来的自己”的差距\"><a href=\"#缩小“现在的自己”-与“未来的自己”的差距\" class=\"headerlink\" title=\"缩小“现在的自己” 与“未来的自己”的差距\"></a>缩小“现在的自己” 与“未来的自己”的差距</h4><ul>\n<li>不要高看未来的自己</li>\n<li>不要一切都拖到未来去做</li>\n</ul>\n<h2 id=\"意志力会传染\"><a href=\"#意志力会传染\" class=\"headerlink\" title=\"意志力会传染\"></a>意志力会传染</h2><ul>\n<li>人生来就具有社会性：不可能脱离社会生存，要与他人产生联系<h4 id=\"社会认同感\"><a href=\"#社会认同感\" class=\"headerlink\" title=\"社会认同感\"></a><code>社会认同感</code></h4></li>\n<li>“自豪”，“惭愧”等社会性情绪，会促进人的自控</li>\n<li>让自己相信“大多数人都自控”，“自控是个社会规范”，更有利于自控</li>\n</ul>\n<h4 id=\"镜像神经元的行为：\"><a href=\"#镜像神经元的行为：\" class=\"headerlink\" title=\"镜像神经元的行为：\"></a><code>镜像神经元</code>的行为：</h4><ul>\n<li>无意识的模仿他人</li>\n<li>情绪传染</li>\n<li>自控力传染</li>\n</ul>\n<h4 id=\"对策\"><a href=\"#对策\" class=\"headerlink\" title=\"对策\"></a>对策</h4><ul>\n<li>增强免疫力</li>\n<li>坚定自我</li>\n<li>远离不自控人群</li>\n</ul>\n<h2 id=\"讽刺性反弹\"><a href=\"#讽刺性反弹\" class=\"headerlink\" title=\"讽刺性反弹\"></a>讽刺性反弹</h2><h4 id=\"“我不要”的神经学原理\"><a href=\"#“我不要”的神经学原理\" class=\"headerlink\" title=\"“我不要”的神经学原理\"></a>“我不要”的神经学原理</h4><ol>\n<li>大脑的“操作系统”：消耗能力去自控（耗能高）</li>\n<li>大脑的“监控系统”：充满了“不要xxx”的警告<br>（自动机制，耗能很低）</li>\n</ol>\n<ul>\n<li>当人的精力不足时，1、2失去平衡，不断的执行2，不断的想起不能做的事情，却没有足够的能量去执行1去抵制，就会导致失控</li>\n</ul>\n<h4 id=\"讽刺性反弹的结果\"><a href=\"#讽刺性反弹的结果\" class=\"headerlink\" title=\"讽刺性反弹的结果\"></a>讽刺性反弹的结果</h4><ul>\n<li>“我不要”的力量，有时候会产生相反的效果</li>\n<li>通过“抑制想法”来抵抗诱惑，可能会适得其反</li>\n<li>越压抑人的本能，越容易适得其反</li>\n</ul>\n<h4 id=\"对策-1\"><a href=\"#对策-1\" class=\"headerlink\" title=\"对策\"></a>对策</h4><ul>\n<li>了解认知偏见：认知偏见：想起xx的次数多，容易让人对xx的真实性产生误判。要知道自己不断想起的事情不一定是真的，不一定是对的</li>\n<li>放弃控制内心的感受，坦率的面对与接受，关注自己的想法与感受，去理解分析，判断真实性的对错</li>\n<li><code>直面自身的欲望，但不去行动</code>：对内接受自我，对外控制行为</li>\n<li>把“我不要”转为“我想要”效果更好。</li>\n</ul>\n<p><small>注：书中列出的观点，大多数都有实验数据支撑，都是很有趣的实验，建议亲自阅读</small></p>\n"},{"title":"一些前端常用工具库～","date":"2017-12-31T16:00:00.000Z","description":"分享一些用的顺手的前端效率工具～","toc":1,"_content":"#### http-server 本地快速静态资源服务器\n- npm 全局安装\n- 执行`hs`命令\n- 即可在terminal当前路径创建一个本地http静态资源服务器，方便调试\n\n#### nrm npm快速切换国内源\n- npm全局安装nrm\n- `nrm ls`命令列出当前可使用的国内npm源，eg. taobao\n- `nrm use xx`即可切换到某一源\n\n#### nvm 快速切换node版本\n- nvm官网安装\n- `nvm list`列出当前机器已经安装的node版本\n- `nvm install vxx`安装某一版本node\n- `nvm use`切换到某一版本node\n\n#### parcel 极简配置版**webpack**\n- npm全局安装parcel`npm i parcel-bundler -g`\n- `parcel setup/index.html`即可创建一个本地服务器,并构建打包当前html的依赖\n\n#### nodemon 热更新\n- npm全局安装`npm i nodemon -g`\n- `nodemon xx.js`","source":"_posts/tools.md","raw":"---\ntitle: 一些前端常用工具库～\ncategories:\n    - 10技术 | 前端工具与工程化 # 一级分类\ntags:\ndate: 2018-01-01\ndescription: 分享一些用的顺手的前端效率工具～\ntoc: 1\n---\n#### http-server 本地快速静态资源服务器\n- npm 全局安装\n- 执行`hs`命令\n- 即可在terminal当前路径创建一个本地http静态资源服务器，方便调试\n\n#### nrm npm快速切换国内源\n- npm全局安装nrm\n- `nrm ls`命令列出当前可使用的国内npm源，eg. taobao\n- `nrm use xx`即可切换到某一源\n\n#### nvm 快速切换node版本\n- nvm官网安装\n- `nvm list`列出当前机器已经安装的node版本\n- `nvm install vxx`安装某一版本node\n- `nvm use`切换到某一版本node\n\n#### parcel 极简配置版**webpack**\n- npm全局安装parcel`npm i parcel-bundler -g`\n- `parcel setup/index.html`即可创建一个本地服务器,并构建打包当前html的依赖\n\n#### nodemon 热更新\n- npm全局安装`npm i nodemon -g`\n- `nodemon xx.js`","slug":"tools","published":1,"updated":"2020-09-03T07:00:54.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88jb6004oc8y6ljec7xed","content":"<h4 id=\"http-server-本地快速静态资源服务器\"><a href=\"#http-server-本地快速静态资源服务器\" class=\"headerlink\" title=\"http-server 本地快速静态资源服务器\"></a>http-server 本地快速静态资源服务器</h4><ul>\n<li>npm 全局安装</li>\n<li>执行<code>hs</code>命令</li>\n<li>即可在terminal当前路径创建一个本地http静态资源服务器，方便调试</li>\n</ul>\n<h4 id=\"nrm-npm快速切换国内源\"><a href=\"#nrm-npm快速切换国内源\" class=\"headerlink\" title=\"nrm npm快速切换国内源\"></a>nrm npm快速切换国内源</h4><ul>\n<li>npm全局安装nrm</li>\n<li><code>nrm ls</code>命令列出当前可使用的国内npm源，eg. taobao</li>\n<li><code>nrm use xx</code>即可切换到某一源</li>\n</ul>\n<h4 id=\"nvm-快速切换node版本\"><a href=\"#nvm-快速切换node版本\" class=\"headerlink\" title=\"nvm 快速切换node版本\"></a>nvm 快速切换node版本</h4><ul>\n<li>nvm官网安装</li>\n<li><code>nvm list</code>列出当前机器已经安装的node版本</li>\n<li><code>nvm install vxx</code>安装某一版本node</li>\n<li><code>nvm use</code>切换到某一版本node</li>\n</ul>\n<h4 id=\"parcel-极简配置版webpack\"><a href=\"#parcel-极简配置版webpack\" class=\"headerlink\" title=\"parcel 极简配置版webpack\"></a>parcel 极简配置版<strong>webpack</strong></h4><ul>\n<li>npm全局安装parcel<code>npm i parcel-bundler -g</code></li>\n<li><code>parcel setup/index.html</code>即可创建一个本地服务器,并构建打包当前html的依赖</li>\n</ul>\n<h4 id=\"nodemon-热更新\"><a href=\"#nodemon-热更新\" class=\"headerlink\" title=\"nodemon 热更新\"></a>nodemon 热更新</h4><ul>\n<li>npm全局安装<code>npm i nodemon -g</code></li>\n<li><code>nodemon xx.js</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"http-server-本地快速静态资源服务器\"><a href=\"#http-server-本地快速静态资源服务器\" class=\"headerlink\" title=\"http-server 本地快速静态资源服务器\"></a>http-server 本地快速静态资源服务器</h4><ul>\n<li>npm 全局安装</li>\n<li>执行<code>hs</code>命令</li>\n<li>即可在terminal当前路径创建一个本地http静态资源服务器，方便调试</li>\n</ul>\n<h4 id=\"nrm-npm快速切换国内源\"><a href=\"#nrm-npm快速切换国内源\" class=\"headerlink\" title=\"nrm npm快速切换国内源\"></a>nrm npm快速切换国内源</h4><ul>\n<li>npm全局安装nrm</li>\n<li><code>nrm ls</code>命令列出当前可使用的国内npm源，eg. taobao</li>\n<li><code>nrm use xx</code>即可切换到某一源</li>\n</ul>\n<h4 id=\"nvm-快速切换node版本\"><a href=\"#nvm-快速切换node版本\" class=\"headerlink\" title=\"nvm 快速切换node版本\"></a>nvm 快速切换node版本</h4><ul>\n<li>nvm官网安装</li>\n<li><code>nvm list</code>列出当前机器已经安装的node版本</li>\n<li><code>nvm install vxx</code>安装某一版本node</li>\n<li><code>nvm use</code>切换到某一版本node</li>\n</ul>\n<h4 id=\"parcel-极简配置版webpack\"><a href=\"#parcel-极简配置版webpack\" class=\"headerlink\" title=\"parcel 极简配置版webpack\"></a>parcel 极简配置版<strong>webpack</strong></h4><ul>\n<li>npm全局安装parcel<code>npm i parcel-bundler -g</code></li>\n<li><code>parcel setup/index.html</code>即可创建一个本地服务器,并构建打包当前html的依赖</li>\n</ul>\n<h4 id=\"nodemon-热更新\"><a href=\"#nodemon-热更新\" class=\"headerlink\" title=\"nodemon 热更新\"></a>nodemon 热更新</h4><ul>\n<li>npm全局安装<code>npm i nodemon -g</code></li>\n<li><code>nodemon xx.js</code></li>\n</ul>\n"},{"title":"《别做正常的傻瓜》：让你的每一个行为都得到最优解","date":"2020-03-26T16:00:00.000Z","description":"豆瓣8.1的行为决策学入门书籍，通过心理学原理、一些实验数据，指出了常人的一些决策误区，以及如何达到决策理性，让你的每一个行为都得到最优解。","toc":1,"top":0,"_content":"\n![题图](/images/read/behavior.jpg)\n\n## 简介\n作者：奚恺元（Christopher K.Hsee）生长于中国上海，后旅美求学，1993年获耶鲁大学博士学位，现为芝加哥大学商学院终身教授（chair professor）。\n\n他是当代最有成就的行为决策学研究者之一，其研究涉及心理学、行为经济学，管理学、市场学以及幸福学等诸多领域。\n\n他的著作在许多国际期刊上发表，2002年诺贝尔经济学奖得主卡尼曼教授在他的获奖致辞中还特别提到了奚教授的研究贡献。\n\n在北美和中国，他被许多一流大学邀请做过演讲。并广受好评，奚教授有十多年的管理教学经验，他在芝加哥大学开设的管理决策课程备受欢迎。\n\n这本书是[豆瓣8.1](https://book.douban.com/subject/1874488/ \"豆瓣8.1\")的**行为决策学**入门书籍。\n\n通过心理学原理、一些实验数据，指出了常人会犯的一些决策错误，以及如何达到决策理性，让你的每一个行为都得到最优解。\n\n## TL; DR —— 先看总结\n这是我从3月28号开始，用了接近两个月时间看完的一本书。\n\n总体来说，这本书并没有很强的系统性，不需要建立知识体系，比较适合**碎片阅读**。\n\n书中十几章内容，分别介绍了不同的决策误区，误区产生背后的心理学原理，以及如何应对。\n\n书中介绍的一些理论，比如**人类心理账户及其对行为的影响**、**消费决策只应该考虑`成本=>价值`**、**边际递减效应**、**适应性偏见**、**第一印象相关的定位偏见**、**联合评估与单独评估的选择**...都能对实际生活中的决策起到实际性的、可行的理论指导。\n\n书中介绍的决策误区，都是**常人会有**的，因为从原理上来看，是人类的**本性使然**。\n\n但是如果能了解这些误区，知道自己可能犯的错误，就能及时的检视自己，从而做出更多理性的决策。\n\n所以总结来说，这本书还是值得一看的✨。\n\n## 1. 10元等于两个5元吗? —— **心理账户&决策一致性**\n- 心理账户对行为的影响\n在我们的日常生活中，经常需要做各种各样的决策，在做决策的时候，我们总是为求做到理性，以尽可能地使我们的收益最大化。如何成为一名理性的决策者呢？一名理性的决策者究竟需要具备怎样的基本素质呢？\n\n- 由于心理账户的存在，正常人常有一些误区：\n\n  1. 将等价的钱，根据来源/时间/用途不同，打上不同标记\n  2. 赌场盈利效应：赢来的钱更倾向于高风险投资\n  3. 把赢来的钱消费掉，把赚来的钱存起来\n  4. 大钱小花，小钱大花\n\n- 心理账户，导致了行为决策不具有一致性\n- 应该：让钱在不同心理账户之间流通\n- 应该：等价的钱，不因为来源/时间/用途不同而打上不同标记\n\n## 2. 你会买没用的东西吗? —— **消费决策的误区**\n- 消费决策中常见的误区\n我们购买一样东西，衡量是该物品给我们带来的效用和它的价格，然后看是不是值得购买，可是在我们做购买决策的时候，往往会受到交易效用偏见、比例偏见和适应偏见的影响，从而做出不理性的消费决策行为。\n- 做交易决策的无关参考值：\n  - 参考价-实际价格\n  - 优惠比例\n  - 历史促销价格\n- 做决策，不应受到**成本->价值**外的其他任何因素影响\n- 不因为成本过高而不买有价值的东西，也不因为成本低而买不需要的东西\n\n## 3. 坚持到底一定是胜利吗? —— **沉没成本**\n- **沉没成本**：已经无法收回的支出\n- 沉没成本误区\n人们在决定是否去做一件事的时候，不仅是看这件事对自己有没有好处，而且也看过去已经在这件事情上面有过投入，很多人去挽回已经发生却无法挽回的所谓的成本而做出很多不理性的行为。\n- 应该**及时止损**\n- 应该根据**将来会不会有好处**做决策\n- 不让沉没成本困住前进的步伐\n- **保本**是错误观念\n\n## 4. 你有自知之明吗？ —— **过于自信与自知**\n> 知人者智，知己者明\n\n- 绝大多数人，都有过于自信的问题，很多时候，人们并不如自己想象的那么优秀。\n- 做出好的决策，不光要有知识，还要有“知识的知识”，也就是自知：知道自己的知识有哪些局限，哪些是准确的，哪些的需要质疑的\n- **证实偏见**：为自己的观点找理由，只关注自己观点一致的证据，不关注不收集与自己决策相对立的证据\n- 过于自信的一个例子：**不上相**，潜台词就是“我本人长得很美丽，只是照片没有把这些体现出来”，但是事实上，照片是真实的，你本人就是和照片上一样丑\n\n过于自信的优点：\n- 使人积极开心\n- 产生“自我实现预言”效应，即产生良性的心理暗示，引导好的结果\n- 过于自信的人，不会太拘泥于细节，善于抓住问题的大方向\n\n过于自信的缺点：\n- 规划误区：过于自信，对问题或任务轻视，导致延期等规划不合理的问题\n- 对自己的金融知识与判断过于自信会导致在金融市场过于频繁交易（越频繁交易，损失越大\n- 打无准备之仗，松懈，持侥幸心理\n\n应该怎么做：\n- 避免证实偏见，为自己决策的对立面寻找证据，两相比较\n\n\n## 5. 你会习以为常吗？—— **适应性偏见**\n- **适应性**：人类对外界的刺激，会随着时间的推移而减弱。（是普遍存在的现象\n- **适应性偏见**：人类**低估**自己的适应性，从而高估某些事情在一段时间后对自己的影响。\n- **适应性偏见例子**：人类以为物质条件的提升，会给自己带来长久的快乐，但其实很快就会适应。\n\n**三类难以适应的东西**：\n- 极端的东西\n- 人际比较\n- 变化\n\n**如何对待适应性偏见**:\n- 了解自己对物质性东西的适应性\n- 不要对物质看得过重，有过高期望\n- 多关注精神和心灵层面的东西\n\n## 6. 存银行还是买股票? —— **风险决策**\n\n**数学期望值** = 选项的价值✖选项的概率\n\n**期望值理论**：做决策时，选期望值最大的选项\n\n- **风险中性**：期望值相同的情况，对风险大小无所谓\n- **风险规避**：期望值相同的情况，偏好于风险小收益小\n- **风险喜好**：期望值相同的情况，偏好与风险大收益大\n\n**效用**：指消费者从某商品中得到的满足感（主管衡量）\n\n**边际效用递减**：一种普遍规律，随消费的增多，消费者从每个单位产品的消费中得到的**效用**逐渐递减。（与上一章所讲的适应性有一定关联）\n\n**风险规避**与**边际效用递减**：边际效用递减是风险规避的理论依据\n\n**期望效用理论**：\n- 选择效用最大的选项\n- 计算方法：某选项的**效用** ✖ 概率\n- 效用的计算：由于边际递减规律，其计算可以选择求根函数，把选项的价值作为参数\n\n**前景理论**：最贴合现实中人类的选择\n- 在**得到**时，倾向于风险规避\n- 在**失去**时，倾向于风险喜好\n- 参照点的不同，会影响人类对于**得失**的判断\n- 通常遵循：损失规避（下一章会讲到）\n\n三种风险决策的理论依据：\n- 期望值理论（由于边际效用递减而不准确）\n- 期望效用理论（最为理性）\n- 前景理论（最贴近现实中人类的风险决策的理论）\n\n\n## 7. 损失100元和得到100元，哪个对你影响更大? —— **损失规避**\n**损失规避**：同样的东西，失去它所经历的痛苦程度，大于得到它所经历的高兴程度：|U(-x)|>>|U(x)|（得失不对称性）\n\n**投资决策的两个心理账户问题**：\n- 短时间内评价一个账户的盈亏（不要频繁查看投资账户）\n- 把股票账面上的损失，和股票下跌变现的损失，划分到不同的心理账户\n\n**赋予效应**：\n同样的东西，得到时觉得不值钱，拥有了再放弃时就会感到其重要性（eg.无条件退款的营销策略就是利用了这个效应）\n\n**安于现状**：\n由于赋予效应，人们把现在拥有的东西加上了很高的价值，不愿意做决策去改变现状\n\n**语义效应**：\n用不同语义描述同一件事时，就会做出不同的决策，把一件事描述成“得”或“失”，可以有效的改变人们的选择\n\n## 8. 损失100元和没有得到100元，那个让你更心痛? —— **未得收益**\n- 未得收益和直接损失，从理性的角度来看是一样的，未得收益应该得到重视\n- 盗版知识产品=>也是对知识产权所有者未得收益的损害\n\n## 9. 谈判中应该让对方先开价吗？ —— **定位调整偏见**\n- **定位效应**：你对某人某事的**第一印象**就是一种可以定位的 **“锚”(anchor)**，一旦定下来，后面接受的信息通常会受到这个锚的影响，这种影响很多情况下是不被察觉的。即使你会根据新的信息来调整自己的判断，但这种调整往往是不充分的，最后你的判断仍然很难逃出第一印象的圈子。\n- **定位调整**：大部分判断和决策都建立在不完整的信息基础上，通常我们会先找到一个相关联的信息，再根据这个信息去对决策进行调整。这个过程就是定位调整。通常由于受到定位效应的影响，定位调整是不充分的。\n- 怎么避免：首先意识到自己可能会受到**定位效应**的影响，再去判断我们的定位调整够不够充分。\n- **“先入为主”的营销策略**：商家将单品单价开的很高，再给出所谓的优惠。这个很高的价格就是一个锚，被定很高的位置，商家知道消费者会把这个价格往下调整，但是这个调整通常是不充分的，因此给了商家盈利的空间。\n- 谈判中利用定位效应：\n  1. 争取先开价\n  2. 开价越极端越好\n  3. 在开价之前先提醒对方所开的价是荒唐的，给对方谈价空间\n\n## 10. 你的孩子会长多高? —— **违背概率规律**\n- 集合规律：条件越多，交集越小\n- 先验概率：不因为眼前的信息而忽视客观分布\n- 赌徒谬论：好运和坏运不是交替发生的，是依照概率发生的\n- 中值回归规律：极端事物随时间发展都有往中值回归的趋势\n\n- **可获得性误区**：人们总是对易获得的、突出的信息印象深刻，所以认为其是普遍现象\n- **反向调整法**：做判断前，检视自身的可获得性误区，了解自己的局限性，扩展信息获取渠道，尝试做出调整\n\n## 11. 多一定比少号码？ —— 联合评估 & 单独评估\n- **联合评估**：有参照物，特征被发现、对比、评估，容易找到有价值的、真正值得对比的特征\n- **单独评估**：无参照物；易受到一些容易评价&不重要的因素影响；易受极端案例影响而忽视统计数据\n- 不要过度追求联合评：很多东西在我们的生活中的使用场景，都是单独评估\n- **奚式相亲原则**：\n  - 优势在联合评估时更突出\n  - 敌强我弱；敌强我强 => 单独评估\n  - 敌弱我弱；敌若弱我强 => 联合评估\n\n## 12. 抓住老鼠的一定是好猫吗？ —— 结果偏见\n- 通常情况，过程是难以衡量的，过程的信息不一定可靠，而结果是鲜明可靠的。我们应该尽量基于可靠的信息来做决策\n- 但结果并不是最好的评价因素，因为通常情况，过程是可控的，结果往往有很多不确定因素\n- 如何解决：给过程添加更多记录和监督机制\n\n## 13. 钱越多越幸福吗？ —— 财富与幸福\n> 财富的多少和幸福的程度并不成正比\n\n**不增加财富却可以增加幸福感的一些原则**：\n- 好事一起享受不如分开享受（依据边际递减效应\n- 坏事分开忍受不如一起忍受（依据边际递减效应\n- 大好事小坏事分开经历不如一起经历（负面效应会被正面效应所冲淡\n- 大坏事小好事一起经历不如分开经历（正面效应才不会被负面效应的痛苦所淹没\n- 好事晚说不如早说（等待好事的过程是多巴胺活跃的过程\n- 坏事早说不如晚说（等待坏事的过程是最消磨人意志的\n- 静止的好事不如变动的好事（依据人的适应性规律，并不能为相同的物质方面的东西快乐很久\n- 变动的坏事不如静止的坏事（原理同上\n\n\n\n\n--------------------------------\n完结撒花✨🎉🎈🎈","source":"_posts/behavior_decision.md","raw":"---\ntitle: 《别做正常的傻瓜》：让你的每一个行为都得到最优解\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2020-03-27\ndescription: 豆瓣8.1的行为决策学入门书籍，通过心理学原理、一些实验数据，指出了常人的一些决策误区，以及如何达到决策理性，让你的每一个行为都得到最优解。\ntoc: 1\ntop: 0\n---\n\n![题图](/images/read/behavior.jpg)\n\n## 简介\n作者：奚恺元（Christopher K.Hsee）生长于中国上海，后旅美求学，1993年获耶鲁大学博士学位，现为芝加哥大学商学院终身教授（chair professor）。\n\n他是当代最有成就的行为决策学研究者之一，其研究涉及心理学、行为经济学，管理学、市场学以及幸福学等诸多领域。\n\n他的著作在许多国际期刊上发表，2002年诺贝尔经济学奖得主卡尼曼教授在他的获奖致辞中还特别提到了奚教授的研究贡献。\n\n在北美和中国，他被许多一流大学邀请做过演讲。并广受好评，奚教授有十多年的管理教学经验，他在芝加哥大学开设的管理决策课程备受欢迎。\n\n这本书是[豆瓣8.1](https://book.douban.com/subject/1874488/ \"豆瓣8.1\")的**行为决策学**入门书籍。\n\n通过心理学原理、一些实验数据，指出了常人会犯的一些决策错误，以及如何达到决策理性，让你的每一个行为都得到最优解。\n\n## TL; DR —— 先看总结\n这是我从3月28号开始，用了接近两个月时间看完的一本书。\n\n总体来说，这本书并没有很强的系统性，不需要建立知识体系，比较适合**碎片阅读**。\n\n书中十几章内容，分别介绍了不同的决策误区，误区产生背后的心理学原理，以及如何应对。\n\n书中介绍的一些理论，比如**人类心理账户及其对行为的影响**、**消费决策只应该考虑`成本=>价值`**、**边际递减效应**、**适应性偏见**、**第一印象相关的定位偏见**、**联合评估与单独评估的选择**...都能对实际生活中的决策起到实际性的、可行的理论指导。\n\n书中介绍的决策误区，都是**常人会有**的，因为从原理上来看，是人类的**本性使然**。\n\n但是如果能了解这些误区，知道自己可能犯的错误，就能及时的检视自己，从而做出更多理性的决策。\n\n所以总结来说，这本书还是值得一看的✨。\n\n## 1. 10元等于两个5元吗? —— **心理账户&决策一致性**\n- 心理账户对行为的影响\n在我们的日常生活中，经常需要做各种各样的决策，在做决策的时候，我们总是为求做到理性，以尽可能地使我们的收益最大化。如何成为一名理性的决策者呢？一名理性的决策者究竟需要具备怎样的基本素质呢？\n\n- 由于心理账户的存在，正常人常有一些误区：\n\n  1. 将等价的钱，根据来源/时间/用途不同，打上不同标记\n  2. 赌场盈利效应：赢来的钱更倾向于高风险投资\n  3. 把赢来的钱消费掉，把赚来的钱存起来\n  4. 大钱小花，小钱大花\n\n- 心理账户，导致了行为决策不具有一致性\n- 应该：让钱在不同心理账户之间流通\n- 应该：等价的钱，不因为来源/时间/用途不同而打上不同标记\n\n## 2. 你会买没用的东西吗? —— **消费决策的误区**\n- 消费决策中常见的误区\n我们购买一样东西，衡量是该物品给我们带来的效用和它的价格，然后看是不是值得购买，可是在我们做购买决策的时候，往往会受到交易效用偏见、比例偏见和适应偏见的影响，从而做出不理性的消费决策行为。\n- 做交易决策的无关参考值：\n  - 参考价-实际价格\n  - 优惠比例\n  - 历史促销价格\n- 做决策，不应受到**成本->价值**外的其他任何因素影响\n- 不因为成本过高而不买有价值的东西，也不因为成本低而买不需要的东西\n\n## 3. 坚持到底一定是胜利吗? —— **沉没成本**\n- **沉没成本**：已经无法收回的支出\n- 沉没成本误区\n人们在决定是否去做一件事的时候，不仅是看这件事对自己有没有好处，而且也看过去已经在这件事情上面有过投入，很多人去挽回已经发生却无法挽回的所谓的成本而做出很多不理性的行为。\n- 应该**及时止损**\n- 应该根据**将来会不会有好处**做决策\n- 不让沉没成本困住前进的步伐\n- **保本**是错误观念\n\n## 4. 你有自知之明吗？ —— **过于自信与自知**\n> 知人者智，知己者明\n\n- 绝大多数人，都有过于自信的问题，很多时候，人们并不如自己想象的那么优秀。\n- 做出好的决策，不光要有知识，还要有“知识的知识”，也就是自知：知道自己的知识有哪些局限，哪些是准确的，哪些的需要质疑的\n- **证实偏见**：为自己的观点找理由，只关注自己观点一致的证据，不关注不收集与自己决策相对立的证据\n- 过于自信的一个例子：**不上相**，潜台词就是“我本人长得很美丽，只是照片没有把这些体现出来”，但是事实上，照片是真实的，你本人就是和照片上一样丑\n\n过于自信的优点：\n- 使人积极开心\n- 产生“自我实现预言”效应，即产生良性的心理暗示，引导好的结果\n- 过于自信的人，不会太拘泥于细节，善于抓住问题的大方向\n\n过于自信的缺点：\n- 规划误区：过于自信，对问题或任务轻视，导致延期等规划不合理的问题\n- 对自己的金融知识与判断过于自信会导致在金融市场过于频繁交易（越频繁交易，损失越大\n- 打无准备之仗，松懈，持侥幸心理\n\n应该怎么做：\n- 避免证实偏见，为自己决策的对立面寻找证据，两相比较\n\n\n## 5. 你会习以为常吗？—— **适应性偏见**\n- **适应性**：人类对外界的刺激，会随着时间的推移而减弱。（是普遍存在的现象\n- **适应性偏见**：人类**低估**自己的适应性，从而高估某些事情在一段时间后对自己的影响。\n- **适应性偏见例子**：人类以为物质条件的提升，会给自己带来长久的快乐，但其实很快就会适应。\n\n**三类难以适应的东西**：\n- 极端的东西\n- 人际比较\n- 变化\n\n**如何对待适应性偏见**:\n- 了解自己对物质性东西的适应性\n- 不要对物质看得过重，有过高期望\n- 多关注精神和心灵层面的东西\n\n## 6. 存银行还是买股票? —— **风险决策**\n\n**数学期望值** = 选项的价值✖选项的概率\n\n**期望值理论**：做决策时，选期望值最大的选项\n\n- **风险中性**：期望值相同的情况，对风险大小无所谓\n- **风险规避**：期望值相同的情况，偏好于风险小收益小\n- **风险喜好**：期望值相同的情况，偏好与风险大收益大\n\n**效用**：指消费者从某商品中得到的满足感（主管衡量）\n\n**边际效用递减**：一种普遍规律，随消费的增多，消费者从每个单位产品的消费中得到的**效用**逐渐递减。（与上一章所讲的适应性有一定关联）\n\n**风险规避**与**边际效用递减**：边际效用递减是风险规避的理论依据\n\n**期望效用理论**：\n- 选择效用最大的选项\n- 计算方法：某选项的**效用** ✖ 概率\n- 效用的计算：由于边际递减规律，其计算可以选择求根函数，把选项的价值作为参数\n\n**前景理论**：最贴合现实中人类的选择\n- 在**得到**时，倾向于风险规避\n- 在**失去**时，倾向于风险喜好\n- 参照点的不同，会影响人类对于**得失**的判断\n- 通常遵循：损失规避（下一章会讲到）\n\n三种风险决策的理论依据：\n- 期望值理论（由于边际效用递减而不准确）\n- 期望效用理论（最为理性）\n- 前景理论（最贴近现实中人类的风险决策的理论）\n\n\n## 7. 损失100元和得到100元，哪个对你影响更大? —— **损失规避**\n**损失规避**：同样的东西，失去它所经历的痛苦程度，大于得到它所经历的高兴程度：|U(-x)|>>|U(x)|（得失不对称性）\n\n**投资决策的两个心理账户问题**：\n- 短时间内评价一个账户的盈亏（不要频繁查看投资账户）\n- 把股票账面上的损失，和股票下跌变现的损失，划分到不同的心理账户\n\n**赋予效应**：\n同样的东西，得到时觉得不值钱，拥有了再放弃时就会感到其重要性（eg.无条件退款的营销策略就是利用了这个效应）\n\n**安于现状**：\n由于赋予效应，人们把现在拥有的东西加上了很高的价值，不愿意做决策去改变现状\n\n**语义效应**：\n用不同语义描述同一件事时，就会做出不同的决策，把一件事描述成“得”或“失”，可以有效的改变人们的选择\n\n## 8. 损失100元和没有得到100元，那个让你更心痛? —— **未得收益**\n- 未得收益和直接损失，从理性的角度来看是一样的，未得收益应该得到重视\n- 盗版知识产品=>也是对知识产权所有者未得收益的损害\n\n## 9. 谈判中应该让对方先开价吗？ —— **定位调整偏见**\n- **定位效应**：你对某人某事的**第一印象**就是一种可以定位的 **“锚”(anchor)**，一旦定下来，后面接受的信息通常会受到这个锚的影响，这种影响很多情况下是不被察觉的。即使你会根据新的信息来调整自己的判断，但这种调整往往是不充分的，最后你的判断仍然很难逃出第一印象的圈子。\n- **定位调整**：大部分判断和决策都建立在不完整的信息基础上，通常我们会先找到一个相关联的信息，再根据这个信息去对决策进行调整。这个过程就是定位调整。通常由于受到定位效应的影响，定位调整是不充分的。\n- 怎么避免：首先意识到自己可能会受到**定位效应**的影响，再去判断我们的定位调整够不够充分。\n- **“先入为主”的营销策略**：商家将单品单价开的很高，再给出所谓的优惠。这个很高的价格就是一个锚，被定很高的位置，商家知道消费者会把这个价格往下调整，但是这个调整通常是不充分的，因此给了商家盈利的空间。\n- 谈判中利用定位效应：\n  1. 争取先开价\n  2. 开价越极端越好\n  3. 在开价之前先提醒对方所开的价是荒唐的，给对方谈价空间\n\n## 10. 你的孩子会长多高? —— **违背概率规律**\n- 集合规律：条件越多，交集越小\n- 先验概率：不因为眼前的信息而忽视客观分布\n- 赌徒谬论：好运和坏运不是交替发生的，是依照概率发生的\n- 中值回归规律：极端事物随时间发展都有往中值回归的趋势\n\n- **可获得性误区**：人们总是对易获得的、突出的信息印象深刻，所以认为其是普遍现象\n- **反向调整法**：做判断前，检视自身的可获得性误区，了解自己的局限性，扩展信息获取渠道，尝试做出调整\n\n## 11. 多一定比少号码？ —— 联合评估 & 单独评估\n- **联合评估**：有参照物，特征被发现、对比、评估，容易找到有价值的、真正值得对比的特征\n- **单独评估**：无参照物；易受到一些容易评价&不重要的因素影响；易受极端案例影响而忽视统计数据\n- 不要过度追求联合评：很多东西在我们的生活中的使用场景，都是单独评估\n- **奚式相亲原则**：\n  - 优势在联合评估时更突出\n  - 敌强我弱；敌强我强 => 单独评估\n  - 敌弱我弱；敌若弱我强 => 联合评估\n\n## 12. 抓住老鼠的一定是好猫吗？ —— 结果偏见\n- 通常情况，过程是难以衡量的，过程的信息不一定可靠，而结果是鲜明可靠的。我们应该尽量基于可靠的信息来做决策\n- 但结果并不是最好的评价因素，因为通常情况，过程是可控的，结果往往有很多不确定因素\n- 如何解决：给过程添加更多记录和监督机制\n\n## 13. 钱越多越幸福吗？ —— 财富与幸福\n> 财富的多少和幸福的程度并不成正比\n\n**不增加财富却可以增加幸福感的一些原则**：\n- 好事一起享受不如分开享受（依据边际递减效应\n- 坏事分开忍受不如一起忍受（依据边际递减效应\n- 大好事小坏事分开经历不如一起经历（负面效应会被正面效应所冲淡\n- 大坏事小好事一起经历不如分开经历（正面效应才不会被负面效应的痛苦所淹没\n- 好事晚说不如早说（等待好事的过程是多巴胺活跃的过程\n- 坏事早说不如晚说（等待坏事的过程是最消磨人意志的\n- 静止的好事不如变动的好事（依据人的适应性规律，并不能为相同的物质方面的东西快乐很久\n- 变动的坏事不如静止的坏事（原理同上\n\n\n\n\n--------------------------------\n完结撒花✨🎉🎈🎈","slug":"behavior_decision","published":1,"updated":"2021-04-21T06:53:37.262Z","_id":"ckir88jbf004sc8y6tvenejju","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/read/behavior.jpg\" alt=\"题图\"></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>作者：奚恺元（Christopher K.Hsee）生长于中国上海，后旅美求学，1993年获耶鲁大学博士学位，现为芝加哥大学商学院终身教授（chair professor）。</p>\n<p>他是当代最有成就的行为决策学研究者之一，其研究涉及心理学、行为经济学，管理学、市场学以及幸福学等诸多领域。</p>\n<p>他的著作在许多国际期刊上发表，2002年诺贝尔经济学奖得主卡尼曼教授在他的获奖致辞中还特别提到了奚教授的研究贡献。</p>\n<p>在北美和中国，他被许多一流大学邀请做过演讲。并广受好评，奚教授有十多年的管理教学经验，他在芝加哥大学开设的管理决策课程备受欢迎。</p>\n<p>这本书是<a href=\"https://book.douban.com/subject/1874488/\" title=\"豆瓣8.1\" target=\"_blank\" rel=\"noopener\">豆瓣8.1</a>的<strong>行为决策学</strong>入门书籍。</p>\n<p>通过心理学原理、一些实验数据，指出了常人会犯的一些决策错误，以及如何达到决策理性，让你的每一个行为都得到最优解。</p>\n<h2 id=\"TL-DR-——-先看总结\"><a href=\"#TL-DR-——-先看总结\" class=\"headerlink\" title=\"TL; DR —— 先看总结\"></a>TL; DR —— 先看总结</h2><p>这是我从3月28号开始，用了接近两个月时间看完的一本书。</p>\n<p>总体来说，这本书并没有很强的系统性，不需要建立知识体系，比较适合<strong>碎片阅读</strong>。</p>\n<p>书中十几章内容，分别介绍了不同的决策误区，误区产生背后的心理学原理，以及如何应对。</p>\n<p>书中介绍的一些理论，比如<strong>人类心理账户及其对行为的影响</strong>、<strong>消费决策只应该考虑<code>成本=&gt;价值</code></strong>、<strong>边际递减效应</strong>、<strong>适应性偏见</strong>、<strong>第一印象相关的定位偏见</strong>、<strong>联合评估与单独评估的选择</strong>…都能对实际生活中的决策起到实际性的、可行的理论指导。</p>\n<p>书中介绍的决策误区，都是<strong>常人会有</strong>的，因为从原理上来看，是人类的<strong>本性使然</strong>。</p>\n<p>但是如果能了解这些误区，知道自己可能犯的错误，就能及时的检视自己，从而做出更多理性的决策。</p>\n<p>所以总结来说，这本书还是值得一看的✨。</p>\n<h2 id=\"1-10元等于两个5元吗-——-心理账户-amp-决策一致性\"><a href=\"#1-10元等于两个5元吗-——-心理账户-amp-决策一致性\" class=\"headerlink\" title=\"1. 10元等于两个5元吗? —— 心理账户&amp;决策一致性\"></a>1. 10元等于两个5元吗? —— <strong>心理账户&amp;决策一致性</strong></h2><ul>\n<li><p>心理账户对行为的影响<br>在我们的日常生活中，经常需要做各种各样的决策，在做决策的时候，我们总是为求做到理性，以尽可能地使我们的收益最大化。如何成为一名理性的决策者呢？一名理性的决策者究竟需要具备怎样的基本素质呢？</p>\n</li>\n<li><p>由于心理账户的存在，正常人常有一些误区：</p>\n<ol>\n<li>将等价的钱，根据来源/时间/用途不同，打上不同标记</li>\n<li>赌场盈利效应：赢来的钱更倾向于高风险投资</li>\n<li>把赢来的钱消费掉，把赚来的钱存起来</li>\n<li>大钱小花，小钱大花</li>\n</ol>\n</li>\n<li><p>心理账户，导致了行为决策不具有一致性</p>\n</li>\n<li>应该：让钱在不同心理账户之间流通</li>\n<li>应该：等价的钱，不因为来源/时间/用途不同而打上不同标记</li>\n</ul>\n<h2 id=\"2-你会买没用的东西吗-——-消费决策的误区\"><a href=\"#2-你会买没用的东西吗-——-消费决策的误区\" class=\"headerlink\" title=\"2. 你会买没用的东西吗? —— 消费决策的误区\"></a>2. 你会买没用的东西吗? —— <strong>消费决策的误区</strong></h2><ul>\n<li>消费决策中常见的误区<br>我们购买一样东西，衡量是该物品给我们带来的效用和它的价格，然后看是不是值得购买，可是在我们做购买决策的时候，往往会受到交易效用偏见、比例偏见和适应偏见的影响，从而做出不理性的消费决策行为。</li>\n<li>做交易决策的无关参考值：<ul>\n<li>参考价-实际价格</li>\n<li>优惠比例</li>\n<li>历史促销价格</li>\n</ul>\n</li>\n<li>做决策，不应受到<strong>成本-&gt;价值</strong>外的其他任何因素影响</li>\n<li>不因为成本过高而不买有价值的东西，也不因为成本低而买不需要的东西</li>\n</ul>\n<h2 id=\"3-坚持到底一定是胜利吗-——-沉没成本\"><a href=\"#3-坚持到底一定是胜利吗-——-沉没成本\" class=\"headerlink\" title=\"3. 坚持到底一定是胜利吗? —— 沉没成本\"></a>3. 坚持到底一定是胜利吗? —— <strong>沉没成本</strong></h2><ul>\n<li><strong>沉没成本</strong>：已经无法收回的支出</li>\n<li>沉没成本误区<br>人们在决定是否去做一件事的时候，不仅是看这件事对自己有没有好处，而且也看过去已经在这件事情上面有过投入，很多人去挽回已经发生却无法挽回的所谓的成本而做出很多不理性的行为。</li>\n<li>应该<strong>及时止损</strong></li>\n<li>应该根据<strong>将来会不会有好处</strong>做决策</li>\n<li>不让沉没成本困住前进的步伐</li>\n<li><strong>保本</strong>是错误观念</li>\n</ul>\n<h2 id=\"4-你有自知之明吗？-——-过于自信与自知\"><a href=\"#4-你有自知之明吗？-——-过于自信与自知\" class=\"headerlink\" title=\"4. 你有自知之明吗？ —— 过于自信与自知\"></a>4. 你有自知之明吗？ —— <strong>过于自信与自知</strong></h2><blockquote>\n<p>知人者智，知己者明</p>\n</blockquote>\n<ul>\n<li>绝大多数人，都有过于自信的问题，很多时候，人们并不如自己想象的那么优秀。</li>\n<li>做出好的决策，不光要有知识，还要有“知识的知识”，也就是自知：知道自己的知识有哪些局限，哪些是准确的，哪些的需要质疑的</li>\n<li><strong>证实偏见</strong>：为自己的观点找理由，只关注自己观点一致的证据，不关注不收集与自己决策相对立的证据</li>\n<li>过于自信的一个例子：<strong>不上相</strong>，潜台词就是“我本人长得很美丽，只是照片没有把这些体现出来”，但是事实上，照片是真实的，你本人就是和照片上一样丑</li>\n</ul>\n<p>过于自信的优点：</p>\n<ul>\n<li>使人积极开心</li>\n<li>产生“自我实现预言”效应，即产生良性的心理暗示，引导好的结果</li>\n<li>过于自信的人，不会太拘泥于细节，善于抓住问题的大方向</li>\n</ul>\n<p>过于自信的缺点：</p>\n<ul>\n<li>规划误区：过于自信，对问题或任务轻视，导致延期等规划不合理的问题</li>\n<li>对自己的金融知识与判断过于自信会导致在金融市场过于频繁交易（越频繁交易，损失越大</li>\n<li>打无准备之仗，松懈，持侥幸心理</li>\n</ul>\n<p>应该怎么做：</p>\n<ul>\n<li>避免证实偏见，为自己决策的对立面寻找证据，两相比较</li>\n</ul>\n<h2 id=\"5-你会习以为常吗？——-适应性偏见\"><a href=\"#5-你会习以为常吗？——-适应性偏见\" class=\"headerlink\" title=\"5. 你会习以为常吗？—— 适应性偏见\"></a>5. 你会习以为常吗？—— <strong>适应性偏见</strong></h2><ul>\n<li><strong>适应性</strong>：人类对外界的刺激，会随着时间的推移而减弱。（是普遍存在的现象</li>\n<li><strong>适应性偏见</strong>：人类<strong>低估</strong>自己的适应性，从而高估某些事情在一段时间后对自己的影响。</li>\n<li><strong>适应性偏见例子</strong>：人类以为物质条件的提升，会给自己带来长久的快乐，但其实很快就会适应。</li>\n</ul>\n<p><strong>三类难以适应的东西</strong>：</p>\n<ul>\n<li>极端的东西</li>\n<li>人际比较</li>\n<li>变化</li>\n</ul>\n<p><strong>如何对待适应性偏见</strong>:</p>\n<ul>\n<li>了解自己对物质性东西的适应性</li>\n<li>不要对物质看得过重，有过高期望</li>\n<li>多关注精神和心灵层面的东西</li>\n</ul>\n<h2 id=\"6-存银行还是买股票-——-风险决策\"><a href=\"#6-存银行还是买股票-——-风险决策\" class=\"headerlink\" title=\"6. 存银行还是买股票? —— 风险决策\"></a>6. 存银行还是买股票? —— <strong>风险决策</strong></h2><p><strong>数学期望值</strong> = 选项的价值✖选项的概率</p>\n<p><strong>期望值理论</strong>：做决策时，选期望值最大的选项</p>\n<ul>\n<li><strong>风险中性</strong>：期望值相同的情况，对风险大小无所谓</li>\n<li><strong>风险规避</strong>：期望值相同的情况，偏好于风险小收益小</li>\n<li><strong>风险喜好</strong>：期望值相同的情况，偏好与风险大收益大</li>\n</ul>\n<p><strong>效用</strong>：指消费者从某商品中得到的满足感（主管衡量）</p>\n<p><strong>边际效用递减</strong>：一种普遍规律，随消费的增多，消费者从每个单位产品的消费中得到的<strong>效用</strong>逐渐递减。（与上一章所讲的适应性有一定关联）</p>\n<p><strong>风险规避</strong>与<strong>边际效用递减</strong>：边际效用递减是风险规避的理论依据</p>\n<p><strong>期望效用理论</strong>：</p>\n<ul>\n<li>选择效用最大的选项</li>\n<li>计算方法：某选项的<strong>效用</strong> ✖ 概率</li>\n<li>效用的计算：由于边际递减规律，其计算可以选择求根函数，把选项的价值作为参数</li>\n</ul>\n<p><strong>前景理论</strong>：最贴合现实中人类的选择</p>\n<ul>\n<li>在<strong>得到</strong>时，倾向于风险规避</li>\n<li>在<strong>失去</strong>时，倾向于风险喜好</li>\n<li>参照点的不同，会影响人类对于<strong>得失</strong>的判断</li>\n<li>通常遵循：损失规避（下一章会讲到）</li>\n</ul>\n<p>三种风险决策的理论依据：</p>\n<ul>\n<li>期望值理论（由于边际效用递减而不准确）</li>\n<li>期望效用理论（最为理性）</li>\n<li>前景理论（最贴近现实中人类的风险决策的理论）</li>\n</ul>\n<h2 id=\"7-损失100元和得到100元，哪个对你影响更大-——-损失规避\"><a href=\"#7-损失100元和得到100元，哪个对你影响更大-——-损失规避\" class=\"headerlink\" title=\"7. 损失100元和得到100元，哪个对你影响更大? —— 损失规避\"></a>7. 损失100元和得到100元，哪个对你影响更大? —— <strong>损失规避</strong></h2><p><strong>损失规避</strong>：同样的东西，失去它所经历的痛苦程度，大于得到它所经历的高兴程度：|U(-x)|&gt;&gt;|U(x)|（得失不对称性）</p>\n<p><strong>投资决策的两个心理账户问题</strong>：</p>\n<ul>\n<li>短时间内评价一个账户的盈亏（不要频繁查看投资账户）</li>\n<li>把股票账面上的损失，和股票下跌变现的损失，划分到不同的心理账户</li>\n</ul>\n<p><strong>赋予效应</strong>：<br>同样的东西，得到时觉得不值钱，拥有了再放弃时就会感到其重要性（eg.无条件退款的营销策略就是利用了这个效应）</p>\n<p><strong>安于现状</strong>：<br>由于赋予效应，人们把现在拥有的东西加上了很高的价值，不愿意做决策去改变现状</p>\n<p><strong>语义效应</strong>：<br>用不同语义描述同一件事时，就会做出不同的决策，把一件事描述成“得”或“失”，可以有效的改变人们的选择</p>\n<h2 id=\"8-损失100元和没有得到100元，那个让你更心痛-——-未得收益\"><a href=\"#8-损失100元和没有得到100元，那个让你更心痛-——-未得收益\" class=\"headerlink\" title=\"8. 损失100元和没有得到100元，那个让你更心痛? —— 未得收益\"></a>8. 损失100元和没有得到100元，那个让你更心痛? —— <strong>未得收益</strong></h2><ul>\n<li>未得收益和直接损失，从理性的角度来看是一样的，未得收益应该得到重视</li>\n<li>盗版知识产品=&gt;也是对知识产权所有者未得收益的损害</li>\n</ul>\n<h2 id=\"9-谈判中应该让对方先开价吗？-——-定位调整偏见\"><a href=\"#9-谈判中应该让对方先开价吗？-——-定位调整偏见\" class=\"headerlink\" title=\"9. 谈判中应该让对方先开价吗？ —— 定位调整偏见\"></a>9. 谈判中应该让对方先开价吗？ —— <strong>定位调整偏见</strong></h2><ul>\n<li><strong>定位效应</strong>：你对某人某事的<strong>第一印象</strong>就是一种可以定位的 <strong>“锚”(anchor)</strong>，一旦定下来，后面接受的信息通常会受到这个锚的影响，这种影响很多情况下是不被察觉的。即使你会根据新的信息来调整自己的判断，但这种调整往往是不充分的，最后你的判断仍然很难逃出第一印象的圈子。</li>\n<li><strong>定位调整</strong>：大部分判断和决策都建立在不完整的信息基础上，通常我们会先找到一个相关联的信息，再根据这个信息去对决策进行调整。这个过程就是定位调整。通常由于受到定位效应的影响，定位调整是不充分的。</li>\n<li>怎么避免：首先意识到自己可能会受到<strong>定位效应</strong>的影响，再去判断我们的定位调整够不够充分。</li>\n<li><strong>“先入为主”的营销策略</strong>：商家将单品单价开的很高，再给出所谓的优惠。这个很高的价格就是一个锚，被定很高的位置，商家知道消费者会把这个价格往下调整，但是这个调整通常是不充分的，因此给了商家盈利的空间。</li>\n<li>谈判中利用定位效应：<ol>\n<li>争取先开价</li>\n<li>开价越极端越好</li>\n<li>在开价之前先提醒对方所开的价是荒唐的，给对方谈价空间</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"10-你的孩子会长多高-——-违背概率规律\"><a href=\"#10-你的孩子会长多高-——-违背概率规律\" class=\"headerlink\" title=\"10. 你的孩子会长多高? —— 违背概率规律\"></a>10. 你的孩子会长多高? —— <strong>违背概率规律</strong></h2><ul>\n<li>集合规律：条件越多，交集越小</li>\n<li>先验概率：不因为眼前的信息而忽视客观分布</li>\n<li>赌徒谬论：好运和坏运不是交替发生的，是依照概率发生的</li>\n<li><p>中值回归规律：极端事物随时间发展都有往中值回归的趋势</p>\n</li>\n<li><p><strong>可获得性误区</strong>：人们总是对易获得的、突出的信息印象深刻，所以认为其是普遍现象</p>\n</li>\n<li><strong>反向调整法</strong>：做判断前，检视自身的可获得性误区，了解自己的局限性，扩展信息获取渠道，尝试做出调整</li>\n</ul>\n<h2 id=\"11-多一定比少号码？-——-联合评估-amp-单独评估\"><a href=\"#11-多一定比少号码？-——-联合评估-amp-单独评估\" class=\"headerlink\" title=\"11. 多一定比少号码？ —— 联合评估 &amp; 单独评估\"></a>11. 多一定比少号码？ —— 联合评估 &amp; 单独评估</h2><ul>\n<li><strong>联合评估</strong>：有参照物，特征被发现、对比、评估，容易找到有价值的、真正值得对比的特征</li>\n<li><strong>单独评估</strong>：无参照物；易受到一些容易评价&amp;不重要的因素影响；易受极端案例影响而忽视统计数据</li>\n<li>不要过度追求联合评：很多东西在我们的生活中的使用场景，都是单独评估</li>\n<li><strong>奚式相亲原则</strong>：<ul>\n<li>优势在联合评估时更突出</li>\n<li>敌强我弱；敌强我强 =&gt; 单独评估</li>\n<li>敌弱我弱；敌若弱我强 =&gt; 联合评估</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"12-抓住老鼠的一定是好猫吗？-——-结果偏见\"><a href=\"#12-抓住老鼠的一定是好猫吗？-——-结果偏见\" class=\"headerlink\" title=\"12. 抓住老鼠的一定是好猫吗？ —— 结果偏见\"></a>12. 抓住老鼠的一定是好猫吗？ —— 结果偏见</h2><ul>\n<li>通常情况，过程是难以衡量的，过程的信息不一定可靠，而结果是鲜明可靠的。我们应该尽量基于可靠的信息来做决策</li>\n<li>但结果并不是最好的评价因素，因为通常情况，过程是可控的，结果往往有很多不确定因素</li>\n<li>如何解决：给过程添加更多记录和监督机制</li>\n</ul>\n<h2 id=\"13-钱越多越幸福吗？-——-财富与幸福\"><a href=\"#13-钱越多越幸福吗？-——-财富与幸福\" class=\"headerlink\" title=\"13. 钱越多越幸福吗？ —— 财富与幸福\"></a>13. 钱越多越幸福吗？ —— 财富与幸福</h2><blockquote>\n<p>财富的多少和幸福的程度并不成正比</p>\n</blockquote>\n<p><strong>不增加财富却可以增加幸福感的一些原则</strong>：</p>\n<ul>\n<li>好事一起享受不如分开享受（依据边际递减效应</li>\n<li>坏事分开忍受不如一起忍受（依据边际递减效应</li>\n<li>大好事小坏事分开经历不如一起经历（负面效应会被正面效应所冲淡</li>\n<li>大坏事小好事一起经历不如分开经历（正面效应才不会被负面效应的痛苦所淹没</li>\n<li>好事晚说不如早说（等待好事的过程是多巴胺活跃的过程</li>\n<li>坏事早说不如晚说（等待坏事的过程是最消磨人意志的</li>\n<li>静止的好事不如变动的好事（依据人的适应性规律，并不能为相同的物质方面的东西快乐很久</li>\n<li>变动的坏事不如静止的坏事（原理同上</li>\n</ul>\n<hr>\n<p>完结撒花✨🎉🎈🎈</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/read/behavior.jpg\" alt=\"题图\"></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>作者：奚恺元（Christopher K.Hsee）生长于中国上海，后旅美求学，1993年获耶鲁大学博士学位，现为芝加哥大学商学院终身教授（chair professor）。</p>\n<p>他是当代最有成就的行为决策学研究者之一，其研究涉及心理学、行为经济学，管理学、市场学以及幸福学等诸多领域。</p>\n<p>他的著作在许多国际期刊上发表，2002年诺贝尔经济学奖得主卡尼曼教授在他的获奖致辞中还特别提到了奚教授的研究贡献。</p>\n<p>在北美和中国，他被许多一流大学邀请做过演讲。并广受好评，奚教授有十多年的管理教学经验，他在芝加哥大学开设的管理决策课程备受欢迎。</p>\n<p>这本书是<a href=\"https://book.douban.com/subject/1874488/\" title=\"豆瓣8.1\" target=\"_blank\" rel=\"noopener\">豆瓣8.1</a>的<strong>行为决策学</strong>入门书籍。</p>\n<p>通过心理学原理、一些实验数据，指出了常人会犯的一些决策错误，以及如何达到决策理性，让你的每一个行为都得到最优解。</p>\n<h2 id=\"TL-DR-——-先看总结\"><a href=\"#TL-DR-——-先看总结\" class=\"headerlink\" title=\"TL; DR —— 先看总结\"></a>TL; DR —— 先看总结</h2><p>这是我从3月28号开始，用了接近两个月时间看完的一本书。</p>\n<p>总体来说，这本书并没有很强的系统性，不需要建立知识体系，比较适合<strong>碎片阅读</strong>。</p>\n<p>书中十几章内容，分别介绍了不同的决策误区，误区产生背后的心理学原理，以及如何应对。</p>\n<p>书中介绍的一些理论，比如<strong>人类心理账户及其对行为的影响</strong>、<strong>消费决策只应该考虑<code>成本=&gt;价值</code></strong>、<strong>边际递减效应</strong>、<strong>适应性偏见</strong>、<strong>第一印象相关的定位偏见</strong>、<strong>联合评估与单独评估的选择</strong>…都能对实际生活中的决策起到实际性的、可行的理论指导。</p>\n<p>书中介绍的决策误区，都是<strong>常人会有</strong>的，因为从原理上来看，是人类的<strong>本性使然</strong>。</p>\n<p>但是如果能了解这些误区，知道自己可能犯的错误，就能及时的检视自己，从而做出更多理性的决策。</p>\n<p>所以总结来说，这本书还是值得一看的✨。</p>\n<h2 id=\"1-10元等于两个5元吗-——-心理账户-amp-决策一致性\"><a href=\"#1-10元等于两个5元吗-——-心理账户-amp-决策一致性\" class=\"headerlink\" title=\"1. 10元等于两个5元吗? —— 心理账户&amp;决策一致性\"></a>1. 10元等于两个5元吗? —— <strong>心理账户&amp;决策一致性</strong></h2><ul>\n<li><p>心理账户对行为的影响<br>在我们的日常生活中，经常需要做各种各样的决策，在做决策的时候，我们总是为求做到理性，以尽可能地使我们的收益最大化。如何成为一名理性的决策者呢？一名理性的决策者究竟需要具备怎样的基本素质呢？</p>\n</li>\n<li><p>由于心理账户的存在，正常人常有一些误区：</p>\n<ol>\n<li>将等价的钱，根据来源/时间/用途不同，打上不同标记</li>\n<li>赌场盈利效应：赢来的钱更倾向于高风险投资</li>\n<li>把赢来的钱消费掉，把赚来的钱存起来</li>\n<li>大钱小花，小钱大花</li>\n</ol>\n</li>\n<li><p>心理账户，导致了行为决策不具有一致性</p>\n</li>\n<li>应该：让钱在不同心理账户之间流通</li>\n<li>应该：等价的钱，不因为来源/时间/用途不同而打上不同标记</li>\n</ul>\n<h2 id=\"2-你会买没用的东西吗-——-消费决策的误区\"><a href=\"#2-你会买没用的东西吗-——-消费决策的误区\" class=\"headerlink\" title=\"2. 你会买没用的东西吗? —— 消费决策的误区\"></a>2. 你会买没用的东西吗? —— <strong>消费决策的误区</strong></h2><ul>\n<li>消费决策中常见的误区<br>我们购买一样东西，衡量是该物品给我们带来的效用和它的价格，然后看是不是值得购买，可是在我们做购买决策的时候，往往会受到交易效用偏见、比例偏见和适应偏见的影响，从而做出不理性的消费决策行为。</li>\n<li>做交易决策的无关参考值：<ul>\n<li>参考价-实际价格</li>\n<li>优惠比例</li>\n<li>历史促销价格</li>\n</ul>\n</li>\n<li>做决策，不应受到<strong>成本-&gt;价值</strong>外的其他任何因素影响</li>\n<li>不因为成本过高而不买有价值的东西，也不因为成本低而买不需要的东西</li>\n</ul>\n<h2 id=\"3-坚持到底一定是胜利吗-——-沉没成本\"><a href=\"#3-坚持到底一定是胜利吗-——-沉没成本\" class=\"headerlink\" title=\"3. 坚持到底一定是胜利吗? —— 沉没成本\"></a>3. 坚持到底一定是胜利吗? —— <strong>沉没成本</strong></h2><ul>\n<li><strong>沉没成本</strong>：已经无法收回的支出</li>\n<li>沉没成本误区<br>人们在决定是否去做一件事的时候，不仅是看这件事对自己有没有好处，而且也看过去已经在这件事情上面有过投入，很多人去挽回已经发生却无法挽回的所谓的成本而做出很多不理性的行为。</li>\n<li>应该<strong>及时止损</strong></li>\n<li>应该根据<strong>将来会不会有好处</strong>做决策</li>\n<li>不让沉没成本困住前进的步伐</li>\n<li><strong>保本</strong>是错误观念</li>\n</ul>\n<h2 id=\"4-你有自知之明吗？-——-过于自信与自知\"><a href=\"#4-你有自知之明吗？-——-过于自信与自知\" class=\"headerlink\" title=\"4. 你有自知之明吗？ —— 过于自信与自知\"></a>4. 你有自知之明吗？ —— <strong>过于自信与自知</strong></h2><blockquote>\n<p>知人者智，知己者明</p>\n</blockquote>\n<ul>\n<li>绝大多数人，都有过于自信的问题，很多时候，人们并不如自己想象的那么优秀。</li>\n<li>做出好的决策，不光要有知识，还要有“知识的知识”，也就是自知：知道自己的知识有哪些局限，哪些是准确的，哪些的需要质疑的</li>\n<li><strong>证实偏见</strong>：为自己的观点找理由，只关注自己观点一致的证据，不关注不收集与自己决策相对立的证据</li>\n<li>过于自信的一个例子：<strong>不上相</strong>，潜台词就是“我本人长得很美丽，只是照片没有把这些体现出来”，但是事实上，照片是真实的，你本人就是和照片上一样丑</li>\n</ul>\n<p>过于自信的优点：</p>\n<ul>\n<li>使人积极开心</li>\n<li>产生“自我实现预言”效应，即产生良性的心理暗示，引导好的结果</li>\n<li>过于自信的人，不会太拘泥于细节，善于抓住问题的大方向</li>\n</ul>\n<p>过于自信的缺点：</p>\n<ul>\n<li>规划误区：过于自信，对问题或任务轻视，导致延期等规划不合理的问题</li>\n<li>对自己的金融知识与判断过于自信会导致在金融市场过于频繁交易（越频繁交易，损失越大</li>\n<li>打无准备之仗，松懈，持侥幸心理</li>\n</ul>\n<p>应该怎么做：</p>\n<ul>\n<li>避免证实偏见，为自己决策的对立面寻找证据，两相比较</li>\n</ul>\n<h2 id=\"5-你会习以为常吗？——-适应性偏见\"><a href=\"#5-你会习以为常吗？——-适应性偏见\" class=\"headerlink\" title=\"5. 你会习以为常吗？—— 适应性偏见\"></a>5. 你会习以为常吗？—— <strong>适应性偏见</strong></h2><ul>\n<li><strong>适应性</strong>：人类对外界的刺激，会随着时间的推移而减弱。（是普遍存在的现象</li>\n<li><strong>适应性偏见</strong>：人类<strong>低估</strong>自己的适应性，从而高估某些事情在一段时间后对自己的影响。</li>\n<li><strong>适应性偏见例子</strong>：人类以为物质条件的提升，会给自己带来长久的快乐，但其实很快就会适应。</li>\n</ul>\n<p><strong>三类难以适应的东西</strong>：</p>\n<ul>\n<li>极端的东西</li>\n<li>人际比较</li>\n<li>变化</li>\n</ul>\n<p><strong>如何对待适应性偏见</strong>:</p>\n<ul>\n<li>了解自己对物质性东西的适应性</li>\n<li>不要对物质看得过重，有过高期望</li>\n<li>多关注精神和心灵层面的东西</li>\n</ul>\n<h2 id=\"6-存银行还是买股票-——-风险决策\"><a href=\"#6-存银行还是买股票-——-风险决策\" class=\"headerlink\" title=\"6. 存银行还是买股票? —— 风险决策\"></a>6. 存银行还是买股票? —— <strong>风险决策</strong></h2><p><strong>数学期望值</strong> = 选项的价值✖选项的概率</p>\n<p><strong>期望值理论</strong>：做决策时，选期望值最大的选项</p>\n<ul>\n<li><strong>风险中性</strong>：期望值相同的情况，对风险大小无所谓</li>\n<li><strong>风险规避</strong>：期望值相同的情况，偏好于风险小收益小</li>\n<li><strong>风险喜好</strong>：期望值相同的情况，偏好与风险大收益大</li>\n</ul>\n<p><strong>效用</strong>：指消费者从某商品中得到的满足感（主管衡量）</p>\n<p><strong>边际效用递减</strong>：一种普遍规律，随消费的增多，消费者从每个单位产品的消费中得到的<strong>效用</strong>逐渐递减。（与上一章所讲的适应性有一定关联）</p>\n<p><strong>风险规避</strong>与<strong>边际效用递减</strong>：边际效用递减是风险规避的理论依据</p>\n<p><strong>期望效用理论</strong>：</p>\n<ul>\n<li>选择效用最大的选项</li>\n<li>计算方法：某选项的<strong>效用</strong> ✖ 概率</li>\n<li>效用的计算：由于边际递减规律，其计算可以选择求根函数，把选项的价值作为参数</li>\n</ul>\n<p><strong>前景理论</strong>：最贴合现实中人类的选择</p>\n<ul>\n<li>在<strong>得到</strong>时，倾向于风险规避</li>\n<li>在<strong>失去</strong>时，倾向于风险喜好</li>\n<li>参照点的不同，会影响人类对于<strong>得失</strong>的判断</li>\n<li>通常遵循：损失规避（下一章会讲到）</li>\n</ul>\n<p>三种风险决策的理论依据：</p>\n<ul>\n<li>期望值理论（由于边际效用递减而不准确）</li>\n<li>期望效用理论（最为理性）</li>\n<li>前景理论（最贴近现实中人类的风险决策的理论）</li>\n</ul>\n<h2 id=\"7-损失100元和得到100元，哪个对你影响更大-——-损失规避\"><a href=\"#7-损失100元和得到100元，哪个对你影响更大-——-损失规避\" class=\"headerlink\" title=\"7. 损失100元和得到100元，哪个对你影响更大? —— 损失规避\"></a>7. 损失100元和得到100元，哪个对你影响更大? —— <strong>损失规避</strong></h2><p><strong>损失规避</strong>：同样的东西，失去它所经历的痛苦程度，大于得到它所经历的高兴程度：|U(-x)|&gt;&gt;|U(x)|（得失不对称性）</p>\n<p><strong>投资决策的两个心理账户问题</strong>：</p>\n<ul>\n<li>短时间内评价一个账户的盈亏（不要频繁查看投资账户）</li>\n<li>把股票账面上的损失，和股票下跌变现的损失，划分到不同的心理账户</li>\n</ul>\n<p><strong>赋予效应</strong>：<br>同样的东西，得到时觉得不值钱，拥有了再放弃时就会感到其重要性（eg.无条件退款的营销策略就是利用了这个效应）</p>\n<p><strong>安于现状</strong>：<br>由于赋予效应，人们把现在拥有的东西加上了很高的价值，不愿意做决策去改变现状</p>\n<p><strong>语义效应</strong>：<br>用不同语义描述同一件事时，就会做出不同的决策，把一件事描述成“得”或“失”，可以有效的改变人们的选择</p>\n<h2 id=\"8-损失100元和没有得到100元，那个让你更心痛-——-未得收益\"><a href=\"#8-损失100元和没有得到100元，那个让你更心痛-——-未得收益\" class=\"headerlink\" title=\"8. 损失100元和没有得到100元，那个让你更心痛? —— 未得收益\"></a>8. 损失100元和没有得到100元，那个让你更心痛? —— <strong>未得收益</strong></h2><ul>\n<li>未得收益和直接损失，从理性的角度来看是一样的，未得收益应该得到重视</li>\n<li>盗版知识产品=&gt;也是对知识产权所有者未得收益的损害</li>\n</ul>\n<h2 id=\"9-谈判中应该让对方先开价吗？-——-定位调整偏见\"><a href=\"#9-谈判中应该让对方先开价吗？-——-定位调整偏见\" class=\"headerlink\" title=\"9. 谈判中应该让对方先开价吗？ —— 定位调整偏见\"></a>9. 谈判中应该让对方先开价吗？ —— <strong>定位调整偏见</strong></h2><ul>\n<li><strong>定位效应</strong>：你对某人某事的<strong>第一印象</strong>就是一种可以定位的 <strong>“锚”(anchor)</strong>，一旦定下来，后面接受的信息通常会受到这个锚的影响，这种影响很多情况下是不被察觉的。即使你会根据新的信息来调整自己的判断，但这种调整往往是不充分的，最后你的判断仍然很难逃出第一印象的圈子。</li>\n<li><strong>定位调整</strong>：大部分判断和决策都建立在不完整的信息基础上，通常我们会先找到一个相关联的信息，再根据这个信息去对决策进行调整。这个过程就是定位调整。通常由于受到定位效应的影响，定位调整是不充分的。</li>\n<li>怎么避免：首先意识到自己可能会受到<strong>定位效应</strong>的影响，再去判断我们的定位调整够不够充分。</li>\n<li><strong>“先入为主”的营销策略</strong>：商家将单品单价开的很高，再给出所谓的优惠。这个很高的价格就是一个锚，被定很高的位置，商家知道消费者会把这个价格往下调整，但是这个调整通常是不充分的，因此给了商家盈利的空间。</li>\n<li>谈判中利用定位效应：<ol>\n<li>争取先开价</li>\n<li>开价越极端越好</li>\n<li>在开价之前先提醒对方所开的价是荒唐的，给对方谈价空间</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"10-你的孩子会长多高-——-违背概率规律\"><a href=\"#10-你的孩子会长多高-——-违背概率规律\" class=\"headerlink\" title=\"10. 你的孩子会长多高? —— 违背概率规律\"></a>10. 你的孩子会长多高? —— <strong>违背概率规律</strong></h2><ul>\n<li>集合规律：条件越多，交集越小</li>\n<li>先验概率：不因为眼前的信息而忽视客观分布</li>\n<li>赌徒谬论：好运和坏运不是交替发生的，是依照概率发生的</li>\n<li><p>中值回归规律：极端事物随时间发展都有往中值回归的趋势</p>\n</li>\n<li><p><strong>可获得性误区</strong>：人们总是对易获得的、突出的信息印象深刻，所以认为其是普遍现象</p>\n</li>\n<li><strong>反向调整法</strong>：做判断前，检视自身的可获得性误区，了解自己的局限性，扩展信息获取渠道，尝试做出调整</li>\n</ul>\n<h2 id=\"11-多一定比少号码？-——-联合评估-amp-单独评估\"><a href=\"#11-多一定比少号码？-——-联合评估-amp-单独评估\" class=\"headerlink\" title=\"11. 多一定比少号码？ —— 联合评估 &amp; 单独评估\"></a>11. 多一定比少号码？ —— 联合评估 &amp; 单独评估</h2><ul>\n<li><strong>联合评估</strong>：有参照物，特征被发现、对比、评估，容易找到有价值的、真正值得对比的特征</li>\n<li><strong>单独评估</strong>：无参照物；易受到一些容易评价&amp;不重要的因素影响；易受极端案例影响而忽视统计数据</li>\n<li>不要过度追求联合评：很多东西在我们的生活中的使用场景，都是单独评估</li>\n<li><strong>奚式相亲原则</strong>：<ul>\n<li>优势在联合评估时更突出</li>\n<li>敌强我弱；敌强我强 =&gt; 单独评估</li>\n<li>敌弱我弱；敌若弱我强 =&gt; 联合评估</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"12-抓住老鼠的一定是好猫吗？-——-结果偏见\"><a href=\"#12-抓住老鼠的一定是好猫吗？-——-结果偏见\" class=\"headerlink\" title=\"12. 抓住老鼠的一定是好猫吗？ —— 结果偏见\"></a>12. 抓住老鼠的一定是好猫吗？ —— 结果偏见</h2><ul>\n<li>通常情况，过程是难以衡量的，过程的信息不一定可靠，而结果是鲜明可靠的。我们应该尽量基于可靠的信息来做决策</li>\n<li>但结果并不是最好的评价因素，因为通常情况，过程是可控的，结果往往有很多不确定因素</li>\n<li>如何解决：给过程添加更多记录和监督机制</li>\n</ul>\n<h2 id=\"13-钱越多越幸福吗？-——-财富与幸福\"><a href=\"#13-钱越多越幸福吗？-——-财富与幸福\" class=\"headerlink\" title=\"13. 钱越多越幸福吗？ —— 财富与幸福\"></a>13. 钱越多越幸福吗？ —— 财富与幸福</h2><blockquote>\n<p>财富的多少和幸福的程度并不成正比</p>\n</blockquote>\n<p><strong>不增加财富却可以增加幸福感的一些原则</strong>：</p>\n<ul>\n<li>好事一起享受不如分开享受（依据边际递减效应</li>\n<li>坏事分开忍受不如一起忍受（依据边际递减效应</li>\n<li>大好事小坏事分开经历不如一起经历（负面效应会被正面效应所冲淡</li>\n<li>大坏事小好事一起经历不如分开经历（正面效应才不会被负面效应的痛苦所淹没</li>\n<li>好事晚说不如早说（等待好事的过程是多巴胺活跃的过程</li>\n<li>坏事早说不如晚说（等待坏事的过程是最消磨人意志的</li>\n<li>静止的好事不如变动的好事（依据人的适应性规律，并不能为相同的物质方面的东西快乐很久</li>\n<li>变动的坏事不如静止的坏事（原理同上</li>\n</ul>\n<hr>\n<p>完结撒花✨🎉🎈🎈</p>\n"},{"title":"计算机相关 单词书📖","date":"2018-12-31T16:00:00.000Z","description":"总结一下，我看英文前端文档/视频遇到的一些计算机/前端相关的单词/专业术语","toc":0,"_content":"\n从2014年大一过了六级之后，就把学英语落下了，但是作为一个程序员，英语还是很重要的。\n\n所以工作之后经常刻意要去自己读英文文档，也看过一些英文前端视频，比如FrontEndMaster、WesBos。\n\n总结一下，我看英文前端文档/视频遇到的一些计算机/前端相关的单词/专业术语/非英语环境难遇到的一些词汇👇。\n  \n| 单词                     | 释义                                                                | 来源                                                                                                                     |\n| ------------------------ | ------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| under the hood           | 底层                                                                |\n| specify                  | 指定                                                                |\n| get passed in            | 传入                                                                |\n| sync/async               | 同步异步                                                            |\n| asynchronously           | 异步                                                                |\n| whatnot                  | 诸如此类的                                                          |\n| in good shape            | （运行代码的时候祈祷的                                              |\n| gotchas                  | 陷阱                                                                |\n| shortcut                 | 捷径                                                                |\n| inventory                | 库存/牛                                                             |\n| neat                     | 整齐利落                                                            |\n| scaffold                 | 脚手架                                                              |\n| handy                    | 便利                                                                |\n| ultimate                 | 最终                                                                |\n| rewind                   | 倒回/回退                                                           |\n| isolation                | 隔离                                                                |\n| interfere                | 妨碍 打扰                                                           |\n| capture                  | 捕获                                                                |\n| raw                      | 原生的                                                              |\n| vanilla js               | raw js：原生js                                                      |\n| nail                     | 钉子 固定  （巩固知识）                                             |\n| built-in                 | 内置的                                                              |\n| newbies                  | 新手                                                                |\n| tutorial                 | 教程                                                                |\n| sane                     | 合理的明智的                                                        |\n| modular                  | 模块化的                                                            |\n| cardio                   | 有氧运动                                                            |\n| hard code                | 写死的代码                                                          |\n| reinstate                | 恢复                                                                |\n| verbose                  | 冗余的                                                              |\n| upstream                 | （向上返回）                                                        |\n| downstream               | （向下传）                                                          |\n| CRUD acronym             | CRUD                                                                |\n| manually                 | 手动                                                                |\n| DEPRECATED               | 启用                                                                |\n| bottleneck               | 瓶颈                                                                |\n| audit                    | 审计                                                                |\n| monitor                  | 监控                                                                |\n| profile                  | 分析                                                                |\n| memory leaks             | 内存泄漏                                                            |\n| emulate/simulation       | 仿真/模拟                                                           |\n| refactor                 | 重构                                                                |\n| parser                   | 解析器                                                              |\n| anonymous                | 匿名                                                                |\n| deactivated              | 停用                                                                |\n| stats                    | 统计数据                                                            |\n| optimization             | 优化                                                                |\n| AST abstract syntax tree | 抽象语法树                                                          |\n| meg                      | 兆                                                                  |\n| thrashing                | 抖动                                                                |\n| idle                     | 空闲                                                                |\n| trigger                  | 触发                                                                |\n| GC garbage collector     | 垃圾回收器                                                          |\n| snapshot                 | 快照                                                                |\n| shallow size             | 是指用于存储其本身的内存大小                                        |\n| retained size            | 释放该对象后对象所占总内存该类的所有实例可支配的内存大小            |\n| heap snapshot            | 堆快照                                                              |\n| containment              | 容量                                                                |\n| overhead                 | 开销                                                                |\n| distribution             | 分配                                                                |\n| timeline                 | 时间轴                                                              |\n| delegate                 | 转交，委托                                                          | Event Delegation事件委托                                                                                                 |\n| prefix/postfix           | 前缀后缀                                                            |\n| Adaptor                  | 适配器                                                              |\n| TL;DR                    | too long;don't/didn't read 精华/总结                                |\n| conjecture               | 猜测猜想,推测                                                       | https://www.codewars.com/kata/52fefe6cb0091856db00030e/train/javascript                                                  |\n| Threshold                | 阈值                                                                |\n| constants                | 常量                                                                |\n| assign                   | 赋值                                                                |\n| dirty                    | 一般指代更改了未保存的数据/文件                                     |\n| truthy                   | 泛指真值                                                            |\n| singly-linked list       | 单链表                                                              |\n| legacy                   | 遗留问题（legacy code：万恶的遗留代码）                             |\n| instruction              | 指令                                                                |\n| Glossary                 | 术语                                                                |\n| constrained              | 受约束的                                                            |\n| deterministic            | 确定的                                                              |\n| decent                   | 优雅的、体面的                                                      |\n| bulk                     | 体积                                                                |\n| parallel                 | 并行的。平行的                                                      |\n| fraction                 | 片段                                                                |\n| standstill               | 停止停顿                                                            |\n| subtle                   | 微妙的                                                              |\n| augment                  | 增强，扩展（vue 拦截数组方法，扩展数组的原型方法时使用 protoAugment |\n| instantiation            | 实例化                                                              |\n| Cheat sheet              | 手册 清单                                                           |\n| on-the-fly               | 动态                                                                |\n| convention               | 公约，惯例                                                          |\n| cluster                  | 集群                                                                |\n| resolve                  | 解析                                                                |\n| amend                    | 修正修订 eg.git commit --amend                                      |\n| abort                    | 中止                                                                |\n| bias                     | 偏差/偏置                                                           | 机器学习术语                                                                                                             |\n| explicit                 | 显式的，清楚明确的                                                  |\n| Conquer                  | 攻破、征服的                                                        |\n| carve                    | 雕刻                                                                |\n| carve out some time      | 挤出一些时间                                                        |\n| tackle                   | 处理、解决、应付                                                    |\n| intentionally            | 刻意地、故意地                                                      |\n| corresponding            | 相对应的                                                            |\n| nest                     | 巢，嵌套                                                            |\n| nested array             | 嵌套数组                                                            |\n| flat(ten)                | 展开，铺平，扁平化                                                  | Array.prototype.flat方法                                                                                                 |\n| scenario                 | /səˈnɛrioʊ/方案；场景，情景                                         |\n| operands                 | 操作数，运算对象                                                    |\n| diagonal                 | 对角线，斜线                                                        | leetcode 52. N皇后问题，棋盘斜线集合变量名                                                                               |\n| dimensions               | 尺寸，维度                                                          | FCC https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-principles/make-typography-responsive |\n| circuit                  | 线路，回路                                                          | https://www.codewars.com/kata/5536a85b6ed4ee5a78000035/train/javascript                                                  |\n| polyfill                 | 填充                                                                | https://github.com/inexorabletash/polyfill                                                                               |\n| shim                     | 垫片                                                                | https://github.com/es-shims/es5-shim                                                                                     |\n| exceed                   | 超过，溢出                                                          |                                                                                                                          |\n| exponential              | 指数                                                                |                                                                                                                          | https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential |\n| allowlists               | 白名单                                                              |                                                                                                                          | https://developers.google.com/web/fundamentals/security/csp                                           |\n| pitfall                  | 陷阱                                                                |                                                                                                                          | https://css-tricks.com/debouncing-throttling-explained-examples/                                      |\n| traverse                 | 遍历                                                                |                                                                                                                          | https://developer.mozilla.org/en-US/docs/Web/API/Element/closest                                      |\n| successive               | 连续的                                                              |                                                                                                                          | https://www.codewars.com/kata/562b384167350ac93b00010c/train/javascript                               |\n| immersive                | 沉浸式                                                              |                                                                                                                          |                                                                                                       |\n| trade-off                | 交换，权衡，妥协                                                    | 技术选型场景常用语                                                                                                       |\n| interceptor              | 拦截器                                                              | axios                                                                                                                    |\n| peer                     | 对等的                                                              | npm WARN经常出现：You must install peer dependencies yourself.                                                           |\n| actuator                 | 致动器,执行机                                                       | [github](https://github.com/imtaotao/vue4)                                                                               |\n| Ambiguous                 | 模棱两可的,多义的机                                                       |  com.microsoft.sqlserver.jdbc.SQLServerException: Ambiguous column name 'xx'                                                                               |\n","source":"_posts/cs_english.md","raw":"---\ntitle: 计算机相关 单词书📖\ncategories:\n    - 05外语\ntags:\ndate: 2019-01-01\ndescription: 总结一下，我看英文前端文档/视频遇到的一些计算机/前端相关的单词/专业术语\ntoc: 0\n---\n\n从2014年大一过了六级之后，就把学英语落下了，但是作为一个程序员，英语还是很重要的。\n\n所以工作之后经常刻意要去自己读英文文档，也看过一些英文前端视频，比如FrontEndMaster、WesBos。\n\n总结一下，我看英文前端文档/视频遇到的一些计算机/前端相关的单词/专业术语/非英语环境难遇到的一些词汇👇。\n  \n| 单词                     | 释义                                                                | 来源                                                                                                                     |\n| ------------------------ | ------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| under the hood           | 底层                                                                |\n| specify                  | 指定                                                                |\n| get passed in            | 传入                                                                |\n| sync/async               | 同步异步                                                            |\n| asynchronously           | 异步                                                                |\n| whatnot                  | 诸如此类的                                                          |\n| in good shape            | （运行代码的时候祈祷的                                              |\n| gotchas                  | 陷阱                                                                |\n| shortcut                 | 捷径                                                                |\n| inventory                | 库存/牛                                                             |\n| neat                     | 整齐利落                                                            |\n| scaffold                 | 脚手架                                                              |\n| handy                    | 便利                                                                |\n| ultimate                 | 最终                                                                |\n| rewind                   | 倒回/回退                                                           |\n| isolation                | 隔离                                                                |\n| interfere                | 妨碍 打扰                                                           |\n| capture                  | 捕获                                                                |\n| raw                      | 原生的                                                              |\n| vanilla js               | raw js：原生js                                                      |\n| nail                     | 钉子 固定  （巩固知识）                                             |\n| built-in                 | 内置的                                                              |\n| newbies                  | 新手                                                                |\n| tutorial                 | 教程                                                                |\n| sane                     | 合理的明智的                                                        |\n| modular                  | 模块化的                                                            |\n| cardio                   | 有氧运动                                                            |\n| hard code                | 写死的代码                                                          |\n| reinstate                | 恢复                                                                |\n| verbose                  | 冗余的                                                              |\n| upstream                 | （向上返回）                                                        |\n| downstream               | （向下传）                                                          |\n| CRUD acronym             | CRUD                                                                |\n| manually                 | 手动                                                                |\n| DEPRECATED               | 启用                                                                |\n| bottleneck               | 瓶颈                                                                |\n| audit                    | 审计                                                                |\n| monitor                  | 监控                                                                |\n| profile                  | 分析                                                                |\n| memory leaks             | 内存泄漏                                                            |\n| emulate/simulation       | 仿真/模拟                                                           |\n| refactor                 | 重构                                                                |\n| parser                   | 解析器                                                              |\n| anonymous                | 匿名                                                                |\n| deactivated              | 停用                                                                |\n| stats                    | 统计数据                                                            |\n| optimization             | 优化                                                                |\n| AST abstract syntax tree | 抽象语法树                                                          |\n| meg                      | 兆                                                                  |\n| thrashing                | 抖动                                                                |\n| idle                     | 空闲                                                                |\n| trigger                  | 触发                                                                |\n| GC garbage collector     | 垃圾回收器                                                          |\n| snapshot                 | 快照                                                                |\n| shallow size             | 是指用于存储其本身的内存大小                                        |\n| retained size            | 释放该对象后对象所占总内存该类的所有实例可支配的内存大小            |\n| heap snapshot            | 堆快照                                                              |\n| containment              | 容量                                                                |\n| overhead                 | 开销                                                                |\n| distribution             | 分配                                                                |\n| timeline                 | 时间轴                                                              |\n| delegate                 | 转交，委托                                                          | Event Delegation事件委托                                                                                                 |\n| prefix/postfix           | 前缀后缀                                                            |\n| Adaptor                  | 适配器                                                              |\n| TL;DR                    | too long;don't/didn't read 精华/总结                                |\n| conjecture               | 猜测猜想,推测                                                       | https://www.codewars.com/kata/52fefe6cb0091856db00030e/train/javascript                                                  |\n| Threshold                | 阈值                                                                |\n| constants                | 常量                                                                |\n| assign                   | 赋值                                                                |\n| dirty                    | 一般指代更改了未保存的数据/文件                                     |\n| truthy                   | 泛指真值                                                            |\n| singly-linked list       | 单链表                                                              |\n| legacy                   | 遗留问题（legacy code：万恶的遗留代码）                             |\n| instruction              | 指令                                                                |\n| Glossary                 | 术语                                                                |\n| constrained              | 受约束的                                                            |\n| deterministic            | 确定的                                                              |\n| decent                   | 优雅的、体面的                                                      |\n| bulk                     | 体积                                                                |\n| parallel                 | 并行的。平行的                                                      |\n| fraction                 | 片段                                                                |\n| standstill               | 停止停顿                                                            |\n| subtle                   | 微妙的                                                              |\n| augment                  | 增强，扩展（vue 拦截数组方法，扩展数组的原型方法时使用 protoAugment |\n| instantiation            | 实例化                                                              |\n| Cheat sheet              | 手册 清单                                                           |\n| on-the-fly               | 动态                                                                |\n| convention               | 公约，惯例                                                          |\n| cluster                  | 集群                                                                |\n| resolve                  | 解析                                                                |\n| amend                    | 修正修订 eg.git commit --amend                                      |\n| abort                    | 中止                                                                |\n| bias                     | 偏差/偏置                                                           | 机器学习术语                                                                                                             |\n| explicit                 | 显式的，清楚明确的                                                  |\n| Conquer                  | 攻破、征服的                                                        |\n| carve                    | 雕刻                                                                |\n| carve out some time      | 挤出一些时间                                                        |\n| tackle                   | 处理、解决、应付                                                    |\n| intentionally            | 刻意地、故意地                                                      |\n| corresponding            | 相对应的                                                            |\n| nest                     | 巢，嵌套                                                            |\n| nested array             | 嵌套数组                                                            |\n| flat(ten)                | 展开，铺平，扁平化                                                  | Array.prototype.flat方法                                                                                                 |\n| scenario                 | /səˈnɛrioʊ/方案；场景，情景                                         |\n| operands                 | 操作数，运算对象                                                    |\n| diagonal                 | 对角线，斜线                                                        | leetcode 52. N皇后问题，棋盘斜线集合变量名                                                                               |\n| dimensions               | 尺寸，维度                                                          | FCC https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-principles/make-typography-responsive |\n| circuit                  | 线路，回路                                                          | https://www.codewars.com/kata/5536a85b6ed4ee5a78000035/train/javascript                                                  |\n| polyfill                 | 填充                                                                | https://github.com/inexorabletash/polyfill                                                                               |\n| shim                     | 垫片                                                                | https://github.com/es-shims/es5-shim                                                                                     |\n| exceed                   | 超过，溢出                                                          |                                                                                                                          |\n| exponential              | 指数                                                                |                                                                                                                          | https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential |\n| allowlists               | 白名单                                                              |                                                                                                                          | https://developers.google.com/web/fundamentals/security/csp                                           |\n| pitfall                  | 陷阱                                                                |                                                                                                                          | https://css-tricks.com/debouncing-throttling-explained-examples/                                      |\n| traverse                 | 遍历                                                                |                                                                                                                          | https://developer.mozilla.org/en-US/docs/Web/API/Element/closest                                      |\n| successive               | 连续的                                                              |                                                                                                                          | https://www.codewars.com/kata/562b384167350ac93b00010c/train/javascript                               |\n| immersive                | 沉浸式                                                              |                                                                                                                          |                                                                                                       |\n| trade-off                | 交换，权衡，妥协                                                    | 技术选型场景常用语                                                                                                       |\n| interceptor              | 拦截器                                                              | axios                                                                                                                    |\n| peer                     | 对等的                                                              | npm WARN经常出现：You must install peer dependencies yourself.                                                           |\n| actuator                 | 致动器,执行机                                                       | [github](https://github.com/imtaotao/vue4)                                                                               |\n| Ambiguous                 | 模棱两可的,多义的机                                                       |  com.microsoft.sqlserver.jdbc.SQLServerException: Ambiguous column name 'xx'                                                                               |\n","slug":"cs_english","published":1,"updated":"2021-05-18T08:30:05.773Z","_id":"ckir88jbg004uc8y6hvdtrm3m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>从2014年大一过了六级之后，就把学英语落下了，但是作为一个程序员，英语还是很重要的。</p>\n<p>所以工作之后经常刻意要去自己读英文文档，也看过一些英文前端视频，比如FrontEndMaster、WesBos。</p>\n<p>总结一下，我看英文前端文档/视频遇到的一些计算机/前端相关的单词/专业术语/非英语环境难遇到的一些词汇👇。</p>\n<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n<th>来源</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>under the hood</td>\n<td>底层</td>\n</tr>\n<tr>\n<td>specify</td>\n<td>指定</td>\n</tr>\n<tr>\n<td>get passed in</td>\n<td>传入</td>\n</tr>\n<tr>\n<td>sync/async</td>\n<td>同步异步</td>\n</tr>\n<tr>\n<td>asynchronously</td>\n<td>异步</td>\n</tr>\n<tr>\n<td>whatnot</td>\n<td>诸如此类的</td>\n</tr>\n<tr>\n<td>in good shape</td>\n<td>（运行代码的时候祈祷的</td>\n</tr>\n<tr>\n<td>gotchas</td>\n<td>陷阱</td>\n</tr>\n<tr>\n<td>shortcut</td>\n<td>捷径</td>\n</tr>\n<tr>\n<td>inventory</td>\n<td>库存/牛</td>\n</tr>\n<tr>\n<td>neat</td>\n<td>整齐利落</td>\n</tr>\n<tr>\n<td>scaffold</td>\n<td>脚手架</td>\n</tr>\n<tr>\n<td>handy</td>\n<td>便利</td>\n</tr>\n<tr>\n<td>ultimate</td>\n<td>最终</td>\n</tr>\n<tr>\n<td>rewind</td>\n<td>倒回/回退</td>\n</tr>\n<tr>\n<td>isolation</td>\n<td>隔离</td>\n</tr>\n<tr>\n<td>interfere</td>\n<td>妨碍 打扰</td>\n</tr>\n<tr>\n<td>capture</td>\n<td>捕获</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>原生的</td>\n</tr>\n<tr>\n<td>vanilla js</td>\n<td>raw js：原生js</td>\n</tr>\n<tr>\n<td>nail</td>\n<td>钉子 固定  （巩固知识）</td>\n</tr>\n<tr>\n<td>built-in</td>\n<td>内置的</td>\n</tr>\n<tr>\n<td>newbies</td>\n<td>新手</td>\n</tr>\n<tr>\n<td>tutorial</td>\n<td>教程</td>\n</tr>\n<tr>\n<td>sane</td>\n<td>合理的明智的</td>\n</tr>\n<tr>\n<td>modular</td>\n<td>模块化的</td>\n</tr>\n<tr>\n<td>cardio</td>\n<td>有氧运动</td>\n</tr>\n<tr>\n<td>hard code</td>\n<td>写死的代码</td>\n</tr>\n<tr>\n<td>reinstate</td>\n<td>恢复</td>\n</tr>\n<tr>\n<td>verbose</td>\n<td>冗余的</td>\n</tr>\n<tr>\n<td>upstream</td>\n<td>（向上返回）</td>\n</tr>\n<tr>\n<td>downstream</td>\n<td>（向下传）</td>\n</tr>\n<tr>\n<td>CRUD acronym</td>\n<td>CRUD</td>\n</tr>\n<tr>\n<td>manually</td>\n<td>手动</td>\n</tr>\n<tr>\n<td>DEPRECATED</td>\n<td>启用</td>\n</tr>\n<tr>\n<td>bottleneck</td>\n<td>瓶颈</td>\n</tr>\n<tr>\n<td>audit</td>\n<td>审计</td>\n</tr>\n<tr>\n<td>monitor</td>\n<td>监控</td>\n</tr>\n<tr>\n<td>profile</td>\n<td>分析</td>\n</tr>\n<tr>\n<td>memory leaks</td>\n<td>内存泄漏</td>\n</tr>\n<tr>\n<td>emulate/simulation</td>\n<td>仿真/模拟</td>\n</tr>\n<tr>\n<td>refactor</td>\n<td>重构</td>\n</tr>\n<tr>\n<td>parser</td>\n<td>解析器</td>\n</tr>\n<tr>\n<td>anonymous</td>\n<td>匿名</td>\n</tr>\n<tr>\n<td>deactivated</td>\n<td>停用</td>\n</tr>\n<tr>\n<td>stats</td>\n<td>统计数据</td>\n</tr>\n<tr>\n<td>optimization</td>\n<td>优化</td>\n</tr>\n<tr>\n<td>AST abstract syntax tree</td>\n<td>抽象语法树</td>\n</tr>\n<tr>\n<td>meg</td>\n<td>兆</td>\n</tr>\n<tr>\n<td>thrashing</td>\n<td>抖动</td>\n</tr>\n<tr>\n<td>idle</td>\n<td>空闲</td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>触发</td>\n</tr>\n<tr>\n<td>GC garbage collector</td>\n<td>垃圾回收器</td>\n</tr>\n<tr>\n<td>snapshot</td>\n<td>快照</td>\n</tr>\n<tr>\n<td>shallow size</td>\n<td>是指用于存储其本身的内存大小</td>\n</tr>\n<tr>\n<td>retained size</td>\n<td>释放该对象后对象所占总内存该类的所有实例可支配的内存大小</td>\n</tr>\n<tr>\n<td>heap snapshot</td>\n<td>堆快照</td>\n</tr>\n<tr>\n<td>containment</td>\n<td>容量</td>\n</tr>\n<tr>\n<td>overhead</td>\n<td>开销</td>\n</tr>\n<tr>\n<td>distribution</td>\n<td>分配</td>\n</tr>\n<tr>\n<td>timeline</td>\n<td>时间轴</td>\n</tr>\n<tr>\n<td>delegate</td>\n<td>转交，委托</td>\n<td>Event Delegation事件委托</td>\n</tr>\n<tr>\n<td>prefix/postfix</td>\n<td>前缀后缀</td>\n</tr>\n<tr>\n<td>Adaptor</td>\n<td>适配器</td>\n</tr>\n<tr>\n<td>TL;DR</td>\n<td>too long;don’t/didn’t read 精华/总结</td>\n</tr>\n<tr>\n<td>conjecture</td>\n<td>猜测猜想,推测</td>\n<td><a href=\"https://www.codewars.com/kata/52fefe6cb0091856db00030e/train/javascript\" target=\"_blank\" rel=\"noopener\">https://www.codewars.com/kata/52fefe6cb0091856db00030e/train/javascript</a></td>\n</tr>\n<tr>\n<td>Threshold</td>\n<td>阈值</td>\n</tr>\n<tr>\n<td>constants</td>\n<td>常量</td>\n</tr>\n<tr>\n<td>assign</td>\n<td>赋值</td>\n</tr>\n<tr>\n<td>dirty</td>\n<td>一般指代更改了未保存的数据/文件</td>\n</tr>\n<tr>\n<td>truthy</td>\n<td>泛指真值</td>\n</tr>\n<tr>\n<td>singly-linked list</td>\n<td>单链表</td>\n</tr>\n<tr>\n<td>legacy</td>\n<td>遗留问题（legacy code：万恶的遗留代码）</td>\n</tr>\n<tr>\n<td>instruction</td>\n<td>指令</td>\n</tr>\n<tr>\n<td>Glossary</td>\n<td>术语</td>\n</tr>\n<tr>\n<td>constrained</td>\n<td>受约束的</td>\n</tr>\n<tr>\n<td>deterministic</td>\n<td>确定的</td>\n</tr>\n<tr>\n<td>decent</td>\n<td>优雅的、体面的</td>\n</tr>\n<tr>\n<td>bulk</td>\n<td>体积</td>\n</tr>\n<tr>\n<td>parallel</td>\n<td>并行的。平行的</td>\n</tr>\n<tr>\n<td>fraction</td>\n<td>片段</td>\n</tr>\n<tr>\n<td>standstill</td>\n<td>停止停顿</td>\n</tr>\n<tr>\n<td>subtle</td>\n<td>微妙的</td>\n</tr>\n<tr>\n<td>augment</td>\n<td>增强，扩展（vue 拦截数组方法，扩展数组的原型方法时使用 protoAugment</td>\n</tr>\n<tr>\n<td>instantiation</td>\n<td>实例化</td>\n</tr>\n<tr>\n<td>Cheat sheet</td>\n<td>手册 清单</td>\n</tr>\n<tr>\n<td>on-the-fly</td>\n<td>动态</td>\n</tr>\n<tr>\n<td>convention</td>\n<td>公约，惯例</td>\n</tr>\n<tr>\n<td>cluster</td>\n<td>集群</td>\n</tr>\n<tr>\n<td>resolve</td>\n<td>解析</td>\n</tr>\n<tr>\n<td>amend</td>\n<td>修正修订 eg.git commit –amend</td>\n</tr>\n<tr>\n<td>abort</td>\n<td>中止</td>\n</tr>\n<tr>\n<td>bias</td>\n<td>偏差/偏置</td>\n<td>机器学习术语</td>\n</tr>\n<tr>\n<td>explicit</td>\n<td>显式的，清楚明确的</td>\n</tr>\n<tr>\n<td>Conquer</td>\n<td>攻破、征服的</td>\n</tr>\n<tr>\n<td>carve</td>\n<td>雕刻</td>\n</tr>\n<tr>\n<td>carve out some time</td>\n<td>挤出一些时间</td>\n</tr>\n<tr>\n<td>tackle</td>\n<td>处理、解决、应付</td>\n</tr>\n<tr>\n<td>intentionally</td>\n<td>刻意地、故意地</td>\n</tr>\n<tr>\n<td>corresponding</td>\n<td>相对应的</td>\n</tr>\n<tr>\n<td>nest</td>\n<td>巢，嵌套</td>\n</tr>\n<tr>\n<td>nested array</td>\n<td>嵌套数组</td>\n</tr>\n<tr>\n<td>flat(ten)</td>\n<td>展开，铺平，扁平化</td>\n<td>Array.prototype.flat方法</td>\n</tr>\n<tr>\n<td>scenario</td>\n<td>/səˈnɛrioʊ/方案；场景，情景</td>\n</tr>\n<tr>\n<td>operands</td>\n<td>操作数，运算对象</td>\n</tr>\n<tr>\n<td>diagonal</td>\n<td>对角线，斜线</td>\n<td>leetcode 52. N皇后问题，棋盘斜线集合变量名</td>\n</tr>\n<tr>\n<td>dimensions</td>\n<td>尺寸，维度</td>\n<td>FCC <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-principles/make-typography-responsive\" target=\"_blank\" rel=\"noopener\">https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-principles/make-typography-responsive</a></td>\n</tr>\n<tr>\n<td>circuit</td>\n<td>线路，回路</td>\n<td><a href=\"https://www.codewars.com/kata/5536a85b6ed4ee5a78000035/train/javascript\" target=\"_blank\" rel=\"noopener\">https://www.codewars.com/kata/5536a85b6ed4ee5a78000035/train/javascript</a></td>\n</tr>\n<tr>\n<td>polyfill</td>\n<td>填充</td>\n<td><a href=\"https://github.com/inexorabletash/polyfill\" target=\"_blank\" rel=\"noopener\">https://github.com/inexorabletash/polyfill</a></td>\n</tr>\n<tr>\n<td>shim</td>\n<td>垫片</td>\n<td><a href=\"https://github.com/es-shims/es5-shim\" target=\"_blank\" rel=\"noopener\">https://github.com/es-shims/es5-shim</a></td>\n</tr>\n<tr>\n<td>exceed</td>\n<td>超过，溢出</td>\n<td></td>\n</tr>\n<tr>\n<td>exponential</td>\n<td>指数</td>\n<td></td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential</a></td>\n</tr>\n<tr>\n<td>allowlists</td>\n<td>白名单</td>\n<td></td>\n<td><a href=\"https://developers.google.com/web/fundamentals/security/csp\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/web/fundamentals/security/csp</a></td>\n</tr>\n<tr>\n<td>pitfall</td>\n<td>陷阱</td>\n<td></td>\n<td><a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/debouncing-throttling-explained-examples/</a></td>\n</tr>\n<tr>\n<td>traverse</td>\n<td>遍历</td>\n<td></td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/Element/closest</a></td>\n</tr>\n<tr>\n<td>successive</td>\n<td>连续的</td>\n<td></td>\n<td><a href=\"https://www.codewars.com/kata/562b384167350ac93b00010c/train/javascript\" target=\"_blank\" rel=\"noopener\">https://www.codewars.com/kata/562b384167350ac93b00010c/train/javascript</a></td>\n</tr>\n<tr>\n<td>immersive</td>\n<td>沉浸式</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>trade-off</td>\n<td>交换，权衡，妥协</td>\n<td>技术选型场景常用语</td>\n</tr>\n<tr>\n<td>interceptor</td>\n<td>拦截器</td>\n<td>axios</td>\n</tr>\n<tr>\n<td>peer</td>\n<td>对等的</td>\n<td>npm WARN经常出现：You must install peer dependencies yourself.</td>\n</tr>\n<tr>\n<td>actuator</td>\n<td>致动器,执行机</td>\n<td><a href=\"https://github.com/imtaotao/vue4\" target=\"_blank\" rel=\"noopener\">github</a></td>\n</tr>\n<tr>\n<td>Ambiguous</td>\n<td>模棱两可的,多义的机</td>\n<td>com.microsoft.sqlserver.jdbc.SQLServerException: Ambiguous column name ‘xx’</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>从2014年大一过了六级之后，就把学英语落下了，但是作为一个程序员，英语还是很重要的。</p>\n<p>所以工作之后经常刻意要去自己读英文文档，也看过一些英文前端视频，比如FrontEndMaster、WesBos。</p>\n<p>总结一下，我看英文前端文档/视频遇到的一些计算机/前端相关的单词/专业术语/非英语环境难遇到的一些词汇👇。</p>\n<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n<th>来源</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>under the hood</td>\n<td>底层</td>\n</tr>\n<tr>\n<td>specify</td>\n<td>指定</td>\n</tr>\n<tr>\n<td>get passed in</td>\n<td>传入</td>\n</tr>\n<tr>\n<td>sync/async</td>\n<td>同步异步</td>\n</tr>\n<tr>\n<td>asynchronously</td>\n<td>异步</td>\n</tr>\n<tr>\n<td>whatnot</td>\n<td>诸如此类的</td>\n</tr>\n<tr>\n<td>in good shape</td>\n<td>（运行代码的时候祈祷的</td>\n</tr>\n<tr>\n<td>gotchas</td>\n<td>陷阱</td>\n</tr>\n<tr>\n<td>shortcut</td>\n<td>捷径</td>\n</tr>\n<tr>\n<td>inventory</td>\n<td>库存/牛</td>\n</tr>\n<tr>\n<td>neat</td>\n<td>整齐利落</td>\n</tr>\n<tr>\n<td>scaffold</td>\n<td>脚手架</td>\n</tr>\n<tr>\n<td>handy</td>\n<td>便利</td>\n</tr>\n<tr>\n<td>ultimate</td>\n<td>最终</td>\n</tr>\n<tr>\n<td>rewind</td>\n<td>倒回/回退</td>\n</tr>\n<tr>\n<td>isolation</td>\n<td>隔离</td>\n</tr>\n<tr>\n<td>interfere</td>\n<td>妨碍 打扰</td>\n</tr>\n<tr>\n<td>capture</td>\n<td>捕获</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>原生的</td>\n</tr>\n<tr>\n<td>vanilla js</td>\n<td>raw js：原生js</td>\n</tr>\n<tr>\n<td>nail</td>\n<td>钉子 固定  （巩固知识）</td>\n</tr>\n<tr>\n<td>built-in</td>\n<td>内置的</td>\n</tr>\n<tr>\n<td>newbies</td>\n<td>新手</td>\n</tr>\n<tr>\n<td>tutorial</td>\n<td>教程</td>\n</tr>\n<tr>\n<td>sane</td>\n<td>合理的明智的</td>\n</tr>\n<tr>\n<td>modular</td>\n<td>模块化的</td>\n</tr>\n<tr>\n<td>cardio</td>\n<td>有氧运动</td>\n</tr>\n<tr>\n<td>hard code</td>\n<td>写死的代码</td>\n</tr>\n<tr>\n<td>reinstate</td>\n<td>恢复</td>\n</tr>\n<tr>\n<td>verbose</td>\n<td>冗余的</td>\n</tr>\n<tr>\n<td>upstream</td>\n<td>（向上返回）</td>\n</tr>\n<tr>\n<td>downstream</td>\n<td>（向下传）</td>\n</tr>\n<tr>\n<td>CRUD acronym</td>\n<td>CRUD</td>\n</tr>\n<tr>\n<td>manually</td>\n<td>手动</td>\n</tr>\n<tr>\n<td>DEPRECATED</td>\n<td>启用</td>\n</tr>\n<tr>\n<td>bottleneck</td>\n<td>瓶颈</td>\n</tr>\n<tr>\n<td>audit</td>\n<td>审计</td>\n</tr>\n<tr>\n<td>monitor</td>\n<td>监控</td>\n</tr>\n<tr>\n<td>profile</td>\n<td>分析</td>\n</tr>\n<tr>\n<td>memory leaks</td>\n<td>内存泄漏</td>\n</tr>\n<tr>\n<td>emulate/simulation</td>\n<td>仿真/模拟</td>\n</tr>\n<tr>\n<td>refactor</td>\n<td>重构</td>\n</tr>\n<tr>\n<td>parser</td>\n<td>解析器</td>\n</tr>\n<tr>\n<td>anonymous</td>\n<td>匿名</td>\n</tr>\n<tr>\n<td>deactivated</td>\n<td>停用</td>\n</tr>\n<tr>\n<td>stats</td>\n<td>统计数据</td>\n</tr>\n<tr>\n<td>optimization</td>\n<td>优化</td>\n</tr>\n<tr>\n<td>AST abstract syntax tree</td>\n<td>抽象语法树</td>\n</tr>\n<tr>\n<td>meg</td>\n<td>兆</td>\n</tr>\n<tr>\n<td>thrashing</td>\n<td>抖动</td>\n</tr>\n<tr>\n<td>idle</td>\n<td>空闲</td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>触发</td>\n</tr>\n<tr>\n<td>GC garbage collector</td>\n<td>垃圾回收器</td>\n</tr>\n<tr>\n<td>snapshot</td>\n<td>快照</td>\n</tr>\n<tr>\n<td>shallow size</td>\n<td>是指用于存储其本身的内存大小</td>\n</tr>\n<tr>\n<td>retained size</td>\n<td>释放该对象后对象所占总内存该类的所有实例可支配的内存大小</td>\n</tr>\n<tr>\n<td>heap snapshot</td>\n<td>堆快照</td>\n</tr>\n<tr>\n<td>containment</td>\n<td>容量</td>\n</tr>\n<tr>\n<td>overhead</td>\n<td>开销</td>\n</tr>\n<tr>\n<td>distribution</td>\n<td>分配</td>\n</tr>\n<tr>\n<td>timeline</td>\n<td>时间轴</td>\n</tr>\n<tr>\n<td>delegate</td>\n<td>转交，委托</td>\n<td>Event Delegation事件委托</td>\n</tr>\n<tr>\n<td>prefix/postfix</td>\n<td>前缀后缀</td>\n</tr>\n<tr>\n<td>Adaptor</td>\n<td>适配器</td>\n</tr>\n<tr>\n<td>TL;DR</td>\n<td>too long;don’t/didn’t read 精华/总结</td>\n</tr>\n<tr>\n<td>conjecture</td>\n<td>猜测猜想,推测</td>\n<td><a href=\"https://www.codewars.com/kata/52fefe6cb0091856db00030e/train/javascript\" target=\"_blank\" rel=\"noopener\">https://www.codewars.com/kata/52fefe6cb0091856db00030e/train/javascript</a></td>\n</tr>\n<tr>\n<td>Threshold</td>\n<td>阈值</td>\n</tr>\n<tr>\n<td>constants</td>\n<td>常量</td>\n</tr>\n<tr>\n<td>assign</td>\n<td>赋值</td>\n</tr>\n<tr>\n<td>dirty</td>\n<td>一般指代更改了未保存的数据/文件</td>\n</tr>\n<tr>\n<td>truthy</td>\n<td>泛指真值</td>\n</tr>\n<tr>\n<td>singly-linked list</td>\n<td>单链表</td>\n</tr>\n<tr>\n<td>legacy</td>\n<td>遗留问题（legacy code：万恶的遗留代码）</td>\n</tr>\n<tr>\n<td>instruction</td>\n<td>指令</td>\n</tr>\n<tr>\n<td>Glossary</td>\n<td>术语</td>\n</tr>\n<tr>\n<td>constrained</td>\n<td>受约束的</td>\n</tr>\n<tr>\n<td>deterministic</td>\n<td>确定的</td>\n</tr>\n<tr>\n<td>decent</td>\n<td>优雅的、体面的</td>\n</tr>\n<tr>\n<td>bulk</td>\n<td>体积</td>\n</tr>\n<tr>\n<td>parallel</td>\n<td>并行的。平行的</td>\n</tr>\n<tr>\n<td>fraction</td>\n<td>片段</td>\n</tr>\n<tr>\n<td>standstill</td>\n<td>停止停顿</td>\n</tr>\n<tr>\n<td>subtle</td>\n<td>微妙的</td>\n</tr>\n<tr>\n<td>augment</td>\n<td>增强，扩展（vue 拦截数组方法，扩展数组的原型方法时使用 protoAugment</td>\n</tr>\n<tr>\n<td>instantiation</td>\n<td>实例化</td>\n</tr>\n<tr>\n<td>Cheat sheet</td>\n<td>手册 清单</td>\n</tr>\n<tr>\n<td>on-the-fly</td>\n<td>动态</td>\n</tr>\n<tr>\n<td>convention</td>\n<td>公约，惯例</td>\n</tr>\n<tr>\n<td>cluster</td>\n<td>集群</td>\n</tr>\n<tr>\n<td>resolve</td>\n<td>解析</td>\n</tr>\n<tr>\n<td>amend</td>\n<td>修正修订 eg.git commit –amend</td>\n</tr>\n<tr>\n<td>abort</td>\n<td>中止</td>\n</tr>\n<tr>\n<td>bias</td>\n<td>偏差/偏置</td>\n<td>机器学习术语</td>\n</tr>\n<tr>\n<td>explicit</td>\n<td>显式的，清楚明确的</td>\n</tr>\n<tr>\n<td>Conquer</td>\n<td>攻破、征服的</td>\n</tr>\n<tr>\n<td>carve</td>\n<td>雕刻</td>\n</tr>\n<tr>\n<td>carve out some time</td>\n<td>挤出一些时间</td>\n</tr>\n<tr>\n<td>tackle</td>\n<td>处理、解决、应付</td>\n</tr>\n<tr>\n<td>intentionally</td>\n<td>刻意地、故意地</td>\n</tr>\n<tr>\n<td>corresponding</td>\n<td>相对应的</td>\n</tr>\n<tr>\n<td>nest</td>\n<td>巢，嵌套</td>\n</tr>\n<tr>\n<td>nested array</td>\n<td>嵌套数组</td>\n</tr>\n<tr>\n<td>flat(ten)</td>\n<td>展开，铺平，扁平化</td>\n<td>Array.prototype.flat方法</td>\n</tr>\n<tr>\n<td>scenario</td>\n<td>/səˈnɛrioʊ/方案；场景，情景</td>\n</tr>\n<tr>\n<td>operands</td>\n<td>操作数，运算对象</td>\n</tr>\n<tr>\n<td>diagonal</td>\n<td>对角线，斜线</td>\n<td>leetcode 52. N皇后问题，棋盘斜线集合变量名</td>\n</tr>\n<tr>\n<td>dimensions</td>\n<td>尺寸，维度</td>\n<td>FCC <a href=\"https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-principles/make-typography-responsive\" target=\"_blank\" rel=\"noopener\">https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-principles/make-typography-responsive</a></td>\n</tr>\n<tr>\n<td>circuit</td>\n<td>线路，回路</td>\n<td><a href=\"https://www.codewars.com/kata/5536a85b6ed4ee5a78000035/train/javascript\" target=\"_blank\" rel=\"noopener\">https://www.codewars.com/kata/5536a85b6ed4ee5a78000035/train/javascript</a></td>\n</tr>\n<tr>\n<td>polyfill</td>\n<td>填充</td>\n<td><a href=\"https://github.com/inexorabletash/polyfill\" target=\"_blank\" rel=\"noopener\">https://github.com/inexorabletash/polyfill</a></td>\n</tr>\n<tr>\n<td>shim</td>\n<td>垫片</td>\n<td><a href=\"https://github.com/es-shims/es5-shim\" target=\"_blank\" rel=\"noopener\">https://github.com/es-shims/es5-shim</a></td>\n</tr>\n<tr>\n<td>exceed</td>\n<td>超过，溢出</td>\n<td></td>\n</tr>\n<tr>\n<td>exponential</td>\n<td>指数</td>\n<td></td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential</a></td>\n</tr>\n<tr>\n<td>allowlists</td>\n<td>白名单</td>\n<td></td>\n<td><a href=\"https://developers.google.com/web/fundamentals/security/csp\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/web/fundamentals/security/csp</a></td>\n</tr>\n<tr>\n<td>pitfall</td>\n<td>陷阱</td>\n<td></td>\n<td><a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/debouncing-throttling-explained-examples/</a></td>\n</tr>\n<tr>\n<td>traverse</td>\n<td>遍历</td>\n<td></td>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/Element/closest</a></td>\n</tr>\n<tr>\n<td>successive</td>\n<td>连续的</td>\n<td></td>\n<td><a href=\"https://www.codewars.com/kata/562b384167350ac93b00010c/train/javascript\" target=\"_blank\" rel=\"noopener\">https://www.codewars.com/kata/562b384167350ac93b00010c/train/javascript</a></td>\n</tr>\n<tr>\n<td>immersive</td>\n<td>沉浸式</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>trade-off</td>\n<td>交换，权衡，妥协</td>\n<td>技术选型场景常用语</td>\n</tr>\n<tr>\n<td>interceptor</td>\n<td>拦截器</td>\n<td>axios</td>\n</tr>\n<tr>\n<td>peer</td>\n<td>对等的</td>\n<td>npm WARN经常出现：You must install peer dependencies yourself.</td>\n</tr>\n<tr>\n<td>actuator</td>\n<td>致动器,执行机</td>\n<td><a href=\"https://github.com/imtaotao/vue4\" target=\"_blank\" rel=\"noopener\">github</a></td>\n</tr>\n<tr>\n<td>Ambiguous</td>\n<td>模棱两可的,多义的机</td>\n<td>com.microsoft.sqlserver.jdbc.SQLServerException: Ambiguous column name ‘xx’</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Devtools 老司机养成 - 第四篇Sources源文件面板","date":"2020-03-14T16:00:00.000Z","description":"chrome重要的sources面板，可以做IDE？文件变更，覆盖调试...","toc":1,"top":0,"_content":"\n## 概览\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n![0](https://i.loli.net/2019/07/29/5d3e54ad6595d17473.png)\n\n## 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54bc1e26c94874.gif)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54c7ee26f77001.gif)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54d8de3ba68180.png)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54d8f005d73515.png)\n6. Exception 异常断点\n\n    ![0](https://i.loli.net/2019/07/29/5d3e54d90b04490413.gif)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](https://i.loli.net/2019/07/29/5d3e54db0062099787.gif)\n\n## Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](https://i.loli.net/2019/07/29/5d3e556a3d2ff51804.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](https://i.loli.net/2019/07/29/5d3e5579edff848268.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](https://i.loli.net/2019/07/29/5d3e558950aa668631.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](https://i.loli.net/2019/07/29/5d3e55951dbb174461.gif)\n\n-   Continue to here：继续执行至此行\n\n![0](https://i.loli.net/2019/07/29/5d3e55b1cbe1030881.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](https://i.loli.net/2019/07/29/5d3e55be02afb66581.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n## Devtools Nodejs debug\n\n-   node 执行 js 文件，文件名前加--inspect 标志，启用浏览器 nodejs 调试\n\n![nodeDebug.png](https://i.loli.net/2019/04/22/5cbd33c700aed.png)\n\n-   点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试\n-   [更多相关](https://nodejs.org/en/docs/guides/debugging-getting-started/)\n\n## BlackBox\n\n-   BlackBox 的用途：\n\n    “BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数\n\n    ```\n    function animate() {\n    prepare();\n    lib.doFancyStuff(); // A\n    render();\n    }\n    ```\n\n    例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数\n\n    如果我确认该第三方库没有 bug\n\n    就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行\n\n-   三种添加 BlackBox 的方法：\n\n1. 在源代码窗格右键，选择\"BlackBox Script\"\n   ![0](https://i.loli.net/2019/07/29/5d3e55d52054637081.gif)\n\n2. 在 Call Stack 中右键某一帧，选择\"BlackBox Script\"\n   ![0](https://i.loli.net/2019/07/29/5d3e55d3bd9da13494.gif)\n\n3. 在设置中的 Blackboxing 面板添加**正则表达式**匹配**文件名**\n\n    ![0](https://i.loli.net/2019/07/29/5d3e55d9e574935159.gif)\n\n## Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有sources面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n## Source Map\n\n-   组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰\n-   Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持\n-   在 Chorme devtools 中，settings -> preferen -> sources 中，选中`Enable Javascript source maps`和`Enable CSS source maps`\n-   source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释`//# sourceMappingURL=/path/to/script.js.map`至生产文件末尾，也可以由服务端在响应头中添加`X-SourceMap: /path/to/script.js.map`，将 map 文件与生产文件对应。[更多关于 source map 的介绍](https://blog.teamtreehouse.com/introduction-source-maps)\n\n![sourceMap.png](https://i.loli.net/2019/04/22/5cbd10f324e07.png)\n\n## Local Overrides\n\n-   用于覆盖网络请求: 在source/page右键save for override或直接edit，保存的文件都被存储到overrides 指定目录(按照域名建立文件夹). 这种改写是临时的\n-   在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。\n-   与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。\n-   只能指定一个目录\n-   断点debug 时，实时修改文件，然后保存后会恢复到第一个断点，不用重新刷新\n\n## Snippets 代码片段\n\n-   在 Sources 面板左侧选择 Snippets，或`crlt shift p`输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似\n-   snippets 中，选中代码并`ctrl enter`，或点击右下角的执行按钮，即可执行代码片段\n\n![snippet.png](https://i.loli.net/2019/04/22/5cbd147145955.png)\n\n## Content scripts\n\n-   这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同\n-   插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。\n-   Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。\n-   如果有浏览器插件相关的工作，可以更深入[研究](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions)，不赘述。\n","source":"_posts/devtools_04_sources.md","raw":"---\ntitle: Devtools 老司机养成 - 第四篇Sources源文件面板\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2020-03-15\ndescription: chrome重要的sources面板，可以做IDE？文件变更，覆盖调试...\ntoc: 1\ntop: 0\n---\n\n## 概览\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n![0](https://i.loli.net/2019/07/29/5d3e54ad6595d17473.png)\n\n## 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54bc1e26c94874.gif)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54c7ee26f77001.gif)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54d8de3ba68180.png)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](https://i.loli.net/2019/07/29/5d3e54d8f005d73515.png)\n6. Exception 异常断点\n\n    ![0](https://i.loli.net/2019/07/29/5d3e54d90b04490413.gif)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](https://i.loli.net/2019/07/29/5d3e54db0062099787.gif)\n\n## Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](https://i.loli.net/2019/07/29/5d3e556a3d2ff51804.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](https://i.loli.net/2019/07/29/5d3e5579edff848268.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](https://i.loli.net/2019/07/29/5d3e558950aa668631.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](https://i.loli.net/2019/07/29/5d3e55951dbb174461.gif)\n\n-   Continue to here：继续执行至此行\n\n![0](https://i.loli.net/2019/07/29/5d3e55b1cbe1030881.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](https://i.loli.net/2019/07/29/5d3e55be02afb66581.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n## Devtools Nodejs debug\n\n-   node 执行 js 文件，文件名前加--inspect 标志，启用浏览器 nodejs 调试\n\n![nodeDebug.png](https://i.loli.net/2019/04/22/5cbd33c700aed.png)\n\n-   点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试\n-   [更多相关](https://nodejs.org/en/docs/guides/debugging-getting-started/)\n\n## BlackBox\n\n-   BlackBox 的用途：\n\n    “BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数\n\n    ```\n    function animate() {\n    prepare();\n    lib.doFancyStuff(); // A\n    render();\n    }\n    ```\n\n    例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数\n\n    如果我确认该第三方库没有 bug\n\n    就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行\n\n-   三种添加 BlackBox 的方法：\n\n1. 在源代码窗格右键，选择\"BlackBox Script\"\n   ![0](https://i.loli.net/2019/07/29/5d3e55d52054637081.gif)\n\n2. 在 Call Stack 中右键某一帧，选择\"BlackBox Script\"\n   ![0](https://i.loli.net/2019/07/29/5d3e55d3bd9da13494.gif)\n\n3. 在设置中的 Blackboxing 面板添加**正则表达式**匹配**文件名**\n\n    ![0](https://i.loli.net/2019/07/29/5d3e55d9e574935159.gif)\n\n## Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有sources面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n## Source Map\n\n-   组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰\n-   Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持\n-   在 Chorme devtools 中，settings -> preferen -> sources 中，选中`Enable Javascript source maps`和`Enable CSS source maps`\n-   source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释`//# sourceMappingURL=/path/to/script.js.map`至生产文件末尾，也可以由服务端在响应头中添加`X-SourceMap: /path/to/script.js.map`，将 map 文件与生产文件对应。[更多关于 source map 的介绍](https://blog.teamtreehouse.com/introduction-source-maps)\n\n![sourceMap.png](https://i.loli.net/2019/04/22/5cbd10f324e07.png)\n\n## Local Overrides\n\n-   用于覆盖网络请求: 在source/page右键save for override或直接edit，保存的文件都被存储到overrides 指定目录(按照域名建立文件夹). 这种改写是临时的\n-   在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。\n-   与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。\n-   只能指定一个目录\n-   断点debug 时，实时修改文件，然后保存后会恢复到第一个断点，不用重新刷新\n\n## Snippets 代码片段\n\n-   在 Sources 面板左侧选择 Snippets，或`crlt shift p`输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似\n-   snippets 中，选中代码并`ctrl enter`，或点击右下角的执行按钮，即可执行代码片段\n\n![snippet.png](https://i.loli.net/2019/04/22/5cbd147145955.png)\n\n## Content scripts\n\n-   这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同\n-   插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。\n-   Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。\n-   如果有浏览器插件相关的工作，可以更深入[研究](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions)，不赘述。\n","slug":"devtools_04_sources","published":1,"updated":"2020-09-03T07:01:27.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88jbi004xc8y624f5cuoh","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e54ad6595d17473.png\" alt=\"0\"></p>\n<h2 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h2><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54bc1e26c94874.gif\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54c7ee26f77001.gif\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d8de3ba68180.png\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d8f005d73515.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d90b04490413.gif\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54db0062099787.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h2 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h2><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e556a3d2ff51804.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e5579edff848268.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e558950aa668631.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55951dbb174461.gif\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55b1cbe1030881.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55be02afb66581.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h2 id=\"Devtools-Nodejs-debug\"><a href=\"#Devtools-Nodejs-debug\" class=\"headerlink\" title=\"Devtools Nodejs debug\"></a>Devtools Nodejs debug</h2><ul>\n<li>node 执行 js 文件，文件名前加–inspect 标志，启用浏览器 nodejs 调试</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd33c700aed.png\" alt=\"nodeDebug.png\"></p>\n<ul>\n<li>点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试</li>\n<li><a href=\"https://nodejs.org/en/docs/guides/debugging-getting-started/\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n<h2 id=\"BlackBox\"><a href=\"#BlackBox\" class=\"headerlink\" title=\"BlackBox\"></a>BlackBox</h2><ul>\n<li><p>BlackBox 的用途：</p>\n<p>“BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function animate() &#123;</span><br><span class=\"line\">prepare();</span><br><span class=\"line\">lib.doFancyStuff(); // A</span><br><span class=\"line\">render();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数</p>\n<p>如果我确认该第三方库没有 bug</p>\n<p>就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行</p>\n</li>\n<li><p>三种添加 BlackBox 的方法：</p>\n</li>\n</ul>\n<ol>\n<li><p>在源代码窗格右键，选择”BlackBox Script”<br><img src=\"https://i.loli.net/2019/07/29/5d3e55d52054637081.gif\" alt=\"0\"></p>\n</li>\n<li><p>在 Call Stack 中右键某一帧，选择”BlackBox Script”<br><img src=\"https://i.loli.net/2019/07/29/5d3e55d3bd9da13494.gif\" alt=\"0\"></p>\n</li>\n<li><p>在设置中的 Blackboxing 面板添加<strong>正则表达式</strong>匹配<strong>文件名</strong></p>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e55d9e574935159.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h2 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h2><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有sources面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h2 id=\"Source-Map\"><a href=\"#Source-Map\" class=\"headerlink\" title=\"Source Map\"></a>Source Map</h2><ul>\n<li>组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰</li>\n<li>Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持</li>\n<li>在 Chorme devtools 中，settings -&gt; preferen -&gt; sources 中，选中<code>Enable Javascript source maps</code>和<code>Enable CSS source maps</code></li>\n<li>source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释<code>//# sourceMappingURL=/path/to/script.js.map</code>至生产文件末尾，也可以由服务端在响应头中添加<code>X-SourceMap: /path/to/script.js.map</code>，将 map 文件与生产文件对应。<a href=\"https://blog.teamtreehouse.com/introduction-source-maps\" target=\"_blank\" rel=\"noopener\">更多关于 source map 的介绍</a></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd10f324e07.png\" alt=\"sourceMap.png\"></p>\n<h2 id=\"Local-Overrides\"><a href=\"#Local-Overrides\" class=\"headerlink\" title=\"Local Overrides\"></a>Local Overrides</h2><ul>\n<li>用于覆盖网络请求: 在source/page右键save for override或直接edit，保存的文件都被存储到overrides 指定目录(按照域名建立文件夹). 这种改写是临时的</li>\n<li>在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。</li>\n<li>与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。</li>\n<li>只能指定一个目录</li>\n<li>断点debug 时，实时修改文件，然后保存后会恢复到第一个断点，不用重新刷新</li>\n</ul>\n<h2 id=\"Snippets-代码片段\"><a href=\"#Snippets-代码片段\" class=\"headerlink\" title=\"Snippets 代码片段\"></a>Snippets 代码片段</h2><ul>\n<li>在 Sources 面板左侧选择 Snippets，或<code>crlt shift p</code>输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似</li>\n<li>snippets 中，选中代码并<code>ctrl enter</code>，或点击右下角的执行按钮，即可执行代码片段</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd147145955.png\" alt=\"snippet.png\"></p>\n<h2 id=\"Content-scripts\"><a href=\"#Content-scripts\" class=\"headerlink\" title=\"Content scripts\"></a>Content scripts</h2><ul>\n<li>这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同</li>\n<li>插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。</li>\n<li>Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。</li>\n<li>如果有浏览器插件相关的工作，可以更深入<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions\" target=\"_blank\" rel=\"noopener\">研究</a>，不赘述。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e54ad6595d17473.png\" alt=\"0\"></p>\n<h2 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h2><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54bc1e26c94874.gif\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54c7ee26f77001.gif\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d8de3ba68180.png\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d8f005d73515.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54d90b04490413.gif\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e54db0062099787.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h2 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h2><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e556a3d2ff51804.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e5579edff848268.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e558950aa668631.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55951dbb174461.gif\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55b1cbe1030881.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/07/29/5d3e55be02afb66581.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h2 id=\"Devtools-Nodejs-debug\"><a href=\"#Devtools-Nodejs-debug\" class=\"headerlink\" title=\"Devtools Nodejs debug\"></a>Devtools Nodejs debug</h2><ul>\n<li>node 执行 js 文件，文件名前加–inspect 标志，启用浏览器 nodejs 调试</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd33c700aed.png\" alt=\"nodeDebug.png\"></p>\n<ul>\n<li>点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试</li>\n<li><a href=\"https://nodejs.org/en/docs/guides/debugging-getting-started/\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n<h2 id=\"BlackBox\"><a href=\"#BlackBox\" class=\"headerlink\" title=\"BlackBox\"></a>BlackBox</h2><ul>\n<li><p>BlackBox 的用途：</p>\n<p>“BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function animate() &#123;</span><br><span class=\"line\">prepare();</span><br><span class=\"line\">lib.doFancyStuff(); // A</span><br><span class=\"line\">render();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数</p>\n<p>如果我确认该第三方库没有 bug</p>\n<p>就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行</p>\n</li>\n<li><p>三种添加 BlackBox 的方法：</p>\n</li>\n</ul>\n<ol>\n<li><p>在源代码窗格右键，选择”BlackBox Script”<br><img src=\"https://i.loli.net/2019/07/29/5d3e55d52054637081.gif\" alt=\"0\"></p>\n</li>\n<li><p>在 Call Stack 中右键某一帧，选择”BlackBox Script”<br><img src=\"https://i.loli.net/2019/07/29/5d3e55d3bd9da13494.gif\" alt=\"0\"></p>\n</li>\n<li><p>在设置中的 Blackboxing 面板添加<strong>正则表达式</strong>匹配<strong>文件名</strong></p>\n<p> <img src=\"https://i.loli.net/2019/07/29/5d3e55d9e574935159.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h2 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h2><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有sources面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h2 id=\"Source-Map\"><a href=\"#Source-Map\" class=\"headerlink\" title=\"Source Map\"></a>Source Map</h2><ul>\n<li>组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰</li>\n<li>Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持</li>\n<li>在 Chorme devtools 中，settings -&gt; preferen -&gt; sources 中，选中<code>Enable Javascript source maps</code>和<code>Enable CSS source maps</code></li>\n<li>source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释<code>//# sourceMappingURL=/path/to/script.js.map</code>至生产文件末尾，也可以由服务端在响应头中添加<code>X-SourceMap: /path/to/script.js.map</code>，将 map 文件与生产文件对应。<a href=\"https://blog.teamtreehouse.com/introduction-source-maps\" target=\"_blank\" rel=\"noopener\">更多关于 source map 的介绍</a></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd10f324e07.png\" alt=\"sourceMap.png\"></p>\n<h2 id=\"Local-Overrides\"><a href=\"#Local-Overrides\" class=\"headerlink\" title=\"Local Overrides\"></a>Local Overrides</h2><ul>\n<li>用于覆盖网络请求: 在source/page右键save for override或直接edit，保存的文件都被存储到overrides 指定目录(按照域名建立文件夹). 这种改写是临时的</li>\n<li>在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。</li>\n<li>与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。</li>\n<li>只能指定一个目录</li>\n<li>断点debug 时，实时修改文件，然后保存后会恢复到第一个断点，不用重新刷新</li>\n</ul>\n<h2 id=\"Snippets-代码片段\"><a href=\"#Snippets-代码片段\" class=\"headerlink\" title=\"Snippets 代码片段\"></a>Snippets 代码片段</h2><ul>\n<li>在 Sources 面板左侧选择 Snippets，或<code>crlt shift p</code>输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似</li>\n<li>snippets 中，选中代码并<code>ctrl enter</code>，或点击右下角的执行按钮，即可执行代码片段</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd147145955.png\" alt=\"snippet.png\"></p>\n<h2 id=\"Content-scripts\"><a href=\"#Content-scripts\" class=\"headerlink\" title=\"Content scripts\"></a>Content scripts</h2><ul>\n<li>这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同</li>\n<li>插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。</li>\n<li>Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。</li>\n<li>如果有浏览器插件相关的工作，可以更深入<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions\" target=\"_blank\" rel=\"noopener\">研究</a>，不赘述。</li>\n</ul>\n"},{"title":"Devtools 老司机养成 - 第五篇- Network 面板","date":"2020-03-21T16:00:00.000Z","description":"chrome最重要之二的Network面板，给后端小哥甩锅？实锤都在这里...","toc":1,"top":0,"_content":"\n## 概览\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n## 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n## 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n## 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   讲请求复制为 Fetch 代码 -> `Copy As Fetch`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n## Websocket\n\n-   在 network 的 filter 条件后，选择`ws`类型的请求，即可看到所有 Websocket 请求\n-   在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息\n\n![networkWebsocket.png](https://i.loli.net/2019/04/22/5cbdbe96a4597.png)\n\n## Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n## 相关附注\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n### data URLs\n\n-   即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，[更多相关](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n","source":"_posts/devtools_05_network.md","raw":"---\ntitle: Devtools 老司机养成 - 第五篇- Network 面板\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2020-03-22\ndescription: chrome最重要之二的Network面板，给后端小哥甩锅？实锤都在这里...\ntoc: 1\ntop: 0\n---\n\n## 概览\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n## 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n## 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n## 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   讲请求复制为 Fetch 代码 -> `Copy As Fetch`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n## Websocket\n\n-   在 network 的 filter 条件后，选择`ws`类型的请求，即可看到所有 Websocket 请求\n-   在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息\n\n![networkWebsocket.png](https://i.loli.net/2019/04/22/5cbdbe96a4597.png)\n\n## Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n## 相关附注\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n### data URLs\n\n-   即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，[更多相关](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n","slug":"devtools_05_network","published":1,"updated":"2020-09-03T07:01:27.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88jbk0050c8y66ncem4pl","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h2 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h2><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h2 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h2><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h2 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h2><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>讲请求复制为 Fetch 代码 -&gt; <code>Copy As Fetch</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h2 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h2><ul>\n<li>在 network 的 filter 条件后，选择<code>ws</code>类型的请求，即可看到所有 Websocket 请求</li>\n<li>在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbdbe96a4597.png\" alt=\"networkWebsocket.png\"></p>\n<h2 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h2 id=\"相关附注\"><a href=\"#相关附注\" class=\"headerlink\" title=\"相关附注\"></a>相关附注</h2><h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h3 id=\"data-URLs\"><a href=\"#data-URLs\" class=\"headerlink\" title=\"data URLs\"></a>data URLs</h3><ul>\n<li>即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h2 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h2><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h2 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h2><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h2 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h2><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>讲请求复制为 Fetch 代码 -&gt; <code>Copy As Fetch</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h2 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h2><ul>\n<li>在 network 的 filter 条件后，选择<code>ws</code>类型的请求，即可看到所有 Websocket 请求</li>\n<li>在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbdbe96a4597.png\" alt=\"networkWebsocket.png\"></p>\n<h2 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h2 id=\"相关附注\"><a href=\"#相关附注\" class=\"headerlink\" title=\"相关附注\"></a>相关附注</h2><h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h3 id=\"data-URLs\"><a href=\"#data-URLs\" class=\"headerlink\" title=\"data URLs\"></a>data URLs</h3><ul>\n<li>即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n"},{"title":"《非暴力沟通》：有些话真的可以好好说","date":"2020-06-13T16:00:00.000Z","description":"当我们褪去隐蔽的精神暴力，爱将自然流露。","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133046.png","_content":"\n\n![思维导图](/images/nvc/nvc-map.png)\n\n## 前言\n\n当有人批评指责你的时候，你的愤怒和失望会让你作出什么反应？\n\n你是否会以同样的方法去报复？\n\n还是干脆置之不理，实施冷暴力？\n\n有时候，你是否很想与家人、朋友、爱人进行友爱的沟通，和同事进行高效的沟通，却以矛盾、吵架和不愉快收场？\n\n当你看见别人的恶行、听见别人的恶语、在网络上遇到扛精喷子的时候，\n\n你是不是很想重拳出击，指责、批评、贬低、嘲讽、惩罚他？\n\n上面列举的这些沟通问题都可以归类到 **暴力沟通** 的范畴。\n\n**暴力沟通** 困扰着我们生活的方方面面，对我们造成精神伤害，蒙蔽了我们的爱和情感。\n\n如果你也被类似的沟通问题所困扰，那么《非暴力沟通》这本书能启发你，如何通过 **好好说话**，来解决这些问题～\n\n## 简介\n\n今天分享的《非暴力沟通》这本书，于2018年，由华夏出版社出版，作者是美国的 马歇尔·卢森堡 博士，豆瓣评分: 8.8。\n\n### 非暴力的表达+聆听\n\n这本书指导我们转变谈话和聆听的方式。\n\n让我们不再条件反射式的反应，而是去了解自己的观察、感受和需求，有意识地使用语言。\n\n使我们既诚实清晰地表达自己，又尊重与倾听他人。\n\n### 非暴力沟通的4要素\n\n非暴力沟通模式下，我们需要关注4个要素：观察、感受、需求、请求。\n\n- 第1是表达我们此刻观察到什么，说出人们所做的事情，清楚表达观察的客观结果，而不是去主观判断或者评价。\n- 第2是了解和体会感受，比如受伤害怕喜悦开心气愤等等\n- 第3，我们需要去弄清楚，是哪些需求导致了我们这样的感受。\n\n举一个常见的例子来说：一位母亲可能对他处于青春期的儿子说\n\n> 我看到桌子下面有两只脏袜子，\n> 我不太高兴，\n> 因为我比较看重整洁\n\n- 接着她可以立即提出非暴力沟通的第4个要素，也就是具体的请求。\n\n她会说\n> 你是否愿意将袜子拿到房间或者放进洗衣机\n\n这一要素，要明确的告知他人，我们期待他采取哪种行动来满足我们的需求。\n\n这样这位母亲就清楚的说出了非暴力沟通的4个要素，借助这4个要素，诚实高效地表达了自己。\n\n下面我们将这4个要素拆分开来看，逐一分析，如何将这4个要素做好。\n\n## 01 观察和评论\n\n非暴力沟通的第1个要素是 **描述观察**。\n\n它强调的是我们要如实的表达出观察的客观结果，而不是我们的主观评价。\n\n举几个主观评价的例子：\n> 哥哥昨天无缘无故的对我发脾气\n> 我男朋友是一个没有主见的人\n> 我女朋友是一个很霸道的人\n\n其实以上这三个例子，在我们以往的沟通中十分常见。\n\n我们常常通过单一的行为去给一个人贴标签，\n\n我们通过静态的语言去定性变化不断的现实。\n\n印度哲学家`克里希那穆提`曾经说：\n\n> 不带评论的观察是人类智力的最高形式\n\n对于大多数人来说，观察他人及其行为，而不去评判指责，或以其他方式进行分析，是难以做到的。\n\n将客观的观察和主观的评价混淆，往往会在沟通中造成误解，让人产生逆反心理。\n\n想要更合理的表达出我们的观察，而不是评论，可以通过以下几点去改善。\n\n- 我们应该去关注有事实依据的具体行为\n- 而不是我们的愿望情感推测\n- 不应该把形容词和副词当作观察结果\n- 应该更少的使用“总是，从不，每次”这种言过其实的夸张词汇\n\n附上一张书中的对比表格：\n\n![观察和评价](/images/nvc/nvc2.jpg)\n\n## 02 体会和表达感受\n\n非暴力沟通的第2个要素是 **表达感受**。\n\n当我们的需求得到满足时，我们的感受可能会有：兴奋，喜悦，甜蜜，开心，振奋等等。\n\n当我们的需求没有得到满足的时候，我们的感受可能是：害怕，担心，焦虑，忧虑，着急，绝望，失望，不满，尴尬，遗憾等等。\n\n附上一张书中的感受词汇表：\n\n![感受词汇表](/images/nvc/nvc3.jpg)\n\n在往常的人际交往沟通中，我们往往不愿意表达自己的感受。\n\n因为社会文化并不鼓励我们表达个人需求。\n\n我们从小到大的教育，使我们习惯于考虑：人们期待我怎么做，而不是倾听自己的内心。\n\n但是积极的表达自己的感受，可以使别人更好的了解我们的需求，更容易得到积极的回应。\n\n## 03 挖掘感受背后的需求\n\n非暴力沟通的第3个要素是 **表达需求**。\n\n在分析非暴力沟通第2个要素的时候，我们强调，我们的喜悦或者失望的感受，都来源于 **我们的需求是否得到满足**。\n\n这一点其实至关重要，我们通常会错误的认为自己的感受是由他人的行为引起的。\n\n举一个简单的例子。\n\n我有一个闺蜜冬梅，有一次情人节，她男朋友因为加班没有陪她。\n\n如果冬梅跟她男朋友说\n\n> 你昨天没陪我，令我很失望\n\n那么她就是认为：**她的感受是由别人的行为引起的**。\n\n如果他跟她的男朋友说\n\n> 你昨天没陪我，我很失望，因为我需要你的陪伴\n\n那么此时冬梅能够清楚地了解到：**自己感到失望，是因为她的需求没有得到满足**。\n\n如果我们认为自己的感受是他人的行为引起的，那么我们更倾向于指责别人\n\n我们想利用他人的内疚来达到我们的需求，把自己不愉快的感受归咎于对方。\n\n如果我们通过批评来提出主张，人们的反应通常都是反驳和申辩。\n\n反之，如果我们直接说出需求，对方就更有可能做出积极的回应。\n\n但不幸的是大多数人并不习惯于从需求的角度来考虑问题，在不顺心的时候，我们倾向于考虑别人有什么错。\n\n在沟通中，如果双方都习惯于指责对方，这样的沟通往往都不会得到好的结果，伤害彼此的情感。\n\n因此从我们的感受，去发掘我们的个人需求，而不是下意识指责他人，是十分重要的。\n\n## 04 发出请求\n\n在我们清楚地表达观察感受和需求之后，对方往往会做出积极的回应。\n\n如果对方没有对我们的需求所处反应，那么我们可以提出请求。\n\n这也就是非暴力沟通的第4个要素。\n\n在提出请求时，我们应该提出更加具体可行的请求。\n\n举一个例子来说\n\n> 我希望你尊重我的个人隐私\n> 我希望你进我房间之前敲门\n\n这两种表达，后者是非暴力沟通所倡导的，具体的请求。\n\n另外，区分请求和命令也很重要：\n\n请求没有得到满足时，如果提出请求的人批评和指责对方，那么这就是命令。他想利用对方的内疚来达到目的。\n\n如果别人拒绝了你的需求，那么你也可以通过更深的沟通，去了解别人拒绝你请求的意图，和隐藏在背后的需求。\n\n## 需求驱动\n\n在有些场景下，书中的固定模式应用起来也许不太合适，\n\n但是，只要掌握了非暴力沟通的 **核心思想** ，都能达成非暴力沟通。\n\n那就是 **以需求为驱动** 。\n\n无论是怎样的沟通场景，\n\n无论你是表达的一方，还是聆听的一方，\n\n不要急于表达和作出反应，先去 **观察** 和 **感受** ，去发觉彼此的需求，\n\n当你透过语言，洞察到了别人的需求，你会用全新的眼光，去看待我们的人际关系，让自己和家人、朋友、同事、爱人，都拥有更好的交际体验。\n\n当你透过情绪和感受，洞察到了自己的需求，你能够用更高效更友善的方式，去达到自己的需求，令自己更舒适，令你的生活更有乐趣和爱意。\n\n## 好好说话的力量\n\n通过这本书，我感受到了好好说话的非凡力量\n\n非暴力沟通这种充满善意和爱的沟通方式。\n\n能使我们脱离情绪的控制，更好的了解自我，与自我建立和谐的关系。\n\n使我们拥有更清晰的沟通思路，更高效的掌握沟通信息，达成沟通目的，\n\n同时，还拥有更好的沟通体验。\n\n让我们能更加舒适、更加专注的去追求人生的方向。\n\n## 反思\n\n读完这本书，可以发现，非暴力沟通的实践和应用，不是一朝一夕能达成的。\n\n我分享的只言片语，也并不能传达全书的信息。\n\n因此这本书，值得你反复阅读、思考，并亲身实践。\n\n附上书中的一首诗歌：\n\n\n![语言是窗户，否则它们是墙](/images/nvc/nvc.jpg)","source":"_posts/nonviolent_communication.md","raw":"---\ntitle: 《非暴力沟通》：有些话真的可以好好说\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2020-06-14\ndescription: 当我们褪去隐蔽的精神暴力，爱将自然流露。\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133046.png\n---\n\n\n![思维导图](/images/nvc/nvc-map.png)\n\n## 前言\n\n当有人批评指责你的时候，你的愤怒和失望会让你作出什么反应？\n\n你是否会以同样的方法去报复？\n\n还是干脆置之不理，实施冷暴力？\n\n有时候，你是否很想与家人、朋友、爱人进行友爱的沟通，和同事进行高效的沟通，却以矛盾、吵架和不愉快收场？\n\n当你看见别人的恶行、听见别人的恶语、在网络上遇到扛精喷子的时候，\n\n你是不是很想重拳出击，指责、批评、贬低、嘲讽、惩罚他？\n\n上面列举的这些沟通问题都可以归类到 **暴力沟通** 的范畴。\n\n**暴力沟通** 困扰着我们生活的方方面面，对我们造成精神伤害，蒙蔽了我们的爱和情感。\n\n如果你也被类似的沟通问题所困扰，那么《非暴力沟通》这本书能启发你，如何通过 **好好说话**，来解决这些问题～\n\n## 简介\n\n今天分享的《非暴力沟通》这本书，于2018年，由华夏出版社出版，作者是美国的 马歇尔·卢森堡 博士，豆瓣评分: 8.8。\n\n### 非暴力的表达+聆听\n\n这本书指导我们转变谈话和聆听的方式。\n\n让我们不再条件反射式的反应，而是去了解自己的观察、感受和需求，有意识地使用语言。\n\n使我们既诚实清晰地表达自己，又尊重与倾听他人。\n\n### 非暴力沟通的4要素\n\n非暴力沟通模式下，我们需要关注4个要素：观察、感受、需求、请求。\n\n- 第1是表达我们此刻观察到什么，说出人们所做的事情，清楚表达观察的客观结果，而不是去主观判断或者评价。\n- 第2是了解和体会感受，比如受伤害怕喜悦开心气愤等等\n- 第3，我们需要去弄清楚，是哪些需求导致了我们这样的感受。\n\n举一个常见的例子来说：一位母亲可能对他处于青春期的儿子说\n\n> 我看到桌子下面有两只脏袜子，\n> 我不太高兴，\n> 因为我比较看重整洁\n\n- 接着她可以立即提出非暴力沟通的第4个要素，也就是具体的请求。\n\n她会说\n> 你是否愿意将袜子拿到房间或者放进洗衣机\n\n这一要素，要明确的告知他人，我们期待他采取哪种行动来满足我们的需求。\n\n这样这位母亲就清楚的说出了非暴力沟通的4个要素，借助这4个要素，诚实高效地表达了自己。\n\n下面我们将这4个要素拆分开来看，逐一分析，如何将这4个要素做好。\n\n## 01 观察和评论\n\n非暴力沟通的第1个要素是 **描述观察**。\n\n它强调的是我们要如实的表达出观察的客观结果，而不是我们的主观评价。\n\n举几个主观评价的例子：\n> 哥哥昨天无缘无故的对我发脾气\n> 我男朋友是一个没有主见的人\n> 我女朋友是一个很霸道的人\n\n其实以上这三个例子，在我们以往的沟通中十分常见。\n\n我们常常通过单一的行为去给一个人贴标签，\n\n我们通过静态的语言去定性变化不断的现实。\n\n印度哲学家`克里希那穆提`曾经说：\n\n> 不带评论的观察是人类智力的最高形式\n\n对于大多数人来说，观察他人及其行为，而不去评判指责，或以其他方式进行分析，是难以做到的。\n\n将客观的观察和主观的评价混淆，往往会在沟通中造成误解，让人产生逆反心理。\n\n想要更合理的表达出我们的观察，而不是评论，可以通过以下几点去改善。\n\n- 我们应该去关注有事实依据的具体行为\n- 而不是我们的愿望情感推测\n- 不应该把形容词和副词当作观察结果\n- 应该更少的使用“总是，从不，每次”这种言过其实的夸张词汇\n\n附上一张书中的对比表格：\n\n![观察和评价](/images/nvc/nvc2.jpg)\n\n## 02 体会和表达感受\n\n非暴力沟通的第2个要素是 **表达感受**。\n\n当我们的需求得到满足时，我们的感受可能会有：兴奋，喜悦，甜蜜，开心，振奋等等。\n\n当我们的需求没有得到满足的时候，我们的感受可能是：害怕，担心，焦虑，忧虑，着急，绝望，失望，不满，尴尬，遗憾等等。\n\n附上一张书中的感受词汇表：\n\n![感受词汇表](/images/nvc/nvc3.jpg)\n\n在往常的人际交往沟通中，我们往往不愿意表达自己的感受。\n\n因为社会文化并不鼓励我们表达个人需求。\n\n我们从小到大的教育，使我们习惯于考虑：人们期待我怎么做，而不是倾听自己的内心。\n\n但是积极的表达自己的感受，可以使别人更好的了解我们的需求，更容易得到积极的回应。\n\n## 03 挖掘感受背后的需求\n\n非暴力沟通的第3个要素是 **表达需求**。\n\n在分析非暴力沟通第2个要素的时候，我们强调，我们的喜悦或者失望的感受，都来源于 **我们的需求是否得到满足**。\n\n这一点其实至关重要，我们通常会错误的认为自己的感受是由他人的行为引起的。\n\n举一个简单的例子。\n\n我有一个闺蜜冬梅，有一次情人节，她男朋友因为加班没有陪她。\n\n如果冬梅跟她男朋友说\n\n> 你昨天没陪我，令我很失望\n\n那么她就是认为：**她的感受是由别人的行为引起的**。\n\n如果他跟她的男朋友说\n\n> 你昨天没陪我，我很失望，因为我需要你的陪伴\n\n那么此时冬梅能够清楚地了解到：**自己感到失望，是因为她的需求没有得到满足**。\n\n如果我们认为自己的感受是他人的行为引起的，那么我们更倾向于指责别人\n\n我们想利用他人的内疚来达到我们的需求，把自己不愉快的感受归咎于对方。\n\n如果我们通过批评来提出主张，人们的反应通常都是反驳和申辩。\n\n反之，如果我们直接说出需求，对方就更有可能做出积极的回应。\n\n但不幸的是大多数人并不习惯于从需求的角度来考虑问题，在不顺心的时候，我们倾向于考虑别人有什么错。\n\n在沟通中，如果双方都习惯于指责对方，这样的沟通往往都不会得到好的结果，伤害彼此的情感。\n\n因此从我们的感受，去发掘我们的个人需求，而不是下意识指责他人，是十分重要的。\n\n## 04 发出请求\n\n在我们清楚地表达观察感受和需求之后，对方往往会做出积极的回应。\n\n如果对方没有对我们的需求所处反应，那么我们可以提出请求。\n\n这也就是非暴力沟通的第4个要素。\n\n在提出请求时，我们应该提出更加具体可行的请求。\n\n举一个例子来说\n\n> 我希望你尊重我的个人隐私\n> 我希望你进我房间之前敲门\n\n这两种表达，后者是非暴力沟通所倡导的，具体的请求。\n\n另外，区分请求和命令也很重要：\n\n请求没有得到满足时，如果提出请求的人批评和指责对方，那么这就是命令。他想利用对方的内疚来达到目的。\n\n如果别人拒绝了你的需求，那么你也可以通过更深的沟通，去了解别人拒绝你请求的意图，和隐藏在背后的需求。\n\n## 需求驱动\n\n在有些场景下，书中的固定模式应用起来也许不太合适，\n\n但是，只要掌握了非暴力沟通的 **核心思想** ，都能达成非暴力沟通。\n\n那就是 **以需求为驱动** 。\n\n无论是怎样的沟通场景，\n\n无论你是表达的一方，还是聆听的一方，\n\n不要急于表达和作出反应，先去 **观察** 和 **感受** ，去发觉彼此的需求，\n\n当你透过语言，洞察到了别人的需求，你会用全新的眼光，去看待我们的人际关系，让自己和家人、朋友、同事、爱人，都拥有更好的交际体验。\n\n当你透过情绪和感受，洞察到了自己的需求，你能够用更高效更友善的方式，去达到自己的需求，令自己更舒适，令你的生活更有乐趣和爱意。\n\n## 好好说话的力量\n\n通过这本书，我感受到了好好说话的非凡力量\n\n非暴力沟通这种充满善意和爱的沟通方式。\n\n能使我们脱离情绪的控制，更好的了解自我，与自我建立和谐的关系。\n\n使我们拥有更清晰的沟通思路，更高效的掌握沟通信息，达成沟通目的，\n\n同时，还拥有更好的沟通体验。\n\n让我们能更加舒适、更加专注的去追求人生的方向。\n\n## 反思\n\n读完这本书，可以发现，非暴力沟通的实践和应用，不是一朝一夕能达成的。\n\n我分享的只言片语，也并不能传达全书的信息。\n\n因此这本书，值得你反复阅读、思考，并亲身实践。\n\n附上书中的一首诗歌：\n\n\n![语言是窗户，否则它们是墙](/images/nvc/nvc.jpg)","slug":"nonviolent_communication","published":1,"updated":"2021-04-21T06:53:37.284Z","_id":"ckir88jbm0053c8y68vhcqh1p","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/nvc/nvc-map.png\" alt=\"思维导图\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当有人批评指责你的时候，你的愤怒和失望会让你作出什么反应？</p>\n<p>你是否会以同样的方法去报复？</p>\n<p>还是干脆置之不理，实施冷暴力？</p>\n<p>有时候，你是否很想与家人、朋友、爱人进行友爱的沟通，和同事进行高效的沟通，却以矛盾、吵架和不愉快收场？</p>\n<p>当你看见别人的恶行、听见别人的恶语、在网络上遇到扛精喷子的时候，</p>\n<p>你是不是很想重拳出击，指责、批评、贬低、嘲讽、惩罚他？</p>\n<p>上面列举的这些沟通问题都可以归类到 <strong>暴力沟通</strong> 的范畴。</p>\n<p><strong>暴力沟通</strong> 困扰着我们生活的方方面面，对我们造成精神伤害，蒙蔽了我们的爱和情感。</p>\n<p>如果你也被类似的沟通问题所困扰，那么《非暴力沟通》这本书能启发你，如何通过 <strong>好好说话</strong>，来解决这些问题～</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>今天分享的《非暴力沟通》这本书，于2018年，由华夏出版社出版，作者是美国的 马歇尔·卢森堡 博士，豆瓣评分: 8.8。</p>\n<h3 id=\"非暴力的表达-聆听\"><a href=\"#非暴力的表达-聆听\" class=\"headerlink\" title=\"非暴力的表达+聆听\"></a>非暴力的表达+聆听</h3><p>这本书指导我们转变谈话和聆听的方式。</p>\n<p>让我们不再条件反射式的反应，而是去了解自己的观察、感受和需求，有意识地使用语言。</p>\n<p>使我们既诚实清晰地表达自己，又尊重与倾听他人。</p>\n<h3 id=\"非暴力沟通的4要素\"><a href=\"#非暴力沟通的4要素\" class=\"headerlink\" title=\"非暴力沟通的4要素\"></a>非暴力沟通的4要素</h3><p>非暴力沟通模式下，我们需要关注4个要素：观察、感受、需求、请求。</p>\n<ul>\n<li>第1是表达我们此刻观察到什么，说出人们所做的事情，清楚表达观察的客观结果，而不是去主观判断或者评价。</li>\n<li>第2是了解和体会感受，比如受伤害怕喜悦开心气愤等等</li>\n<li>第3，我们需要去弄清楚，是哪些需求导致了我们这样的感受。</li>\n</ul>\n<p>举一个常见的例子来说：一位母亲可能对他处于青春期的儿子说</p>\n<blockquote>\n<p>我看到桌子下面有两只脏袜子，<br>我不太高兴，<br>因为我比较看重整洁</p>\n</blockquote>\n<ul>\n<li>接着她可以立即提出非暴力沟通的第4个要素，也就是具体的请求。</li>\n</ul>\n<p>她会说</p>\n<blockquote>\n<p>你是否愿意将袜子拿到房间或者放进洗衣机</p>\n</blockquote>\n<p>这一要素，要明确的告知他人，我们期待他采取哪种行动来满足我们的需求。</p>\n<p>这样这位母亲就清楚的说出了非暴力沟通的4个要素，借助这4个要素，诚实高效地表达了自己。</p>\n<p>下面我们将这4个要素拆分开来看，逐一分析，如何将这4个要素做好。</p>\n<h2 id=\"01-观察和评论\"><a href=\"#01-观察和评论\" class=\"headerlink\" title=\"01 观察和评论\"></a>01 观察和评论</h2><p>非暴力沟通的第1个要素是 <strong>描述观察</strong>。</p>\n<p>它强调的是我们要如实的表达出观察的客观结果，而不是我们的主观评价。</p>\n<p>举几个主观评价的例子：</p>\n<blockquote>\n<p>哥哥昨天无缘无故的对我发脾气<br>我男朋友是一个没有主见的人<br>我女朋友是一个很霸道的人</p>\n</blockquote>\n<p>其实以上这三个例子，在我们以往的沟通中十分常见。</p>\n<p>我们常常通过单一的行为去给一个人贴标签，</p>\n<p>我们通过静态的语言去定性变化不断的现实。</p>\n<p>印度哲学家<code>克里希那穆提</code>曾经说：</p>\n<blockquote>\n<p>不带评论的观察是人类智力的最高形式</p>\n</blockquote>\n<p>对于大多数人来说，观察他人及其行为，而不去评判指责，或以其他方式进行分析，是难以做到的。</p>\n<p>将客观的观察和主观的评价混淆，往往会在沟通中造成误解，让人产生逆反心理。</p>\n<p>想要更合理的表达出我们的观察，而不是评论，可以通过以下几点去改善。</p>\n<ul>\n<li>我们应该去关注有事实依据的具体行为</li>\n<li>而不是我们的愿望情感推测</li>\n<li>不应该把形容词和副词当作观察结果</li>\n<li>应该更少的使用“总是，从不，每次”这种言过其实的夸张词汇</li>\n</ul>\n<p>附上一张书中的对比表格：</p>\n<p><img src=\"/images/nvc/nvc2.jpg\" alt=\"观察和评价\"></p>\n<h2 id=\"02-体会和表达感受\"><a href=\"#02-体会和表达感受\" class=\"headerlink\" title=\"02 体会和表达感受\"></a>02 体会和表达感受</h2><p>非暴力沟通的第2个要素是 <strong>表达感受</strong>。</p>\n<p>当我们的需求得到满足时，我们的感受可能会有：兴奋，喜悦，甜蜜，开心，振奋等等。</p>\n<p>当我们的需求没有得到满足的时候，我们的感受可能是：害怕，担心，焦虑，忧虑，着急，绝望，失望，不满，尴尬，遗憾等等。</p>\n<p>附上一张书中的感受词汇表：</p>\n<p><img src=\"/images/nvc/nvc3.jpg\" alt=\"感受词汇表\"></p>\n<p>在往常的人际交往沟通中，我们往往不愿意表达自己的感受。</p>\n<p>因为社会文化并不鼓励我们表达个人需求。</p>\n<p>我们从小到大的教育，使我们习惯于考虑：人们期待我怎么做，而不是倾听自己的内心。</p>\n<p>但是积极的表达自己的感受，可以使别人更好的了解我们的需求，更容易得到积极的回应。</p>\n<h2 id=\"03-挖掘感受背后的需求\"><a href=\"#03-挖掘感受背后的需求\" class=\"headerlink\" title=\"03 挖掘感受背后的需求\"></a>03 挖掘感受背后的需求</h2><p>非暴力沟通的第3个要素是 <strong>表达需求</strong>。</p>\n<p>在分析非暴力沟通第2个要素的时候，我们强调，我们的喜悦或者失望的感受，都来源于 <strong>我们的需求是否得到满足</strong>。</p>\n<p>这一点其实至关重要，我们通常会错误的认为自己的感受是由他人的行为引起的。</p>\n<p>举一个简单的例子。</p>\n<p>我有一个闺蜜冬梅，有一次情人节，她男朋友因为加班没有陪她。</p>\n<p>如果冬梅跟她男朋友说</p>\n<blockquote>\n<p>你昨天没陪我，令我很失望</p>\n</blockquote>\n<p>那么她就是认为：<strong>她的感受是由别人的行为引起的</strong>。</p>\n<p>如果他跟她的男朋友说</p>\n<blockquote>\n<p>你昨天没陪我，我很失望，因为我需要你的陪伴</p>\n</blockquote>\n<p>那么此时冬梅能够清楚地了解到：<strong>自己感到失望，是因为她的需求没有得到满足</strong>。</p>\n<p>如果我们认为自己的感受是他人的行为引起的，那么我们更倾向于指责别人</p>\n<p>我们想利用他人的内疚来达到我们的需求，把自己不愉快的感受归咎于对方。</p>\n<p>如果我们通过批评来提出主张，人们的反应通常都是反驳和申辩。</p>\n<p>反之，如果我们直接说出需求，对方就更有可能做出积极的回应。</p>\n<p>但不幸的是大多数人并不习惯于从需求的角度来考虑问题，在不顺心的时候，我们倾向于考虑别人有什么错。</p>\n<p>在沟通中，如果双方都习惯于指责对方，这样的沟通往往都不会得到好的结果，伤害彼此的情感。</p>\n<p>因此从我们的感受，去发掘我们的个人需求，而不是下意识指责他人，是十分重要的。</p>\n<h2 id=\"04-发出请求\"><a href=\"#04-发出请求\" class=\"headerlink\" title=\"04 发出请求\"></a>04 发出请求</h2><p>在我们清楚地表达观察感受和需求之后，对方往往会做出积极的回应。</p>\n<p>如果对方没有对我们的需求所处反应，那么我们可以提出请求。</p>\n<p>这也就是非暴力沟通的第4个要素。</p>\n<p>在提出请求时，我们应该提出更加具体可行的请求。</p>\n<p>举一个例子来说</p>\n<blockquote>\n<p>我希望你尊重我的个人隐私<br>我希望你进我房间之前敲门</p>\n</blockquote>\n<p>这两种表达，后者是非暴力沟通所倡导的，具体的请求。</p>\n<p>另外，区分请求和命令也很重要：</p>\n<p>请求没有得到满足时，如果提出请求的人批评和指责对方，那么这就是命令。他想利用对方的内疚来达到目的。</p>\n<p>如果别人拒绝了你的需求，那么你也可以通过更深的沟通，去了解别人拒绝你请求的意图，和隐藏在背后的需求。</p>\n<h2 id=\"需求驱动\"><a href=\"#需求驱动\" class=\"headerlink\" title=\"需求驱动\"></a>需求驱动</h2><p>在有些场景下，书中的固定模式应用起来也许不太合适，</p>\n<p>但是，只要掌握了非暴力沟通的 <strong>核心思想</strong> ，都能达成非暴力沟通。</p>\n<p>那就是 <strong>以需求为驱动</strong> 。</p>\n<p>无论是怎样的沟通场景，</p>\n<p>无论你是表达的一方，还是聆听的一方，</p>\n<p>不要急于表达和作出反应，先去 <strong>观察</strong> 和 <strong>感受</strong> ，去发觉彼此的需求，</p>\n<p>当你透过语言，洞察到了别人的需求，你会用全新的眼光，去看待我们的人际关系，让自己和家人、朋友、同事、爱人，都拥有更好的交际体验。</p>\n<p>当你透过情绪和感受，洞察到了自己的需求，你能够用更高效更友善的方式，去达到自己的需求，令自己更舒适，令你的生活更有乐趣和爱意。</p>\n<h2 id=\"好好说话的力量\"><a href=\"#好好说话的力量\" class=\"headerlink\" title=\"好好说话的力量\"></a>好好说话的力量</h2><p>通过这本书，我感受到了好好说话的非凡力量</p>\n<p>非暴力沟通这种充满善意和爱的沟通方式。</p>\n<p>能使我们脱离情绪的控制，更好的了解自我，与自我建立和谐的关系。</p>\n<p>使我们拥有更清晰的沟通思路，更高效的掌握沟通信息，达成沟通目的，</p>\n<p>同时，还拥有更好的沟通体验。</p>\n<p>让我们能更加舒适、更加专注的去追求人生的方向。</p>\n<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2><p>读完这本书，可以发现，非暴力沟通的实践和应用，不是一朝一夕能达成的。</p>\n<p>我分享的只言片语，也并不能传达全书的信息。</p>\n<p>因此这本书，值得你反复阅读、思考，并亲身实践。</p>\n<p>附上书中的一首诗歌：</p>\n<p><img src=\"/images/nvc/nvc.jpg\" alt=\"语言是窗户，否则它们是墙\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/nvc/nvc-map.png\" alt=\"思维导图\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当有人批评指责你的时候，你的愤怒和失望会让你作出什么反应？</p>\n<p>你是否会以同样的方法去报复？</p>\n<p>还是干脆置之不理，实施冷暴力？</p>\n<p>有时候，你是否很想与家人、朋友、爱人进行友爱的沟通，和同事进行高效的沟通，却以矛盾、吵架和不愉快收场？</p>\n<p>当你看见别人的恶行、听见别人的恶语、在网络上遇到扛精喷子的时候，</p>\n<p>你是不是很想重拳出击，指责、批评、贬低、嘲讽、惩罚他？</p>\n<p>上面列举的这些沟通问题都可以归类到 <strong>暴力沟通</strong> 的范畴。</p>\n<p><strong>暴力沟通</strong> 困扰着我们生活的方方面面，对我们造成精神伤害，蒙蔽了我们的爱和情感。</p>\n<p>如果你也被类似的沟通问题所困扰，那么《非暴力沟通》这本书能启发你，如何通过 <strong>好好说话</strong>，来解决这些问题～</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>今天分享的《非暴力沟通》这本书，于2018年，由华夏出版社出版，作者是美国的 马歇尔·卢森堡 博士，豆瓣评分: 8.8。</p>\n<h3 id=\"非暴力的表达-聆听\"><a href=\"#非暴力的表达-聆听\" class=\"headerlink\" title=\"非暴力的表达+聆听\"></a>非暴力的表达+聆听</h3><p>这本书指导我们转变谈话和聆听的方式。</p>\n<p>让我们不再条件反射式的反应，而是去了解自己的观察、感受和需求，有意识地使用语言。</p>\n<p>使我们既诚实清晰地表达自己，又尊重与倾听他人。</p>\n<h3 id=\"非暴力沟通的4要素\"><a href=\"#非暴力沟通的4要素\" class=\"headerlink\" title=\"非暴力沟通的4要素\"></a>非暴力沟通的4要素</h3><p>非暴力沟通模式下，我们需要关注4个要素：观察、感受、需求、请求。</p>\n<ul>\n<li>第1是表达我们此刻观察到什么，说出人们所做的事情，清楚表达观察的客观结果，而不是去主观判断或者评价。</li>\n<li>第2是了解和体会感受，比如受伤害怕喜悦开心气愤等等</li>\n<li>第3，我们需要去弄清楚，是哪些需求导致了我们这样的感受。</li>\n</ul>\n<p>举一个常见的例子来说：一位母亲可能对他处于青春期的儿子说</p>\n<blockquote>\n<p>我看到桌子下面有两只脏袜子，<br>我不太高兴，<br>因为我比较看重整洁</p>\n</blockquote>\n<ul>\n<li>接着她可以立即提出非暴力沟通的第4个要素，也就是具体的请求。</li>\n</ul>\n<p>她会说</p>\n<blockquote>\n<p>你是否愿意将袜子拿到房间或者放进洗衣机</p>\n</blockquote>\n<p>这一要素，要明确的告知他人，我们期待他采取哪种行动来满足我们的需求。</p>\n<p>这样这位母亲就清楚的说出了非暴力沟通的4个要素，借助这4个要素，诚实高效地表达了自己。</p>\n<p>下面我们将这4个要素拆分开来看，逐一分析，如何将这4个要素做好。</p>\n<h2 id=\"01-观察和评论\"><a href=\"#01-观察和评论\" class=\"headerlink\" title=\"01 观察和评论\"></a>01 观察和评论</h2><p>非暴力沟通的第1个要素是 <strong>描述观察</strong>。</p>\n<p>它强调的是我们要如实的表达出观察的客观结果，而不是我们的主观评价。</p>\n<p>举几个主观评价的例子：</p>\n<blockquote>\n<p>哥哥昨天无缘无故的对我发脾气<br>我男朋友是一个没有主见的人<br>我女朋友是一个很霸道的人</p>\n</blockquote>\n<p>其实以上这三个例子，在我们以往的沟通中十分常见。</p>\n<p>我们常常通过单一的行为去给一个人贴标签，</p>\n<p>我们通过静态的语言去定性变化不断的现实。</p>\n<p>印度哲学家<code>克里希那穆提</code>曾经说：</p>\n<blockquote>\n<p>不带评论的观察是人类智力的最高形式</p>\n</blockquote>\n<p>对于大多数人来说，观察他人及其行为，而不去评判指责，或以其他方式进行分析，是难以做到的。</p>\n<p>将客观的观察和主观的评价混淆，往往会在沟通中造成误解，让人产生逆反心理。</p>\n<p>想要更合理的表达出我们的观察，而不是评论，可以通过以下几点去改善。</p>\n<ul>\n<li>我们应该去关注有事实依据的具体行为</li>\n<li>而不是我们的愿望情感推测</li>\n<li>不应该把形容词和副词当作观察结果</li>\n<li>应该更少的使用“总是，从不，每次”这种言过其实的夸张词汇</li>\n</ul>\n<p>附上一张书中的对比表格：</p>\n<p><img src=\"/images/nvc/nvc2.jpg\" alt=\"观察和评价\"></p>\n<h2 id=\"02-体会和表达感受\"><a href=\"#02-体会和表达感受\" class=\"headerlink\" title=\"02 体会和表达感受\"></a>02 体会和表达感受</h2><p>非暴力沟通的第2个要素是 <strong>表达感受</strong>。</p>\n<p>当我们的需求得到满足时，我们的感受可能会有：兴奋，喜悦，甜蜜，开心，振奋等等。</p>\n<p>当我们的需求没有得到满足的时候，我们的感受可能是：害怕，担心，焦虑，忧虑，着急，绝望，失望，不满，尴尬，遗憾等等。</p>\n<p>附上一张书中的感受词汇表：</p>\n<p><img src=\"/images/nvc/nvc3.jpg\" alt=\"感受词汇表\"></p>\n<p>在往常的人际交往沟通中，我们往往不愿意表达自己的感受。</p>\n<p>因为社会文化并不鼓励我们表达个人需求。</p>\n<p>我们从小到大的教育，使我们习惯于考虑：人们期待我怎么做，而不是倾听自己的内心。</p>\n<p>但是积极的表达自己的感受，可以使别人更好的了解我们的需求，更容易得到积极的回应。</p>\n<h2 id=\"03-挖掘感受背后的需求\"><a href=\"#03-挖掘感受背后的需求\" class=\"headerlink\" title=\"03 挖掘感受背后的需求\"></a>03 挖掘感受背后的需求</h2><p>非暴力沟通的第3个要素是 <strong>表达需求</strong>。</p>\n<p>在分析非暴力沟通第2个要素的时候，我们强调，我们的喜悦或者失望的感受，都来源于 <strong>我们的需求是否得到满足</strong>。</p>\n<p>这一点其实至关重要，我们通常会错误的认为自己的感受是由他人的行为引起的。</p>\n<p>举一个简单的例子。</p>\n<p>我有一个闺蜜冬梅，有一次情人节，她男朋友因为加班没有陪她。</p>\n<p>如果冬梅跟她男朋友说</p>\n<blockquote>\n<p>你昨天没陪我，令我很失望</p>\n</blockquote>\n<p>那么她就是认为：<strong>她的感受是由别人的行为引起的</strong>。</p>\n<p>如果他跟她的男朋友说</p>\n<blockquote>\n<p>你昨天没陪我，我很失望，因为我需要你的陪伴</p>\n</blockquote>\n<p>那么此时冬梅能够清楚地了解到：<strong>自己感到失望，是因为她的需求没有得到满足</strong>。</p>\n<p>如果我们认为自己的感受是他人的行为引起的，那么我们更倾向于指责别人</p>\n<p>我们想利用他人的内疚来达到我们的需求，把自己不愉快的感受归咎于对方。</p>\n<p>如果我们通过批评来提出主张，人们的反应通常都是反驳和申辩。</p>\n<p>反之，如果我们直接说出需求，对方就更有可能做出积极的回应。</p>\n<p>但不幸的是大多数人并不习惯于从需求的角度来考虑问题，在不顺心的时候，我们倾向于考虑别人有什么错。</p>\n<p>在沟通中，如果双方都习惯于指责对方，这样的沟通往往都不会得到好的结果，伤害彼此的情感。</p>\n<p>因此从我们的感受，去发掘我们的个人需求，而不是下意识指责他人，是十分重要的。</p>\n<h2 id=\"04-发出请求\"><a href=\"#04-发出请求\" class=\"headerlink\" title=\"04 发出请求\"></a>04 发出请求</h2><p>在我们清楚地表达观察感受和需求之后，对方往往会做出积极的回应。</p>\n<p>如果对方没有对我们的需求所处反应，那么我们可以提出请求。</p>\n<p>这也就是非暴力沟通的第4个要素。</p>\n<p>在提出请求时，我们应该提出更加具体可行的请求。</p>\n<p>举一个例子来说</p>\n<blockquote>\n<p>我希望你尊重我的个人隐私<br>我希望你进我房间之前敲门</p>\n</blockquote>\n<p>这两种表达，后者是非暴力沟通所倡导的，具体的请求。</p>\n<p>另外，区分请求和命令也很重要：</p>\n<p>请求没有得到满足时，如果提出请求的人批评和指责对方，那么这就是命令。他想利用对方的内疚来达到目的。</p>\n<p>如果别人拒绝了你的需求，那么你也可以通过更深的沟通，去了解别人拒绝你请求的意图，和隐藏在背后的需求。</p>\n<h2 id=\"需求驱动\"><a href=\"#需求驱动\" class=\"headerlink\" title=\"需求驱动\"></a>需求驱动</h2><p>在有些场景下，书中的固定模式应用起来也许不太合适，</p>\n<p>但是，只要掌握了非暴力沟通的 <strong>核心思想</strong> ，都能达成非暴力沟通。</p>\n<p>那就是 <strong>以需求为驱动</strong> 。</p>\n<p>无论是怎样的沟通场景，</p>\n<p>无论你是表达的一方，还是聆听的一方，</p>\n<p>不要急于表达和作出反应，先去 <strong>观察</strong> 和 <strong>感受</strong> ，去发觉彼此的需求，</p>\n<p>当你透过语言，洞察到了别人的需求，你会用全新的眼光，去看待我们的人际关系，让自己和家人、朋友、同事、爱人，都拥有更好的交际体验。</p>\n<p>当你透过情绪和感受，洞察到了自己的需求，你能够用更高效更友善的方式，去达到自己的需求，令自己更舒适，令你的生活更有乐趣和爱意。</p>\n<h2 id=\"好好说话的力量\"><a href=\"#好好说话的力量\" class=\"headerlink\" title=\"好好说话的力量\"></a>好好说话的力量</h2><p>通过这本书，我感受到了好好说话的非凡力量</p>\n<p>非暴力沟通这种充满善意和爱的沟通方式。</p>\n<p>能使我们脱离情绪的控制，更好的了解自我，与自我建立和谐的关系。</p>\n<p>使我们拥有更清晰的沟通思路，更高效的掌握沟通信息，达成沟通目的，</p>\n<p>同时，还拥有更好的沟通体验。</p>\n<p>让我们能更加舒适、更加专注的去追求人生的方向。</p>\n<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2><p>读完这本书，可以发现，非暴力沟通的实践和应用，不是一朝一夕能达成的。</p>\n<p>我分享的只言片语，也并不能传达全书的信息。</p>\n<p>因此这本书，值得你反复阅读、思考，并亲身实践。</p>\n<p>附上书中的一首诗歌：</p>\n<p><img src=\"/images/nvc/nvc.jpg\" alt=\"语言是窗户，否则它们是墙\"></p>\n"},{"title":"Devtools 老司机养成 - 番外篇 - Devtools中的”VM“","date":"2020-04-05T16:00:00.000Z","description":"为什么经常有脚本的“文件名”是\"[VM](XXXX \"？？","toc":1,"top":0,"_content":"\n## 引言\n\nWhat are those strange and mysterious scripts titled \"[VM](XXXX \" and where do they come from?\n\n## what's vm(xxxx)\n\n[VM](scriptId) has no special meaning. It's a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.\n\n为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中\n","source":"_posts/vm_in_devtools.md","raw":"---\ntitle: Devtools 老司机养成 - 番外篇 - Devtools中的”VM“\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2020-04-06\ndescription: 为什么经常有脚本的“文件名”是\"[VM](XXXX \"？？\ntoc: 1\ntop: 0\n---\n\n## 引言\n\nWhat are those strange and mysterious scripts titled \"[VM](XXXX \" and where do they come from?\n\n## what's vm(xxxx)\n\n[VM](scriptId) has no special meaning. It's a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.\n\n为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中\n","slug":"vm_in_devtools","published":1,"updated":"2020-09-03T07:01:28.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88jbq0055c8y6cupef1xc","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>What are those strange and mysterious scripts titled “[VM](XXXX “ and where do they come from?</p>\n<h2 id=\"what’s-vm-xxxx\"><a href=\"#what’s-vm-xxxx\" class=\"headerlink\" title=\"what’s vm(xxxx)\"></a>what’s vm(xxxx)</h2><p><a href=\"scriptId\">VM</a> has no special meaning. It’s a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.</p>\n<p>为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>What are those strange and mysterious scripts titled “[VM](XXXX “ and where do they come from?</p>\n<h2 id=\"what’s-vm-xxxx\"><a href=\"#what’s-vm-xxxx\" class=\"headerlink\" title=\"what’s vm(xxxx)\"></a>what’s vm(xxxx)</h2><p><a href=\"scriptId\">VM</a> has no special meaning. It’s a dummy name to help us to distinguish code which are not directly tied to a file name, such as code created using eval and friends.</p>\n<p>为了标识不能和具体文件直接关联的脚本的虚拟名称，并不是真正的文件，例如 eval 方法所执行的脚本、匿名函数，脚本会被抛入Chrome调试器虚拟机中</p>\n"},{"title":"【Vue3 E2E测试】Jest + Puppeteer","date":"2020-09-02T16:00:00.000Z","description":"通过Vue3源码中demo的E2E测试用例，了解jest和puppeteer","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211124215.png","status":"Work in Progress","_content":"\n## Work In Progress\n","source":"_posts/vue_e2e.md","raw":"---\ntitle: 【Vue3 E2E测试】Jest + Puppeteer\ncategories:\n    - 10技术 | 前端测试 # 一级分类\ntags:\ndate: 2020-09-03\ndescription: 通过Vue3源码中demo的E2E测试用例，了解jest和puppeteer\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211124215.png\nstatus: Work in Progress\n---\n\n## Work In Progress\n","slug":"vue_e2e","published":1,"updated":"2021-01-22T10:03:45.520Z","_id":"ckir88jbt0058c8y6q2cm44i6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Work-In-Progress\"><a href=\"#Work-In-Progress\" class=\"headerlink\" title=\"Work In Progress\"></a>Work In Progress</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Work-In-Progress\"><a href=\"#Work-In-Progress\" class=\"headerlink\" title=\"Work In Progress\"></a>Work In Progress</h2>"},{"_content":"","source":"_posts/web_fonts.md","raw":"","slug":"web_fonts","published":1,"date":"2020-04-18T00:49:45.088Z","updated":"2021-01-22T10:04:24.192Z","_id":"ckir88jbv005ac8y6rgk469h5","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"【Vu3】响应式原理","date":"2020-07-23T16:00:00.000Z","description":"vue2 & vue3 响应式原理对比，手写mini版vue3响应式代码","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211132831.png","_content":"\n## 关于Vue3\n\n话说，Vue3已经进行到rc4版本了，4月份beta发布的时候前端圈红红火火，不知道大家开始学了没\n\n整理了一些资源，现在开始学习应该还不算晚[狗头]\n\n- [vue-next仓库](https://github.com/vuejs/vue-next)\n- [20200723 Vue3 官方发布的beta文档](https://v3.vuejs.org/)\n- [Vue3 Roadmap & FAQ](https://github.com/vuejs/vue/projects/6)\n- [Vue3仓库已经合并的780多个PR](https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged)\n- [尤大在Vue Mastery的Vue3课：Vue 3 Deep Dive with Evan You](https://www.vuemastery.com/courses/vue3-deep-dive-with-evan-you/vue3-overview)\n- [202007 尤大在前端会客厅节目关于Vue3的访谈](https://www.bilibili.com/video/BV1qC4y18721)\n- [202005 The process: Making Vue 3](https://increment.com/frontend/making-vue-3/)\n- [202004 尤大 - 聊聊 Vue.js 3.0 Beta 官方直播](https://www.bilibili.com/video/BV1Tg4y1z7FH)\n- [2018 VueConf 杭州 尤大关于Vue3的演讲视频](https://www.bilibili.com/video/BV1Et41197L4)\n\n## vue2 响应式原理回顾\n\n- 对象响应化：遍历每个key，通过 `Object.defineProperty` API定义getter，setter\n\n```jsx\n// 伪代码\nfunction observe(){\n\tif(typeof obj !='object' || obj == null){\n\t\treturn\n\t}\n\tif(Array.isArray(obj)){\n\t\tObject.setPrototypeOf(obj,arrayProto)\n\t}else{\n    const keys = Object.keys()\n    for(let i=0;i<keys.length;i++){\n      const key = keys[i]\n      defineReactive(obj,key,obj[key])\n    }\n\t}\n}\nfunction defineReactive(target, key, val){\n  observe(val)\n  Object.defineProperty(obj, key, {\n    get(){\n      // 依赖收集\n      dep.depend()\n      return val\n    },\n    set(newVal){\n      if(newVal !== val){\n        observe(newVal)\n        val = newVal\n        // 通知更新\n        dep.notify()\n      }\n    }\n  })\n}\n```\n\n- 数组响应化：覆盖数组的原型方法，增加通知变更的逻辑\n\n```jsx\n// 伪代码\nconst originalProto = Array.prototype\nconst arrayProto = Object.create(originalProto)\n['push','pop','shift','unshift','splice','reverse','sort'].forEach(key=>{\n\tarrayProto[key] = function(){\n\t\toriginalProto[key].apply(this.arguments)\n\t\tnotifyUpdate()\n\t}\n})\n```\n\n## vue2响应式痛点\n\n- 递归，消耗大\n- 新增/删除属性，需要额外实现单独的API\n- 数组，需要额外实现\n- Map Set Class等数据类型，无法响应式\n- 修改语法有限制\n\n## vue3响应式方案\n\n使用ES6的 **[`Proxy`](https://es6.ruanyifeng.com/#docs/proxy)** 进行数据响应化，解决上述Vue2所有痛点\n\nProxy可以在目标对象上加一层拦截/代理，外界对目标对象的操作，都会经过这层拦截\n\n相比 `Object.defineProperty` ，Proxy支持的对象操作十分全面：get、set、has、deleteProperty、ownKeys、defineProperty......等等\n\n```jsx\n// reactive 伪代码\nfunction reactice(obj){\n  return new Proxy(obj,{\n    get(target, key, receiver){\n      const ret = Reflect.get(target, key, receiver)\n      return isObject(ret) ? reactice(ret) : ret\n    },\n    set(target, key, val, receiver){\n      const ret = Reflect.set(target, key, val, receiver)\n      return ret\n    },\n    deleteProperty(target, key){\n      const ret = Reflect.deleteProperty(target, key)\n      return ret\n    },\n  })\n}\n```\n\n## 响应式原理\n\n![vue3响应式原理图](/images/vue3/reactive.png)\n\n- 通过 **`effect`**  声明依赖响应式数据的函数cb ( 例如视图渲染函数render函数)，并执行cb函数，执行过程中，会触发响应式数据 `getter`\n- 在响应式数据 `getter`中进行 `track`依赖收集：建立 **数据&cb** 的映射关系存储于 `targetMap`\n- 当变更响应式数据时，触发 `trigger` **，**根据 `targetMap` 找到关联的cb执行\n- 映射关系 `targetMap` 结构：\n\n```jsx\ntargetMap: WeakMap{ \n\ttarget:Map{ \n\t\tkey: Set[cb1,cb2...] \n\t}\n}\n```\n\n## 手写vue3响应式\n\n大致结构\n\n```jsx\n// mini-vue3.js\n\n/* 建立响应式数据 */\nfunction reactice(obj){}\n\n/* 声明响应函数cb(依赖响应式数据) */\nfunction effect(cb){}\n\n/* 依赖收集：建立 数据&cb 映射关系 */\nfunction track(target,key){}\n\n/* 触发更新：根据映射关系，执行cb */\nfunction trigger(target,key){}\n```\n\n### reactive\n\n```jsx\n/* 建立响应式数据 */\nfunction reactive(obj){\n  // Proxy:http://es6.ruanyifeng.com/#docs/proxy\n  // Proxy相当于在对象外层加拦截\n  // Proxy递归是惰性的,需要添加递归的逻辑\n  \n  // Reflect:http://es6.ruanyifeng.com/#docs/reflect\n  // Reflect:用于执行对象默认操作，更规范、更友好,可以理解成操作对象的合集\n  // Proxy和Object的方法Reflect都有对应\n  if(!isObject(obj)) return obj\n  const observed = new Proxy(obj,{\n    get(target, key, receiver){\n      const ret = Reflect.get(target, key, receiver)\n      console.log('getter '+ret)\n      // 跟踪 收集依赖\n      track(target, key)\n      return reactive(ret)\n    },\n    set(target, key, val, receiver){\n      const ret = Reflect.set(target, key, val, receiver)\n      console.log('setter '+key+':'+val + '=>' + ret)\n      // 触发更新\n      trigger(target, key)\n      return ret\n    },\n    deleteProperty(target, key){\n      const ret = Reflect.deleteProperty(target, key)\n      console.log('delete '+key+':'+ret)\n      // 触发更新\n      trigger(target, key)\n      return ret\n    },\n  })\n  return observed\n}\n```\n\n### effect\n\n```jsx\n/* 声明响应函数cb */\nconst effectStack = []\nfunction effect(cb){\n\n  // 对函数进行高阶封装\n  const rxEffect = function(){\n    // 1.捕获异常\n    // 2.fn出栈入栈\n    // 3.执行fn\n    try{\n      effectStack.push(rxEffect)\n      return cb()\n    }finally{\n      effectStack.pop()\n    }\n  }\n\n  // 最初要执行一次,进行最初的依赖收集\n  rxEffect()\n\n  return rxEffect\n}\n```\n\n### track\n\n```jsx\n/* 依赖收集：建立 数据&cb 映射关系 */\nconst targetMap = new WeakMap()\nfunction track(target,key){\n  // 存入映射关系\n  const effectFn = effectStack[effectStack.length - 1]  // 拿出栈顶函数\n  if(effectFn){\n    let depsMap = targetMap.get(target)\n    if(!depsMap){\n      depsMap = new Map()\n      targetMap.set(target, depsMap)\n    }\n    let deps = depsMap.get(key)\n    if(!deps){\n      deps = new Set()\n      depsMap.set(key, deps)\n    }\n    deps.add(effectFn)\n  }\n}\n```\n\n### trigger\n\n```jsx\n/* 触发更新：根据映射关系，执行cb */\nfunction trigger(target, key){\n  const depsMap = targetMap.get(target)\n  if(depsMap){\n    const deps = depsMap.get(key)\n    if(deps){\n      deps.forEach(effect=>effect())\n    }\n  }\n}\n```\n\n### 测试demo\n\n```jsx\n<!-- test.html -->\n<div id=\"app\">\n {{msg}}\n</div>\n\n<script src=\"./mini-vue3.js\"></script>\n\n<script>\n  // 定义一个响应式数据\n  const state = reactive({\n    msg:'message'\n  })\n\n  // 定义一个使用到响应式数据的 dom更新函数\n\tfunction updateDom(){\n\t\tdocument.getElementById('app').innerText = state.msg\n\t}\n\n\t// 用effect声明更新函数\n  effect(updateDom)\n\n  // 定时变更响应式数据\n  setInterval(()=>{\n    state.msg = 'message' + Math.random()\n  },1000)\n</script>\n```\n\n效果：\n\n![](/images/vue3/demo.png)\n\n\n如果想获取上述代码，放在了这个[仓库:mini-vue3-reactive](https://github.com/scarsu/mini-vue3-reactive)","source":"_posts/vue3_reactive.md","raw":"---\ntitle: 【Vu3】响应式原理\ncategories:\n    - 10技术 | JavaScript # 一级分类\ntags:\ndate: 2020-07-24\ndescription: vue2 & vue3 响应式原理对比，手写mini版vue3响应式代码\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211132831.png\n---\n\n## 关于Vue3\n\n话说，Vue3已经进行到rc4版本了，4月份beta发布的时候前端圈红红火火，不知道大家开始学了没\n\n整理了一些资源，现在开始学习应该还不算晚[狗头]\n\n- [vue-next仓库](https://github.com/vuejs/vue-next)\n- [20200723 Vue3 官方发布的beta文档](https://v3.vuejs.org/)\n- [Vue3 Roadmap & FAQ](https://github.com/vuejs/vue/projects/6)\n- [Vue3仓库已经合并的780多个PR](https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged)\n- [尤大在Vue Mastery的Vue3课：Vue 3 Deep Dive with Evan You](https://www.vuemastery.com/courses/vue3-deep-dive-with-evan-you/vue3-overview)\n- [202007 尤大在前端会客厅节目关于Vue3的访谈](https://www.bilibili.com/video/BV1qC4y18721)\n- [202005 The process: Making Vue 3](https://increment.com/frontend/making-vue-3/)\n- [202004 尤大 - 聊聊 Vue.js 3.0 Beta 官方直播](https://www.bilibili.com/video/BV1Tg4y1z7FH)\n- [2018 VueConf 杭州 尤大关于Vue3的演讲视频](https://www.bilibili.com/video/BV1Et41197L4)\n\n## vue2 响应式原理回顾\n\n- 对象响应化：遍历每个key，通过 `Object.defineProperty` API定义getter，setter\n\n```jsx\n// 伪代码\nfunction observe(){\n\tif(typeof obj !='object' || obj == null){\n\t\treturn\n\t}\n\tif(Array.isArray(obj)){\n\t\tObject.setPrototypeOf(obj,arrayProto)\n\t}else{\n    const keys = Object.keys()\n    for(let i=0;i<keys.length;i++){\n      const key = keys[i]\n      defineReactive(obj,key,obj[key])\n    }\n\t}\n}\nfunction defineReactive(target, key, val){\n  observe(val)\n  Object.defineProperty(obj, key, {\n    get(){\n      // 依赖收集\n      dep.depend()\n      return val\n    },\n    set(newVal){\n      if(newVal !== val){\n        observe(newVal)\n        val = newVal\n        // 通知更新\n        dep.notify()\n      }\n    }\n  })\n}\n```\n\n- 数组响应化：覆盖数组的原型方法，增加通知变更的逻辑\n\n```jsx\n// 伪代码\nconst originalProto = Array.prototype\nconst arrayProto = Object.create(originalProto)\n['push','pop','shift','unshift','splice','reverse','sort'].forEach(key=>{\n\tarrayProto[key] = function(){\n\t\toriginalProto[key].apply(this.arguments)\n\t\tnotifyUpdate()\n\t}\n})\n```\n\n## vue2响应式痛点\n\n- 递归，消耗大\n- 新增/删除属性，需要额外实现单独的API\n- 数组，需要额外实现\n- Map Set Class等数据类型，无法响应式\n- 修改语法有限制\n\n## vue3响应式方案\n\n使用ES6的 **[`Proxy`](https://es6.ruanyifeng.com/#docs/proxy)** 进行数据响应化，解决上述Vue2所有痛点\n\nProxy可以在目标对象上加一层拦截/代理，外界对目标对象的操作，都会经过这层拦截\n\n相比 `Object.defineProperty` ，Proxy支持的对象操作十分全面：get、set、has、deleteProperty、ownKeys、defineProperty......等等\n\n```jsx\n// reactive 伪代码\nfunction reactice(obj){\n  return new Proxy(obj,{\n    get(target, key, receiver){\n      const ret = Reflect.get(target, key, receiver)\n      return isObject(ret) ? reactice(ret) : ret\n    },\n    set(target, key, val, receiver){\n      const ret = Reflect.set(target, key, val, receiver)\n      return ret\n    },\n    deleteProperty(target, key){\n      const ret = Reflect.deleteProperty(target, key)\n      return ret\n    },\n  })\n}\n```\n\n## 响应式原理\n\n![vue3响应式原理图](/images/vue3/reactive.png)\n\n- 通过 **`effect`**  声明依赖响应式数据的函数cb ( 例如视图渲染函数render函数)，并执行cb函数，执行过程中，会触发响应式数据 `getter`\n- 在响应式数据 `getter`中进行 `track`依赖收集：建立 **数据&cb** 的映射关系存储于 `targetMap`\n- 当变更响应式数据时，触发 `trigger` **，**根据 `targetMap` 找到关联的cb执行\n- 映射关系 `targetMap` 结构：\n\n```jsx\ntargetMap: WeakMap{ \n\ttarget:Map{ \n\t\tkey: Set[cb1,cb2...] \n\t}\n}\n```\n\n## 手写vue3响应式\n\n大致结构\n\n```jsx\n// mini-vue3.js\n\n/* 建立响应式数据 */\nfunction reactice(obj){}\n\n/* 声明响应函数cb(依赖响应式数据) */\nfunction effect(cb){}\n\n/* 依赖收集：建立 数据&cb 映射关系 */\nfunction track(target,key){}\n\n/* 触发更新：根据映射关系，执行cb */\nfunction trigger(target,key){}\n```\n\n### reactive\n\n```jsx\n/* 建立响应式数据 */\nfunction reactive(obj){\n  // Proxy:http://es6.ruanyifeng.com/#docs/proxy\n  // Proxy相当于在对象外层加拦截\n  // Proxy递归是惰性的,需要添加递归的逻辑\n  \n  // Reflect:http://es6.ruanyifeng.com/#docs/reflect\n  // Reflect:用于执行对象默认操作，更规范、更友好,可以理解成操作对象的合集\n  // Proxy和Object的方法Reflect都有对应\n  if(!isObject(obj)) return obj\n  const observed = new Proxy(obj,{\n    get(target, key, receiver){\n      const ret = Reflect.get(target, key, receiver)\n      console.log('getter '+ret)\n      // 跟踪 收集依赖\n      track(target, key)\n      return reactive(ret)\n    },\n    set(target, key, val, receiver){\n      const ret = Reflect.set(target, key, val, receiver)\n      console.log('setter '+key+':'+val + '=>' + ret)\n      // 触发更新\n      trigger(target, key)\n      return ret\n    },\n    deleteProperty(target, key){\n      const ret = Reflect.deleteProperty(target, key)\n      console.log('delete '+key+':'+ret)\n      // 触发更新\n      trigger(target, key)\n      return ret\n    },\n  })\n  return observed\n}\n```\n\n### effect\n\n```jsx\n/* 声明响应函数cb */\nconst effectStack = []\nfunction effect(cb){\n\n  // 对函数进行高阶封装\n  const rxEffect = function(){\n    // 1.捕获异常\n    // 2.fn出栈入栈\n    // 3.执行fn\n    try{\n      effectStack.push(rxEffect)\n      return cb()\n    }finally{\n      effectStack.pop()\n    }\n  }\n\n  // 最初要执行一次,进行最初的依赖收集\n  rxEffect()\n\n  return rxEffect\n}\n```\n\n### track\n\n```jsx\n/* 依赖收集：建立 数据&cb 映射关系 */\nconst targetMap = new WeakMap()\nfunction track(target,key){\n  // 存入映射关系\n  const effectFn = effectStack[effectStack.length - 1]  // 拿出栈顶函数\n  if(effectFn){\n    let depsMap = targetMap.get(target)\n    if(!depsMap){\n      depsMap = new Map()\n      targetMap.set(target, depsMap)\n    }\n    let deps = depsMap.get(key)\n    if(!deps){\n      deps = new Set()\n      depsMap.set(key, deps)\n    }\n    deps.add(effectFn)\n  }\n}\n```\n\n### trigger\n\n```jsx\n/* 触发更新：根据映射关系，执行cb */\nfunction trigger(target, key){\n  const depsMap = targetMap.get(target)\n  if(depsMap){\n    const deps = depsMap.get(key)\n    if(deps){\n      deps.forEach(effect=>effect())\n    }\n  }\n}\n```\n\n### 测试demo\n\n```jsx\n<!-- test.html -->\n<div id=\"app\">\n {{msg}}\n</div>\n\n<script src=\"./mini-vue3.js\"></script>\n\n<script>\n  // 定义一个响应式数据\n  const state = reactive({\n    msg:'message'\n  })\n\n  // 定义一个使用到响应式数据的 dom更新函数\n\tfunction updateDom(){\n\t\tdocument.getElementById('app').innerText = state.msg\n\t}\n\n\t// 用effect声明更新函数\n  effect(updateDom)\n\n  // 定时变更响应式数据\n  setInterval(()=>{\n    state.msg = 'message' + Math.random()\n  },1000)\n</script>\n```\n\n效果：\n\n![](/images/vue3/demo.png)\n\n\n如果想获取上述代码，放在了这个[仓库:mini-vue3-reactive](https://github.com/scarsu/mini-vue3-reactive)","slug":"vue3_reactive","published":1,"updated":"2021-01-22T10:04:20.434Z","_id":"ckir88jbx005dc8y6uc7rnqdt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"关于Vue3\"><a href=\"#关于Vue3\" class=\"headerlink\" title=\"关于Vue3\"></a>关于Vue3</h2><p>话说，Vue3已经进行到rc4版本了，4月份beta发布的时候前端圈红红火火，不知道大家开始学了没</p>\n<p>整理了一些资源，现在开始学习应该还不算晚[狗头]</p>\n<ul>\n<li><a href=\"https://github.com/vuejs/vue-next\" target=\"_blank\" rel=\"noopener\">vue-next仓库</a></li>\n<li><a href=\"https://v3.vuejs.org/\" target=\"_blank\" rel=\"noopener\">20200723 Vue3 官方发布的beta文档</a></li>\n<li><a href=\"https://github.com/vuejs/vue/projects/6\" target=\"_blank\" rel=\"noopener\">Vue3 Roadmap &amp; FAQ</a></li>\n<li><a href=\"https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged\" target=\"_blank\" rel=\"noopener\">Vue3仓库已经合并的780多个PR</a></li>\n<li><a href=\"https://www.vuemastery.com/courses/vue3-deep-dive-with-evan-you/vue3-overview\" target=\"_blank\" rel=\"noopener\">尤大在Vue Mastery的Vue3课：Vue 3 Deep Dive with Evan You</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1qC4y18721\" target=\"_blank\" rel=\"noopener\">202007 尤大在前端会客厅节目关于Vue3的访谈</a></li>\n<li><a href=\"https://increment.com/frontend/making-vue-3/\" target=\"_blank\" rel=\"noopener\">202005 The process: Making Vue 3</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1Tg4y1z7FH\" target=\"_blank\" rel=\"noopener\">202004 尤大 - 聊聊 Vue.js 3.0 Beta 官方直播</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1Et41197L4\" target=\"_blank\" rel=\"noopener\">2018 VueConf 杭州 尤大关于Vue3的演讲视频</a></li>\n</ul>\n<h2 id=\"vue2-响应式原理回顾\"><a href=\"#vue2-响应式原理回顾\" class=\"headerlink\" title=\"vue2 响应式原理回顾\"></a>vue2 响应式原理回顾</h2><ul>\n<li>对象响应化：遍历每个key，通过 <code>Object.defineProperty</code> API定义getter，setter</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj !=<span class=\"string\">'object'</span> || obj == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(obj))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Object</span>.setPrototypeOf(obj,arrayProto)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;keys.length;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">      defineReactive(obj,key,obj[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">target, key, val</span>)</span>&#123;</span><br><span class=\"line\">  observe(val)</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 依赖收集</span></span><br><span class=\"line\">      dep.depend()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(newVal)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(newVal !== val)&#123;</span><br><span class=\"line\">        observe(newVal)</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">        <span class=\"comment\">// 通知更新</span></span><br><span class=\"line\">        dep.notify()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组响应化：覆盖数组的原型方法，增加通知变更的逻辑</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> originalProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Object</span>.create(originalProto)</span><br><span class=\"line\">[<span class=\"string\">'push'</span>,<span class=\"string\">'pop'</span>,<span class=\"string\">'shift'</span>,<span class=\"string\">'unshift'</span>,<span class=\"string\">'splice'</span>,<span class=\"string\">'reverse'</span>,<span class=\"string\">'sort'</span>].forEach(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;</span><br><span class=\"line\">\tarrayProto[key] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\toriginalProto[key].apply(<span class=\"keyword\">this</span>.arguments)</span><br><span class=\"line\">\t\tnotifyUpdate()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"vue2响应式痛点\"><a href=\"#vue2响应式痛点\" class=\"headerlink\" title=\"vue2响应式痛点\"></a>vue2响应式痛点</h2><ul>\n<li>递归，消耗大</li>\n<li>新增/删除属性，需要额外实现单独的API</li>\n<li>数组，需要额外实现</li>\n<li>Map Set Class等数据类型，无法响应式</li>\n<li>修改语法有限制</li>\n</ul>\n<h2 id=\"vue3响应式方案\"><a href=\"#vue3响应式方案\" class=\"headerlink\" title=\"vue3响应式方案\"></a>vue3响应式方案</h2><p>使用ES6的 <strong><a href=\"https://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"noopener\"><code>Proxy</code></a></strong> 进行数据响应化，解决上述Vue2所有痛点</p>\n<p>Proxy可以在目标对象上加一层拦截/代理，外界对目标对象的操作，都会经过这层拦截</p>\n<p>相比 <code>Object.defineProperty</code> ，Proxy支持的对象操作十分全面：get、set、has、deleteProperty、ownKeys、defineProperty……等等</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reactive 伪代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactice</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj,&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>(target, key, receiver)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.get(target, key, receiver)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> isObject(ret) ? reactice(ret) : ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(target, key, val, receiver)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.set(target, key, val, receiver)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deleteProperty(target, key)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.deleteProperty(target, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"响应式原理\"><a href=\"#响应式原理\" class=\"headerlink\" title=\"响应式原理\"></a>响应式原理</h2><p><img src=\"/images/vue3/reactive.png\" alt=\"vue3响应式原理图\"></p>\n<ul>\n<li>通过 <strong><code>effect</code></strong>  声明依赖响应式数据的函数cb ( 例如视图渲染函数render函数)，并执行cb函数，执行过程中，会触发响应式数据 <code>getter</code></li>\n<li>在响应式数据 <code>getter</code>中进行 <code>track</code>依赖收集：建立 <strong>数据&amp;cb</strong> 的映射关系存储于 <code>targetMap</code></li>\n<li>当变更响应式数据时，触发 <code>trigger</code> <strong>，</strong>根据 <code>targetMap</code> 找到关联的cb执行</li>\n<li>映射关系 <code>targetMap</code> 结构：</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">targetMap: <span class=\"built_in\">WeakMap</span>&#123; </span><br><span class=\"line\">\ttarget:<span class=\"built_in\">Map</span>&#123; </span><br><span class=\"line\">\t\tkey: <span class=\"built_in\">Set</span>[cb1,cb2...] </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"手写vue3响应式\"><a href=\"#手写vue3响应式\" class=\"headerlink\" title=\"手写vue3响应式\"></a>手写vue3响应式</h2><p>大致结构</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mini-vue3.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 建立响应式数据 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactice</span>(<span class=\"params\">obj</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 声明响应函数cb(依赖响应式数据) */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">effect</span>(<span class=\"params\">cb</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 依赖收集：建立 数据&amp;cb 映射关系 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">track</span>(<span class=\"params\">target,key</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 触发更新：根据映射关系，执行cb */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">target,key</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 建立响应式数据 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactive</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Proxy:http://es6.ruanyifeng.com/#docs/proxy</span></span><br><span class=\"line\">  <span class=\"comment\">// Proxy相当于在对象外层加拦截</span></span><br><span class=\"line\">  <span class=\"comment\">// Proxy递归是惰性的,需要添加递归的逻辑</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// Reflect:http://es6.ruanyifeng.com/#docs/reflect</span></span><br><span class=\"line\">  <span class=\"comment\">// Reflect:用于执行对象默认操作，更规范、更友好,可以理解成操作对象的合集</span></span><br><span class=\"line\">  <span class=\"comment\">// Proxy和Object的方法Reflect都有对应</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!isObject(obj)) <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  <span class=\"keyword\">const</span> observed = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj,&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>(target, key, receiver)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.get(target, key, receiver)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'getter '</span>+ret)</span><br><span class=\"line\">      <span class=\"comment\">// 跟踪 收集依赖</span></span><br><span class=\"line\">      track(target, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reactive(ret)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(target, key, val, receiver)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.set(target, key, val, receiver)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter '</span>+key+<span class=\"string\">':'</span>+val + <span class=\"string\">'=&gt;'</span> + ret)</span><br><span class=\"line\">      <span class=\"comment\">// 触发更新</span></span><br><span class=\"line\">      trigger(target, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deleteProperty(target, key)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.deleteProperty(target, key)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'delete '</span>+key+<span class=\"string\">':'</span>+ret)</span><br><span class=\"line\">      <span class=\"comment\">// 触发更新</span></span><br><span class=\"line\">      trigger(target, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> observed</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"effect\"><a href=\"#effect\" class=\"headerlink\" title=\"effect\"></a>effect</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 声明响应函数cb */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> effectStack = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">effect</span>(<span class=\"params\">cb</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对函数进行高阶封装</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rxEffect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.捕获异常</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.fn出栈入栈</span></span><br><span class=\"line\">    <span class=\"comment\">// 3.执行fn</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      effectStack.push(rxEffect)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cb()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">      effectStack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 最初要执行一次,进行最初的依赖收集</span></span><br><span class=\"line\">  rxEffect()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> rxEffect</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"track\"><a href=\"#track\" class=\"headerlink\" title=\"track\"></a>track</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 依赖收集：建立 数据&amp;cb 映射关系 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">track</span>(<span class=\"params\">target,key</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 存入映射关系</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> effectFn = effectStack[effectStack.length - <span class=\"number\">1</span>]  <span class=\"comment\">// 拿出栈顶函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(effectFn)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> depsMap = targetMap.get(target)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!depsMap)&#123;</span><br><span class=\"line\">      depsMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">      targetMap.set(target, depsMap)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> deps = depsMap.get(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!deps)&#123;</span><br><span class=\"line\">      deps = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">      depsMap.set(key, deps)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deps.add(effectFn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"trigger\"><a href=\"#trigger\" class=\"headerlink\" title=\"trigger\"></a>trigger</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 触发更新：根据映射关系，执行cb */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">target, key</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> depsMap = targetMap.get(target)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(depsMap)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> deps = depsMap.get(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(deps)&#123;</span><br><span class=\"line\">      deps.forEach(<span class=\"function\"><span class=\"params\">effect</span>=&gt;</span>effect())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试demo\"><a href=\"#测试demo\" class=\"headerlink\" title=\"测试demo\"></a>测试demo</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- test.html --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\"> &#123;&#123;msg&#125;&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"./mi</span>ni-vue3.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">  // 定义一个响应式数据</span></span><br><span class=\"line\"><span class=\"string\">  const state = reactive(&#123;</span></span><br><span class=\"line\"><span class=\"string\">    msg:'message'</span></span><br><span class=\"line\"><span class=\"string\">  &#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  // 定义一个使用到响应式数据的 dom更新函数</span></span><br><span class=\"line\"><span class=\"string\">\tfunction updateDom()&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tdocument.getElementById('app').innerText = state.msg</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t// 用effect声明更新函数</span></span><br><span class=\"line\"><span class=\"string\">  effect(updateDom)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  // 定时变更响应式数据</span></span><br><span class=\"line\"><span class=\"string\">  setInterval(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    state.msg = 'message' + Math.random()</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,1000)</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/images/vue3/demo.png\" alt></p>\n<p>如果想获取上述代码，放在了这个<a href=\"https://github.com/scarsu/mini-vue3-reactive\" target=\"_blank\" rel=\"noopener\">仓库:mini-vue3-reactive</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于Vue3\"><a href=\"#关于Vue3\" class=\"headerlink\" title=\"关于Vue3\"></a>关于Vue3</h2><p>话说，Vue3已经进行到rc4版本了，4月份beta发布的时候前端圈红红火火，不知道大家开始学了没</p>\n<p>整理了一些资源，现在开始学习应该还不算晚[狗头]</p>\n<ul>\n<li><a href=\"https://github.com/vuejs/vue-next\" target=\"_blank\" rel=\"noopener\">vue-next仓库</a></li>\n<li><a href=\"https://v3.vuejs.org/\" target=\"_blank\" rel=\"noopener\">20200723 Vue3 官方发布的beta文档</a></li>\n<li><a href=\"https://github.com/vuejs/vue/projects/6\" target=\"_blank\" rel=\"noopener\">Vue3 Roadmap &amp; FAQ</a></li>\n<li><a href=\"https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged\" target=\"_blank\" rel=\"noopener\">Vue3仓库已经合并的780多个PR</a></li>\n<li><a href=\"https://www.vuemastery.com/courses/vue3-deep-dive-with-evan-you/vue3-overview\" target=\"_blank\" rel=\"noopener\">尤大在Vue Mastery的Vue3课：Vue 3 Deep Dive with Evan You</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1qC4y18721\" target=\"_blank\" rel=\"noopener\">202007 尤大在前端会客厅节目关于Vue3的访谈</a></li>\n<li><a href=\"https://increment.com/frontend/making-vue-3/\" target=\"_blank\" rel=\"noopener\">202005 The process: Making Vue 3</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1Tg4y1z7FH\" target=\"_blank\" rel=\"noopener\">202004 尤大 - 聊聊 Vue.js 3.0 Beta 官方直播</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1Et41197L4\" target=\"_blank\" rel=\"noopener\">2018 VueConf 杭州 尤大关于Vue3的演讲视频</a></li>\n</ul>\n<h2 id=\"vue2-响应式原理回顾\"><a href=\"#vue2-响应式原理回顾\" class=\"headerlink\" title=\"vue2 响应式原理回顾\"></a>vue2 响应式原理回顾</h2><ul>\n<li>对象响应化：遍历每个key，通过 <code>Object.defineProperty</code> API定义getter，setter</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj !=<span class=\"string\">'object'</span> || obj == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(obj))&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Object</span>.setPrototypeOf(obj,arrayProto)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;keys.length;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">      defineReactive(obj,key,obj[key])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">target, key, val</span>)</span>&#123;</span><br><span class=\"line\">  observe(val)</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 依赖收集</span></span><br><span class=\"line\">      dep.depend()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(newVal)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(newVal !== val)&#123;</span><br><span class=\"line\">        observe(newVal)</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">        <span class=\"comment\">// 通知更新</span></span><br><span class=\"line\">        dep.notify()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组响应化：覆盖数组的原型方法，增加通知变更的逻辑</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> originalProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Object</span>.create(originalProto)</span><br><span class=\"line\">[<span class=\"string\">'push'</span>,<span class=\"string\">'pop'</span>,<span class=\"string\">'shift'</span>,<span class=\"string\">'unshift'</span>,<span class=\"string\">'splice'</span>,<span class=\"string\">'reverse'</span>,<span class=\"string\">'sort'</span>].forEach(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;</span><br><span class=\"line\">\tarrayProto[key] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\toriginalProto[key].apply(<span class=\"keyword\">this</span>.arguments)</span><br><span class=\"line\">\t\tnotifyUpdate()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"vue2响应式痛点\"><a href=\"#vue2响应式痛点\" class=\"headerlink\" title=\"vue2响应式痛点\"></a>vue2响应式痛点</h2><ul>\n<li>递归，消耗大</li>\n<li>新增/删除属性，需要额外实现单独的API</li>\n<li>数组，需要额外实现</li>\n<li>Map Set Class等数据类型，无法响应式</li>\n<li>修改语法有限制</li>\n</ul>\n<h2 id=\"vue3响应式方案\"><a href=\"#vue3响应式方案\" class=\"headerlink\" title=\"vue3响应式方案\"></a>vue3响应式方案</h2><p>使用ES6的 <strong><a href=\"https://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"noopener\"><code>Proxy</code></a></strong> 进行数据响应化，解决上述Vue2所有痛点</p>\n<p>Proxy可以在目标对象上加一层拦截/代理，外界对目标对象的操作，都会经过这层拦截</p>\n<p>相比 <code>Object.defineProperty</code> ，Proxy支持的对象操作十分全面：get、set、has、deleteProperty、ownKeys、defineProperty……等等</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reactive 伪代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactice</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj,&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>(target, key, receiver)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.get(target, key, receiver)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> isObject(ret) ? reactice(ret) : ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(target, key, val, receiver)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.set(target, key, val, receiver)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deleteProperty(target, key)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.deleteProperty(target, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"响应式原理\"><a href=\"#响应式原理\" class=\"headerlink\" title=\"响应式原理\"></a>响应式原理</h2><p><img src=\"/images/vue3/reactive.png\" alt=\"vue3响应式原理图\"></p>\n<ul>\n<li>通过 <strong><code>effect</code></strong>  声明依赖响应式数据的函数cb ( 例如视图渲染函数render函数)，并执行cb函数，执行过程中，会触发响应式数据 <code>getter</code></li>\n<li>在响应式数据 <code>getter</code>中进行 <code>track</code>依赖收集：建立 <strong>数据&amp;cb</strong> 的映射关系存储于 <code>targetMap</code></li>\n<li>当变更响应式数据时，触发 <code>trigger</code> <strong>，</strong>根据 <code>targetMap</code> 找到关联的cb执行</li>\n<li>映射关系 <code>targetMap</code> 结构：</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">targetMap: <span class=\"built_in\">WeakMap</span>&#123; </span><br><span class=\"line\">\ttarget:<span class=\"built_in\">Map</span>&#123; </span><br><span class=\"line\">\t\tkey: <span class=\"built_in\">Set</span>[cb1,cb2...] </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"手写vue3响应式\"><a href=\"#手写vue3响应式\" class=\"headerlink\" title=\"手写vue3响应式\"></a>手写vue3响应式</h2><p>大致结构</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mini-vue3.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 建立响应式数据 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactice</span>(<span class=\"params\">obj</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 声明响应函数cb(依赖响应式数据) */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">effect</span>(<span class=\"params\">cb</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 依赖收集：建立 数据&amp;cb 映射关系 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">track</span>(<span class=\"params\">target,key</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 触发更新：根据映射关系，执行cb */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">target,key</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 建立响应式数据 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactive</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Proxy:http://es6.ruanyifeng.com/#docs/proxy</span></span><br><span class=\"line\">  <span class=\"comment\">// Proxy相当于在对象外层加拦截</span></span><br><span class=\"line\">  <span class=\"comment\">// Proxy递归是惰性的,需要添加递归的逻辑</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// Reflect:http://es6.ruanyifeng.com/#docs/reflect</span></span><br><span class=\"line\">  <span class=\"comment\">// Reflect:用于执行对象默认操作，更规范、更友好,可以理解成操作对象的合集</span></span><br><span class=\"line\">  <span class=\"comment\">// Proxy和Object的方法Reflect都有对应</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!isObject(obj)) <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  <span class=\"keyword\">const</span> observed = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj,&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>(target, key, receiver)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.get(target, key, receiver)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'getter '</span>+ret)</span><br><span class=\"line\">      <span class=\"comment\">// 跟踪 收集依赖</span></span><br><span class=\"line\">      track(target, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reactive(ret)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(target, key, val, receiver)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.set(target, key, val, receiver)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter '</span>+key+<span class=\"string\">':'</span>+val + <span class=\"string\">'=&gt;'</span> + ret)</span><br><span class=\"line\">      <span class=\"comment\">// 触发更新</span></span><br><span class=\"line\">      trigger(target, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deleteProperty(target, key)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"built_in\">Reflect</span>.deleteProperty(target, key)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'delete '</span>+key+<span class=\"string\">':'</span>+ret)</span><br><span class=\"line\">      <span class=\"comment\">// 触发更新</span></span><br><span class=\"line\">      trigger(target, key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> observed</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"effect\"><a href=\"#effect\" class=\"headerlink\" title=\"effect\"></a>effect</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 声明响应函数cb */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> effectStack = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">effect</span>(<span class=\"params\">cb</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对函数进行高阶封装</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rxEffect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.捕获异常</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.fn出栈入栈</span></span><br><span class=\"line\">    <span class=\"comment\">// 3.执行fn</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      effectStack.push(rxEffect)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cb()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">      effectStack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 最初要执行一次,进行最初的依赖收集</span></span><br><span class=\"line\">  rxEffect()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> rxEffect</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"track\"><a href=\"#track\" class=\"headerlink\" title=\"track\"></a>track</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 依赖收集：建立 数据&amp;cb 映射关系 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">track</span>(<span class=\"params\">target,key</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 存入映射关系</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> effectFn = effectStack[effectStack.length - <span class=\"number\">1</span>]  <span class=\"comment\">// 拿出栈顶函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(effectFn)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> depsMap = targetMap.get(target)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!depsMap)&#123;</span><br><span class=\"line\">      depsMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">      targetMap.set(target, depsMap)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> deps = depsMap.get(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!deps)&#123;</span><br><span class=\"line\">      deps = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">      depsMap.set(key, deps)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deps.add(effectFn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"trigger\"><a href=\"#trigger\" class=\"headerlink\" title=\"trigger\"></a>trigger</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 触发更新：根据映射关系，执行cb */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">target, key</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> depsMap = targetMap.get(target)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(depsMap)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> deps = depsMap.get(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(deps)&#123;</span><br><span class=\"line\">      deps.forEach(<span class=\"function\"><span class=\"params\">effect</span>=&gt;</span>effect())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试demo\"><a href=\"#测试demo\" class=\"headerlink\" title=\"测试demo\"></a>测试demo</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- test.html --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\"> &#123;&#123;msg&#125;&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script src=\"./mi</span>ni-vue3.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">  // 定义一个响应式数据</span></span><br><span class=\"line\"><span class=\"string\">  const state = reactive(&#123;</span></span><br><span class=\"line\"><span class=\"string\">    msg:'message'</span></span><br><span class=\"line\"><span class=\"string\">  &#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  // 定义一个使用到响应式数据的 dom更新函数</span></span><br><span class=\"line\"><span class=\"string\">\tfunction updateDom()&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tdocument.getElementById('app').innerText = state.msg</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t// 用effect声明更新函数</span></span><br><span class=\"line\"><span class=\"string\">  effect(updateDom)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  // 定时变更响应式数据</span></span><br><span class=\"line\"><span class=\"string\">  setInterval(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    state.msg = 'message' + Math.random()</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,1000)</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/images/vue3/demo.png\" alt></p>\n<p>如果想获取上述代码，放在了这个<a href=\"https://github.com/scarsu/mini-vue3-reactive\" target=\"_blank\" rel=\"noopener\">仓库:mini-vue3-reactive</a></p>\n"},{"title":"【Javascript Event Loop & 异步机制】总结","date":"2020-06-07T16:00:00.000Z","description":"长文 + 动图 + 实例，试图解释清楚：Javascript Event Loop如何调度异步任务","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133228.png","_content":"## 带着问题看这篇文章\n- 我们写的各种回调什么时候执行？按照什么顺序执行？\n- setTimeout(cb,0)和Promise.resolve().then(cb)谁的回调先执行？\n- Javascript的单线程是如何实现异步并发的？\n- Event Loop到底是如何调度任务的？\n- 如何利用RAF优化性能？\n- 下面这段代码输出是什么？回答不对的朋友，看完这篇文章也许你的思路就会清晰~\n\n```javascript\nconsole.log(1);\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\nsetTimeout(() => {\n  console.log(6);\n})\nconsole.log(7);\n\n// 结果：1475236 \n```\n\n## JS Runtime 的几个概念\n\n\n### call stack 调用栈\n\n- 定义：调用栈是浏览器的JavaScript解释器追踪**函数执行流**的一种机制，函数调用形成了一个由若干帧组成的栈。（栈的特点是后进先出）\n- 作用：通过调用栈，我们能够追踪：哪个函数正执行；执行的函数体中又调用了哪个函数；以及每一帧的上下文+作用域\n- 机制：\n    - 每调用一个函数，就把该函数添加进调用栈并执行\n    - 如果正在调用的函数还调用了其他函数，把新函数也添加到调用栈中，立即执行\n    - 执行完毕后，解释器会将函数清除出栈，继续执行当前执行环境下剩余的代码\n    - 当分配的调用栈被占满时，会引发“**Stack Overflow堆栈溢出**”错误\n\n### heap 堆\n\n**堆**一大块内存区域（通常是非结构化的)，对象被分配在堆中\n\n### task queue 消息队列\n\nJS运行时包含了一个**消息队列**，每个消息队列关联着一个用于处理这个消息的回调函数。（队列的特点是先进先出）\n\n1. 当调用栈为空时，event loop会消息队列中的下一个消息\n2. 被处理的消息被移出队列，\n3. 消息被作为参数调用与之关联的回调函数\n4. 同时为该函数调用向调用栈添加一个新的栈帧\n5. 调用栈再次为空时，event loop会重复1-4步骤\n\n通常，task queue中的任务被称为：**macrotask 宏任务**.\n\n以下几种异步API的回调属于**宏任务**：\n- setTimeout\n- MessageChannel\n- postMessage\n- setImmediate\n\n### Single Thread 单线程\n\n- 单线程 = 单调用栈 = one thing at a time，不能并发，一次只能做一件事\n- 为什么单线程能实现异步和并发？\n- 因为单线程指的是js runtime\n- 而浏览器和Node提供了API，使我们可以调用其他线程去做并发的异步任务，例如网络请求、DOM、setTimeout\n\n### Non-blocking 非阻塞\n\n- blocking：阻塞，是指浏览器在等待耗时长的代码(eg.网络请求,I/O)期间，不能处理任何其他事情，包括用户响应。\n- 解决阻塞的方法：异步任务\n- 异步任务怎么实现的？依赖的就是**异步API**和**event loop事件循环**\n- JavaScript的事件循环模型与许多其他语言不同的一个非常有趣的特性是，它**永不阻塞**，所以当一个应用正等待一个异步任务时，它仍然可以处理其它事情，比如用户输入。（由于历史原因有一些**例外**，如 `alert` 或者`同步 XHR`，但应该尽量避免使用它们，[例外的例外也是存在的](https://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded/2734311#2734311)（但通常是实现导致的错误而非其它原因）。\n\n### **不被抢占**\n\n每个消息被完整的执行后，其他消息才会被执行。\n\n优点：当一个函数执行时，它不会被抢占，只有在它运行完毕后才会去运行其他代码，才能修改这个函数操作的数据。\n\n缺点：当一个消息需要太长时间才能处理完，浏览器就无法处理用户交互,eg.滚动和点击，这也是性能较差的网页“卡顿现象”的原因。\n\n因此良好的操作方式是：缩短单个消息处理时间，在可能的情况下尽量将一个消息裁剪成多个消息。以保证浏览器 `60 frames per second` 的流畅渲染，即每个消息处理时间 < 1000ms/60=16ms，\n\n## Event Loop 事件循环\n\n**event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。**\n\n- 浏览器的Event Loop模型是在[html5的规范](https://www.w3.org/TR/html5/webappapis.html#event-loops)中明确定义的，具体的实现由浏览器厂商来做。\n- NodeJS的Event Loop是基于libuv实现的。可以参考Node的[官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/)以及libuv的[官方文档](http://docs.libuv.org/en/v1.x/design.html)。\n\n### **浏览器EventLoop运行机制（不考虑microtask）**\n\n- 所有同步任务都在**主线程**上执行，形成一个**call stack**调用栈\n- 可以通过**浏览器API**调用 运行在其他线程的**异步任务**\n- 主线程之外，存在一个待处理消息的**消息队列task queue**。每一个消息都关联着一个用以处理这个消息的回调函数。\n- 当主线程调用栈中的所有同步任务执行完毕，系统就会读取task queue，取最先进的消息作为参数，将其关联的回调函数放入主线程调用栈中执行\n\n\n### **添加消息**\n\n- 浏览器中，如果一个事件有事件监听器，事件被触发后，一个消息就会被添加到消息队列中。\n- 除了事件，浏览器提供的其他API，例如setTimeout、xhr等异步任务，都会在任务结束后向消息队列添加消息\n\n### **setTimeout(fn,n)**\n\n- `setTimeout` 中的第二个参数n是指 消息被加入消息队列的最小延迟\n- 因此，不是保证回调在n毫秒内必须执行，而是保证回调在n毫秒之后被添加到消息队列，具体什么时候执行，取决于消息队列中待处理的消息 和 调用栈中已有的函数。\n- **零延迟**：`setTimeout 0` 的作用：将回调立即放入消息队列，而不是0s内立即执行\n\n### debug 一个 demo\n\n```jsx\n// demo\nfunction bar(){\n    debugger\n    console.log('bar')\n    foo()\n}\nfunction foo(){\n    debugger\n    console.log('foo')\n    setTimeout(function(){\n        debugger\n        console.log('setTimeout')\n    },1000)\n}\n(function all(){\n    debugger\n    console.log('anounymous')\n    bar()\n})()\n```\n\n![](/images/event-loop/Untitled.png)\n\n![](/images/event-loop/Untitled%201.png)\n\n![](/images/event-loop/Untitled%202.png)\n\n![](/images/event-loop/Untitled%203.png)\n\n**原理图**\n\n![](/images/event-loop/Untitled%204.png)\n\n### 知识延伸：webWorker & 跨运行时通信\n\n- 每个 **WebWorker** 、跨域的 **iframe 、**浏览器不同窗口都有各自的运行时，即都有各自的 call stack 、heap、queue。\n- 不同的运行时，可以通过 [postMessage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage) 方法来通信。\n\n**postMessage：**\n\n```javascript\n// eg. 当一个窗口可以获得另一个窗口的引用时，例如targetWindow = window.opener\n\notherWindow.postMessage(message, targetOrigin, [transfer]);\n```\n\notherWindow:其他窗口的引用：\n\n- iframe的contentWindow\n- 执行window.open返回的窗口对象\n- 通过window.frames获取到的子frame窗口对象\n\nmessage：要发送到其他窗口的数据，会被[结构化克隆算法](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)序列化\n\ntargetOrigin：用来指定哪些窗口能接收到消息事件\n\ntransfer：一串和message 同时传递的 [`Transferable`](https://developer.mozilla.org/zh-CN/docs/Web/API/Transferable) 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。\n\n**结构化克隆算法：**\n\n用于克隆复杂对象\n\n不能克隆：Error、Symbol、Function对象、DOM节点\n\n不能克隆：属性的描述符、RegExp对象的 lastIndex字段、原型链上的属性\n\n**Transferable对象：**\n\n一个抽象接口，代表可以在不同可执行上下文中传递的对象。（抽象：没有定义任何属性和方法）\n\n不同执行上下文：例如主线程和webworker之间。\n\nArrayBuffer 、MessagePort 和 ImageBitmap 实现于此接口。\n\n**接收消息：**\n\n```jsx\nwindow.addEventListener(\"message\", receiveMessage, false);\n\nfunction receiveMessage(event)\n{\n  // event.data：传递来的对象\n  // event.origin：消息发送方窗口的origin\n  // event.source：对消息发送窗口的引用\n}\n```\n\n## UI Rendering Task & 性能优化\n\n### 浏览器渲染 - Rendering Task步骤\n\n- requestAnimationFrame API(在chrome，火狐，符合WEB标准)\n- style calculation 计算样式\n- layout 计算布局\n- paint 实际渲染像素数据\n- requestAnimationFrame API(在edge，safari)\n\n### **render blocking 渲染阻塞**\n\n具体来讲，如果js runtime 的 call stack 一直不能清空，例如event loop将一个耗时的回调放进了call stack，会导致浏览器主线程被占用，无法执行render相关的工作，用户交互的事件也被添加在消息队列等待调用栈清空得不到执行，因此无法响应用户的操作，造成阻塞渲染的“卡顿”现象。\n\n### 60FPS\n\n在event loop处理消息队列时，我们提倡要缩短单个消息处理时间，在可能的情况下尽量将一个消息裁剪成多个消息，rendering task 可以在消息之间执行，以保证保证UI Rendering调用的频率能达到 `60 frames per second` （UI Rendering Task执行次数通常是每秒60次，但在大多数遵循W3C建议的浏览器中，回调函数执行次数通常与浏览器屏幕刷新次数相匹配。），即每次event loop处理消息执行回调所占用的时间 小于 16.67 毫秒。\n\n### demo1:\n\n看下面这段代码，先 append 一个元素再设置display=none去隐藏这个元素，**不必担心**这个元素会闪现，因为这两行代码会在某一次event loop中执行，只有这两行代码执行完，并且清空了当前调用栈，才有可能执行下一次UI Render task\n\n```jsx\ndocument.body.appendChild(el)\nel.style.display='none'\n```\n\n### demo2:\n\n下面这段代码，重复的显示隐藏一个元素，看起来开销很大，但其实在RenderingTask期间，只会取最终结果来渲染，\n\n```jsx\nbutton.addEventListener ('click,()=>{\nbox style. display='none';\n\tbox style. display ='block';\n\tbox style. display ='none';\n\tbox style. display ='block';\n\tbox style. display='none';\n\tbox style. display ='block';\n\tbox style. display ='none';\n\tbox style. display ='block';\n\tbox style. display ='none';\n})\n```\n\n### requestAnimationFrame\n\n- 简称RAF，是一个web api，要求浏览器在下一次重绘之前调用指定的回调函数，通常用于执行动画\n- 通过RAF，使浏览器可以在单次回流和重绘中优化处理并发动画，每次UI刷新之前执行RAF，使动画帧率更高\n- 当requestAnimationFrame() 运行在后台标签页或者隐藏的`<iframe>` 里时，requestAnimationFrame() 会被暂停调用以提升性能和电池寿命\n\ndemo1：requestAnimationFrame优化动画的一个例子\n\n```jsx\n// 使用RAF\nfunction callback(){\n\tmoveBoxForwardOnePixel();\n\trequestAnimationFrame(callback)\n}\ncallback();\n\n// 使用setTimeout\nfunction callback(){\n\tmoveBoxForwardOnePixel();\n\tsetTimeout(callback,0)\n}\n```\n\n效果：\n\n![](/images/event-loop/preview.gif)\n\ndemo2：用RAF控制动画执行顺序，需求是box元素的水平位置变化：1000→500\n\n```jsx\nbutton addEventListener ('click,()=>{\n\tbox.style.transform = 'translateX(1000px)'\n\tbox.style.transition= 'transform 1s ease-in-out'\n\tbox.style.transform = 'translateX(500px)'\n})\n\n//由于上述代码会一起执行，\n//因此渲染时，1000px会被忽略，浏览器会取500作为最终值，在下一帧渲染，\n//因此上述代码的效果是：元素位移0->500\n\n//换一种写法\nbutton addEventListener ('click,()=>{\n\tbox.style.transform = 'translateX(1000px)'\n\tbox.style.transition= 'transform 1s ease-in-out'\n\t\n\trequestAnimationFrame(()=>{\n\t\tbox.style.transform = 'translateX(500px)'\n\t})\n})\n// 上述代码，1000的初始值是有效的，\n//但是在下一次的rendering task期间，由于RAF先执行，因此500将1000覆盖\n//最终渲染的效果还是元素位移：0->500\n\n//如何令500在下下一次渲染再生效？嵌套调用RAF\nbutton addEventListener ('click,()=>{\n\tbox.style.transform = 'translateX(1000px)'\n\t\n\trequestAnimationFrame(()=>{\n\t\trequestAnimationFrame(()=>{\n\t\t\tbox.style.transition= 'transform 1s ease-in-out'\n\t\t\tbox.style.transform = 'translateX(500px)'\n\t\t})\n\t})\n})\n```\n\n## 可视化：event loop和rendering\n\n### 理想的状态\n\n![](/images/event-loop/Untitled%205.png)\n\n### setTimeout的浪费\n\n间隔调用setTimeout的效果：导致浪费\n\n![](/images/event-loop/Untitled%206.png)\n\n以前的动画仓库的处理方式：`setTimeout(animFrame, 1000/60)`\n\n但是这种处理方式不稳定，可能会不准确，因为\n\n![](/images/event-loop/Untitled%207.png)\n\n![](/images/event-loop/Untitled%208.png)\n\n### RAF的稳定有序状态\n\n![](/images/event-loop/Untitled%209.png)\n\n## MicroTask 微任务\n\n**微任务，microtask，也叫jobs。**\n\n### 微任务 异步类型\n\n一些异步任务执行完成后，其**回调**会依次进入microtask queue，等待后续被调用，这些异步任务包括：\n\n- **Promise.then**\n- MutationObserver\n- process.nextTick (Node独有)\n- Object.observe\n\n## ⭐event loop运行机制(含microtask)\n\nevent loop中任务的执行顺序：\n1. 同步代码执行，直至调用栈清空\n2. microtask：调用栈清空后，优先执行**所有**的microtask，如果有新的microtask，**继续执行新microtask，**直至microtask queue清空\n3. task queue：执行task queue第一个任务，后续的task暂不处理\n4. 每当调用栈清空后，重复2-3步骤\n\n\n**两个重点：**\n\n- 微任务阻塞浏览器：如果执行微任务期间，不停的有新的微任务，会导致浏览器阻塞\n- 微任务的执行会因为JS堆栈的情况有所不同，要根据**调用栈是否清空**去判断微任务是否会执行。\n\n一个直观的例子：\n\n```jsx\nPromise.resolve().then(()=>{\n    console.log('microtask 1')\n})\nPromise.resolve().then(()=>{\n    console.log('microtask 2')\n})\nconsole.log('sync code')\nsetTimeout(()=>{\n    console.log('macro task 1')\n    Promise.resolve().then(()=>{\n        console.log('microtask 3')\n    })\n},0)\nsetTimeout(()=>{\n    console.log('macro task 2')\n},0)\n\n//结果：\n//sync code 同步代码优先执行\n//microtask 1  同步代码执行完后，调用栈清空，优先执行 microtask  \n//microtask 2  同上\n//macro task 1  调用栈清空，microtask queue清空，此时可以执行一个位于队首的macro task，执行期间新增一个microtask\n//microtask 3  调用栈清空后，由于存在microtask，因此优先执行microtask\n//macro task 2  最后执行macro task，清空task queue\n```\n\n**流程图**\n![](/images/event-loop/Untitled%2010.png)\n\n**demo1：调用栈未清空，不执行microtask**\n\n在控制台中执行一段代码，会当做同步代码来处理。listener1执行后，微任务队列+1，但是因为是同步执行的代码，所以会立即执行listener2，微任务队列+1，所以顺序是`listener1,listener2,microtask1,microtask2`\n\n![](/images/event-loop/Untitled%2011.png)\n\n**demo2:调用栈清空后，microtask 优先于 macro task执行**\n\n同步执行两个setTimeout，会将 listener1和listener2加入到task queue，同步代码执行就结束。先执行listener1，将microtask1加入微任务队列，listener1执行完后，调用栈清空，即使这时候task queue还有listener2，也会先执行所有微任务，将所有微任务清空后，再执行listener2，因此输出顺序是 `listener1,microtask1,listener2,microtask2`  \n\n![](/images/event-loop/Untitled%2012.png)\n\n**demo3：同demo2**\n\n用户点击事件\n\n由于点击事件会被添加到task queue，因此，这个 demo3 的结果和 demo2 结果相同\n\n![](/images/event-loop/Untitled%2013.png)\n\n**demo4：同demo1**\n\njs调用click()事件\n\n由于是在代码中手动执行click，所以会同步执行两个listener，因此demo4和demo1结构相同。\n\n![](/images/event-loop/Untitled%2014.png)\n\n**demo5：micro 优先于 macro执行**\n\n![](/images/event-loop/Untitled%2015.png)\n\n**demo6：综合实例**\n\n```javascript\n// 浏览器中执行\nconsole.log(1);\nsetTimeout(() => {\n  console.log(2);// callback2，setTimeout属于宏任务\n  Promise.resolve().then(() => {\n    console.log(3)// callback3，Promise.then属于微任务\n  });\n});\nnew Promise((resolve, reject) => {\n  console.log(4)// 这里的代码是同步执行的\n  resolve(5)\n}).then((data) => {\n  console.log(data);// callback5，Promise.then属于微任务\n})\nsetTimeout(() => {\n  console.log(6);// callback6，setTimeout属于宏任务\n})\nconsole.log(7);\n\n// 结果：1475236 \n\n// 逻辑：\n147是同步执行，同步代码执行完后的queue：\n\ttask queue：callback2，callback6\n\tmicrotask：callback5\n此时调用栈已清空，优先执行微任务callback5，调用栈清空\n再执行callback2，调用栈清空\n此时的queue：\n\ttask queue：callback6\n\tmicrotask：callback3\n优先执行微任务callback3，调用栈清空\n最后执行callback6\n```\n\n![](/images/event-loop/Untitled%2016.png)\n\n**demo7：综合实例**\n\n```javascript\nconsole.log('main start');\n\nsetTimeout(() => {\n\t\t//cb1\n    console.log('1');\n    Promise.resolve().then(() => {\n\t\t\t//cb2\n\t\t\tconsole.log('2')\n\t\t});\n}, 0);\n\nPromise.resolve().then(() => {\n\t\t//cb3\n    console.log('3');\n    Promise.resolve().then(() => {\n\t\t\t//cb4\n\t\t\tconsole.log('4')\n\t\t});\n});\n\nconsole.log('main end');\n\n//结果：\n// main start，main end，3412\n\nmain start 和 main end同步执行，同步代码执行完后，调用栈清空，此时的queue：\n\ttask queue：cb1\n\tmicrotask queue：cb3\n先执行微任务cb3，执行完后，调用栈清空，此时的queue：\n\ttask queue：cb1\n\tmicrotask queue：cb4\n先执行微任务cb4，执行完后，调用栈清空，此时的queue：\n\ttask queue：cb1\n\tmicrotask queue：空\n最后执行cb1，然后执行cb2\n```\n\n![](/images/event-loop/Untitled%2017.png)\n\n**rendering task的执行顺序**\n在上面的event loop执行机制中，没有提到rendering task，是因为rendering task是由浏览器自行去决定何时运行的，与当前设备的屏幕刷新率等因素相关，确定的是：\n- RAF 在 rendering task 初始期间执行\n- 如果定义了多个 RAF 回调，会被加入到 `Animation queue`中，在UI Rendering 期间，会清空 Animation queue，与 microtask 不同的是，如果清空 Animation queue 期间，有新的 animation task 被加入到 queue 中，此次 rendering task 执行期间，不会处理新的 animation task。\n\nmacrotask、microtask、animation task的区别，可以看在下面的动图中横向对比：\n\n![](/images/event-loop/raf.png)\n\n![](/images/event-loop/event-loop.gif)\n\n\n## 参考资料\n- [HTML规范](https://www.w3.org/TR/html5/webappapis.html#event-loops)\n- [NodeJS Event Loop 文档](https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop)\n- [mdn相关文档](https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack)\n- [Jake Archibald在JSConf.Asia的演讲视频【In The Loop】,很值得看：](https://www.youtube.com/watch?v=cCOL7MC4Pl0)\n- [Philip Roberts在JSConf的演讲视频【What the heck is the event loop anyway】,很值得看](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n- [Philip Roberts做的Event Loop可视化网站](http://latentflip.com/loupe/)\n- [JS Runtime运行时 - MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)","source":"_posts/event_loop.md","raw":"---\ntitle: 【Javascript Event Loop & 异步机制】总结\ncategories:\n    - 10技术 | JavaScript # 一级分类\ntags:\ndate: 2020-06-08\ndescription: 长文 + 动图 + 实例，试图解释清楚：Javascript Event Loop如何调度异步任务\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133228.png\n---\n## 带着问题看这篇文章\n- 我们写的各种回调什么时候执行？按照什么顺序执行？\n- setTimeout(cb,0)和Promise.resolve().then(cb)谁的回调先执行？\n- Javascript的单线程是如何实现异步并发的？\n- Event Loop到底是如何调度任务的？\n- 如何利用RAF优化性能？\n- 下面这段代码输出是什么？回答不对的朋友，看完这篇文章也许你的思路就会清晰~\n\n```javascript\nconsole.log(1);\nsetTimeout(() => {\n  console.log(2);\n  Promise.resolve().then(() => {\n    console.log(3)\n  });\n});\nnew Promise((resolve, reject) => {\n  console.log(4)\n  resolve(5)\n}).then((data) => {\n  console.log(data);\n})\nsetTimeout(() => {\n  console.log(6);\n})\nconsole.log(7);\n\n// 结果：1475236 \n```\n\n## JS Runtime 的几个概念\n\n\n### call stack 调用栈\n\n- 定义：调用栈是浏览器的JavaScript解释器追踪**函数执行流**的一种机制，函数调用形成了一个由若干帧组成的栈。（栈的特点是后进先出）\n- 作用：通过调用栈，我们能够追踪：哪个函数正执行；执行的函数体中又调用了哪个函数；以及每一帧的上下文+作用域\n- 机制：\n    - 每调用一个函数，就把该函数添加进调用栈并执行\n    - 如果正在调用的函数还调用了其他函数，把新函数也添加到调用栈中，立即执行\n    - 执行完毕后，解释器会将函数清除出栈，继续执行当前执行环境下剩余的代码\n    - 当分配的调用栈被占满时，会引发“**Stack Overflow堆栈溢出**”错误\n\n### heap 堆\n\n**堆**一大块内存区域（通常是非结构化的)，对象被分配在堆中\n\n### task queue 消息队列\n\nJS运行时包含了一个**消息队列**，每个消息队列关联着一个用于处理这个消息的回调函数。（队列的特点是先进先出）\n\n1. 当调用栈为空时，event loop会消息队列中的下一个消息\n2. 被处理的消息被移出队列，\n3. 消息被作为参数调用与之关联的回调函数\n4. 同时为该函数调用向调用栈添加一个新的栈帧\n5. 调用栈再次为空时，event loop会重复1-4步骤\n\n通常，task queue中的任务被称为：**macrotask 宏任务**.\n\n以下几种异步API的回调属于**宏任务**：\n- setTimeout\n- MessageChannel\n- postMessage\n- setImmediate\n\n### Single Thread 单线程\n\n- 单线程 = 单调用栈 = one thing at a time，不能并发，一次只能做一件事\n- 为什么单线程能实现异步和并发？\n- 因为单线程指的是js runtime\n- 而浏览器和Node提供了API，使我们可以调用其他线程去做并发的异步任务，例如网络请求、DOM、setTimeout\n\n### Non-blocking 非阻塞\n\n- blocking：阻塞，是指浏览器在等待耗时长的代码(eg.网络请求,I/O)期间，不能处理任何其他事情，包括用户响应。\n- 解决阻塞的方法：异步任务\n- 异步任务怎么实现的？依赖的就是**异步API**和**event loop事件循环**\n- JavaScript的事件循环模型与许多其他语言不同的一个非常有趣的特性是，它**永不阻塞**，所以当一个应用正等待一个异步任务时，它仍然可以处理其它事情，比如用户输入。（由于历史原因有一些**例外**，如 `alert` 或者`同步 XHR`，但应该尽量避免使用它们，[例外的例外也是存在的](https://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded/2734311#2734311)（但通常是实现导致的错误而非其它原因）。\n\n### **不被抢占**\n\n每个消息被完整的执行后，其他消息才会被执行。\n\n优点：当一个函数执行时，它不会被抢占，只有在它运行完毕后才会去运行其他代码，才能修改这个函数操作的数据。\n\n缺点：当一个消息需要太长时间才能处理完，浏览器就无法处理用户交互,eg.滚动和点击，这也是性能较差的网页“卡顿现象”的原因。\n\n因此良好的操作方式是：缩短单个消息处理时间，在可能的情况下尽量将一个消息裁剪成多个消息。以保证浏览器 `60 frames per second` 的流畅渲染，即每个消息处理时间 < 1000ms/60=16ms，\n\n## Event Loop 事件循环\n\n**event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。**\n\n- 浏览器的Event Loop模型是在[html5的规范](https://www.w3.org/TR/html5/webappapis.html#event-loops)中明确定义的，具体的实现由浏览器厂商来做。\n- NodeJS的Event Loop是基于libuv实现的。可以参考Node的[官方文档](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/)以及libuv的[官方文档](http://docs.libuv.org/en/v1.x/design.html)。\n\n### **浏览器EventLoop运行机制（不考虑microtask）**\n\n- 所有同步任务都在**主线程**上执行，形成一个**call stack**调用栈\n- 可以通过**浏览器API**调用 运行在其他线程的**异步任务**\n- 主线程之外，存在一个待处理消息的**消息队列task queue**。每一个消息都关联着一个用以处理这个消息的回调函数。\n- 当主线程调用栈中的所有同步任务执行完毕，系统就会读取task queue，取最先进的消息作为参数，将其关联的回调函数放入主线程调用栈中执行\n\n\n### **添加消息**\n\n- 浏览器中，如果一个事件有事件监听器，事件被触发后，一个消息就会被添加到消息队列中。\n- 除了事件，浏览器提供的其他API，例如setTimeout、xhr等异步任务，都会在任务结束后向消息队列添加消息\n\n### **setTimeout(fn,n)**\n\n- `setTimeout` 中的第二个参数n是指 消息被加入消息队列的最小延迟\n- 因此，不是保证回调在n毫秒内必须执行，而是保证回调在n毫秒之后被添加到消息队列，具体什么时候执行，取决于消息队列中待处理的消息 和 调用栈中已有的函数。\n- **零延迟**：`setTimeout 0` 的作用：将回调立即放入消息队列，而不是0s内立即执行\n\n### debug 一个 demo\n\n```jsx\n// demo\nfunction bar(){\n    debugger\n    console.log('bar')\n    foo()\n}\nfunction foo(){\n    debugger\n    console.log('foo')\n    setTimeout(function(){\n        debugger\n        console.log('setTimeout')\n    },1000)\n}\n(function all(){\n    debugger\n    console.log('anounymous')\n    bar()\n})()\n```\n\n![](/images/event-loop/Untitled.png)\n\n![](/images/event-loop/Untitled%201.png)\n\n![](/images/event-loop/Untitled%202.png)\n\n![](/images/event-loop/Untitled%203.png)\n\n**原理图**\n\n![](/images/event-loop/Untitled%204.png)\n\n### 知识延伸：webWorker & 跨运行时通信\n\n- 每个 **WebWorker** 、跨域的 **iframe 、**浏览器不同窗口都有各自的运行时，即都有各自的 call stack 、heap、queue。\n- 不同的运行时，可以通过 [postMessage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage) 方法来通信。\n\n**postMessage：**\n\n```javascript\n// eg. 当一个窗口可以获得另一个窗口的引用时，例如targetWindow = window.opener\n\notherWindow.postMessage(message, targetOrigin, [transfer]);\n```\n\notherWindow:其他窗口的引用：\n\n- iframe的contentWindow\n- 执行window.open返回的窗口对象\n- 通过window.frames获取到的子frame窗口对象\n\nmessage：要发送到其他窗口的数据，会被[结构化克隆算法](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)序列化\n\ntargetOrigin：用来指定哪些窗口能接收到消息事件\n\ntransfer：一串和message 同时传递的 [`Transferable`](https://developer.mozilla.org/zh-CN/docs/Web/API/Transferable) 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。\n\n**结构化克隆算法：**\n\n用于克隆复杂对象\n\n不能克隆：Error、Symbol、Function对象、DOM节点\n\n不能克隆：属性的描述符、RegExp对象的 lastIndex字段、原型链上的属性\n\n**Transferable对象：**\n\n一个抽象接口，代表可以在不同可执行上下文中传递的对象。（抽象：没有定义任何属性和方法）\n\n不同执行上下文：例如主线程和webworker之间。\n\nArrayBuffer 、MessagePort 和 ImageBitmap 实现于此接口。\n\n**接收消息：**\n\n```jsx\nwindow.addEventListener(\"message\", receiveMessage, false);\n\nfunction receiveMessage(event)\n{\n  // event.data：传递来的对象\n  // event.origin：消息发送方窗口的origin\n  // event.source：对消息发送窗口的引用\n}\n```\n\n## UI Rendering Task & 性能优化\n\n### 浏览器渲染 - Rendering Task步骤\n\n- requestAnimationFrame API(在chrome，火狐，符合WEB标准)\n- style calculation 计算样式\n- layout 计算布局\n- paint 实际渲染像素数据\n- requestAnimationFrame API(在edge，safari)\n\n### **render blocking 渲染阻塞**\n\n具体来讲，如果js runtime 的 call stack 一直不能清空，例如event loop将一个耗时的回调放进了call stack，会导致浏览器主线程被占用，无法执行render相关的工作，用户交互的事件也被添加在消息队列等待调用栈清空得不到执行，因此无法响应用户的操作，造成阻塞渲染的“卡顿”现象。\n\n### 60FPS\n\n在event loop处理消息队列时，我们提倡要缩短单个消息处理时间，在可能的情况下尽量将一个消息裁剪成多个消息，rendering task 可以在消息之间执行，以保证保证UI Rendering调用的频率能达到 `60 frames per second` （UI Rendering Task执行次数通常是每秒60次，但在大多数遵循W3C建议的浏览器中，回调函数执行次数通常与浏览器屏幕刷新次数相匹配。），即每次event loop处理消息执行回调所占用的时间 小于 16.67 毫秒。\n\n### demo1:\n\n看下面这段代码，先 append 一个元素再设置display=none去隐藏这个元素，**不必担心**这个元素会闪现，因为这两行代码会在某一次event loop中执行，只有这两行代码执行完，并且清空了当前调用栈，才有可能执行下一次UI Render task\n\n```jsx\ndocument.body.appendChild(el)\nel.style.display='none'\n```\n\n### demo2:\n\n下面这段代码，重复的显示隐藏一个元素，看起来开销很大，但其实在RenderingTask期间，只会取最终结果来渲染，\n\n```jsx\nbutton.addEventListener ('click,()=>{\nbox style. display='none';\n\tbox style. display ='block';\n\tbox style. display ='none';\n\tbox style. display ='block';\n\tbox style. display='none';\n\tbox style. display ='block';\n\tbox style. display ='none';\n\tbox style. display ='block';\n\tbox style. display ='none';\n})\n```\n\n### requestAnimationFrame\n\n- 简称RAF，是一个web api，要求浏览器在下一次重绘之前调用指定的回调函数，通常用于执行动画\n- 通过RAF，使浏览器可以在单次回流和重绘中优化处理并发动画，每次UI刷新之前执行RAF，使动画帧率更高\n- 当requestAnimationFrame() 运行在后台标签页或者隐藏的`<iframe>` 里时，requestAnimationFrame() 会被暂停调用以提升性能和电池寿命\n\ndemo1：requestAnimationFrame优化动画的一个例子\n\n```jsx\n// 使用RAF\nfunction callback(){\n\tmoveBoxForwardOnePixel();\n\trequestAnimationFrame(callback)\n}\ncallback();\n\n// 使用setTimeout\nfunction callback(){\n\tmoveBoxForwardOnePixel();\n\tsetTimeout(callback,0)\n}\n```\n\n效果：\n\n![](/images/event-loop/preview.gif)\n\ndemo2：用RAF控制动画执行顺序，需求是box元素的水平位置变化：1000→500\n\n```jsx\nbutton addEventListener ('click,()=>{\n\tbox.style.transform = 'translateX(1000px)'\n\tbox.style.transition= 'transform 1s ease-in-out'\n\tbox.style.transform = 'translateX(500px)'\n})\n\n//由于上述代码会一起执行，\n//因此渲染时，1000px会被忽略，浏览器会取500作为最终值，在下一帧渲染，\n//因此上述代码的效果是：元素位移0->500\n\n//换一种写法\nbutton addEventListener ('click,()=>{\n\tbox.style.transform = 'translateX(1000px)'\n\tbox.style.transition= 'transform 1s ease-in-out'\n\t\n\trequestAnimationFrame(()=>{\n\t\tbox.style.transform = 'translateX(500px)'\n\t})\n})\n// 上述代码，1000的初始值是有效的，\n//但是在下一次的rendering task期间，由于RAF先执行，因此500将1000覆盖\n//最终渲染的效果还是元素位移：0->500\n\n//如何令500在下下一次渲染再生效？嵌套调用RAF\nbutton addEventListener ('click,()=>{\n\tbox.style.transform = 'translateX(1000px)'\n\t\n\trequestAnimationFrame(()=>{\n\t\trequestAnimationFrame(()=>{\n\t\t\tbox.style.transition= 'transform 1s ease-in-out'\n\t\t\tbox.style.transform = 'translateX(500px)'\n\t\t})\n\t})\n})\n```\n\n## 可视化：event loop和rendering\n\n### 理想的状态\n\n![](/images/event-loop/Untitled%205.png)\n\n### setTimeout的浪费\n\n间隔调用setTimeout的效果：导致浪费\n\n![](/images/event-loop/Untitled%206.png)\n\n以前的动画仓库的处理方式：`setTimeout(animFrame, 1000/60)`\n\n但是这种处理方式不稳定，可能会不准确，因为\n\n![](/images/event-loop/Untitled%207.png)\n\n![](/images/event-loop/Untitled%208.png)\n\n### RAF的稳定有序状态\n\n![](/images/event-loop/Untitled%209.png)\n\n## MicroTask 微任务\n\n**微任务，microtask，也叫jobs。**\n\n### 微任务 异步类型\n\n一些异步任务执行完成后，其**回调**会依次进入microtask queue，等待后续被调用，这些异步任务包括：\n\n- **Promise.then**\n- MutationObserver\n- process.nextTick (Node独有)\n- Object.observe\n\n## ⭐event loop运行机制(含microtask)\n\nevent loop中任务的执行顺序：\n1. 同步代码执行，直至调用栈清空\n2. microtask：调用栈清空后，优先执行**所有**的microtask，如果有新的microtask，**继续执行新microtask，**直至microtask queue清空\n3. task queue：执行task queue第一个任务，后续的task暂不处理\n4. 每当调用栈清空后，重复2-3步骤\n\n\n**两个重点：**\n\n- 微任务阻塞浏览器：如果执行微任务期间，不停的有新的微任务，会导致浏览器阻塞\n- 微任务的执行会因为JS堆栈的情况有所不同，要根据**调用栈是否清空**去判断微任务是否会执行。\n\n一个直观的例子：\n\n```jsx\nPromise.resolve().then(()=>{\n    console.log('microtask 1')\n})\nPromise.resolve().then(()=>{\n    console.log('microtask 2')\n})\nconsole.log('sync code')\nsetTimeout(()=>{\n    console.log('macro task 1')\n    Promise.resolve().then(()=>{\n        console.log('microtask 3')\n    })\n},0)\nsetTimeout(()=>{\n    console.log('macro task 2')\n},0)\n\n//结果：\n//sync code 同步代码优先执行\n//microtask 1  同步代码执行完后，调用栈清空，优先执行 microtask  \n//microtask 2  同上\n//macro task 1  调用栈清空，microtask queue清空，此时可以执行一个位于队首的macro task，执行期间新增一个microtask\n//microtask 3  调用栈清空后，由于存在microtask，因此优先执行microtask\n//macro task 2  最后执行macro task，清空task queue\n```\n\n**流程图**\n![](/images/event-loop/Untitled%2010.png)\n\n**demo1：调用栈未清空，不执行microtask**\n\n在控制台中执行一段代码，会当做同步代码来处理。listener1执行后，微任务队列+1，但是因为是同步执行的代码，所以会立即执行listener2，微任务队列+1，所以顺序是`listener1,listener2,microtask1,microtask2`\n\n![](/images/event-loop/Untitled%2011.png)\n\n**demo2:调用栈清空后，microtask 优先于 macro task执行**\n\n同步执行两个setTimeout，会将 listener1和listener2加入到task queue，同步代码执行就结束。先执行listener1，将microtask1加入微任务队列，listener1执行完后，调用栈清空，即使这时候task queue还有listener2，也会先执行所有微任务，将所有微任务清空后，再执行listener2，因此输出顺序是 `listener1,microtask1,listener2,microtask2`  \n\n![](/images/event-loop/Untitled%2012.png)\n\n**demo3：同demo2**\n\n用户点击事件\n\n由于点击事件会被添加到task queue，因此，这个 demo3 的结果和 demo2 结果相同\n\n![](/images/event-loop/Untitled%2013.png)\n\n**demo4：同demo1**\n\njs调用click()事件\n\n由于是在代码中手动执行click，所以会同步执行两个listener，因此demo4和demo1结构相同。\n\n![](/images/event-loop/Untitled%2014.png)\n\n**demo5：micro 优先于 macro执行**\n\n![](/images/event-loop/Untitled%2015.png)\n\n**demo6：综合实例**\n\n```javascript\n// 浏览器中执行\nconsole.log(1);\nsetTimeout(() => {\n  console.log(2);// callback2，setTimeout属于宏任务\n  Promise.resolve().then(() => {\n    console.log(3)// callback3，Promise.then属于微任务\n  });\n});\nnew Promise((resolve, reject) => {\n  console.log(4)// 这里的代码是同步执行的\n  resolve(5)\n}).then((data) => {\n  console.log(data);// callback5，Promise.then属于微任务\n})\nsetTimeout(() => {\n  console.log(6);// callback6，setTimeout属于宏任务\n})\nconsole.log(7);\n\n// 结果：1475236 \n\n// 逻辑：\n147是同步执行，同步代码执行完后的queue：\n\ttask queue：callback2，callback6\n\tmicrotask：callback5\n此时调用栈已清空，优先执行微任务callback5，调用栈清空\n再执行callback2，调用栈清空\n此时的queue：\n\ttask queue：callback6\n\tmicrotask：callback3\n优先执行微任务callback3，调用栈清空\n最后执行callback6\n```\n\n![](/images/event-loop/Untitled%2016.png)\n\n**demo7：综合实例**\n\n```javascript\nconsole.log('main start');\n\nsetTimeout(() => {\n\t\t//cb1\n    console.log('1');\n    Promise.resolve().then(() => {\n\t\t\t//cb2\n\t\t\tconsole.log('2')\n\t\t});\n}, 0);\n\nPromise.resolve().then(() => {\n\t\t//cb3\n    console.log('3');\n    Promise.resolve().then(() => {\n\t\t\t//cb4\n\t\t\tconsole.log('4')\n\t\t});\n});\n\nconsole.log('main end');\n\n//结果：\n// main start，main end，3412\n\nmain start 和 main end同步执行，同步代码执行完后，调用栈清空，此时的queue：\n\ttask queue：cb1\n\tmicrotask queue：cb3\n先执行微任务cb3，执行完后，调用栈清空，此时的queue：\n\ttask queue：cb1\n\tmicrotask queue：cb4\n先执行微任务cb4，执行完后，调用栈清空，此时的queue：\n\ttask queue：cb1\n\tmicrotask queue：空\n最后执行cb1，然后执行cb2\n```\n\n![](/images/event-loop/Untitled%2017.png)\n\n**rendering task的执行顺序**\n在上面的event loop执行机制中，没有提到rendering task，是因为rendering task是由浏览器自行去决定何时运行的，与当前设备的屏幕刷新率等因素相关，确定的是：\n- RAF 在 rendering task 初始期间执行\n- 如果定义了多个 RAF 回调，会被加入到 `Animation queue`中，在UI Rendering 期间，会清空 Animation queue，与 microtask 不同的是，如果清空 Animation queue 期间，有新的 animation task 被加入到 queue 中，此次 rendering task 执行期间，不会处理新的 animation task。\n\nmacrotask、microtask、animation task的区别，可以看在下面的动图中横向对比：\n\n![](/images/event-loop/raf.png)\n\n![](/images/event-loop/event-loop.gif)\n\n\n## 参考资料\n- [HTML规范](https://www.w3.org/TR/html5/webappapis.html#event-loops)\n- [NodeJS Event Loop 文档](https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop)\n- [mdn相关文档](https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack)\n- [Jake Archibald在JSConf.Asia的演讲视频【In The Loop】,很值得看：](https://www.youtube.com/watch?v=cCOL7MC4Pl0)\n- [Philip Roberts在JSConf的演讲视频【What the heck is the event loop anyway】,很值得看](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n- [Philip Roberts做的Event Loop可视化网站](http://latentflip.com/loupe/)\n- [JS Runtime运行时 - MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)","slug":"event_loop","published":1,"updated":"2020-12-11T05:32:42.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88jca005jc8y6l8p7h1d5","content":"<h2 id=\"带着问题看这篇文章\"><a href=\"#带着问题看这篇文章\" class=\"headerlink\" title=\"带着问题看这篇文章\"></a>带着问题看这篇文章</h2><ul>\n<li>我们写的各种回调什么时候执行？按照什么顺序执行？</li>\n<li>setTimeout(cb,0)和Promise.resolve().then(cb)谁的回调先执行？</li>\n<li>Javascript的单线程是如何实现异步并发的？</li>\n<li>Event Loop到底是如何调度任务的？</li>\n<li>如何利用RAF优化性能？</li>\n<li>下面这段代码输出是什么？回答不对的朋友，看完这篇文章也许你的思路就会清晰~</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果：1475236</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"JS-Runtime-的几个概念\"><a href=\"#JS-Runtime-的几个概念\" class=\"headerlink\" title=\"JS Runtime 的几个概念\"></a>JS Runtime 的几个概念</h2><h3 id=\"call-stack-调用栈\"><a href=\"#call-stack-调用栈\" class=\"headerlink\" title=\"call stack 调用栈\"></a>call stack 调用栈</h3><ul>\n<li>定义：调用栈是浏览器的JavaScript解释器追踪<strong>函数执行流</strong>的一种机制，函数调用形成了一个由若干帧组成的栈。（栈的特点是后进先出）</li>\n<li>作用：通过调用栈，我们能够追踪：哪个函数正执行；执行的函数体中又调用了哪个函数；以及每一帧的上下文+作用域</li>\n<li>机制：<ul>\n<li>每调用一个函数，就把该函数添加进调用栈并执行</li>\n<li>如果正在调用的函数还调用了其他函数，把新函数也添加到调用栈中，立即执行</li>\n<li>执行完毕后，解释器会将函数清除出栈，继续执行当前执行环境下剩余的代码</li>\n<li>当分配的调用栈被占满时，会引发“<strong>Stack Overflow堆栈溢出</strong>”错误</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"heap-堆\"><a href=\"#heap-堆\" class=\"headerlink\" title=\"heap 堆\"></a>heap 堆</h3><p><strong>堆</strong>一大块内存区域（通常是非结构化的)，对象被分配在堆中</p>\n<h3 id=\"task-queue-消息队列\"><a href=\"#task-queue-消息队列\" class=\"headerlink\" title=\"task queue 消息队列\"></a>task queue 消息队列</h3><p>JS运行时包含了一个<strong>消息队列</strong>，每个消息队列关联着一个用于处理这个消息的回调函数。（队列的特点是先进先出）</p>\n<ol>\n<li>当调用栈为空时，event loop会消息队列中的下一个消息</li>\n<li>被处理的消息被移出队列，</li>\n<li>消息被作为参数调用与之关联的回调函数</li>\n<li>同时为该函数调用向调用栈添加一个新的栈帧</li>\n<li>调用栈再次为空时，event loop会重复1-4步骤</li>\n</ol>\n<p>通常，task queue中的任务被称为：<strong>macrotask 宏任务</strong>.</p>\n<p>以下几种异步API的回调属于<strong>宏任务</strong>：</p>\n<ul>\n<li>setTimeout</li>\n<li>MessageChannel</li>\n<li>postMessage</li>\n<li>setImmediate</li>\n</ul>\n<h3 id=\"Single-Thread-单线程\"><a href=\"#Single-Thread-单线程\" class=\"headerlink\" title=\"Single Thread 单线程\"></a>Single Thread 单线程</h3><ul>\n<li>单线程 = 单调用栈 = one thing at a time，不能并发，一次只能做一件事</li>\n<li>为什么单线程能实现异步和并发？</li>\n<li>因为单线程指的是js runtime</li>\n<li>而浏览器和Node提供了API，使我们可以调用其他线程去做并发的异步任务，例如网络请求、DOM、setTimeout</li>\n</ul>\n<h3 id=\"Non-blocking-非阻塞\"><a href=\"#Non-blocking-非阻塞\" class=\"headerlink\" title=\"Non-blocking 非阻塞\"></a>Non-blocking 非阻塞</h3><ul>\n<li>blocking：阻塞，是指浏览器在等待耗时长的代码(eg.网络请求,I/O)期间，不能处理任何其他事情，包括用户响应。</li>\n<li>解决阻塞的方法：异步任务</li>\n<li>异步任务怎么实现的？依赖的就是<strong>异步API</strong>和<strong>event loop事件循环</strong></li>\n<li>JavaScript的事件循环模型与许多其他语言不同的一个非常有趣的特性是，它<strong>永不阻塞</strong>，所以当一个应用正等待一个异步任务时，它仍然可以处理其它事情，比如用户输入。（由于历史原因有一些<strong>例外</strong>，如 <code>alert</code> 或者<code>同步 XHR</code>，但应该尽量避免使用它们，<a href=\"https://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded/2734311#2734311\" target=\"_blank\" rel=\"noopener\">例外的例外也是存在的</a>（但通常是实现导致的错误而非其它原因）。</li>\n</ul>\n<h3 id=\"不被抢占\"><a href=\"#不被抢占\" class=\"headerlink\" title=\"不被抢占\"></a><strong>不被抢占</strong></h3><p>每个消息被完整的执行后，其他消息才会被执行。</p>\n<p>优点：当一个函数执行时，它不会被抢占，只有在它运行完毕后才会去运行其他代码，才能修改这个函数操作的数据。</p>\n<p>缺点：当一个消息需要太长时间才能处理完，浏览器就无法处理用户交互,eg.滚动和点击，这也是性能较差的网页“卡顿现象”的原因。</p>\n<p>因此良好的操作方式是：缩短单个消息处理时间，在可能的情况下尽量将一个消息裁剪成多个消息。以保证浏览器 <code>60 frames per second</code> 的流畅渲染，即每个消息处理时间 &lt; 1000ms/60=16ms，</p>\n<h2 id=\"Event-Loop-事件循环\"><a href=\"#Event-Loop-事件循环\" class=\"headerlink\" title=\"Event Loop 事件循环\"></a>Event Loop 事件循环</h2><p><strong>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</strong></p>\n<ul>\n<li>浏览器的Event Loop模型是在<a href=\"https://www.w3.org/TR/html5/webappapis.html#event-loops\" target=\"_blank\" rel=\"noopener\">html5的规范</a>中明确定义的，具体的实现由浏览器厂商来做。</li>\n<li>NodeJS的Event Loop是基于libuv实现的。可以参考Node的<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"noopener\">官方文档</a>以及libuv的<a href=\"http://docs.libuv.org/en/v1.x/design.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</li>\n</ul>\n<h3 id=\"浏览器EventLoop运行机制（不考虑microtask）\"><a href=\"#浏览器EventLoop运行机制（不考虑microtask）\" class=\"headerlink\" title=\"浏览器EventLoop运行机制（不考虑microtask）\"></a><strong>浏览器EventLoop运行机制（不考虑microtask）</strong></h3><ul>\n<li>所有同步任务都在<strong>主线程</strong>上执行，形成一个<strong>call stack</strong>调用栈</li>\n<li>可以通过<strong>浏览器API</strong>调用 运行在其他线程的<strong>异步任务</strong></li>\n<li>主线程之外，存在一个待处理消息的<strong>消息队列task queue</strong>。每一个消息都关联着一个用以处理这个消息的回调函数。</li>\n<li>当主线程调用栈中的所有同步任务执行完毕，系统就会读取task queue，取最先进的消息作为参数，将其关联的回调函数放入主线程调用栈中执行</li>\n</ul>\n<h3 id=\"添加消息\"><a href=\"#添加消息\" class=\"headerlink\" title=\"添加消息\"></a><strong>添加消息</strong></h3><ul>\n<li>浏览器中，如果一个事件有事件监听器，事件被触发后，一个消息就会被添加到消息队列中。</li>\n<li>除了事件，浏览器提供的其他API，例如setTimeout、xhr等异步任务，都会在任务结束后向消息队列添加消息</li>\n</ul>\n<h3 id=\"setTimeout-fn-n\"><a href=\"#setTimeout-fn-n\" class=\"headerlink\" title=\"setTimeout(fn,n)\"></a><strong>setTimeout(fn,n)</strong></h3><ul>\n<li><code>setTimeout</code> 中的第二个参数n是指 消息被加入消息队列的最小延迟</li>\n<li>因此，不是保证回调在n毫秒内必须执行，而是保证回调在n毫秒之后被添加到消息队列，具体什么时候执行，取决于消息队列中待处理的消息 和 调用栈中已有的函数。</li>\n<li><strong>零延迟</strong>：<code>setTimeout 0</code> 的作用：将回调立即放入消息队列，而不是0s内立即执行</li>\n</ul>\n<h3 id=\"debug-一个-demo\"><a href=\"#debug-一个-demo\" class=\"headerlink\" title=\"debug 一个 demo\"></a>debug 一个 demo</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>)</span><br><span class=\"line\">    foo()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">debugger</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">all</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'anounymous'</span>)</span><br><span class=\"line\">    bar()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/event-loop/Untitled.png\" alt></p>\n<p><img src=\"/images/event-loop/Untitled%201.png\" alt></p>\n<p><img src=\"/images/event-loop/Untitled%202.png\" alt></p>\n<p><img src=\"/images/event-loop/Untitled%203.png\" alt></p>\n<p><strong>原理图</strong></p>\n<p><img src=\"/images/event-loop/Untitled%204.png\" alt></p>\n<h3 id=\"知识延伸：webWorker-amp-跨运行时通信\"><a href=\"#知识延伸：webWorker-amp-跨运行时通信\" class=\"headerlink\" title=\"知识延伸：webWorker &amp; 跨运行时通信\"></a>知识延伸：webWorker &amp; 跨运行时通信</h3><ul>\n<li>每个 <strong>WebWorker</strong> 、跨域的 <strong>iframe 、</strong>浏览器不同窗口都有各自的运行时，即都有各自的 call stack 、heap、queue。</li>\n<li>不同的运行时，可以通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\" target=\"_blank\" rel=\"noopener\">postMessage</a> 方法来通信。</li>\n</ul>\n<p><strong>postMessage：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg. 当一个窗口可以获得另一个窗口的引用时，例如targetWindow = window.opener</span></span><br><span class=\"line\"></span><br><span class=\"line\">otherWindow.postMessage(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure>\n<p>otherWindow:其他窗口的引用：</p>\n<ul>\n<li>iframe的contentWindow</li>\n<li>执行window.open返回的窗口对象</li>\n<li>通过window.frames获取到的子frame窗口对象</li>\n</ul>\n<p>message：要发送到其他窗口的数据，会被<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\" target=\"_blank\" rel=\"noopener\">结构化克隆算法</a>序列化</p>\n<p>targetOrigin：用来指定哪些窗口能接收到消息事件</p>\n<p>transfer：一串和message 同时传递的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Transferable\" target=\"_blank\" rel=\"noopener\"><code>Transferable</code></a> 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</p>\n<p><strong>结构化克隆算法：</strong></p>\n<p>用于克隆复杂对象</p>\n<p>不能克隆：Error、Symbol、Function对象、DOM节点</p>\n<p>不能克隆：属性的描述符、RegExp对象的 lastIndex字段、原型链上的属性</p>\n<p><strong>Transferable对象：</strong></p>\n<p>一个抽象接口，代表可以在不同可执行上下文中传递的对象。（抽象：没有定义任何属性和方法）</p>\n<p>不同执行上下文：例如主线程和webworker之间。</p>\n<p>ArrayBuffer 、MessagePort 和 ImageBitmap 实现于此接口。</p>\n<p><strong>接收消息：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>, receiveMessage, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">receiveMessage</span>(<span class=\"params\">event</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// event.data：传递来的对象</span></span><br><span class=\"line\">  <span class=\"comment\">// event.origin：消息发送方窗口的origin</span></span><br><span class=\"line\">  <span class=\"comment\">// event.source：对消息发送窗口的引用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"UI-Rendering-Task-amp-性能优化\"><a href=\"#UI-Rendering-Task-amp-性能优化\" class=\"headerlink\" title=\"UI Rendering Task &amp; 性能优化\"></a>UI Rendering Task &amp; 性能优化</h2><h3 id=\"浏览器渲染-Rendering-Task步骤\"><a href=\"#浏览器渲染-Rendering-Task步骤\" class=\"headerlink\" title=\"浏览器渲染 - Rendering Task步骤\"></a>浏览器渲染 - Rendering Task步骤</h3><ul>\n<li>requestAnimationFrame API(在chrome，火狐，符合WEB标准)</li>\n<li>style calculation 计算样式</li>\n<li>layout 计算布局</li>\n<li>paint 实际渲染像素数据</li>\n<li>requestAnimationFrame API(在edge，safari)</li>\n</ul>\n<h3 id=\"render-blocking-渲染阻塞\"><a href=\"#render-blocking-渲染阻塞\" class=\"headerlink\" title=\"render blocking 渲染阻塞\"></a><strong>render blocking 渲染阻塞</strong></h3><p>具体来讲，如果js runtime 的 call stack 一直不能清空，例如event loop将一个耗时的回调放进了call stack，会导致浏览器主线程被占用，无法执行render相关的工作，用户交互的事件也被添加在消息队列等待调用栈清空得不到执行，因此无法响应用户的操作，造成阻塞渲染的“卡顿”现象。</p>\n<h3 id=\"60FPS\"><a href=\"#60FPS\" class=\"headerlink\" title=\"60FPS\"></a>60FPS</h3><p>在event loop处理消息队列时，我们提倡要缩短单个消息处理时间，在可能的情况下尽量将一个消息裁剪成多个消息，rendering task 可以在消息之间执行，以保证保证UI Rendering调用的频率能达到 <code>60 frames per second</code> （UI Rendering Task执行次数通常是每秒60次，但在大多数遵循W3C建议的浏览器中，回调函数执行次数通常与浏览器屏幕刷新次数相匹配。），即每次event loop处理消息执行回调所占用的时间 小于 16.67 毫秒。</p>\n<h3 id=\"demo1\"><a href=\"#demo1\" class=\"headerlink\" title=\"demo1:\"></a>demo1:</h3><p>看下面这段代码，先 append 一个元素再设置display=none去隐藏这个元素，<strong>不必担心</strong>这个元素会闪现，因为这两行代码会在某一次event loop中执行，只有这两行代码执行完，并且清空了当前调用栈，才有可能执行下一次UI Render task</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(el)</span><br><span class=\"line\">el.style.display=<span class=\"string\">'none'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"demo2\"><a href=\"#demo2\" class=\"headerlink\" title=\"demo2:\"></a>demo2:</h3><p>下面这段代码，重复的显示隐藏一个元素，看起来开销很大，但其实在RenderingTask期间，只会取最终结果来渲染，</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.addEventListener (<span class=\"string\">'click,()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">box style. display='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>block<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>block<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>block<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>block<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h3><ul>\n<li>简称RAF，是一个web api，要求浏览器在下一次重绘之前调用指定的回调函数，通常用于执行动画</li>\n<li>通过RAF，使浏览器可以在单次回流和重绘中优化处理并发动画，每次UI刷新之前执行RAF，使动画帧率更高</li>\n<li>当requestAnimationFrame() 运行在后台标签页或者隐藏的<code>&lt;iframe&gt;</code> 里时，requestAnimationFrame() 会被暂停调用以提升性能和电池寿命</li>\n</ul>\n<p>demo1：requestAnimationFrame优化动画的一个例子</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用RAF</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tmoveBoxForwardOnePixel();</span><br><span class=\"line\">\trequestAnimationFrame(callback)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callback();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用setTimeout</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tmoveBoxForwardOnePixel();</span><br><span class=\"line\">\tsetTimeout(callback,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/images/event-loop/preview.gif\" alt></p>\n<p>demo2：用RAF控制动画执行顺序，需求是box元素的水平位置变化：1000→500</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button addEventListener (<span class=\"string\">'click,()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">\tbox.style.transform = '</span>translateX(<span class=\"number\">1000</span>px)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\tbox.style.transition= '</span>transform <span class=\"number\">1</span>s ease-<span class=\"keyword\">in</span>-out<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\tbox.style.transform = '</span>translateX(<span class=\"number\">500</span>px)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//由于上述代码会一起执行，</span></span><br><span class=\"line\"><span class=\"string\">//因此渲染时，1000px会被忽略，浏览器会取500作为最终值，在下一帧渲染，</span></span><br><span class=\"line\"><span class=\"string\">//因此上述代码的效果是：元素位移0-&gt;500</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//换一种写法</span></span><br><span class=\"line\"><span class=\"string\">button addEventListener ('</span>click,()=&gt;&#123;</span><br><span class=\"line\">\tbox.style.transform = <span class=\"string\">'translateX(1000px)'</span></span><br><span class=\"line\">\tbox.style.transition= <span class=\"string\">'transform 1s ease-in-out'</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\trequestAnimationFrame(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\tbox.style.transform = <span class=\"string\">'translateX(500px)'</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 上述代码，1000的初始值是有效的，</span></span><br><span class=\"line\"><span class=\"comment\">//但是在下一次的rendering task期间，由于RAF先执行，因此500将1000覆盖</span></span><br><span class=\"line\"><span class=\"comment\">//最终渲染的效果还是元素位移：0-&gt;500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如何令500在下下一次渲染再生效？嵌套调用RAF</span></span><br><span class=\"line\">button addEventListener (<span class=\"string\">'click,()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">\tbox.style.transform = '</span>translateX(<span class=\"number\">1000</span>px)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\trequestAnimationFrame(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\trequestAnimationFrame(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tbox.style.transition= '</span>transform <span class=\"number\">1</span>s ease-<span class=\"keyword\">in</span>-out<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tbox.style.transform = '</span>translateX(<span class=\"number\">500</span>px)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"可视化：event-loop和rendering\"><a href=\"#可视化：event-loop和rendering\" class=\"headerlink\" title=\"可视化：event loop和rendering\"></a>可视化：event loop和rendering</h2><h3 id=\"理想的状态\"><a href=\"#理想的状态\" class=\"headerlink\" title=\"理想的状态\"></a>理想的状态</h3><p><img src=\"/images/event-loop/Untitled%205.png\" alt></p>\n<h3 id=\"setTimeout的浪费\"><a href=\"#setTimeout的浪费\" class=\"headerlink\" title=\"setTimeout的浪费\"></a>setTimeout的浪费</h3><p>间隔调用setTimeout的效果：导致浪费</p>\n<p><img src=\"/images/event-loop/Untitled%206.png\" alt></p>\n<p>以前的动画仓库的处理方式：<code>setTimeout(animFrame, 1000/60)</code></p>\n<p>但是这种处理方式不稳定，可能会不准确，因为</p>\n<p><img src=\"/images/event-loop/Untitled%207.png\" alt></p>\n<p><img src=\"/images/event-loop/Untitled%208.png\" alt></p>\n<h3 id=\"RAF的稳定有序状态\"><a href=\"#RAF的稳定有序状态\" class=\"headerlink\" title=\"RAF的稳定有序状态\"></a>RAF的稳定有序状态</h3><p><img src=\"/images/event-loop/Untitled%209.png\" alt></p>\n<h2 id=\"MicroTask-微任务\"><a href=\"#MicroTask-微任务\" class=\"headerlink\" title=\"MicroTask 微任务\"></a>MicroTask 微任务</h2><p><strong>微任务，microtask，也叫jobs。</strong></p>\n<h3 id=\"微任务-异步类型\"><a href=\"#微任务-异步类型\" class=\"headerlink\" title=\"微任务 异步类型\"></a>微任务 异步类型</h3><p>一些异步任务执行完成后，其<strong>回调</strong>会依次进入microtask queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li><strong>Promise.then</strong></li>\n<li>MutationObserver</li>\n<li>process.nextTick (Node独有)</li>\n<li>Object.observe</li>\n</ul>\n<h2 id=\"⭐event-loop运行机制-含microtask\"><a href=\"#⭐event-loop运行机制-含microtask\" class=\"headerlink\" title=\"⭐event loop运行机制(含microtask)\"></a>⭐event loop运行机制(含microtask)</h2><p>event loop中任务的执行顺序：</p>\n<ol>\n<li>同步代码执行，直至调用栈清空</li>\n<li>microtask：调用栈清空后，优先执行<strong>所有</strong>的microtask，如果有新的microtask，<strong>继续执行新microtask，</strong>直至microtask queue清空</li>\n<li>task queue：执行task queue第一个任务，后续的task暂不处理</li>\n<li>每当调用栈清空后，重复2-3步骤</li>\n</ol>\n<p><strong>两个重点：</strong></p>\n<ul>\n<li>微任务阻塞浏览器：如果执行微任务期间，不停的有新的微任务，会导致浏览器阻塞</li>\n<li>微任务的执行会因为JS堆栈的情况有所不同，要根据<strong>调用栈是否清空</strong>去判断微任务是否会执行。</li>\n</ul>\n<p>一个直观的例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'microtask 1'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'microtask 2'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sync code'</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'macro task 1'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'microtask 3'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'macro task 2'</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">//sync code 同步代码优先执行</span></span><br><span class=\"line\"><span class=\"comment\">//microtask 1  同步代码执行完后，调用栈清空，优先执行 microtask  </span></span><br><span class=\"line\"><span class=\"comment\">//microtask 2  同上</span></span><br><span class=\"line\"><span class=\"comment\">//macro task 1  调用栈清空，microtask queue清空，此时可以执行一个位于队首的macro task，执行期间新增一个microtask</span></span><br><span class=\"line\"><span class=\"comment\">//microtask 3  调用栈清空后，由于存在microtask，因此优先执行microtask</span></span><br><span class=\"line\"><span class=\"comment\">//macro task 2  最后执行macro task，清空task queue</span></span><br></pre></td></tr></table></figure>\n<p><strong>流程图</strong><br><img src=\"/images/event-loop/Untitled%2010.png\" alt></p>\n<p><strong>demo1：调用栈未清空，不执行microtask</strong></p>\n<p>在控制台中执行一段代码，会当做同步代码来处理。listener1执行后，微任务队列+1，但是因为是同步执行的代码，所以会立即执行listener2，微任务队列+1，所以顺序是<code>listener1,listener2,microtask1,microtask2</code></p>\n<p><img src=\"/images/event-loop/Untitled%2011.png\" alt></p>\n<p><strong>demo2:调用栈清空后，microtask 优先于 macro task执行</strong></p>\n<p>同步执行两个setTimeout，会将 listener1和listener2加入到task queue，同步代码执行就结束。先执行listener1，将microtask1加入微任务队列，listener1执行完后，调用栈清空，即使这时候task queue还有listener2，也会先执行所有微任务，将所有微任务清空后，再执行listener2，因此输出顺序是 <code>listener1,microtask1,listener2,microtask2</code>  </p>\n<p><img src=\"/images/event-loop/Untitled%2012.png\" alt></p>\n<p><strong>demo3：同demo2</strong></p>\n<p>用户点击事件</p>\n<p>由于点击事件会被添加到task queue，因此，这个 demo3 的结果和 demo2 结果相同</p>\n<p><img src=\"/images/event-loop/Untitled%2013.png\" alt></p>\n<p><strong>demo4：同demo1</strong></p>\n<p>js调用click()事件</p>\n<p>由于是在代码中手动执行click，所以会同步执行两个listener，因此demo4和demo1结构相同。</p>\n<p><img src=\"/images/event-loop/Untitled%2014.png\" alt></p>\n<p><strong>demo5：micro 优先于 macro执行</strong></p>\n<p><img src=\"/images/event-loop/Untitled%2015.png\" alt></p>\n<p><strong>demo6：综合实例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浏览器中执行</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);<span class=\"comment\">// callback2，setTimeout属于宏任务</span></span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)<span class=\"comment\">// callback3，Promise.then属于微任务</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)<span class=\"comment\">// 这里的代码是同步执行的</span></span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);<span class=\"comment\">// callback5，Promise.then属于微任务</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);<span class=\"comment\">// callback6，setTimeout属于宏任务</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果：1475236 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 逻辑：</span></span><br><span class=\"line\"><span class=\"number\">147</span>是同步执行，同步代码执行完后的queue：</span><br><span class=\"line\">\ttask queue：callback2，callback6</span><br><span class=\"line\">\tmicrotask：callback5</span><br><span class=\"line\">此时调用栈已清空，优先执行微任务callback5，调用栈清空</span><br><span class=\"line\">再执行callback2，调用栈清空</span><br><span class=\"line\">此时的queue：</span><br><span class=\"line\">\ttask queue：callback6</span><br><span class=\"line\">\tmicrotask：callback3</span><br><span class=\"line\">优先执行微任务callback3，调用栈清空</span><br><span class=\"line\">最后执行callback6</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/event-loop/Untitled%2016.png\" alt></p>\n<p><strong>demo7：综合实例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main start'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cb1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//cb2</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cb3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//cb4</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'4'</span>)</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main end'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">// main start，main end，3412</span></span><br><span class=\"line\"></span><br><span class=\"line\">main start 和 main end同步执行，同步代码执行完后，调用栈清空，此时的queue：</span><br><span class=\"line\">\ttask queue：cb1</span><br><span class=\"line\">\tmicrotask queue：cb3</span><br><span class=\"line\">先执行微任务cb3，执行完后，调用栈清空，此时的queue：</span><br><span class=\"line\">\ttask queue：cb1</span><br><span class=\"line\">\tmicrotask queue：cb4</span><br><span class=\"line\">先执行微任务cb4，执行完后，调用栈清空，此时的queue：</span><br><span class=\"line\">\ttask queue：cb1</span><br><span class=\"line\">\tmicrotask queue：空</span><br><span class=\"line\">最后执行cb1，然后执行cb2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/event-loop/Untitled%2017.png\" alt></p>\n<p><strong>rendering task的执行顺序</strong><br>在上面的event loop执行机制中，没有提到rendering task，是因为rendering task是由浏览器自行去决定何时运行的，与当前设备的屏幕刷新率等因素相关，确定的是：</p>\n<ul>\n<li>RAF 在 rendering task 初始期间执行</li>\n<li>如果定义了多个 RAF 回调，会被加入到 <code>Animation queue</code>中，在UI Rendering 期间，会清空 Animation queue，与 microtask 不同的是，如果清空 Animation queue 期间，有新的 animation task 被加入到 queue 中，此次 rendering task 执行期间，不会处理新的 animation task。</li>\n</ul>\n<p>macrotask、microtask、animation task的区别，可以看在下面的动图中横向对比：</p>\n<p><img src=\"/images/event-loop/raf.png\" alt></p>\n<p><img src=\"/images/event-loop/event-loop.gif\" alt></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.w3.org/TR/html5/webappapis.html#event-loops\" target=\"_blank\" rel=\"noopener\">HTML规范</a></li>\n<li><a href=\"https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop\" target=\"_blank\" rel=\"noopener\">NodeJS Event Loop 文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack\" target=\"_blank\" rel=\"noopener\">mdn相关文档</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=cCOL7MC4Pl0\" target=\"_blank\" rel=\"noopener\">Jake Archibald在JSConf.Asia的演讲视频【In The Loop】,很值得看：</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">Philip Roberts在JSConf的演讲视频【What the heck is the event loop anyway】,很值得看</a></li>\n<li><a href=\"http://latentflip.com/loupe/\" target=\"_blank\" rel=\"noopener\">Philip Roberts做的Event Loop可视化网站</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">JS Runtime运行时 - MDN</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"带着问题看这篇文章\"><a href=\"#带着问题看这篇文章\" class=\"headerlink\" title=\"带着问题看这篇文章\"></a>带着问题看这篇文章</h2><ul>\n<li>我们写的各种回调什么时候执行？按照什么顺序执行？</li>\n<li>setTimeout(cb,0)和Promise.resolve().then(cb)谁的回调先执行？</li>\n<li>Javascript的单线程是如何实现异步并发的？</li>\n<li>Event Loop到底是如何调度任务的？</li>\n<li>如何利用RAF优化性能？</li>\n<li>下面这段代码输出是什么？回答不对的朋友，看完这篇文章也许你的思路就会清晰~</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果：1475236</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"JS-Runtime-的几个概念\"><a href=\"#JS-Runtime-的几个概念\" class=\"headerlink\" title=\"JS Runtime 的几个概念\"></a>JS Runtime 的几个概念</h2><h3 id=\"call-stack-调用栈\"><a href=\"#call-stack-调用栈\" class=\"headerlink\" title=\"call stack 调用栈\"></a>call stack 调用栈</h3><ul>\n<li>定义：调用栈是浏览器的JavaScript解释器追踪<strong>函数执行流</strong>的一种机制，函数调用形成了一个由若干帧组成的栈。（栈的特点是后进先出）</li>\n<li>作用：通过调用栈，我们能够追踪：哪个函数正执行；执行的函数体中又调用了哪个函数；以及每一帧的上下文+作用域</li>\n<li>机制：<ul>\n<li>每调用一个函数，就把该函数添加进调用栈并执行</li>\n<li>如果正在调用的函数还调用了其他函数，把新函数也添加到调用栈中，立即执行</li>\n<li>执行完毕后，解释器会将函数清除出栈，继续执行当前执行环境下剩余的代码</li>\n<li>当分配的调用栈被占满时，会引发“<strong>Stack Overflow堆栈溢出</strong>”错误</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"heap-堆\"><a href=\"#heap-堆\" class=\"headerlink\" title=\"heap 堆\"></a>heap 堆</h3><p><strong>堆</strong>一大块内存区域（通常是非结构化的)，对象被分配在堆中</p>\n<h3 id=\"task-queue-消息队列\"><a href=\"#task-queue-消息队列\" class=\"headerlink\" title=\"task queue 消息队列\"></a>task queue 消息队列</h3><p>JS运行时包含了一个<strong>消息队列</strong>，每个消息队列关联着一个用于处理这个消息的回调函数。（队列的特点是先进先出）</p>\n<ol>\n<li>当调用栈为空时，event loop会消息队列中的下一个消息</li>\n<li>被处理的消息被移出队列，</li>\n<li>消息被作为参数调用与之关联的回调函数</li>\n<li>同时为该函数调用向调用栈添加一个新的栈帧</li>\n<li>调用栈再次为空时，event loop会重复1-4步骤</li>\n</ol>\n<p>通常，task queue中的任务被称为：<strong>macrotask 宏任务</strong>.</p>\n<p>以下几种异步API的回调属于<strong>宏任务</strong>：</p>\n<ul>\n<li>setTimeout</li>\n<li>MessageChannel</li>\n<li>postMessage</li>\n<li>setImmediate</li>\n</ul>\n<h3 id=\"Single-Thread-单线程\"><a href=\"#Single-Thread-单线程\" class=\"headerlink\" title=\"Single Thread 单线程\"></a>Single Thread 单线程</h3><ul>\n<li>单线程 = 单调用栈 = one thing at a time，不能并发，一次只能做一件事</li>\n<li>为什么单线程能实现异步和并发？</li>\n<li>因为单线程指的是js runtime</li>\n<li>而浏览器和Node提供了API，使我们可以调用其他线程去做并发的异步任务，例如网络请求、DOM、setTimeout</li>\n</ul>\n<h3 id=\"Non-blocking-非阻塞\"><a href=\"#Non-blocking-非阻塞\" class=\"headerlink\" title=\"Non-blocking 非阻塞\"></a>Non-blocking 非阻塞</h3><ul>\n<li>blocking：阻塞，是指浏览器在等待耗时长的代码(eg.网络请求,I/O)期间，不能处理任何其他事情，包括用户响应。</li>\n<li>解决阻塞的方法：异步任务</li>\n<li>异步任务怎么实现的？依赖的就是<strong>异步API</strong>和<strong>event loop事件循环</strong></li>\n<li>JavaScript的事件循环模型与许多其他语言不同的一个非常有趣的特性是，它<strong>永不阻塞</strong>，所以当一个应用正等待一个异步任务时，它仍然可以处理其它事情，比如用户输入。（由于历史原因有一些<strong>例外</strong>，如 <code>alert</code> 或者<code>同步 XHR</code>，但应该尽量避免使用它们，<a href=\"https://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded/2734311#2734311\" target=\"_blank\" rel=\"noopener\">例外的例外也是存在的</a>（但通常是实现导致的错误而非其它原因）。</li>\n</ul>\n<h3 id=\"不被抢占\"><a href=\"#不被抢占\" class=\"headerlink\" title=\"不被抢占\"></a><strong>不被抢占</strong></h3><p>每个消息被完整的执行后，其他消息才会被执行。</p>\n<p>优点：当一个函数执行时，它不会被抢占，只有在它运行完毕后才会去运行其他代码，才能修改这个函数操作的数据。</p>\n<p>缺点：当一个消息需要太长时间才能处理完，浏览器就无法处理用户交互,eg.滚动和点击，这也是性能较差的网页“卡顿现象”的原因。</p>\n<p>因此良好的操作方式是：缩短单个消息处理时间，在可能的情况下尽量将一个消息裁剪成多个消息。以保证浏览器 <code>60 frames per second</code> 的流畅渲染，即每个消息处理时间 &lt; 1000ms/60=16ms，</p>\n<h2 id=\"Event-Loop-事件循环\"><a href=\"#Event-Loop-事件循环\" class=\"headerlink\" title=\"Event Loop 事件循环\"></a>Event Loop 事件循环</h2><p><strong>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</strong></p>\n<ul>\n<li>浏览器的Event Loop模型是在<a href=\"https://www.w3.org/TR/html5/webappapis.html#event-loops\" target=\"_blank\" rel=\"noopener\">html5的规范</a>中明确定义的，具体的实现由浏览器厂商来做。</li>\n<li>NodeJS的Event Loop是基于libuv实现的。可以参考Node的<a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"noopener\">官方文档</a>以及libuv的<a href=\"http://docs.libuv.org/en/v1.x/design.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</li>\n</ul>\n<h3 id=\"浏览器EventLoop运行机制（不考虑microtask）\"><a href=\"#浏览器EventLoop运行机制（不考虑microtask）\" class=\"headerlink\" title=\"浏览器EventLoop运行机制（不考虑microtask）\"></a><strong>浏览器EventLoop运行机制（不考虑microtask）</strong></h3><ul>\n<li>所有同步任务都在<strong>主线程</strong>上执行，形成一个<strong>call stack</strong>调用栈</li>\n<li>可以通过<strong>浏览器API</strong>调用 运行在其他线程的<strong>异步任务</strong></li>\n<li>主线程之外，存在一个待处理消息的<strong>消息队列task queue</strong>。每一个消息都关联着一个用以处理这个消息的回调函数。</li>\n<li>当主线程调用栈中的所有同步任务执行完毕，系统就会读取task queue，取最先进的消息作为参数，将其关联的回调函数放入主线程调用栈中执行</li>\n</ul>\n<h3 id=\"添加消息\"><a href=\"#添加消息\" class=\"headerlink\" title=\"添加消息\"></a><strong>添加消息</strong></h3><ul>\n<li>浏览器中，如果一个事件有事件监听器，事件被触发后，一个消息就会被添加到消息队列中。</li>\n<li>除了事件，浏览器提供的其他API，例如setTimeout、xhr等异步任务，都会在任务结束后向消息队列添加消息</li>\n</ul>\n<h3 id=\"setTimeout-fn-n\"><a href=\"#setTimeout-fn-n\" class=\"headerlink\" title=\"setTimeout(fn,n)\"></a><strong>setTimeout(fn,n)</strong></h3><ul>\n<li><code>setTimeout</code> 中的第二个参数n是指 消息被加入消息队列的最小延迟</li>\n<li>因此，不是保证回调在n毫秒内必须执行，而是保证回调在n毫秒之后被添加到消息队列，具体什么时候执行，取决于消息队列中待处理的消息 和 调用栈中已有的函数。</li>\n<li><strong>零延迟</strong>：<code>setTimeout 0</code> 的作用：将回调立即放入消息队列，而不是0s内立即执行</li>\n</ul>\n<h3 id=\"debug-一个-demo\"><a href=\"#debug-一个-demo\" class=\"headerlink\" title=\"debug 一个 demo\"></a>debug 一个 demo</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>)</span><br><span class=\"line\">    foo()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">debugger</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'setTimeout'</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">all</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'anounymous'</span>)</span><br><span class=\"line\">    bar()</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/event-loop/Untitled.png\" alt></p>\n<p><img src=\"/images/event-loop/Untitled%201.png\" alt></p>\n<p><img src=\"/images/event-loop/Untitled%202.png\" alt></p>\n<p><img src=\"/images/event-loop/Untitled%203.png\" alt></p>\n<p><strong>原理图</strong></p>\n<p><img src=\"/images/event-loop/Untitled%204.png\" alt></p>\n<h3 id=\"知识延伸：webWorker-amp-跨运行时通信\"><a href=\"#知识延伸：webWorker-amp-跨运行时通信\" class=\"headerlink\" title=\"知识延伸：webWorker &amp; 跨运行时通信\"></a>知识延伸：webWorker &amp; 跨运行时通信</h3><ul>\n<li>每个 <strong>WebWorker</strong> 、跨域的 <strong>iframe 、</strong>浏览器不同窗口都有各自的运行时，即都有各自的 call stack 、heap、queue。</li>\n<li>不同的运行时，可以通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\" target=\"_blank\" rel=\"noopener\">postMessage</a> 方法来通信。</li>\n</ul>\n<p><strong>postMessage：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg. 当一个窗口可以获得另一个窗口的引用时，例如targetWindow = window.opener</span></span><br><span class=\"line\"></span><br><span class=\"line\">otherWindow.postMessage(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure>\n<p>otherWindow:其他窗口的引用：</p>\n<ul>\n<li>iframe的contentWindow</li>\n<li>执行window.open返回的窗口对象</li>\n<li>通过window.frames获取到的子frame窗口对象</li>\n</ul>\n<p>message：要发送到其他窗口的数据，会被<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\" target=\"_blank\" rel=\"noopener\">结构化克隆算法</a>序列化</p>\n<p>targetOrigin：用来指定哪些窗口能接收到消息事件</p>\n<p>transfer：一串和message 同时传递的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Transferable\" target=\"_blank\" rel=\"noopener\"><code>Transferable</code></a> 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</p>\n<p><strong>结构化克隆算法：</strong></p>\n<p>用于克隆复杂对象</p>\n<p>不能克隆：Error、Symbol、Function对象、DOM节点</p>\n<p>不能克隆：属性的描述符、RegExp对象的 lastIndex字段、原型链上的属性</p>\n<p><strong>Transferable对象：</strong></p>\n<p>一个抽象接口，代表可以在不同可执行上下文中传递的对象。（抽象：没有定义任何属性和方法）</p>\n<p>不同执行上下文：例如主线程和webworker之间。</p>\n<p>ArrayBuffer 、MessagePort 和 ImageBitmap 实现于此接口。</p>\n<p><strong>接收消息：</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>, receiveMessage, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">receiveMessage</span>(<span class=\"params\">event</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// event.data：传递来的对象</span></span><br><span class=\"line\">  <span class=\"comment\">// event.origin：消息发送方窗口的origin</span></span><br><span class=\"line\">  <span class=\"comment\">// event.source：对消息发送窗口的引用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"UI-Rendering-Task-amp-性能优化\"><a href=\"#UI-Rendering-Task-amp-性能优化\" class=\"headerlink\" title=\"UI Rendering Task &amp; 性能优化\"></a>UI Rendering Task &amp; 性能优化</h2><h3 id=\"浏览器渲染-Rendering-Task步骤\"><a href=\"#浏览器渲染-Rendering-Task步骤\" class=\"headerlink\" title=\"浏览器渲染 - Rendering Task步骤\"></a>浏览器渲染 - Rendering Task步骤</h3><ul>\n<li>requestAnimationFrame API(在chrome，火狐，符合WEB标准)</li>\n<li>style calculation 计算样式</li>\n<li>layout 计算布局</li>\n<li>paint 实际渲染像素数据</li>\n<li>requestAnimationFrame API(在edge，safari)</li>\n</ul>\n<h3 id=\"render-blocking-渲染阻塞\"><a href=\"#render-blocking-渲染阻塞\" class=\"headerlink\" title=\"render blocking 渲染阻塞\"></a><strong>render blocking 渲染阻塞</strong></h3><p>具体来讲，如果js runtime 的 call stack 一直不能清空，例如event loop将一个耗时的回调放进了call stack，会导致浏览器主线程被占用，无法执行render相关的工作，用户交互的事件也被添加在消息队列等待调用栈清空得不到执行，因此无法响应用户的操作，造成阻塞渲染的“卡顿”现象。</p>\n<h3 id=\"60FPS\"><a href=\"#60FPS\" class=\"headerlink\" title=\"60FPS\"></a>60FPS</h3><p>在event loop处理消息队列时，我们提倡要缩短单个消息处理时间，在可能的情况下尽量将一个消息裁剪成多个消息，rendering task 可以在消息之间执行，以保证保证UI Rendering调用的频率能达到 <code>60 frames per second</code> （UI Rendering Task执行次数通常是每秒60次，但在大多数遵循W3C建议的浏览器中，回调函数执行次数通常与浏览器屏幕刷新次数相匹配。），即每次event loop处理消息执行回调所占用的时间 小于 16.67 毫秒。</p>\n<h3 id=\"demo1\"><a href=\"#demo1\" class=\"headerlink\" title=\"demo1:\"></a>demo1:</h3><p>看下面这段代码，先 append 一个元素再设置display=none去隐藏这个元素，<strong>不必担心</strong>这个元素会闪现，因为这两行代码会在某一次event loop中执行，只有这两行代码执行完，并且清空了当前调用栈，才有可能执行下一次UI Render task</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(el)</span><br><span class=\"line\">el.style.display=<span class=\"string\">'none'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"demo2\"><a href=\"#demo2\" class=\"headerlink\" title=\"demo2:\"></a>demo2:</h3><p>下面这段代码，重复的显示隐藏一个元素，看起来开销很大，但其实在RenderingTask期间，只会取最终结果来渲染，</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.addEventListener (<span class=\"string\">'click,()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">box style. display='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>block<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>block<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>block<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>block<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">\tbox style. display ='</span>none<span class=\"string\">';</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"requestAnimationFrame\"><a href=\"#requestAnimationFrame\" class=\"headerlink\" title=\"requestAnimationFrame\"></a>requestAnimationFrame</h3><ul>\n<li>简称RAF，是一个web api，要求浏览器在下一次重绘之前调用指定的回调函数，通常用于执行动画</li>\n<li>通过RAF，使浏览器可以在单次回流和重绘中优化处理并发动画，每次UI刷新之前执行RAF，使动画帧率更高</li>\n<li>当requestAnimationFrame() 运行在后台标签页或者隐藏的<code>&lt;iframe&gt;</code> 里时，requestAnimationFrame() 会被暂停调用以提升性能和电池寿命</li>\n</ul>\n<p>demo1：requestAnimationFrame优化动画的一个例子</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用RAF</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tmoveBoxForwardOnePixel();</span><br><span class=\"line\">\trequestAnimationFrame(callback)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callback();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用setTimeout</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tmoveBoxForwardOnePixel();</span><br><span class=\"line\">\tsetTimeout(callback,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"/images/event-loop/preview.gif\" alt></p>\n<p>demo2：用RAF控制动画执行顺序，需求是box元素的水平位置变化：1000→500</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button addEventListener (<span class=\"string\">'click,()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">\tbox.style.transform = '</span>translateX(<span class=\"number\">1000</span>px)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\tbox.style.transition= '</span>transform <span class=\"number\">1</span>s ease-<span class=\"keyword\">in</span>-out<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\tbox.style.transform = '</span>translateX(<span class=\"number\">500</span>px)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//由于上述代码会一起执行，</span></span><br><span class=\"line\"><span class=\"string\">//因此渲染时，1000px会被忽略，浏览器会取500作为最终值，在下一帧渲染，</span></span><br><span class=\"line\"><span class=\"string\">//因此上述代码的效果是：元素位移0-&gt;500</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//换一种写法</span></span><br><span class=\"line\"><span class=\"string\">button addEventListener ('</span>click,()=&gt;&#123;</span><br><span class=\"line\">\tbox.style.transform = <span class=\"string\">'translateX(1000px)'</span></span><br><span class=\"line\">\tbox.style.transition= <span class=\"string\">'transform 1s ease-in-out'</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\trequestAnimationFrame(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t\tbox.style.transform = <span class=\"string\">'translateX(500px)'</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 上述代码，1000的初始值是有效的，</span></span><br><span class=\"line\"><span class=\"comment\">//但是在下一次的rendering task期间，由于RAF先执行，因此500将1000覆盖</span></span><br><span class=\"line\"><span class=\"comment\">//最终渲染的效果还是元素位移：0-&gt;500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如何令500在下下一次渲染再生效？嵌套调用RAF</span></span><br><span class=\"line\">button addEventListener (<span class=\"string\">'click,()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">\tbox.style.transform = '</span>translateX(<span class=\"number\">1000</span>px)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\trequestAnimationFrame(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\trequestAnimationFrame(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tbox.style.transition= '</span>transform <span class=\"number\">1</span>s ease-<span class=\"keyword\">in</span>-out<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tbox.style.transform = '</span>translateX(<span class=\"number\">500</span>px)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;)</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"可视化：event-loop和rendering\"><a href=\"#可视化：event-loop和rendering\" class=\"headerlink\" title=\"可视化：event loop和rendering\"></a>可视化：event loop和rendering</h2><h3 id=\"理想的状态\"><a href=\"#理想的状态\" class=\"headerlink\" title=\"理想的状态\"></a>理想的状态</h3><p><img src=\"/images/event-loop/Untitled%205.png\" alt></p>\n<h3 id=\"setTimeout的浪费\"><a href=\"#setTimeout的浪费\" class=\"headerlink\" title=\"setTimeout的浪费\"></a>setTimeout的浪费</h3><p>间隔调用setTimeout的效果：导致浪费</p>\n<p><img src=\"/images/event-loop/Untitled%206.png\" alt></p>\n<p>以前的动画仓库的处理方式：<code>setTimeout(animFrame, 1000/60)</code></p>\n<p>但是这种处理方式不稳定，可能会不准确，因为</p>\n<p><img src=\"/images/event-loop/Untitled%207.png\" alt></p>\n<p><img src=\"/images/event-loop/Untitled%208.png\" alt></p>\n<h3 id=\"RAF的稳定有序状态\"><a href=\"#RAF的稳定有序状态\" class=\"headerlink\" title=\"RAF的稳定有序状态\"></a>RAF的稳定有序状态</h3><p><img src=\"/images/event-loop/Untitled%209.png\" alt></p>\n<h2 id=\"MicroTask-微任务\"><a href=\"#MicroTask-微任务\" class=\"headerlink\" title=\"MicroTask 微任务\"></a>MicroTask 微任务</h2><p><strong>微任务，microtask，也叫jobs。</strong></p>\n<h3 id=\"微任务-异步类型\"><a href=\"#微任务-异步类型\" class=\"headerlink\" title=\"微任务 异步类型\"></a>微任务 异步类型</h3><p>一些异步任务执行完成后，其<strong>回调</strong>会依次进入microtask queue，等待后续被调用，这些异步任务包括：</p>\n<ul>\n<li><strong>Promise.then</strong></li>\n<li>MutationObserver</li>\n<li>process.nextTick (Node独有)</li>\n<li>Object.observe</li>\n</ul>\n<h2 id=\"⭐event-loop运行机制-含microtask\"><a href=\"#⭐event-loop运行机制-含microtask\" class=\"headerlink\" title=\"⭐event loop运行机制(含microtask)\"></a>⭐event loop运行机制(含microtask)</h2><p>event loop中任务的执行顺序：</p>\n<ol>\n<li>同步代码执行，直至调用栈清空</li>\n<li>microtask：调用栈清空后，优先执行<strong>所有</strong>的microtask，如果有新的microtask，<strong>继续执行新microtask，</strong>直至microtask queue清空</li>\n<li>task queue：执行task queue第一个任务，后续的task暂不处理</li>\n<li>每当调用栈清空后，重复2-3步骤</li>\n</ol>\n<p><strong>两个重点：</strong></p>\n<ul>\n<li>微任务阻塞浏览器：如果执行微任务期间，不停的有新的微任务，会导致浏览器阻塞</li>\n<li>微任务的执行会因为JS堆栈的情况有所不同，要根据<strong>调用栈是否清空</strong>去判断微任务是否会执行。</li>\n</ul>\n<p>一个直观的例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'microtask 1'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'microtask 2'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sync code'</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'macro task 1'</span>)</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'microtask 3'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'macro task 2'</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">//sync code 同步代码优先执行</span></span><br><span class=\"line\"><span class=\"comment\">//microtask 1  同步代码执行完后，调用栈清空，优先执行 microtask  </span></span><br><span class=\"line\"><span class=\"comment\">//microtask 2  同上</span></span><br><span class=\"line\"><span class=\"comment\">//macro task 1  调用栈清空，microtask queue清空，此时可以执行一个位于队首的macro task，执行期间新增一个microtask</span></span><br><span class=\"line\"><span class=\"comment\">//microtask 3  调用栈清空后，由于存在microtask，因此优先执行microtask</span></span><br><span class=\"line\"><span class=\"comment\">//macro task 2  最后执行macro task，清空task queue</span></span><br></pre></td></tr></table></figure>\n<p><strong>流程图</strong><br><img src=\"/images/event-loop/Untitled%2010.png\" alt></p>\n<p><strong>demo1：调用栈未清空，不执行microtask</strong></p>\n<p>在控制台中执行一段代码，会当做同步代码来处理。listener1执行后，微任务队列+1，但是因为是同步执行的代码，所以会立即执行listener2，微任务队列+1，所以顺序是<code>listener1,listener2,microtask1,microtask2</code></p>\n<p><img src=\"/images/event-loop/Untitled%2011.png\" alt></p>\n<p><strong>demo2:调用栈清空后，microtask 优先于 macro task执行</strong></p>\n<p>同步执行两个setTimeout，会将 listener1和listener2加入到task queue，同步代码执行就结束。先执行listener1，将microtask1加入微任务队列，listener1执行完后，调用栈清空，即使这时候task queue还有listener2，也会先执行所有微任务，将所有微任务清空后，再执行listener2，因此输出顺序是 <code>listener1,microtask1,listener2,microtask2</code>  </p>\n<p><img src=\"/images/event-loop/Untitled%2012.png\" alt></p>\n<p><strong>demo3：同demo2</strong></p>\n<p>用户点击事件</p>\n<p>由于点击事件会被添加到task queue，因此，这个 demo3 的结果和 demo2 结果相同</p>\n<p><img src=\"/images/event-loop/Untitled%2013.png\" alt></p>\n<p><strong>demo4：同demo1</strong></p>\n<p>js调用click()事件</p>\n<p>由于是在代码中手动执行click，所以会同步执行两个listener，因此demo4和demo1结构相同。</p>\n<p><img src=\"/images/event-loop/Untitled%2014.png\" alt></p>\n<p><strong>demo5：micro 优先于 macro执行</strong></p>\n<p><img src=\"/images/event-loop/Untitled%2015.png\" alt></p>\n<p><strong>demo6：综合实例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浏览器中执行</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);<span class=\"comment\">// callback2，setTimeout属于宏任务</span></span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)<span class=\"comment\">// callback3，Promise.then属于微任务</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)<span class=\"comment\">// 这里的代码是同步执行的</span></span><br><span class=\"line\">  resolve(<span class=\"number\">5</span>)</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);<span class=\"comment\">// callback5，Promise.then属于微任务</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>);<span class=\"comment\">// callback6，setTimeout属于宏任务</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果：1475236 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 逻辑：</span></span><br><span class=\"line\"><span class=\"number\">147</span>是同步执行，同步代码执行完后的queue：</span><br><span class=\"line\">\ttask queue：callback2，callback6</span><br><span class=\"line\">\tmicrotask：callback5</span><br><span class=\"line\">此时调用栈已清空，优先执行微任务callback5，调用栈清空</span><br><span class=\"line\">再执行callback2，调用栈清空</span><br><span class=\"line\">此时的queue：</span><br><span class=\"line\">\ttask queue：callback6</span><br><span class=\"line\">\tmicrotask：callback3</span><br><span class=\"line\">优先执行微任务callback3，调用栈清空</span><br><span class=\"line\">最后执行callback6</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/event-loop/Untitled%2016.png\" alt></p>\n<p><strong>demo7：综合实例</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main start'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cb1</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//cb2</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cb3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'3'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//cb4</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'4'</span>)</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main end'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">// main start，main end，3412</span></span><br><span class=\"line\"></span><br><span class=\"line\">main start 和 main end同步执行，同步代码执行完后，调用栈清空，此时的queue：</span><br><span class=\"line\">\ttask queue：cb1</span><br><span class=\"line\">\tmicrotask queue：cb3</span><br><span class=\"line\">先执行微任务cb3，执行完后，调用栈清空，此时的queue：</span><br><span class=\"line\">\ttask queue：cb1</span><br><span class=\"line\">\tmicrotask queue：cb4</span><br><span class=\"line\">先执行微任务cb4，执行完后，调用栈清空，此时的queue：</span><br><span class=\"line\">\ttask queue：cb1</span><br><span class=\"line\">\tmicrotask queue：空</span><br><span class=\"line\">最后执行cb1，然后执行cb2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/event-loop/Untitled%2017.png\" alt></p>\n<p><strong>rendering task的执行顺序</strong><br>在上面的event loop执行机制中，没有提到rendering task，是因为rendering task是由浏览器自行去决定何时运行的，与当前设备的屏幕刷新率等因素相关，确定的是：</p>\n<ul>\n<li>RAF 在 rendering task 初始期间执行</li>\n<li>如果定义了多个 RAF 回调，会被加入到 <code>Animation queue</code>中，在UI Rendering 期间，会清空 Animation queue，与 microtask 不同的是，如果清空 Animation queue 期间，有新的 animation task 被加入到 queue 中，此次 rendering task 执行期间，不会处理新的 animation task。</li>\n</ul>\n<p>macrotask、microtask、animation task的区别，可以看在下面的动图中横向对比：</p>\n<p><img src=\"/images/event-loop/raf.png\" alt></p>\n<p><img src=\"/images/event-loop/event-loop.gif\" alt></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.w3.org/TR/html5/webappapis.html#event-loops\" target=\"_blank\" rel=\"noopener\">HTML规范</a></li>\n<li><a href=\"https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop\" target=\"_blank\" rel=\"noopener\">NodeJS Event Loop 文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack\" target=\"_blank\" rel=\"noopener\">mdn相关文档</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=cCOL7MC4Pl0\" target=\"_blank\" rel=\"noopener\">Jake Archibald在JSConf.Asia的演讲视频【In The Loop】,很值得看：</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"noopener\">Philip Roberts在JSConf的演讲视频【What the heck is the event loop anyway】,很值得看</a></li>\n<li><a href=\"http://latentflip.com/loupe/\" target=\"_blank\" rel=\"noopener\">Philip Roberts做的Event Loop可视化网站</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">JS Runtime运行时 - MDN</a></li>\n</ul>\n"},{"title":"【学会如何学习】成为更好的终身学习者","date":"2020-09-14T16:00:00.000Z","description":"通过精神学、心理学原理，探寻学习的本质，提高学习效率，降低学习挫败感，成为更好的终身学习者","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211123914.png","_content":"\n\n- 6000字长文预警，建议拉到底部，先看总结❤\n- 原创不易，欢迎**点赞，在看，转发**支持\n\n\n\n\n\n\n![文章大纲](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200921190445.png)\n\n\n\n---\n\n\n\n\n\n酥鱼我从小学到大学毕业，当了十六年的学生，工作又选择了程序员这个发展日新月异、需要持续学习的行业。\n\n\n\n如何提升学习效率，减少学习带来的挫折感和痛苦，一直是我所苦苦追寻而不得的。\n\n\n\n每每看到别人能用更短的时间，学到更多、更深刻、更系统的知识，我都留下了羡慕的泪水。\n\n\n\n因此我也曾向很多学霸、前辈们请教学习的法门，多多少少能有些学习方法上的收获，但这些方法都因人而异，起不到决定性的作用，始终觉得自己对于**如何学习**这个问题，理不出一个最完美的、有逻辑性的答案。\n\n\n\n直到我接触到了Coursera上的一门免费课程[Learning how to Learn](https://www.coursera.org/learn/ruhe-xuexi)，这门课从神经学、生物学的角度，揭示了大脑认知的底层原理，和学习的本质，从而提供了一系列提升学习效率、减轻学习痛苦与挫败感的技巧。\n\n\n\n这门课视频内容大概10小时，值得花时间去上，但是如果你想节省时间，可以直接看看本文。\n\n\n\n如果你刚好学过这门课，可以跟着本文一起**复盘**一遍（学过的你一定知道复盘的重要性。\n\n\n\n另外有一本书[《学习之道》](https://book.douban.com/subject/26895988/)，是这门课的书面材料，书的作者也是课程主讲老师，内容和视频是相对应的，因此也可以直接啃书。\n\n\n\n废话讲了一堆，下面跟着我一起开始正文吧~\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915181959.gif)\n\n---\n\n## 人脑的两种思维模式\n\n\n\n提到学习，离不开大脑的思维，有了思维才能去理解、才能拥有记忆。\n\n人的大脑一共有两种思维模式:\n\n| Focused Mode <br />专注模式 | Diffuse Mode<br /> 发散模式 |\n|  ----  | ----  |\n| 集中精力解决单一问题  | 放松的思考模式 |\n| 熟练掌握的内容  | 新事物学习，获取灵感 |\n| 顺序思考  | 整体思考 |\n| 熟练掌握的内容  | 新事物学习，获取灵感 |\n\n\n\n以弹珠游戏类比大脑的思维：\n\n- **专注模式**下，大脑遇到已知问题，能快速定位到已掌握的知识，利用训练好的知识回路，专一且迅速的解决问题（弹珠定向发射），此时思维的粒度很细（弹珠盘上的桩很密集），当遇到新问题时，由于过于关注细节，大脑无法进行更广的思维跳跃，无法将更多的知识回路连接（由于桩很密集，弹珠弹射区域很小）。\n\n![专注模式](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915094332.png)\n\n- **发散模式**下，大脑处于放松状态，不考虑细节（弹珠盘上的桩很少），思维灵活跳跃，能从整体层面解决问题，更有助于发挥创造力（弹珠随意发射，在较大的区域弹射）。\n\n![发散模式](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915094340.png)\n\n\n\n这两种思维区别很大，而且不能同时应用，所以我们需要将两种思维模式`结合使用，灵活转换`。\n\n\n\n举个例子🌰：\n\nSalvador Dali，20世纪著名超现实主义画家。他有一个有趣的方法，来帮他创造富有创造性的作品：*坐在椅子上，放松大脑，模糊的思考着之前专注的事情，手上拿着一串钥匙晃悠，当他睡着时，钥匙会掉落在地上，把他吵醒，这样他就能把脑子里刚刚**发散模式**下的联想和点子集中起来，带着它们回到**专注模式**去记录灵感并进行创作。*\n\n\n\n**专注模式更适合解决细节问题，发散模式更适合寻找灵感和整体解决方案**。\n\n\n\n## 如何拥有更牢固的记忆\n\n\n\n学习，其实就是掌握知识的过程，这个过程主要就是两步，**理解 + 记忆**。\n\n\n\n理解，可以通过很多方式，比如听老师讲课，看书，看视频，看资料，请教前辈等等，方式很多，这一步一般不需要很多时间。\n\n\n\n先来谈谈记忆，这门课把人类记忆划分为两种:\n\n| Working Memory<br /> 工作记忆 | Long-term Memory <br />长期记忆 |\n|  :--:  | :--:  |\n| 短期记忆 | 长期记忆 |\n| 负责处理即时的有意识的想法<br />例如专注学习新知识时<br />如果不加以复习和记忆，会被其他信息挤掉 | 负责存储已掌握的知识<br />需要时常复习，才能提升未来能记忆到的几率 |\n| 类似于计算机内存，或者一块小黑板 | 类似于硬盘，或者一个存储仓库 |\n| 例如你尝试在脑海中用多个概念串联起来，<br />去解决一个当下遇到的问题 | 例如你回忆99乘法表去计算9×9的结果 |\n| 存储于大脑的前额皮质，与大脑的其他部位可以联系 | 占据大脑大片区域 |\n| 容量较小，因人而异，大约可以存储四个组块的信息 | 容量巨大 |\n| 处于大脑的前额叶皮质区域，与大脑的其他区域可以连接 | 不同类别的长期记忆，处于大脑的不同位置 |\n| ![image-20200915190943225](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915190943.png) | ![image-20200915191016075](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915191016.png) |\n\n\n\n**学习的最终目标，就是将已经理解的知识从工作记忆，转化到长期记忆**。而这个过程，需要的是**练习**。\n\n\n\n那么怎样`在相同练习次数下，获取更牢固的记忆`呢？\n\n- **间隔重复**：刻意的进行反复练习，每次练习中间要有间隔，不断增大两次练习之间的时间间隔。（同样次数的练习，分散在几天中做的效果 比集中在一个晚上做更好）\n- 利用比喻、类比、想象，将知识 和 人类**感官联系**，如视觉、听觉、触觉、情感，更有利于记忆。例如：把想要记住的东西，转换成一些难忘的画面、大声朗读单词文章等等\n- **充足睡眠+睡前复盘**：睡眠对于学习至关重要，入睡时脑细胞会缩小 使得专注学习时产生的代谢毒物可以被清除，且大脑会在睡眠期间自动清理不重要的记忆，并在潜意识中排演睡前学习的内容。因此睡前花几分钟回顾学习内容，有助于记忆。\n- **冷静**。在你感到紧张/生气/害怕时，这些情绪会占用你的工作记忆。因此开始专注前，要排除各种情绪的干扰。\n\n\n\n## 学习的本质：Chunk 组块\n\n\n\n**Chunk 组块**：是指大脑可以轻松使用的小而紧凑的**信息碎片**（可以理解成多个神经元组成的回路或思维回路\n\n\n\n**Chunking 组块化**：根据意义和逻辑将信息碎片拼接起来，得到Chunk的思维过程\n\n\n\n概念有点抽象，举一个`拼图`的例子🌰：\n\n一堆拼图碎片是凌乱无意义的，每块拼图碎片的棱角和图像就是它和其他碎片相互连接的信息和逻辑，理清了所有碎片的逻辑关联，拼成整体后，才能得到一个具有清晰逻辑的整体图片\n\n![image-20200916130210985](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916130211.png)\n\n\n\n再以小星星⭐举例：\n\nS,T,A,R四个字母单独看，都是单纯的无意义字母，组合成`Star`后，就是一个有意义的词，你就能联想到五角星的图片形象，也能联想到星空，这就是一个**chunk**的例子，这个**chunk**虽然是一个抽象的概念，但是在你的大脑中，真实存在着相互连接的神经元，其中包含了对四个字母、五角星和星空形象的记忆。\n\n\n\n最后一个栗子🌰：\n\n我们人类出生后最初的学习，就是认识妈妈，一个母亲不断的在孩子面前说“妈妈”这个词，孩子就能学会叫妈妈，并且能把“妈妈”这个词的发音，和母亲的笑容、母亲的形象联系起来，从而不会把别人错认成妈妈。这个学习过程会形成下图👇这样的神经回路，也就是**Chunk**。\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916131723.png)\n\n\n\n\n\n为什么要用这么多内容介绍**Chunk**呢？\n\n\n\n因为，**专注学习、重复训练的过程，就是建立chunk的过程**，当chunk建立后，神经回路里的任何一点，都能引导你串联整个记忆回路。\n\n人类复杂的神经活动、记忆的存储、牛顿从“苹果落地”到“万有引力”，都建立了并依赖于大脑中众多的**Chunks**。\n\n**Chunk**就像是人脑中**最小可利用的思维回路**，解决复杂问题、掌握复杂知识时，需要利用到众多的相互关联的Chunk，最终形成了你整个大脑的思维网络。\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200918164835.png)\n\n\n\n再回到之前讲的学习的本质，就是**理解+记忆**，记忆这一步的技巧前面已经讲了，理解这一步要做的，就是把现有的外界的知识，转化成自己的知识，在大脑中形成Chunk，为你所用。\n\n\n\n那么`怎样建立牢固可靠的Chunk`呢？\n\n**1. 开启专注模式**\n\n集中注意力，切断一切外界干扰，不能让有限的工作记忆被其他事情占用。\n\n例如呆在一个安静的环境，打开手机电脑的勿扰模式，将手边无关的东西都拿开，打开番茄钟计时，然后开始专注。\n\n**2. 自下而上学习 - chunking**\n\n先从**基本概念**开始理解，在理解的前提下，将新知识与已掌握的知识相关联，建立chunk。\n\n理解后不断的用**自测**的方式，检验chunk是否真正形成。自测的形式很多，可以合上书回忆所有内容，也可以practice（实践），脱离书本，自己利用Chunk去实际独立操作、独立解决问题，通过这个过程知道**怎么使用chunk**\n\n![image-20200916162217085](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916162710.png)\n\n**3. 自上而下学习 - context**\n\ngaining context，获取背景知识，从更广的更高的角度去理解chunk如何融入整体的知识架构，通过这一点去了解**何时何处使用chunk**，掌握了how to之后，思考why to ，when to，从而在遇到问题的各种场景中信手拈来。\n\n\n\n例如🌰看一本书之前，先看看图片、章节大纲，看完一本书后，画流程图、思维导图，就能更清楚整体的结构，有利于chunk的建立和巩固。\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916162704.png)\n\n\n\n\n\n\n\n## 最高效的学习方法：间隔重复\n\n\n\nScience杂志曾发布一篇论文，让一群学生，使用不同的方法，在相同时间内，学习一篇科技文本，最终的结论是这样的：相较于 重复阅读、边学边画思维导图等方式，通过**recall**方式学习的学生，学的最多、也最牢固。\n\n\n\n这里的**recall**，我把它总结成`间隔重复练习法`，也就是不断重复下面的3个步骤：\n\n- 学习\n- 脱离书本回忆（**自测**）\n- 留出时间间隔（随着练习的次数增多，逐渐增大时间间隔）\n\n\n\n看完这篇文章，你可以忘记所有内容，但是一定要记得这个 *经过实验验证有效的*  学习方法。\n\n\n\n## 一些学习的误区\n\n\n\n- `看书喜欢画线、画高光`：很容易给自己造成”画了就是会了“的错觉，不是不可以画重点，但是记得要通过**自测**的方式检验一下自己是否真的掌握。\n\n- `能看懂，就是会了`：能看得懂不代表能独立解决，不要觉得你理解的知识，就是你的知识。一定要自己亲自**去实践，去自测**。要建立自己的思维模式，而不是被动的接受知识。\n\n- `过度学习`：在掌握一个知识后继续反复学习和训练的行为，在需要练出肌肉记忆、自动反应的情况下是必要的（比如体育竞技、演讲），在其他状况下，过度学习是**对时间和精力的浪费**\n\n- `思维定势`：固定的思维形式、牢固的记忆和chunk可能会阻碍你发现更好的灵感，因此在学习新事物时，要**把过去的思维模式先放下**。（有几个关于死亡的句子对这个观点具有启发性：1. There's the old saying that science progresses one funeral at a time，国外有句老话说，科学会随着每个葬礼的进行而进步； 2.乔布斯在斯坦福大学的演讲中曾说，死亡是我们生命中最酷的发明，死亡是生命轮换的代理人，它淘汰旧的以给新生事物发展空间。 3. 死亡意味着根深蒂固的旧思想的流逝）\n\n  \n\n## 一些学习的技巧\n\n\n\n- `记笔记`：看书时，减少划线和画高光以避免错觉，可以在知识点旁边写下你**自己的理解**，这样更利于加深印象，巩固记忆（酥鱼我仍然记得，我高中的时候做练习册，都喜欢把练习册写的黑压压的，即使是我掌握了的知识，也会在旁边写上清晰的解题思路。这种习惯一直延续到现在，我看过的书随便翻一翻就能看到笔记。我相信比起看完了还是一片雪白的书，这种方式更容易加深记忆\n- `换个环境`：间隔重复练习的时候，**切换不同的环境**，可以帮助我们脱离记忆对固定场景的依赖，避免单环境下的知识误区，更全面的理解所学知识的各个方面\n- `transfer知识迁移`：联系**不同领域**的相似chunk，也有助于加深记忆\n- `interleaving交替学习`：在已经掌握了基础知识后，可以**交叉**着不同类别的问题、方法、知识一起学习，有利于让大脑更具有灵活性和创造性，也更利于记忆。（用过百词斩的应该知道，他们的逻辑就是背一轮单词，再来一轮，不同的单词交替着出现，比一个单词一直背的效果好很多）另外可以了解一下**Anki软件**，利用交替学习等原理实现了帮助记忆的算法，形式类似于百词斩，只是把单词换成了你想记忆的知识点。\n- `奖励性学习`：在学习或者完成适量的目标后**激励自己**，可以让负责人体动力的多巴胺发挥生理作用\n- `刻意训练`：**专注于学习困难的部分**，是容易和别人拉开差距、超越平均水平的好方法\n- `关注过程，而不是结果`：对于一些困难的任务，需要很多时间和付出才能得到结果，如果只关注结果，会让人产生痛苦，导致拖延。只关注过程恰恰其实是大脑最喜欢的，在deadline之前的时间内，平静地尽最大的努力，关注每个番茄钟的30分钟周期，是否专注成功。\n- `在睡前坚持写周计划和日计划`：研究显示入睡时潜意识会进入类似于 Diffuse Mode 的状态来“消化”和“排练”要完成的项目，从而使你在白天能更好地去完成他们。写计划的另一个好处在于，如果你不这么做，这些待办事项就会停留在你的 Working Memory 中，占据宝贵的精神空间。通过将它们转移到纸上，你能够更好地专注于做事情本身。\n- `确定好停止学习的时间`：计划并严格遵守于 停止学习、专注、工作的时间是很重要的。这么做有助于形成日程规律，形成惯性，还给你更多时间去休息、发展身心健康\n- `把最困难最厌恶的事情放在早上第一件事做`\n- `运动`有助于神经元的活跃，有助于学习和记忆\n- `创建生动的视觉比喻和类推`，将知识形象化，能够帮助你更好地理解内容本身，将新事物与旧的神经回路联系了起来，使得大脑能思考得更快、更发散，也能帮助你突破定势\n  比如 18 世纪的化学家开始想象和可视化分子级别的运动时，他们取得了巨大的突破。\n- `与其他人一起合作`，在专注模式下，大脑倾向于坚持已经建立的推理步骤。与其他人一起合作可以填补你思维上的空缺，建立起更强的自我纠正能力。从这个意义上讲，与你一同合作的人们就好像是对你而言的外部发散思维。对身边的人解释所学的内容也有助于自身的学习。\n- `考试策略`：前文中多次提到**自测**，测试本身是一种非常有用的学习体验，\n\n\n\n## 如何准备一场考试\n\n这里介绍 Richard Felder 博士 提出的**备考清单**。\n\n- 是否认真地理解了内容？\n- 是否与同学讨论过课后问题？\n- 是否尝试列出课后问题的解题大纲？\n- 是否积极参加小组讨论？\n- 咨询过老师吗？\n- 是否弄清楚了所有课后问题的答案？\n- 对于不清楚的问题，是否在课堂上提出疑问？\n- 是否尝试快速列出一些问题的解题大纲？\n- 是否认真通读了辅导书\n- 是否参与考前复习？\n- 测试前有一个合理的睡眠时间吗？\n\n对于上述问题，在理想的备考状态下，肯定的回答越多越好。\n\n\n\n`一些考试时的策略`：\n\n- **先难后易**：如果我们先大概看一眼题目，从困难的问题出发，将它们“加载”到大脑中，然后跳回去做简单的问题，从而使大脑进入 Diffuse Mode 发散模式，这样就很有可能在较短的时间内找到难题的思路（当然，应该控制在你能力范围内，如果短时间内找不到思路，应该直接跳过）\n- **保持兴奋**：当你处于紧张状态时，大脑会分泌化学物质引发一系列生理反应。但你可以用不同的方式来解读这些反应。恐惧和兴奋其实是两种很相似的反应。当你坐在考场里，心跳加速，满头是汗，如果你**不去想“这场考试让我恐惧”而是“这场考试让我兴奋”**，这会对你的考试非常有 帮助。\n\n- **深呼吸**：考试时感到心慌是自然反应。你可以通过深呼吸来部分或者全部抵消这一反应。当然，不要等到考试的时候才去做。考前两周、考试开始前的最后时间里做深呼吸，有助于平复心情。\n- **不要被大脑欺骗**：我们的大脑经常会欺骗自己，是自己认为自己的解答是正确的。在考试过程中要时刻小心，可以多眨眨眼或是晃晃头，用这种方式来提醒自己稍微往 Diffuse Mode 发散模式 倾斜一点看看有没有出错，然后再用 Focused Mode 专注模式 进行确认。\n\n## 拖延症 & 习惯\n\n\n\n**拖延症的原理**：\n\n拖延症是个普遍的现象，在所有人身上多多少少都有体现，这是因为，**拖延是大脑做出的自然反应**。\n\n\n\n当你遇到不想做的事情时，会感受到不快，这种刺激(Cue)激活了大脑中与疼痛相关的区域，大脑就会迅速作出反应去寻找停止这种负面刺激的方式，即转移注意力到另一件令你愉快的事情上，从而让你在短期内感到舒服一些。\n\n\n\n**拖延症的影响：**\n\n拖延的负面影响不限于当前被拖延的事情。例如你觉得某一门课或者某一类知识很难，拖延症使你不断地拖迟学习它，当这种拖延行为成为习惯后，即使是想到学习这件事，都会令你痛苦。\n\n\n\n因此拖延的负面影响是有累积效应的，越拖延，不适的感觉越强。\n\n\n\n`对抗拖延症的几个技巧`：\n\n- 有研究人员发现，当人们真正去做不喜欢的事情后，这种精神上的抵触和不适很快就会消失。了解这个原理，在遇到不想做的事情时，暗示自己**先开头去做，很快就能克服**，就可以减轻负面刺激带来的不快感\n- **番茄工作法**：利用计时器或者番茄钟，**计时25分钟**，这25分钟内排除一切干扰集中精力专注，专注结束后，**计时5分钟**，给自己一些奖励：放松一下/起来溜达一圈/上网冲冲浪/吃点零食/聊会天。30分钟一次循环，这样的时间效率会相当高，计时器的作用，就是Cue，提醒你切换专注模式和发散模式。（25分钟的专注，对于大多数人来说应该不难。但是如果你发现自己很难持续专注25分钟，那可以循序渐进，先从10分钟开始训练自己的专注耐力）\n- 利用`习惯`\n\n\n\n对抗拖延症，是对抗身体的本能，需要消耗精力和意志力，而**习惯就是我们的节能机制**。\n\n\n\n一旦形成习惯，只需要一点点的Cue(信号)，后面的行为就会**像呼吸一样自然**，消耗很少的精力和毅力\n\n\n\n就像你刚开始学车，倒车入库会让你手足无措、手心流汗、提心吊胆，但是当你成为了老司机，看后视镜、转动方向盘就会一气呵成，流畅自然。\n\n\n\n那么`如何养成好习惯`呢：\n\n1. Cue信号：触发惯性行为的外界刺激。比如待办清单上的第一项，办公桌前的便利贴。Cue 大致可以分为四类：时间、地点、感受、反应，从这四个方面，**为自己的好习惯，找一个显眼的信号**。\n2. Routine惯性行为：大脑受到信号刺激后，习惯性做出的反应。**反复多次的练习**，就可以养成。\n3. Reward奖励：任何习惯得以延续，都是因为它可以回报我们，它会立即给我们带来愉悦感。拖延极易养成习惯，就是因为拖延能带给我们迅速即时的愉悦感。因此为了克服拖延症，**奖励好习惯**很重要。\n4. Belief信念：习惯的力量之所以强大，是因为你在内心深处往往认为它们是无法被改变的。\n\n\n\n\n\n## 总结\n\n- 灵活运用`两种思维模式`：专注模式更适合解决细节问题，发散模式更适合寻找灵感和整体解决方案\n- `牢固记忆`的4个技巧：间隔重复、感官联系、充足睡眠+睡前复盘、保持冷静\n- 学习的本质是`建立组块`Chunks，建立过程有三个步骤：开启专注模式、自下而上学习、自上而下学习\n- 最高效的学习方法：`间隔重复`练习法（可以用Anki应用辅助）\n- `拖延症`没那么可怕，只要开始入手做，痛苦就会减轻；可以利用`番茄钟`、良好的`习惯`，来帮助你减轻拖延症提高效率\n- 4个学习误区、14个学习技巧、关于考试的几个技巧也值得掌握~\n","source":"_posts/learning_how_to_learn.md","raw":"---\n\ntitle: 【学会如何学习】成为更好的终身学习者\ncategories:\n    - 03成长 | 自我管理 # 一级分类\ntags:\ndate: 2020-09-15\ndescription: 通过精神学、心理学原理，探寻学习的本质，提高学习效率，降低学习挫败感，成为更好的终身学习者\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211123914.png\n---\n\n\n- 6000字长文预警，建议拉到底部，先看总结❤\n- 原创不易，欢迎**点赞，在看，转发**支持\n\n\n\n\n\n\n![文章大纲](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200921190445.png)\n\n\n\n---\n\n\n\n\n\n酥鱼我从小学到大学毕业，当了十六年的学生，工作又选择了程序员这个发展日新月异、需要持续学习的行业。\n\n\n\n如何提升学习效率，减少学习带来的挫折感和痛苦，一直是我所苦苦追寻而不得的。\n\n\n\n每每看到别人能用更短的时间，学到更多、更深刻、更系统的知识，我都留下了羡慕的泪水。\n\n\n\n因此我也曾向很多学霸、前辈们请教学习的法门，多多少少能有些学习方法上的收获，但这些方法都因人而异，起不到决定性的作用，始终觉得自己对于**如何学习**这个问题，理不出一个最完美的、有逻辑性的答案。\n\n\n\n直到我接触到了Coursera上的一门免费课程[Learning how to Learn](https://www.coursera.org/learn/ruhe-xuexi)，这门课从神经学、生物学的角度，揭示了大脑认知的底层原理，和学习的本质，从而提供了一系列提升学习效率、减轻学习痛苦与挫败感的技巧。\n\n\n\n这门课视频内容大概10小时，值得花时间去上，但是如果你想节省时间，可以直接看看本文。\n\n\n\n如果你刚好学过这门课，可以跟着本文一起**复盘**一遍（学过的你一定知道复盘的重要性。\n\n\n\n另外有一本书[《学习之道》](https://book.douban.com/subject/26895988/)，是这门课的书面材料，书的作者也是课程主讲老师，内容和视频是相对应的，因此也可以直接啃书。\n\n\n\n废话讲了一堆，下面跟着我一起开始正文吧~\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915181959.gif)\n\n---\n\n## 人脑的两种思维模式\n\n\n\n提到学习，离不开大脑的思维，有了思维才能去理解、才能拥有记忆。\n\n人的大脑一共有两种思维模式:\n\n| Focused Mode <br />专注模式 | Diffuse Mode<br /> 发散模式 |\n|  ----  | ----  |\n| 集中精力解决单一问题  | 放松的思考模式 |\n| 熟练掌握的内容  | 新事物学习，获取灵感 |\n| 顺序思考  | 整体思考 |\n| 熟练掌握的内容  | 新事物学习，获取灵感 |\n\n\n\n以弹珠游戏类比大脑的思维：\n\n- **专注模式**下，大脑遇到已知问题，能快速定位到已掌握的知识，利用训练好的知识回路，专一且迅速的解决问题（弹珠定向发射），此时思维的粒度很细（弹珠盘上的桩很密集），当遇到新问题时，由于过于关注细节，大脑无法进行更广的思维跳跃，无法将更多的知识回路连接（由于桩很密集，弹珠弹射区域很小）。\n\n![专注模式](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915094332.png)\n\n- **发散模式**下，大脑处于放松状态，不考虑细节（弹珠盘上的桩很少），思维灵活跳跃，能从整体层面解决问题，更有助于发挥创造力（弹珠随意发射，在较大的区域弹射）。\n\n![发散模式](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915094340.png)\n\n\n\n这两种思维区别很大，而且不能同时应用，所以我们需要将两种思维模式`结合使用，灵活转换`。\n\n\n\n举个例子🌰：\n\nSalvador Dali，20世纪著名超现实主义画家。他有一个有趣的方法，来帮他创造富有创造性的作品：*坐在椅子上，放松大脑，模糊的思考着之前专注的事情，手上拿着一串钥匙晃悠，当他睡着时，钥匙会掉落在地上，把他吵醒，这样他就能把脑子里刚刚**发散模式**下的联想和点子集中起来，带着它们回到**专注模式**去记录灵感并进行创作。*\n\n\n\n**专注模式更适合解决细节问题，发散模式更适合寻找灵感和整体解决方案**。\n\n\n\n## 如何拥有更牢固的记忆\n\n\n\n学习，其实就是掌握知识的过程，这个过程主要就是两步，**理解 + 记忆**。\n\n\n\n理解，可以通过很多方式，比如听老师讲课，看书，看视频，看资料，请教前辈等等，方式很多，这一步一般不需要很多时间。\n\n\n\n先来谈谈记忆，这门课把人类记忆划分为两种:\n\n| Working Memory<br /> 工作记忆 | Long-term Memory <br />长期记忆 |\n|  :--:  | :--:  |\n| 短期记忆 | 长期记忆 |\n| 负责处理即时的有意识的想法<br />例如专注学习新知识时<br />如果不加以复习和记忆，会被其他信息挤掉 | 负责存储已掌握的知识<br />需要时常复习，才能提升未来能记忆到的几率 |\n| 类似于计算机内存，或者一块小黑板 | 类似于硬盘，或者一个存储仓库 |\n| 例如你尝试在脑海中用多个概念串联起来，<br />去解决一个当下遇到的问题 | 例如你回忆99乘法表去计算9×9的结果 |\n| 存储于大脑的前额皮质，与大脑的其他部位可以联系 | 占据大脑大片区域 |\n| 容量较小，因人而异，大约可以存储四个组块的信息 | 容量巨大 |\n| 处于大脑的前额叶皮质区域，与大脑的其他区域可以连接 | 不同类别的长期记忆，处于大脑的不同位置 |\n| ![image-20200915190943225](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915190943.png) | ![image-20200915191016075](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915191016.png) |\n\n\n\n**学习的最终目标，就是将已经理解的知识从工作记忆，转化到长期记忆**。而这个过程，需要的是**练习**。\n\n\n\n那么怎样`在相同练习次数下，获取更牢固的记忆`呢？\n\n- **间隔重复**：刻意的进行反复练习，每次练习中间要有间隔，不断增大两次练习之间的时间间隔。（同样次数的练习，分散在几天中做的效果 比集中在一个晚上做更好）\n- 利用比喻、类比、想象，将知识 和 人类**感官联系**，如视觉、听觉、触觉、情感，更有利于记忆。例如：把想要记住的东西，转换成一些难忘的画面、大声朗读单词文章等等\n- **充足睡眠+睡前复盘**：睡眠对于学习至关重要，入睡时脑细胞会缩小 使得专注学习时产生的代谢毒物可以被清除，且大脑会在睡眠期间自动清理不重要的记忆，并在潜意识中排演睡前学习的内容。因此睡前花几分钟回顾学习内容，有助于记忆。\n- **冷静**。在你感到紧张/生气/害怕时，这些情绪会占用你的工作记忆。因此开始专注前，要排除各种情绪的干扰。\n\n\n\n## 学习的本质：Chunk 组块\n\n\n\n**Chunk 组块**：是指大脑可以轻松使用的小而紧凑的**信息碎片**（可以理解成多个神经元组成的回路或思维回路\n\n\n\n**Chunking 组块化**：根据意义和逻辑将信息碎片拼接起来，得到Chunk的思维过程\n\n\n\n概念有点抽象，举一个`拼图`的例子🌰：\n\n一堆拼图碎片是凌乱无意义的，每块拼图碎片的棱角和图像就是它和其他碎片相互连接的信息和逻辑，理清了所有碎片的逻辑关联，拼成整体后，才能得到一个具有清晰逻辑的整体图片\n\n![image-20200916130210985](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916130211.png)\n\n\n\n再以小星星⭐举例：\n\nS,T,A,R四个字母单独看，都是单纯的无意义字母，组合成`Star`后，就是一个有意义的词，你就能联想到五角星的图片形象，也能联想到星空，这就是一个**chunk**的例子，这个**chunk**虽然是一个抽象的概念，但是在你的大脑中，真实存在着相互连接的神经元，其中包含了对四个字母、五角星和星空形象的记忆。\n\n\n\n最后一个栗子🌰：\n\n我们人类出生后最初的学习，就是认识妈妈，一个母亲不断的在孩子面前说“妈妈”这个词，孩子就能学会叫妈妈，并且能把“妈妈”这个词的发音，和母亲的笑容、母亲的形象联系起来，从而不会把别人错认成妈妈。这个学习过程会形成下图👇这样的神经回路，也就是**Chunk**。\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916131723.png)\n\n\n\n\n\n为什么要用这么多内容介绍**Chunk**呢？\n\n\n\n因为，**专注学习、重复训练的过程，就是建立chunk的过程**，当chunk建立后，神经回路里的任何一点，都能引导你串联整个记忆回路。\n\n人类复杂的神经活动、记忆的存储、牛顿从“苹果落地”到“万有引力”，都建立了并依赖于大脑中众多的**Chunks**。\n\n**Chunk**就像是人脑中**最小可利用的思维回路**，解决复杂问题、掌握复杂知识时，需要利用到众多的相互关联的Chunk，最终形成了你整个大脑的思维网络。\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200918164835.png)\n\n\n\n再回到之前讲的学习的本质，就是**理解+记忆**，记忆这一步的技巧前面已经讲了，理解这一步要做的，就是把现有的外界的知识，转化成自己的知识，在大脑中形成Chunk，为你所用。\n\n\n\n那么`怎样建立牢固可靠的Chunk`呢？\n\n**1. 开启专注模式**\n\n集中注意力，切断一切外界干扰，不能让有限的工作记忆被其他事情占用。\n\n例如呆在一个安静的环境，打开手机电脑的勿扰模式，将手边无关的东西都拿开，打开番茄钟计时，然后开始专注。\n\n**2. 自下而上学习 - chunking**\n\n先从**基本概念**开始理解，在理解的前提下，将新知识与已掌握的知识相关联，建立chunk。\n\n理解后不断的用**自测**的方式，检验chunk是否真正形成。自测的形式很多，可以合上书回忆所有内容，也可以practice（实践），脱离书本，自己利用Chunk去实际独立操作、独立解决问题，通过这个过程知道**怎么使用chunk**\n\n![image-20200916162217085](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916162710.png)\n\n**3. 自上而下学习 - context**\n\ngaining context，获取背景知识，从更广的更高的角度去理解chunk如何融入整体的知识架构，通过这一点去了解**何时何处使用chunk**，掌握了how to之后，思考why to ，when to，从而在遇到问题的各种场景中信手拈来。\n\n\n\n例如🌰看一本书之前，先看看图片、章节大纲，看完一本书后，画流程图、思维导图，就能更清楚整体的结构，有利于chunk的建立和巩固。\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916162704.png)\n\n\n\n\n\n\n\n## 最高效的学习方法：间隔重复\n\n\n\nScience杂志曾发布一篇论文，让一群学生，使用不同的方法，在相同时间内，学习一篇科技文本，最终的结论是这样的：相较于 重复阅读、边学边画思维导图等方式，通过**recall**方式学习的学生，学的最多、也最牢固。\n\n\n\n这里的**recall**，我把它总结成`间隔重复练习法`，也就是不断重复下面的3个步骤：\n\n- 学习\n- 脱离书本回忆（**自测**）\n- 留出时间间隔（随着练习的次数增多，逐渐增大时间间隔）\n\n\n\n看完这篇文章，你可以忘记所有内容，但是一定要记得这个 *经过实验验证有效的*  学习方法。\n\n\n\n## 一些学习的误区\n\n\n\n- `看书喜欢画线、画高光`：很容易给自己造成”画了就是会了“的错觉，不是不可以画重点，但是记得要通过**自测**的方式检验一下自己是否真的掌握。\n\n- `能看懂，就是会了`：能看得懂不代表能独立解决，不要觉得你理解的知识，就是你的知识。一定要自己亲自**去实践，去自测**。要建立自己的思维模式，而不是被动的接受知识。\n\n- `过度学习`：在掌握一个知识后继续反复学习和训练的行为，在需要练出肌肉记忆、自动反应的情况下是必要的（比如体育竞技、演讲），在其他状况下，过度学习是**对时间和精力的浪费**\n\n- `思维定势`：固定的思维形式、牢固的记忆和chunk可能会阻碍你发现更好的灵感，因此在学习新事物时，要**把过去的思维模式先放下**。（有几个关于死亡的句子对这个观点具有启发性：1. There's the old saying that science progresses one funeral at a time，国外有句老话说，科学会随着每个葬礼的进行而进步； 2.乔布斯在斯坦福大学的演讲中曾说，死亡是我们生命中最酷的发明，死亡是生命轮换的代理人，它淘汰旧的以给新生事物发展空间。 3. 死亡意味着根深蒂固的旧思想的流逝）\n\n  \n\n## 一些学习的技巧\n\n\n\n- `记笔记`：看书时，减少划线和画高光以避免错觉，可以在知识点旁边写下你**自己的理解**，这样更利于加深印象，巩固记忆（酥鱼我仍然记得，我高中的时候做练习册，都喜欢把练习册写的黑压压的，即使是我掌握了的知识，也会在旁边写上清晰的解题思路。这种习惯一直延续到现在，我看过的书随便翻一翻就能看到笔记。我相信比起看完了还是一片雪白的书，这种方式更容易加深记忆\n- `换个环境`：间隔重复练习的时候，**切换不同的环境**，可以帮助我们脱离记忆对固定场景的依赖，避免单环境下的知识误区，更全面的理解所学知识的各个方面\n- `transfer知识迁移`：联系**不同领域**的相似chunk，也有助于加深记忆\n- `interleaving交替学习`：在已经掌握了基础知识后，可以**交叉**着不同类别的问题、方法、知识一起学习，有利于让大脑更具有灵活性和创造性，也更利于记忆。（用过百词斩的应该知道，他们的逻辑就是背一轮单词，再来一轮，不同的单词交替着出现，比一个单词一直背的效果好很多）另外可以了解一下**Anki软件**，利用交替学习等原理实现了帮助记忆的算法，形式类似于百词斩，只是把单词换成了你想记忆的知识点。\n- `奖励性学习`：在学习或者完成适量的目标后**激励自己**，可以让负责人体动力的多巴胺发挥生理作用\n- `刻意训练`：**专注于学习困难的部分**，是容易和别人拉开差距、超越平均水平的好方法\n- `关注过程，而不是结果`：对于一些困难的任务，需要很多时间和付出才能得到结果，如果只关注结果，会让人产生痛苦，导致拖延。只关注过程恰恰其实是大脑最喜欢的，在deadline之前的时间内，平静地尽最大的努力，关注每个番茄钟的30分钟周期，是否专注成功。\n- `在睡前坚持写周计划和日计划`：研究显示入睡时潜意识会进入类似于 Diffuse Mode 的状态来“消化”和“排练”要完成的项目，从而使你在白天能更好地去完成他们。写计划的另一个好处在于，如果你不这么做，这些待办事项就会停留在你的 Working Memory 中，占据宝贵的精神空间。通过将它们转移到纸上，你能够更好地专注于做事情本身。\n- `确定好停止学习的时间`：计划并严格遵守于 停止学习、专注、工作的时间是很重要的。这么做有助于形成日程规律，形成惯性，还给你更多时间去休息、发展身心健康\n- `把最困难最厌恶的事情放在早上第一件事做`\n- `运动`有助于神经元的活跃，有助于学习和记忆\n- `创建生动的视觉比喻和类推`，将知识形象化，能够帮助你更好地理解内容本身，将新事物与旧的神经回路联系了起来，使得大脑能思考得更快、更发散，也能帮助你突破定势\n  比如 18 世纪的化学家开始想象和可视化分子级别的运动时，他们取得了巨大的突破。\n- `与其他人一起合作`，在专注模式下，大脑倾向于坚持已经建立的推理步骤。与其他人一起合作可以填补你思维上的空缺，建立起更强的自我纠正能力。从这个意义上讲，与你一同合作的人们就好像是对你而言的外部发散思维。对身边的人解释所学的内容也有助于自身的学习。\n- `考试策略`：前文中多次提到**自测**，测试本身是一种非常有用的学习体验，\n\n\n\n## 如何准备一场考试\n\n这里介绍 Richard Felder 博士 提出的**备考清单**。\n\n- 是否认真地理解了内容？\n- 是否与同学讨论过课后问题？\n- 是否尝试列出课后问题的解题大纲？\n- 是否积极参加小组讨论？\n- 咨询过老师吗？\n- 是否弄清楚了所有课后问题的答案？\n- 对于不清楚的问题，是否在课堂上提出疑问？\n- 是否尝试快速列出一些问题的解题大纲？\n- 是否认真通读了辅导书\n- 是否参与考前复习？\n- 测试前有一个合理的睡眠时间吗？\n\n对于上述问题，在理想的备考状态下，肯定的回答越多越好。\n\n\n\n`一些考试时的策略`：\n\n- **先难后易**：如果我们先大概看一眼题目，从困难的问题出发，将它们“加载”到大脑中，然后跳回去做简单的问题，从而使大脑进入 Diffuse Mode 发散模式，这样就很有可能在较短的时间内找到难题的思路（当然，应该控制在你能力范围内，如果短时间内找不到思路，应该直接跳过）\n- **保持兴奋**：当你处于紧张状态时，大脑会分泌化学物质引发一系列生理反应。但你可以用不同的方式来解读这些反应。恐惧和兴奋其实是两种很相似的反应。当你坐在考场里，心跳加速，满头是汗，如果你**不去想“这场考试让我恐惧”而是“这场考试让我兴奋”**，这会对你的考试非常有 帮助。\n\n- **深呼吸**：考试时感到心慌是自然反应。你可以通过深呼吸来部分或者全部抵消这一反应。当然，不要等到考试的时候才去做。考前两周、考试开始前的最后时间里做深呼吸，有助于平复心情。\n- **不要被大脑欺骗**：我们的大脑经常会欺骗自己，是自己认为自己的解答是正确的。在考试过程中要时刻小心，可以多眨眨眼或是晃晃头，用这种方式来提醒自己稍微往 Diffuse Mode 发散模式 倾斜一点看看有没有出错，然后再用 Focused Mode 专注模式 进行确认。\n\n## 拖延症 & 习惯\n\n\n\n**拖延症的原理**：\n\n拖延症是个普遍的现象，在所有人身上多多少少都有体现，这是因为，**拖延是大脑做出的自然反应**。\n\n\n\n当你遇到不想做的事情时，会感受到不快，这种刺激(Cue)激活了大脑中与疼痛相关的区域，大脑就会迅速作出反应去寻找停止这种负面刺激的方式，即转移注意力到另一件令你愉快的事情上，从而让你在短期内感到舒服一些。\n\n\n\n**拖延症的影响：**\n\n拖延的负面影响不限于当前被拖延的事情。例如你觉得某一门课或者某一类知识很难，拖延症使你不断地拖迟学习它，当这种拖延行为成为习惯后，即使是想到学习这件事，都会令你痛苦。\n\n\n\n因此拖延的负面影响是有累积效应的，越拖延，不适的感觉越强。\n\n\n\n`对抗拖延症的几个技巧`：\n\n- 有研究人员发现，当人们真正去做不喜欢的事情后，这种精神上的抵触和不适很快就会消失。了解这个原理，在遇到不想做的事情时，暗示自己**先开头去做，很快就能克服**，就可以减轻负面刺激带来的不快感\n- **番茄工作法**：利用计时器或者番茄钟，**计时25分钟**，这25分钟内排除一切干扰集中精力专注，专注结束后，**计时5分钟**，给自己一些奖励：放松一下/起来溜达一圈/上网冲冲浪/吃点零食/聊会天。30分钟一次循环，这样的时间效率会相当高，计时器的作用，就是Cue，提醒你切换专注模式和发散模式。（25分钟的专注，对于大多数人来说应该不难。但是如果你发现自己很难持续专注25分钟，那可以循序渐进，先从10分钟开始训练自己的专注耐力）\n- 利用`习惯`\n\n\n\n对抗拖延症，是对抗身体的本能，需要消耗精力和意志力，而**习惯就是我们的节能机制**。\n\n\n\n一旦形成习惯，只需要一点点的Cue(信号)，后面的行为就会**像呼吸一样自然**，消耗很少的精力和毅力\n\n\n\n就像你刚开始学车，倒车入库会让你手足无措、手心流汗、提心吊胆，但是当你成为了老司机，看后视镜、转动方向盘就会一气呵成，流畅自然。\n\n\n\n那么`如何养成好习惯`呢：\n\n1. Cue信号：触发惯性行为的外界刺激。比如待办清单上的第一项，办公桌前的便利贴。Cue 大致可以分为四类：时间、地点、感受、反应，从这四个方面，**为自己的好习惯，找一个显眼的信号**。\n2. Routine惯性行为：大脑受到信号刺激后，习惯性做出的反应。**反复多次的练习**，就可以养成。\n3. Reward奖励：任何习惯得以延续，都是因为它可以回报我们，它会立即给我们带来愉悦感。拖延极易养成习惯，就是因为拖延能带给我们迅速即时的愉悦感。因此为了克服拖延症，**奖励好习惯**很重要。\n4. Belief信念：习惯的力量之所以强大，是因为你在内心深处往往认为它们是无法被改变的。\n\n\n\n\n\n## 总结\n\n- 灵活运用`两种思维模式`：专注模式更适合解决细节问题，发散模式更适合寻找灵感和整体解决方案\n- `牢固记忆`的4个技巧：间隔重复、感官联系、充足睡眠+睡前复盘、保持冷静\n- 学习的本质是`建立组块`Chunks，建立过程有三个步骤：开启专注模式、自下而上学习、自上而下学习\n- 最高效的学习方法：`间隔重复`练习法（可以用Anki应用辅助）\n- `拖延症`没那么可怕，只要开始入手做，痛苦就会减轻；可以利用`番茄钟`、良好的`习惯`，来帮助你减轻拖延症提高效率\n- 4个学习误区、14个学习技巧、关于考试的几个技巧也值得掌握~\n","slug":"learning_how_to_learn","published":1,"updated":"2021-01-27T08:49:56.954Z","_id":"ckir88jcb005kc8y61grko4d8","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>6000字长文预警，建议拉到底部，先看总结❤</li>\n<li>原创不易，欢迎<strong>点赞，在看，转发</strong>支持</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200921190445.png\" alt=\"文章大纲\"></p>\n<hr>\n<p>酥鱼我从小学到大学毕业，当了十六年的学生，工作又选择了程序员这个发展日新月异、需要持续学习的行业。</p>\n<p>如何提升学习效率，减少学习带来的挫折感和痛苦，一直是我所苦苦追寻而不得的。</p>\n<p>每每看到别人能用更短的时间，学到更多、更深刻、更系统的知识，我都留下了羡慕的泪水。</p>\n<p>因此我也曾向很多学霸、前辈们请教学习的法门，多多少少能有些学习方法上的收获，但这些方法都因人而异，起不到决定性的作用，始终觉得自己对于<strong>如何学习</strong>这个问题，理不出一个最完美的、有逻辑性的答案。</p>\n<p>直到我接触到了Coursera上的一门免费课程<a href=\"https://www.coursera.org/learn/ruhe-xuexi\" target=\"_blank\" rel=\"noopener\">Learning how to Learn</a>，这门课从神经学、生物学的角度，揭示了大脑认知的底层原理，和学习的本质，从而提供了一系列提升学习效率、减轻学习痛苦与挫败感的技巧。</p>\n<p>这门课视频内容大概10小时，值得花时间去上，但是如果你想节省时间，可以直接看看本文。</p>\n<p>如果你刚好学过这门课，可以跟着本文一起<strong>复盘</strong>一遍（学过的你一定知道复盘的重要性。</p>\n<p>另外有一本书<a href=\"https://book.douban.com/subject/26895988/\" target=\"_blank\" rel=\"noopener\">《学习之道》</a>，是这门课的书面材料，书的作者也是课程主讲老师，内容和视频是相对应的，因此也可以直接啃书。</p>\n<p>废话讲了一堆，下面跟着我一起开始正文吧~</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915181959.gif\" alt></p>\n<hr>\n<h2 id=\"人脑的两种思维模式\"><a href=\"#人脑的两种思维模式\" class=\"headerlink\" title=\"人脑的两种思维模式\"></a>人脑的两种思维模式</h2><p>提到学习，离不开大脑的思维，有了思维才能去理解、才能拥有记忆。</p>\n<p>人的大脑一共有两种思维模式:</p>\n<table>\n<thead>\n<tr>\n<th>Focused Mode <br>专注模式</th>\n<th>Diffuse Mode<br> 发散模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>集中精力解决单一问题</td>\n<td>放松的思考模式</td>\n</tr>\n<tr>\n<td>熟练掌握的内容</td>\n<td>新事物学习，获取灵感</td>\n</tr>\n<tr>\n<td>顺序思考</td>\n<td>整体思考</td>\n</tr>\n<tr>\n<td>熟练掌握的内容</td>\n<td>新事物学习，获取灵感</td>\n</tr>\n</tbody>\n</table>\n<p>以弹珠游戏类比大脑的思维：</p>\n<ul>\n<li><strong>专注模式</strong>下，大脑遇到已知问题，能快速定位到已掌握的知识，利用训练好的知识回路，专一且迅速的解决问题（弹珠定向发射），此时思维的粒度很细（弹珠盘上的桩很密集），当遇到新问题时，由于过于关注细节，大脑无法进行更广的思维跳跃，无法将更多的知识回路连接（由于桩很密集，弹珠弹射区域很小）。</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915094332.png\" alt=\"专注模式\"></p>\n<ul>\n<li><strong>发散模式</strong>下，大脑处于放松状态，不考虑细节（弹珠盘上的桩很少），思维灵活跳跃，能从整体层面解决问题，更有助于发挥创造力（弹珠随意发射，在较大的区域弹射）。</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915094340.png\" alt=\"发散模式\"></p>\n<p>这两种思维区别很大，而且不能同时应用，所以我们需要将两种思维模式<code>结合使用，灵活转换</code>。</p>\n<p>举个例子🌰：</p>\n<p>Salvador Dali，20世纪著名超现实主义画家。他有一个有趣的方法，来帮他创造富有创造性的作品：<em>坐在椅子上，放松大脑，模糊的思考着之前专注的事情，手上拿着一串钥匙晃悠，当他睡着时，钥匙会掉落在地上，把他吵醒，这样他就能把脑子里刚刚<strong>发散模式</strong>下的联想和点子集中起来，带着它们回到<strong>专注模式</strong>去记录灵感并进行创作。</em></p>\n<p><strong>专注模式更适合解决细节问题，发散模式更适合寻找灵感和整体解决方案</strong>。</p>\n<h2 id=\"如何拥有更牢固的记忆\"><a href=\"#如何拥有更牢固的记忆\" class=\"headerlink\" title=\"如何拥有更牢固的记忆\"></a>如何拥有更牢固的记忆</h2><p>学习，其实就是掌握知识的过程，这个过程主要就是两步，<strong>理解 + 记忆</strong>。</p>\n<p>理解，可以通过很多方式，比如听老师讲课，看书，看视频，看资料，请教前辈等等，方式很多，这一步一般不需要很多时间。</p>\n<p>先来谈谈记忆，这门课把人类记忆划分为两种:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Working Memory<br> 工作记忆</th>\n<th style=\"text-align:center\">Long-term Memory <br>长期记忆</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">短期记忆</td>\n<td style=\"text-align:center\">长期记忆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">负责处理即时的有意识的想法<br>例如专注学习新知识时<br>如果不加以复习和记忆，会被其他信息挤掉</td>\n<td style=\"text-align:center\">负责存储已掌握的知识<br>需要时常复习，才能提升未来能记忆到的几率</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类似于计算机内存，或者一块小黑板</td>\n<td style=\"text-align:center\">类似于硬盘，或者一个存储仓库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">例如你尝试在脑海中用多个概念串联起来，<br>去解决一个当下遇到的问题</td>\n<td style=\"text-align:center\">例如你回忆99乘法表去计算9×9的结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">存储于大脑的前额皮质，与大脑的其他部位可以联系</td>\n<td style=\"text-align:center\">占据大脑大片区域</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">容量较小，因人而异，大约可以存储四个组块的信息</td>\n<td style=\"text-align:center\">容量巨大</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">处于大脑的前额叶皮质区域，与大脑的其他区域可以连接</td>\n<td style=\"text-align:center\">不同类别的长期记忆，处于大脑的不同位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915190943.png\" alt=\"image-20200915190943225\"></td>\n<td style=\"text-align:center\"><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915191016.png\" alt=\"image-20200915191016075\"></td>\n</tr>\n</tbody>\n</table>\n<p><strong>学习的最终目标，就是将已经理解的知识从工作记忆，转化到长期记忆</strong>。而这个过程，需要的是<strong>练习</strong>。</p>\n<p>那么怎样<code>在相同练习次数下，获取更牢固的记忆</code>呢？</p>\n<ul>\n<li><strong>间隔重复</strong>：刻意的进行反复练习，每次练习中间要有间隔，不断增大两次练习之间的时间间隔。（同样次数的练习，分散在几天中做的效果 比集中在一个晚上做更好）</li>\n<li>利用比喻、类比、想象，将知识 和 人类<strong>感官联系</strong>，如视觉、听觉、触觉、情感，更有利于记忆。例如：把想要记住的东西，转换成一些难忘的画面、大声朗读单词文章等等</li>\n<li><strong>充足睡眠+睡前复盘</strong>：睡眠对于学习至关重要，入睡时脑细胞会缩小 使得专注学习时产生的代谢毒物可以被清除，且大脑会在睡眠期间自动清理不重要的记忆，并在潜意识中排演睡前学习的内容。因此睡前花几分钟回顾学习内容，有助于记忆。</li>\n<li><strong>冷静</strong>。在你感到紧张/生气/害怕时，这些情绪会占用你的工作记忆。因此开始专注前，要排除各种情绪的干扰。</li>\n</ul>\n<h2 id=\"学习的本质：Chunk-组块\"><a href=\"#学习的本质：Chunk-组块\" class=\"headerlink\" title=\"学习的本质：Chunk 组块\"></a>学习的本质：Chunk 组块</h2><p><strong>Chunk 组块</strong>：是指大脑可以轻松使用的小而紧凑的<strong>信息碎片</strong>（可以理解成多个神经元组成的回路或思维回路</p>\n<p><strong>Chunking 组块化</strong>：根据意义和逻辑将信息碎片拼接起来，得到Chunk的思维过程</p>\n<p>概念有点抽象，举一个<code>拼图</code>的例子🌰：</p>\n<p>一堆拼图碎片是凌乱无意义的，每块拼图碎片的棱角和图像就是它和其他碎片相互连接的信息和逻辑，理清了所有碎片的逻辑关联，拼成整体后，才能得到一个具有清晰逻辑的整体图片</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916130211.png\" alt=\"image-20200916130210985\"></p>\n<p>再以小星星⭐举例：</p>\n<p>S,T,A,R四个字母单独看，都是单纯的无意义字母，组合成<code>Star</code>后，就是一个有意义的词，你就能联想到五角星的图片形象，也能联想到星空，这就是一个<strong>chunk</strong>的例子，这个<strong>chunk</strong>虽然是一个抽象的概念，但是在你的大脑中，真实存在着相互连接的神经元，其中包含了对四个字母、五角星和星空形象的记忆。</p>\n<p>最后一个栗子🌰：</p>\n<p>我们人类出生后最初的学习，就是认识妈妈，一个母亲不断的在孩子面前说“妈妈”这个词，孩子就能学会叫妈妈，并且能把“妈妈”这个词的发音，和母亲的笑容、母亲的形象联系起来，从而不会把别人错认成妈妈。这个学习过程会形成下图👇这样的神经回路，也就是<strong>Chunk</strong>。</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916131723.png\" alt></p>\n<p>为什么要用这么多内容介绍<strong>Chunk</strong>呢？</p>\n<p>因为，<strong>专注学习、重复训练的过程，就是建立chunk的过程</strong>，当chunk建立后，神经回路里的任何一点，都能引导你串联整个记忆回路。</p>\n<p>人类复杂的神经活动、记忆的存储、牛顿从“苹果落地”到“万有引力”，都建立了并依赖于大脑中众多的<strong>Chunks</strong>。</p>\n<p><strong>Chunk</strong>就像是人脑中<strong>最小可利用的思维回路</strong>，解决复杂问题、掌握复杂知识时，需要利用到众多的相互关联的Chunk，最终形成了你整个大脑的思维网络。</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200918164835.png\" alt></p>\n<p>再回到之前讲的学习的本质，就是<strong>理解+记忆</strong>，记忆这一步的技巧前面已经讲了，理解这一步要做的，就是把现有的外界的知识，转化成自己的知识，在大脑中形成Chunk，为你所用。</p>\n<p>那么<code>怎样建立牢固可靠的Chunk</code>呢？</p>\n<p><strong>1. 开启专注模式</strong></p>\n<p>集中注意力，切断一切外界干扰，不能让有限的工作记忆被其他事情占用。</p>\n<p>例如呆在一个安静的环境，打开手机电脑的勿扰模式，将手边无关的东西都拿开，打开番茄钟计时，然后开始专注。</p>\n<p><strong>2. 自下而上学习 - chunking</strong></p>\n<p>先从<strong>基本概念</strong>开始理解，在理解的前提下，将新知识与已掌握的知识相关联，建立chunk。</p>\n<p>理解后不断的用<strong>自测</strong>的方式，检验chunk是否真正形成。自测的形式很多，可以合上书回忆所有内容，也可以practice（实践），脱离书本，自己利用Chunk去实际独立操作、独立解决问题，通过这个过程知道<strong>怎么使用chunk</strong></p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916162710.png\" alt=\"image-20200916162217085\"></p>\n<p><strong>3. 自上而下学习 - context</strong></p>\n<p>gaining context，获取背景知识，从更广的更高的角度去理解chunk如何融入整体的知识架构，通过这一点去了解<strong>何时何处使用chunk</strong>，掌握了how to之后，思考why to ，when to，从而在遇到问题的各种场景中信手拈来。</p>\n<p>例如🌰看一本书之前，先看看图片、章节大纲，看完一本书后，画流程图、思维导图，就能更清楚整体的结构，有利于chunk的建立和巩固。</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916162704.png\" alt></p>\n<h2 id=\"最高效的学习方法：间隔重复\"><a href=\"#最高效的学习方法：间隔重复\" class=\"headerlink\" title=\"最高效的学习方法：间隔重复\"></a>最高效的学习方法：间隔重复</h2><p>Science杂志曾发布一篇论文，让一群学生，使用不同的方法，在相同时间内，学习一篇科技文本，最终的结论是这样的：相较于 重复阅读、边学边画思维导图等方式，通过<strong>recall</strong>方式学习的学生，学的最多、也最牢固。</p>\n<p>这里的<strong>recall</strong>，我把它总结成<code>间隔重复练习法</code>，也就是不断重复下面的3个步骤：</p>\n<ul>\n<li>学习</li>\n<li>脱离书本回忆（<strong>自测</strong>）</li>\n<li>留出时间间隔（随着练习的次数增多，逐渐增大时间间隔）</li>\n</ul>\n<p>看完这篇文章，你可以忘记所有内容，但是一定要记得这个 <em>经过实验验证有效的</em>  学习方法。</p>\n<h2 id=\"一些学习的误区\"><a href=\"#一些学习的误区\" class=\"headerlink\" title=\"一些学习的误区\"></a>一些学习的误区</h2><ul>\n<li><p><code>看书喜欢画线、画高光</code>：很容易给自己造成”画了就是会了“的错觉，不是不可以画重点，但是记得要通过<strong>自测</strong>的方式检验一下自己是否真的掌握。</p>\n</li>\n<li><p><code>能看懂，就是会了</code>：能看得懂不代表能独立解决，不要觉得你理解的知识，就是你的知识。一定要自己亲自<strong>去实践，去自测</strong>。要建立自己的思维模式，而不是被动的接受知识。</p>\n</li>\n<li><p><code>过度学习</code>：在掌握一个知识后继续反复学习和训练的行为，在需要练出肌肉记忆、自动反应的情况下是必要的（比如体育竞技、演讲），在其他状况下，过度学习是<strong>对时间和精力的浪费</strong></p>\n</li>\n<li><p><code>思维定势</code>：固定的思维形式、牢固的记忆和chunk可能会阻碍你发现更好的灵感，因此在学习新事物时，要<strong>把过去的思维模式先放下</strong>。（有几个关于死亡的句子对这个观点具有启发性：1. There’s the old saying that science progresses one funeral at a time，国外有句老话说，科学会随着每个葬礼的进行而进步； 2.乔布斯在斯坦福大学的演讲中曾说，死亡是我们生命中最酷的发明，死亡是生命轮换的代理人，它淘汰旧的以给新生事物发展空间。 3. 死亡意味着根深蒂固的旧思想的流逝）</p>\n</li>\n</ul>\n<h2 id=\"一些学习的技巧\"><a href=\"#一些学习的技巧\" class=\"headerlink\" title=\"一些学习的技巧\"></a>一些学习的技巧</h2><ul>\n<li><code>记笔记</code>：看书时，减少划线和画高光以避免错觉，可以在知识点旁边写下你<strong>自己的理解</strong>，这样更利于加深印象，巩固记忆（酥鱼我仍然记得，我高中的时候做练习册，都喜欢把练习册写的黑压压的，即使是我掌握了的知识，也会在旁边写上清晰的解题思路。这种习惯一直延续到现在，我看过的书随便翻一翻就能看到笔记。我相信比起看完了还是一片雪白的书，这种方式更容易加深记忆</li>\n<li><code>换个环境</code>：间隔重复练习的时候，<strong>切换不同的环境</strong>，可以帮助我们脱离记忆对固定场景的依赖，避免单环境下的知识误区，更全面的理解所学知识的各个方面</li>\n<li><code>transfer知识迁移</code>：联系<strong>不同领域</strong>的相似chunk，也有助于加深记忆</li>\n<li><code>interleaving交替学习</code>：在已经掌握了基础知识后，可以<strong>交叉</strong>着不同类别的问题、方法、知识一起学习，有利于让大脑更具有灵活性和创造性，也更利于记忆。（用过百词斩的应该知道，他们的逻辑就是背一轮单词，再来一轮，不同的单词交替着出现，比一个单词一直背的效果好很多）另外可以了解一下<strong>Anki软件</strong>，利用交替学习等原理实现了帮助记忆的算法，形式类似于百词斩，只是把单词换成了你想记忆的知识点。</li>\n<li><code>奖励性学习</code>：在学习或者完成适量的目标后<strong>激励自己</strong>，可以让负责人体动力的多巴胺发挥生理作用</li>\n<li><code>刻意训练</code>：<strong>专注于学习困难的部分</strong>，是容易和别人拉开差距、超越平均水平的好方法</li>\n<li><code>关注过程，而不是结果</code>：对于一些困难的任务，需要很多时间和付出才能得到结果，如果只关注结果，会让人产生痛苦，导致拖延。只关注过程恰恰其实是大脑最喜欢的，在deadline之前的时间内，平静地尽最大的努力，关注每个番茄钟的30分钟周期，是否专注成功。</li>\n<li><code>在睡前坚持写周计划和日计划</code>：研究显示入睡时潜意识会进入类似于 Diffuse Mode 的状态来“消化”和“排练”要完成的项目，从而使你在白天能更好地去完成他们。写计划的另一个好处在于，如果你不这么做，这些待办事项就会停留在你的 Working Memory 中，占据宝贵的精神空间。通过将它们转移到纸上，你能够更好地专注于做事情本身。</li>\n<li><code>确定好停止学习的时间</code>：计划并严格遵守于 停止学习、专注、工作的时间是很重要的。这么做有助于形成日程规律，形成惯性，还给你更多时间去休息、发展身心健康</li>\n<li><code>把最困难最厌恶的事情放在早上第一件事做</code></li>\n<li><code>运动</code>有助于神经元的活跃，有助于学习和记忆</li>\n<li><code>创建生动的视觉比喻和类推</code>，将知识形象化，能够帮助你更好地理解内容本身，将新事物与旧的神经回路联系了起来，使得大脑能思考得更快、更发散，也能帮助你突破定势<br>比如 18 世纪的化学家开始想象和可视化分子级别的运动时，他们取得了巨大的突破。</li>\n<li><code>与其他人一起合作</code>，在专注模式下，大脑倾向于坚持已经建立的推理步骤。与其他人一起合作可以填补你思维上的空缺，建立起更强的自我纠正能力。从这个意义上讲，与你一同合作的人们就好像是对你而言的外部发散思维。对身边的人解释所学的内容也有助于自身的学习。</li>\n<li><code>考试策略</code>：前文中多次提到<strong>自测</strong>，测试本身是一种非常有用的学习体验，</li>\n</ul>\n<h2 id=\"如何准备一场考试\"><a href=\"#如何准备一场考试\" class=\"headerlink\" title=\"如何准备一场考试\"></a>如何准备一场考试</h2><p>这里介绍 Richard Felder 博士 提出的<strong>备考清单</strong>。</p>\n<ul>\n<li>是否认真地理解了内容？</li>\n<li>是否与同学讨论过课后问题？</li>\n<li>是否尝试列出课后问题的解题大纲？</li>\n<li>是否积极参加小组讨论？</li>\n<li>咨询过老师吗？</li>\n<li>是否弄清楚了所有课后问题的答案？</li>\n<li>对于不清楚的问题，是否在课堂上提出疑问？</li>\n<li>是否尝试快速列出一些问题的解题大纲？</li>\n<li>是否认真通读了辅导书</li>\n<li>是否参与考前复习？</li>\n<li>测试前有一个合理的睡眠时间吗？</li>\n</ul>\n<p>对于上述问题，在理想的备考状态下，肯定的回答越多越好。</p>\n<p><code>一些考试时的策略</code>：</p>\n<ul>\n<li><strong>先难后易</strong>：如果我们先大概看一眼题目，从困难的问题出发，将它们“加载”到大脑中，然后跳回去做简单的问题，从而使大脑进入 Diffuse Mode 发散模式，这样就很有可能在较短的时间内找到难题的思路（当然，应该控制在你能力范围内，如果短时间内找不到思路，应该直接跳过）</li>\n<li><p><strong>保持兴奋</strong>：当你处于紧张状态时，大脑会分泌化学物质引发一系列生理反应。但你可以用不同的方式来解读这些反应。恐惧和兴奋其实是两种很相似的反应。当你坐在考场里，心跳加速，满头是汗，如果你<strong>不去想“这场考试让我恐惧”而是“这场考试让我兴奋”</strong>，这会对你的考试非常有 帮助。</p>\n</li>\n<li><p><strong>深呼吸</strong>：考试时感到心慌是自然反应。你可以通过深呼吸来部分或者全部抵消这一反应。当然，不要等到考试的时候才去做。考前两周、考试开始前的最后时间里做深呼吸，有助于平复心情。</p>\n</li>\n<li><strong>不要被大脑欺骗</strong>：我们的大脑经常会欺骗自己，是自己认为自己的解答是正确的。在考试过程中要时刻小心，可以多眨眨眼或是晃晃头，用这种方式来提醒自己稍微往 Diffuse Mode 发散模式 倾斜一点看看有没有出错，然后再用 Focused Mode 专注模式 进行确认。</li>\n</ul>\n<h2 id=\"拖延症-amp-习惯\"><a href=\"#拖延症-amp-习惯\" class=\"headerlink\" title=\"拖延症 &amp; 习惯\"></a>拖延症 &amp; 习惯</h2><p><strong>拖延症的原理</strong>：</p>\n<p>拖延症是个普遍的现象，在所有人身上多多少少都有体现，这是因为，<strong>拖延是大脑做出的自然反应</strong>。</p>\n<p>当你遇到不想做的事情时，会感受到不快，这种刺激(Cue)激活了大脑中与疼痛相关的区域，大脑就会迅速作出反应去寻找停止这种负面刺激的方式，即转移注意力到另一件令你愉快的事情上，从而让你在短期内感到舒服一些。</p>\n<p><strong>拖延症的影响：</strong></p>\n<p>拖延的负面影响不限于当前被拖延的事情。例如你觉得某一门课或者某一类知识很难，拖延症使你不断地拖迟学习它，当这种拖延行为成为习惯后，即使是想到学习这件事，都会令你痛苦。</p>\n<p>因此拖延的负面影响是有累积效应的，越拖延，不适的感觉越强。</p>\n<p><code>对抗拖延症的几个技巧</code>：</p>\n<ul>\n<li>有研究人员发现，当人们真正去做不喜欢的事情后，这种精神上的抵触和不适很快就会消失。了解这个原理，在遇到不想做的事情时，暗示自己<strong>先开头去做，很快就能克服</strong>，就可以减轻负面刺激带来的不快感</li>\n<li><strong>番茄工作法</strong>：利用计时器或者番茄钟，<strong>计时25分钟</strong>，这25分钟内排除一切干扰集中精力专注，专注结束后，<strong>计时5分钟</strong>，给自己一些奖励：放松一下/起来溜达一圈/上网冲冲浪/吃点零食/聊会天。30分钟一次循环，这样的时间效率会相当高，计时器的作用，就是Cue，提醒你切换专注模式和发散模式。（25分钟的专注，对于大多数人来说应该不难。但是如果你发现自己很难持续专注25分钟，那可以循序渐进，先从10分钟开始训练自己的专注耐力）</li>\n<li>利用<code>习惯</code></li>\n</ul>\n<p>对抗拖延症，是对抗身体的本能，需要消耗精力和意志力，而<strong>习惯就是我们的节能机制</strong>。</p>\n<p>一旦形成习惯，只需要一点点的Cue(信号)，后面的行为就会<strong>像呼吸一样自然</strong>，消耗很少的精力和毅力</p>\n<p>就像你刚开始学车，倒车入库会让你手足无措、手心流汗、提心吊胆，但是当你成为了老司机，看后视镜、转动方向盘就会一气呵成，流畅自然。</p>\n<p>那么<code>如何养成好习惯</code>呢：</p>\n<ol>\n<li>Cue信号：触发惯性行为的外界刺激。比如待办清单上的第一项，办公桌前的便利贴。Cue 大致可以分为四类：时间、地点、感受、反应，从这四个方面，<strong>为自己的好习惯，找一个显眼的信号</strong>。</li>\n<li>Routine惯性行为：大脑受到信号刺激后，习惯性做出的反应。<strong>反复多次的练习</strong>，就可以养成。</li>\n<li>Reward奖励：任何习惯得以延续，都是因为它可以回报我们，它会立即给我们带来愉悦感。拖延极易养成习惯，就是因为拖延能带给我们迅速即时的愉悦感。因此为了克服拖延症，<strong>奖励好习惯</strong>很重要。</li>\n<li>Belief信念：习惯的力量之所以强大，是因为你在内心深处往往认为它们是无法被改变的。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>灵活运用<code>两种思维模式</code>：专注模式更适合解决细节问题，发散模式更适合寻找灵感和整体解决方案</li>\n<li><code>牢固记忆</code>的4个技巧：间隔重复、感官联系、充足睡眠+睡前复盘、保持冷静</li>\n<li>学习的本质是<code>建立组块</code>Chunks，建立过程有三个步骤：开启专注模式、自下而上学习、自上而下学习</li>\n<li>最高效的学习方法：<code>间隔重复</code>练习法（可以用Anki应用辅助）</li>\n<li><code>拖延症</code>没那么可怕，只要开始入手做，痛苦就会减轻；可以利用<code>番茄钟</code>、良好的<code>习惯</code>，来帮助你减轻拖延症提高效率</li>\n<li>4个学习误区、14个学习技巧、关于考试的几个技巧也值得掌握~</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>6000字长文预警，建议拉到底部，先看总结❤</li>\n<li>原创不易，欢迎<strong>点赞，在看，转发</strong>支持</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200921190445.png\" alt=\"文章大纲\"></p>\n<hr>\n<p>酥鱼我从小学到大学毕业，当了十六年的学生，工作又选择了程序员这个发展日新月异、需要持续学习的行业。</p>\n<p>如何提升学习效率，减少学习带来的挫折感和痛苦，一直是我所苦苦追寻而不得的。</p>\n<p>每每看到别人能用更短的时间，学到更多、更深刻、更系统的知识，我都留下了羡慕的泪水。</p>\n<p>因此我也曾向很多学霸、前辈们请教学习的法门，多多少少能有些学习方法上的收获，但这些方法都因人而异，起不到决定性的作用，始终觉得自己对于<strong>如何学习</strong>这个问题，理不出一个最完美的、有逻辑性的答案。</p>\n<p>直到我接触到了Coursera上的一门免费课程<a href=\"https://www.coursera.org/learn/ruhe-xuexi\" target=\"_blank\" rel=\"noopener\">Learning how to Learn</a>，这门课从神经学、生物学的角度，揭示了大脑认知的底层原理，和学习的本质，从而提供了一系列提升学习效率、减轻学习痛苦与挫败感的技巧。</p>\n<p>这门课视频内容大概10小时，值得花时间去上，但是如果你想节省时间，可以直接看看本文。</p>\n<p>如果你刚好学过这门课，可以跟着本文一起<strong>复盘</strong>一遍（学过的你一定知道复盘的重要性。</p>\n<p>另外有一本书<a href=\"https://book.douban.com/subject/26895988/\" target=\"_blank\" rel=\"noopener\">《学习之道》</a>，是这门课的书面材料，书的作者也是课程主讲老师，内容和视频是相对应的，因此也可以直接啃书。</p>\n<p>废话讲了一堆，下面跟着我一起开始正文吧~</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915181959.gif\" alt></p>\n<hr>\n<h2 id=\"人脑的两种思维模式\"><a href=\"#人脑的两种思维模式\" class=\"headerlink\" title=\"人脑的两种思维模式\"></a>人脑的两种思维模式</h2><p>提到学习，离不开大脑的思维，有了思维才能去理解、才能拥有记忆。</p>\n<p>人的大脑一共有两种思维模式:</p>\n<table>\n<thead>\n<tr>\n<th>Focused Mode <br>专注模式</th>\n<th>Diffuse Mode<br> 发散模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>集中精力解决单一问题</td>\n<td>放松的思考模式</td>\n</tr>\n<tr>\n<td>熟练掌握的内容</td>\n<td>新事物学习，获取灵感</td>\n</tr>\n<tr>\n<td>顺序思考</td>\n<td>整体思考</td>\n</tr>\n<tr>\n<td>熟练掌握的内容</td>\n<td>新事物学习，获取灵感</td>\n</tr>\n</tbody>\n</table>\n<p>以弹珠游戏类比大脑的思维：</p>\n<ul>\n<li><strong>专注模式</strong>下，大脑遇到已知问题，能快速定位到已掌握的知识，利用训练好的知识回路，专一且迅速的解决问题（弹珠定向发射），此时思维的粒度很细（弹珠盘上的桩很密集），当遇到新问题时，由于过于关注细节，大脑无法进行更广的思维跳跃，无法将更多的知识回路连接（由于桩很密集，弹珠弹射区域很小）。</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915094332.png\" alt=\"专注模式\"></p>\n<ul>\n<li><strong>发散模式</strong>下，大脑处于放松状态，不考虑细节（弹珠盘上的桩很少），思维灵活跳跃，能从整体层面解决问题，更有助于发挥创造力（弹珠随意发射，在较大的区域弹射）。</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915094340.png\" alt=\"发散模式\"></p>\n<p>这两种思维区别很大，而且不能同时应用，所以我们需要将两种思维模式<code>结合使用，灵活转换</code>。</p>\n<p>举个例子🌰：</p>\n<p>Salvador Dali，20世纪著名超现实主义画家。他有一个有趣的方法，来帮他创造富有创造性的作品：<em>坐在椅子上，放松大脑，模糊的思考着之前专注的事情，手上拿着一串钥匙晃悠，当他睡着时，钥匙会掉落在地上，把他吵醒，这样他就能把脑子里刚刚<strong>发散模式</strong>下的联想和点子集中起来，带着它们回到<strong>专注模式</strong>去记录灵感并进行创作。</em></p>\n<p><strong>专注模式更适合解决细节问题，发散模式更适合寻找灵感和整体解决方案</strong>。</p>\n<h2 id=\"如何拥有更牢固的记忆\"><a href=\"#如何拥有更牢固的记忆\" class=\"headerlink\" title=\"如何拥有更牢固的记忆\"></a>如何拥有更牢固的记忆</h2><p>学习，其实就是掌握知识的过程，这个过程主要就是两步，<strong>理解 + 记忆</strong>。</p>\n<p>理解，可以通过很多方式，比如听老师讲课，看书，看视频，看资料，请教前辈等等，方式很多，这一步一般不需要很多时间。</p>\n<p>先来谈谈记忆，这门课把人类记忆划分为两种:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Working Memory<br> 工作记忆</th>\n<th style=\"text-align:center\">Long-term Memory <br>长期记忆</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">短期记忆</td>\n<td style=\"text-align:center\">长期记忆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">负责处理即时的有意识的想法<br>例如专注学习新知识时<br>如果不加以复习和记忆，会被其他信息挤掉</td>\n<td style=\"text-align:center\">负责存储已掌握的知识<br>需要时常复习，才能提升未来能记忆到的几率</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类似于计算机内存，或者一块小黑板</td>\n<td style=\"text-align:center\">类似于硬盘，或者一个存储仓库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">例如你尝试在脑海中用多个概念串联起来，<br>去解决一个当下遇到的问题</td>\n<td style=\"text-align:center\">例如你回忆99乘法表去计算9×9的结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">存储于大脑的前额皮质，与大脑的其他部位可以联系</td>\n<td style=\"text-align:center\">占据大脑大片区域</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">容量较小，因人而异，大约可以存储四个组块的信息</td>\n<td style=\"text-align:center\">容量巨大</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">处于大脑的前额叶皮质区域，与大脑的其他区域可以连接</td>\n<td style=\"text-align:center\">不同类别的长期记忆，处于大脑的不同位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915190943.png\" alt=\"image-20200915190943225\"></td>\n<td style=\"text-align:center\"><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200915191016.png\" alt=\"image-20200915191016075\"></td>\n</tr>\n</tbody>\n</table>\n<p><strong>学习的最终目标，就是将已经理解的知识从工作记忆，转化到长期记忆</strong>。而这个过程，需要的是<strong>练习</strong>。</p>\n<p>那么怎样<code>在相同练习次数下，获取更牢固的记忆</code>呢？</p>\n<ul>\n<li><strong>间隔重复</strong>：刻意的进行反复练习，每次练习中间要有间隔，不断增大两次练习之间的时间间隔。（同样次数的练习，分散在几天中做的效果 比集中在一个晚上做更好）</li>\n<li>利用比喻、类比、想象，将知识 和 人类<strong>感官联系</strong>，如视觉、听觉、触觉、情感，更有利于记忆。例如：把想要记住的东西，转换成一些难忘的画面、大声朗读单词文章等等</li>\n<li><strong>充足睡眠+睡前复盘</strong>：睡眠对于学习至关重要，入睡时脑细胞会缩小 使得专注学习时产生的代谢毒物可以被清除，且大脑会在睡眠期间自动清理不重要的记忆，并在潜意识中排演睡前学习的内容。因此睡前花几分钟回顾学习内容，有助于记忆。</li>\n<li><strong>冷静</strong>。在你感到紧张/生气/害怕时，这些情绪会占用你的工作记忆。因此开始专注前，要排除各种情绪的干扰。</li>\n</ul>\n<h2 id=\"学习的本质：Chunk-组块\"><a href=\"#学习的本质：Chunk-组块\" class=\"headerlink\" title=\"学习的本质：Chunk 组块\"></a>学习的本质：Chunk 组块</h2><p><strong>Chunk 组块</strong>：是指大脑可以轻松使用的小而紧凑的<strong>信息碎片</strong>（可以理解成多个神经元组成的回路或思维回路</p>\n<p><strong>Chunking 组块化</strong>：根据意义和逻辑将信息碎片拼接起来，得到Chunk的思维过程</p>\n<p>概念有点抽象，举一个<code>拼图</code>的例子🌰：</p>\n<p>一堆拼图碎片是凌乱无意义的，每块拼图碎片的棱角和图像就是它和其他碎片相互连接的信息和逻辑，理清了所有碎片的逻辑关联，拼成整体后，才能得到一个具有清晰逻辑的整体图片</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916130211.png\" alt=\"image-20200916130210985\"></p>\n<p>再以小星星⭐举例：</p>\n<p>S,T,A,R四个字母单独看，都是单纯的无意义字母，组合成<code>Star</code>后，就是一个有意义的词，你就能联想到五角星的图片形象，也能联想到星空，这就是一个<strong>chunk</strong>的例子，这个<strong>chunk</strong>虽然是一个抽象的概念，但是在你的大脑中，真实存在着相互连接的神经元，其中包含了对四个字母、五角星和星空形象的记忆。</p>\n<p>最后一个栗子🌰：</p>\n<p>我们人类出生后最初的学习，就是认识妈妈，一个母亲不断的在孩子面前说“妈妈”这个词，孩子就能学会叫妈妈，并且能把“妈妈”这个词的发音，和母亲的笑容、母亲的形象联系起来，从而不会把别人错认成妈妈。这个学习过程会形成下图👇这样的神经回路，也就是<strong>Chunk</strong>。</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916131723.png\" alt></p>\n<p>为什么要用这么多内容介绍<strong>Chunk</strong>呢？</p>\n<p>因为，<strong>专注学习、重复训练的过程，就是建立chunk的过程</strong>，当chunk建立后，神经回路里的任何一点，都能引导你串联整个记忆回路。</p>\n<p>人类复杂的神经活动、记忆的存储、牛顿从“苹果落地”到“万有引力”，都建立了并依赖于大脑中众多的<strong>Chunks</strong>。</p>\n<p><strong>Chunk</strong>就像是人脑中<strong>最小可利用的思维回路</strong>，解决复杂问题、掌握复杂知识时，需要利用到众多的相互关联的Chunk，最终形成了你整个大脑的思维网络。</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200918164835.png\" alt></p>\n<p>再回到之前讲的学习的本质，就是<strong>理解+记忆</strong>，记忆这一步的技巧前面已经讲了，理解这一步要做的，就是把现有的外界的知识，转化成自己的知识，在大脑中形成Chunk，为你所用。</p>\n<p>那么<code>怎样建立牢固可靠的Chunk</code>呢？</p>\n<p><strong>1. 开启专注模式</strong></p>\n<p>集中注意力，切断一切外界干扰，不能让有限的工作记忆被其他事情占用。</p>\n<p>例如呆在一个安静的环境，打开手机电脑的勿扰模式，将手边无关的东西都拿开，打开番茄钟计时，然后开始专注。</p>\n<p><strong>2. 自下而上学习 - chunking</strong></p>\n<p>先从<strong>基本概念</strong>开始理解，在理解的前提下，将新知识与已掌握的知识相关联，建立chunk。</p>\n<p>理解后不断的用<strong>自测</strong>的方式，检验chunk是否真正形成。自测的形式很多，可以合上书回忆所有内容，也可以practice（实践），脱离书本，自己利用Chunk去实际独立操作、独立解决问题，通过这个过程知道<strong>怎么使用chunk</strong></p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916162710.png\" alt=\"image-20200916162217085\"></p>\n<p><strong>3. 自上而下学习 - context</strong></p>\n<p>gaining context，获取背景知识，从更广的更高的角度去理解chunk如何融入整体的知识架构，通过这一点去了解<strong>何时何处使用chunk</strong>，掌握了how to之后，思考why to ，when to，从而在遇到问题的各种场景中信手拈来。</p>\n<p>例如🌰看一本书之前，先看看图片、章节大纲，看完一本书后，画流程图、思维导图，就能更清楚整体的结构，有利于chunk的建立和巩固。</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20200916162704.png\" alt></p>\n<h2 id=\"最高效的学习方法：间隔重复\"><a href=\"#最高效的学习方法：间隔重复\" class=\"headerlink\" title=\"最高效的学习方法：间隔重复\"></a>最高效的学习方法：间隔重复</h2><p>Science杂志曾发布一篇论文，让一群学生，使用不同的方法，在相同时间内，学习一篇科技文本，最终的结论是这样的：相较于 重复阅读、边学边画思维导图等方式，通过<strong>recall</strong>方式学习的学生，学的最多、也最牢固。</p>\n<p>这里的<strong>recall</strong>，我把它总结成<code>间隔重复练习法</code>，也就是不断重复下面的3个步骤：</p>\n<ul>\n<li>学习</li>\n<li>脱离书本回忆（<strong>自测</strong>）</li>\n<li>留出时间间隔（随着练习的次数增多，逐渐增大时间间隔）</li>\n</ul>\n<p>看完这篇文章，你可以忘记所有内容，但是一定要记得这个 <em>经过实验验证有效的</em>  学习方法。</p>\n<h2 id=\"一些学习的误区\"><a href=\"#一些学习的误区\" class=\"headerlink\" title=\"一些学习的误区\"></a>一些学习的误区</h2><ul>\n<li><p><code>看书喜欢画线、画高光</code>：很容易给自己造成”画了就是会了“的错觉，不是不可以画重点，但是记得要通过<strong>自测</strong>的方式检验一下自己是否真的掌握。</p>\n</li>\n<li><p><code>能看懂，就是会了</code>：能看得懂不代表能独立解决，不要觉得你理解的知识，就是你的知识。一定要自己亲自<strong>去实践，去自测</strong>。要建立自己的思维模式，而不是被动的接受知识。</p>\n</li>\n<li><p><code>过度学习</code>：在掌握一个知识后继续反复学习和训练的行为，在需要练出肌肉记忆、自动反应的情况下是必要的（比如体育竞技、演讲），在其他状况下，过度学习是<strong>对时间和精力的浪费</strong></p>\n</li>\n<li><p><code>思维定势</code>：固定的思维形式、牢固的记忆和chunk可能会阻碍你发现更好的灵感，因此在学习新事物时，要<strong>把过去的思维模式先放下</strong>。（有几个关于死亡的句子对这个观点具有启发性：1. There’s the old saying that science progresses one funeral at a time，国外有句老话说，科学会随着每个葬礼的进行而进步； 2.乔布斯在斯坦福大学的演讲中曾说，死亡是我们生命中最酷的发明，死亡是生命轮换的代理人，它淘汰旧的以给新生事物发展空间。 3. 死亡意味着根深蒂固的旧思想的流逝）</p>\n</li>\n</ul>\n<h2 id=\"一些学习的技巧\"><a href=\"#一些学习的技巧\" class=\"headerlink\" title=\"一些学习的技巧\"></a>一些学习的技巧</h2><ul>\n<li><code>记笔记</code>：看书时，减少划线和画高光以避免错觉，可以在知识点旁边写下你<strong>自己的理解</strong>，这样更利于加深印象，巩固记忆（酥鱼我仍然记得，我高中的时候做练习册，都喜欢把练习册写的黑压压的，即使是我掌握了的知识，也会在旁边写上清晰的解题思路。这种习惯一直延续到现在，我看过的书随便翻一翻就能看到笔记。我相信比起看完了还是一片雪白的书，这种方式更容易加深记忆</li>\n<li><code>换个环境</code>：间隔重复练习的时候，<strong>切换不同的环境</strong>，可以帮助我们脱离记忆对固定场景的依赖，避免单环境下的知识误区，更全面的理解所学知识的各个方面</li>\n<li><code>transfer知识迁移</code>：联系<strong>不同领域</strong>的相似chunk，也有助于加深记忆</li>\n<li><code>interleaving交替学习</code>：在已经掌握了基础知识后，可以<strong>交叉</strong>着不同类别的问题、方法、知识一起学习，有利于让大脑更具有灵活性和创造性，也更利于记忆。（用过百词斩的应该知道，他们的逻辑就是背一轮单词，再来一轮，不同的单词交替着出现，比一个单词一直背的效果好很多）另外可以了解一下<strong>Anki软件</strong>，利用交替学习等原理实现了帮助记忆的算法，形式类似于百词斩，只是把单词换成了你想记忆的知识点。</li>\n<li><code>奖励性学习</code>：在学习或者完成适量的目标后<strong>激励自己</strong>，可以让负责人体动力的多巴胺发挥生理作用</li>\n<li><code>刻意训练</code>：<strong>专注于学习困难的部分</strong>，是容易和别人拉开差距、超越平均水平的好方法</li>\n<li><code>关注过程，而不是结果</code>：对于一些困难的任务，需要很多时间和付出才能得到结果，如果只关注结果，会让人产生痛苦，导致拖延。只关注过程恰恰其实是大脑最喜欢的，在deadline之前的时间内，平静地尽最大的努力，关注每个番茄钟的30分钟周期，是否专注成功。</li>\n<li><code>在睡前坚持写周计划和日计划</code>：研究显示入睡时潜意识会进入类似于 Diffuse Mode 的状态来“消化”和“排练”要完成的项目，从而使你在白天能更好地去完成他们。写计划的另一个好处在于，如果你不这么做，这些待办事项就会停留在你的 Working Memory 中，占据宝贵的精神空间。通过将它们转移到纸上，你能够更好地专注于做事情本身。</li>\n<li><code>确定好停止学习的时间</code>：计划并严格遵守于 停止学习、专注、工作的时间是很重要的。这么做有助于形成日程规律，形成惯性，还给你更多时间去休息、发展身心健康</li>\n<li><code>把最困难最厌恶的事情放在早上第一件事做</code></li>\n<li><code>运动</code>有助于神经元的活跃，有助于学习和记忆</li>\n<li><code>创建生动的视觉比喻和类推</code>，将知识形象化，能够帮助你更好地理解内容本身，将新事物与旧的神经回路联系了起来，使得大脑能思考得更快、更发散，也能帮助你突破定势<br>比如 18 世纪的化学家开始想象和可视化分子级别的运动时，他们取得了巨大的突破。</li>\n<li><code>与其他人一起合作</code>，在专注模式下，大脑倾向于坚持已经建立的推理步骤。与其他人一起合作可以填补你思维上的空缺，建立起更强的自我纠正能力。从这个意义上讲，与你一同合作的人们就好像是对你而言的外部发散思维。对身边的人解释所学的内容也有助于自身的学习。</li>\n<li><code>考试策略</code>：前文中多次提到<strong>自测</strong>，测试本身是一种非常有用的学习体验，</li>\n</ul>\n<h2 id=\"如何准备一场考试\"><a href=\"#如何准备一场考试\" class=\"headerlink\" title=\"如何准备一场考试\"></a>如何准备一场考试</h2><p>这里介绍 Richard Felder 博士 提出的<strong>备考清单</strong>。</p>\n<ul>\n<li>是否认真地理解了内容？</li>\n<li>是否与同学讨论过课后问题？</li>\n<li>是否尝试列出课后问题的解题大纲？</li>\n<li>是否积极参加小组讨论？</li>\n<li>咨询过老师吗？</li>\n<li>是否弄清楚了所有课后问题的答案？</li>\n<li>对于不清楚的问题，是否在课堂上提出疑问？</li>\n<li>是否尝试快速列出一些问题的解题大纲？</li>\n<li>是否认真通读了辅导书</li>\n<li>是否参与考前复习？</li>\n<li>测试前有一个合理的睡眠时间吗？</li>\n</ul>\n<p>对于上述问题，在理想的备考状态下，肯定的回答越多越好。</p>\n<p><code>一些考试时的策略</code>：</p>\n<ul>\n<li><strong>先难后易</strong>：如果我们先大概看一眼题目，从困难的问题出发，将它们“加载”到大脑中，然后跳回去做简单的问题，从而使大脑进入 Diffuse Mode 发散模式，这样就很有可能在较短的时间内找到难题的思路（当然，应该控制在你能力范围内，如果短时间内找不到思路，应该直接跳过）</li>\n<li><p><strong>保持兴奋</strong>：当你处于紧张状态时，大脑会分泌化学物质引发一系列生理反应。但你可以用不同的方式来解读这些反应。恐惧和兴奋其实是两种很相似的反应。当你坐在考场里，心跳加速，满头是汗，如果你<strong>不去想“这场考试让我恐惧”而是“这场考试让我兴奋”</strong>，这会对你的考试非常有 帮助。</p>\n</li>\n<li><p><strong>深呼吸</strong>：考试时感到心慌是自然反应。你可以通过深呼吸来部分或者全部抵消这一反应。当然，不要等到考试的时候才去做。考前两周、考试开始前的最后时间里做深呼吸，有助于平复心情。</p>\n</li>\n<li><strong>不要被大脑欺骗</strong>：我们的大脑经常会欺骗自己，是自己认为自己的解答是正确的。在考试过程中要时刻小心，可以多眨眨眼或是晃晃头，用这种方式来提醒自己稍微往 Diffuse Mode 发散模式 倾斜一点看看有没有出错，然后再用 Focused Mode 专注模式 进行确认。</li>\n</ul>\n<h2 id=\"拖延症-amp-习惯\"><a href=\"#拖延症-amp-习惯\" class=\"headerlink\" title=\"拖延症 &amp; 习惯\"></a>拖延症 &amp; 习惯</h2><p><strong>拖延症的原理</strong>：</p>\n<p>拖延症是个普遍的现象，在所有人身上多多少少都有体现，这是因为，<strong>拖延是大脑做出的自然反应</strong>。</p>\n<p>当你遇到不想做的事情时，会感受到不快，这种刺激(Cue)激活了大脑中与疼痛相关的区域，大脑就会迅速作出反应去寻找停止这种负面刺激的方式，即转移注意力到另一件令你愉快的事情上，从而让你在短期内感到舒服一些。</p>\n<p><strong>拖延症的影响：</strong></p>\n<p>拖延的负面影响不限于当前被拖延的事情。例如你觉得某一门课或者某一类知识很难，拖延症使你不断地拖迟学习它，当这种拖延行为成为习惯后，即使是想到学习这件事，都会令你痛苦。</p>\n<p>因此拖延的负面影响是有累积效应的，越拖延，不适的感觉越强。</p>\n<p><code>对抗拖延症的几个技巧</code>：</p>\n<ul>\n<li>有研究人员发现，当人们真正去做不喜欢的事情后，这种精神上的抵触和不适很快就会消失。了解这个原理，在遇到不想做的事情时，暗示自己<strong>先开头去做，很快就能克服</strong>，就可以减轻负面刺激带来的不快感</li>\n<li><strong>番茄工作法</strong>：利用计时器或者番茄钟，<strong>计时25分钟</strong>，这25分钟内排除一切干扰集中精力专注，专注结束后，<strong>计时5分钟</strong>，给自己一些奖励：放松一下/起来溜达一圈/上网冲冲浪/吃点零食/聊会天。30分钟一次循环，这样的时间效率会相当高，计时器的作用，就是Cue，提醒你切换专注模式和发散模式。（25分钟的专注，对于大多数人来说应该不难。但是如果你发现自己很难持续专注25分钟，那可以循序渐进，先从10分钟开始训练自己的专注耐力）</li>\n<li>利用<code>习惯</code></li>\n</ul>\n<p>对抗拖延症，是对抗身体的本能，需要消耗精力和意志力，而<strong>习惯就是我们的节能机制</strong>。</p>\n<p>一旦形成习惯，只需要一点点的Cue(信号)，后面的行为就会<strong>像呼吸一样自然</strong>，消耗很少的精力和毅力</p>\n<p>就像你刚开始学车，倒车入库会让你手足无措、手心流汗、提心吊胆，但是当你成为了老司机，看后视镜、转动方向盘就会一气呵成，流畅自然。</p>\n<p>那么<code>如何养成好习惯</code>呢：</p>\n<ol>\n<li>Cue信号：触发惯性行为的外界刺激。比如待办清单上的第一项，办公桌前的便利贴。Cue 大致可以分为四类：时间、地点、感受、反应，从这四个方面，<strong>为自己的好习惯，找一个显眼的信号</strong>。</li>\n<li>Routine惯性行为：大脑受到信号刺激后，习惯性做出的反应。<strong>反复多次的练习</strong>，就可以养成。</li>\n<li>Reward奖励：任何习惯得以延续，都是因为它可以回报我们，它会立即给我们带来愉悦感。拖延极易养成习惯，就是因为拖延能带给我们迅速即时的愉悦感。因此为了克服拖延症，<strong>奖励好习惯</strong>很重要。</li>\n<li>Belief信念：习惯的力量之所以强大，是因为你在内心深处往往认为它们是无法被改变的。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>灵活运用<code>两种思维模式</code>：专注模式更适合解决细节问题，发散模式更适合寻找灵感和整体解决方案</li>\n<li><code>牢固记忆</code>的4个技巧：间隔重复、感官联系、充足睡眠+睡前复盘、保持冷静</li>\n<li>学习的本质是<code>建立组块</code>Chunks，建立过程有三个步骤：开启专注模式、自下而上学习、自上而下学习</li>\n<li>最高效的学习方法：<code>间隔重复</code>练习法（可以用Anki应用辅助）</li>\n<li><code>拖延症</code>没那么可怕，只要开始入手做，痛苦就会减轻；可以利用<code>番茄钟</code>、良好的<code>习惯</code>，来帮助你减轻拖延症提高效率</li>\n<li>4个学习误区、14个学习技巧、关于考试的几个技巧也值得掌握~</li>\n</ul>\n"},{"title":"《富爸爸穷爸爸》：为什么你很穷","date":"2020-06-13T16:00:00.000Z","description":"《富爸爸穷爸爸》被誉为“全球最好的”理财入门书，这本书不会教你如何理财，但是会让你对“金钱”有一个全新的观念和认知。","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133003.png","_content":"\n## 简介\n\n- 文章标题只是想侧面说明这本书的主要内容，请勿对号入座～\n- 我本人是个工作不到两年、背着房贷、没什么存款的理财门外汉，读完这本书，彻底改变了我对“钱”的认知和观念，因此把书中启发到我的地方分享出来，希望对你有些帮助～\n- 《富爸爸穷爸爸》从1997年最初版至今已经23年，在全球范围大受欢迎，被誉为“全球最好的理财入门书”，连续六年在纽约时报畅销书榜都榜上有名，目前已翻译超过51国语言。后续又出了一系列以达成财务自由为中心的 **“富爸爸系列”丛书**，。\n- 书名中的 **穷爸爸**，指的是作者的亲生父亲，受过良好的教育：从斯坦福大学和芝加哥大学毕业，博士学位，身居夏威夷州教育部门的要职，一生勤奋工作，收入颇丰，是一个看起来十足“成功”的高级知识分子。但是他终其一生都在个人财务问题的泥潭中挣扎，操劳一生离开人世留下了一堆账单。他总是教育作者：要努力学习，取得好成绩，这样才能有好的工作。\n- 书名中的 **富爸爸**，指的是作者好友的父亲，初中学历，没有很高的教育水平，但是是一个成功的商人，充分理解金钱的力量，拥有很高的财商，富爸爸是成为了全夏威夷最富有的人之一，他身后留下的是慈善机构、教堂以及巨额的遗产。作者和朋友很小的时候，就开始接受了富爸爸的财商教育。\n- 作者：**Robert T. Kiyosaki，Robert ·清崎**，日裔美国人，在1994年47岁的时候，因为遵循了富爸爸教给他的关于金钱和投资的知识，实现了财务自由，创造了“现金流”游戏，财务自由后因出版《富爸爸》系列书而成名，成为金融教育领域的领头人。\n- 书中用很多篇幅，对比富爸爸和穷爸爸，指出性格、思想、行为和结果上的差异，从而引出造成贫富差异的原因。\n\n## 带着问题看文章\n\n- 上班、工作、打工几十年，真的能积累财富吗？\n- 退休依靠养老金的模式可靠吗？\n- 买房是稳赚不赔的投资吗？\n- 普通家境的人用父母前十几年+自己后几十的劳动剩余价值换来的房子值得吗？\n- 财商是什么？、财务自由是什么？\n- 富人和穷人的差异有哪些？消费观、财商、勇气、自律...\n\n---\n\n## 老鼠赛跑的人生\n\n我成长在一个普通家庭，和周围的大多数普通家庭的同学一样，从小到大都接受着来自父母、亲戚、老师的教育：\n\n小学中学阶段，他们让我好好学习考一个好大学\n\n大学阶段，他们让我好好学习找一个稳定的好工作。\n\n工作之后，我拿着在父母眼中还算体面的工资，开始有了消费的自由，买一些自己喜欢的东西。\n\n也许不久的将来，我会遇到心爱的人，开始组建新家庭，在我们多年不断努力的工作下，我们的薪水实现了增长，进入 “**中产阶级**” ，但是我们依然需要依靠双方父母的积蓄买房付首付，我们的消费和纳税也水涨船高，我们买车、计划旅行、养孩子......\n\n这时候工作就会变成我人生最重要的事情。\n\n我需要努力的为老板工作、通过纳税为国家发展做贡献、通过房贷为银行工作。因为工资是我唯一的收入来源，我需要依靠工资来支付生活成本，维持消费，还花呗信用卡，支付房贷月供。\n\n于是，我需要不停不休的朝九晚五(甚至996)，上班工作，直到退休。\n\n我可能还会把同样的教育施加在我的孩子身上，让这样的人生在下一代身上继续循环重复。\n\n也许看到文章的朋友中，有创业者，有事业有成的成功人士，有对理财投资颇有心得的朋友。但是当代乃至我们的上一代人，大多数人都有着类似的人生轨迹。\n\n这就是《富爸爸》这本书里写的 **“老鼠赛跑”的游戏** ：每一代人都不懂理财规划，只会通过拼命工作和加班，用大量的工作时间来换取金钱，再用这些金钱来养育子女赡养父母，而自己的子女也在重复着父母心这一辈的命运。\n\n> 人们的生活总是被恐惧和贪婪控制，太努力工作，而忘记了思考\n\n我们因为 **恐惧** 而工作：害怕付不起房贷、养不起老人孩子；\n\n我们因为 **贪婪** 而工作：随着工资增加，消费也增加；\n\n> 穷人为钱工作，富人让钱为他工作\n\n我们每天都在为了更稳定的生活、更好的生活水平，努力勤恳的上班、挣工资。\n\n但是这样的生活方式根本就不是任何一个富人的生活方式。\n\n实现了财务自由的富人，不会为了钱而工作，他们用钱创造更多的钱，为自己的消费买单。\n\n## 区分资产和负债\n\n想要向富人迈进，创造财富，最重要的第一步，就是要分清楚 **资产和负债**：\n- 资产：带来正向“现金流”的个人拥有的东西 => 能把钱放进你口袋的东西。\n- 负债：产生支出的个人拥有的东西 => 把钱从你口袋拿走的东西。\n\n## 关注自己的现金流\n\n资产和负债强调的，就是 **现金流**。\n\n现金流更多用于分析企业是否良好经营，但是对于个人来说，**越早关注现金流，有利于越早实现财务自由**。\n\n《富爸爸》中用了 **收益表+资产负债表** 分别描述了穷人、中产阶级、富人的现金流：\n\n- 穷人的现金流\n\n![穷人的现金流](/images/rich/poor_cf.png)\n\n对于大多数穷人来说，他们的收入基本全部来源于工资，工资通过日常开支、教育支出等费用消耗掉。他们的资产和负债项是空的。\n\n- 中产阶级的现金流\n\n![中产阶级的现金流](/images/rich/middle_cf.png)\n\n中产阶级的现金流中多了一部分来自于负债的支出。负债项目包括：房贷、车贷、消费分期等。对于大多数买了刚需住房的人来说，房子只能算是他们的“负债”，因为带来不了正向的现金流，如果失业，他们可能会因为这些资产比穷人产生更多的压力，因为他们的开支中除了每月的生活开销，还有他的房贷、车贷。\n\n- 富人的现金流\n\n![富人的现金流](/images/rich/rich_cf.png)\n\n富人和穷人以及中产阶级最大的区别就是：富人的现金流，更多的来自他们的资产项，也就是所谓的“税后收入”，而不是工资。\n\n这也与Robert 对 **财富** 的定义相匹配：\n\n> 财富：一个人没有工作后能生活多久的能力\n\n对于实现了财务自由的富人来说，这个时间就是无限长，因为他们拥有足够多的资产，为他们创造足够支出的现金流收入，如果收入减去支出还有盈余，他们的资产就会不断增加。\n\n## 合理的消费观\n\n想要像富人那样更多的积累资产，拥有正向的现金流，培养合理的消费观，最小化支出+负债很重要。\n\n> 富人购买资产，穷人购买负债\n\n> 重要的不是挣了多少，而是能留下多少；\n\n身边经常有人在说，越有钱的人越抠门，还有人总抱怨自己的老板，如何俭省成本，苛待员工。\n\n其实不是富人抠门，而是富人深知，最小化支出，才能有更多的钱 用于购买资产，产生更多的正向现金流。\n\n> 富人赚的比你多，花的比你少\n\n作者Robert 提倡 **享受要与财富匹配** ，先把收入用于买入资产，用资产项的得利买想要的东西。\n\n也就是要**自律消费**。\n\n因为消费一定属于支出和负债，不要追求与自身资产不匹配的、不必要的虚荣和表层物质，不要被近几年消费升级的宣传所影响，网红带货、短视频即时营销、直播...资本市场越鼓励消费，说明资本市场从消费获利越大。\n\n## 税收与公司\n\n除了消费，赋税也是每个上班族不可避免的一部分。\n\n> 中产阶级在承担着沉重的税负，尤其是那些受过良好教育、高收入的中产阶级。\n\n这个观点似乎与普遍的认知有所出入，普遍的观点都认为富人应该缴纳更多的税让穷人受益，但事实上是这样的吗？\n\n这要从税收的历史讲起。\n\n> 英国和美国在早期是不需要纳税的，只有一些因战争而临时收的税，称为“纳捐”。\n> \n> 直到1874年，英国规定纳税是国民义务，1913年，美国将征收所得税，纳入宪法。\n> \n> 其后虽然有过冲突和争议，但是英国和美国都花了几乎50年来培养公民缴纳所得税的意识。\n> \n> 最初只针对富人收税，但是随着国家发展，政府规模扩大，就需要征收更多的税以维持平衡运营。以致中产阶级也要被征税，且税收范围不断向穷人扩展。\n\n表面上来看，税收对富人和中产阶级是公平的。但实际上，有关企业的法律知识，给予了富人远超出穷人和中产阶级的优势。\n\n原因在书中也有提及：\n\n> 因为政府需要利用法制，刺激企业主和投资者创造更多的工作机会和住房，这些刺激政策降低了富人的赋税。\n\n因此，了解更多法律和财务知识的富人，总有办法从赋税中脱身，用Robert 的原话来说，就是：**只要你拥有一种合法资产，我就可以找出以企业的形式提供的好处和保护**，这也就是赋税最终落到中产阶级身上的原因。 \n\n这种税收状况和解释，在中国也是基本适用的。\n\n因此，公司可以帮助富人避税，公司，并不一定是实体意义上的公司，不一定是有公司名称的办公楼、厂房，可以只是一份没有精神和灵魂的法律文件\n\n拥有公司的富人：挣钱～支出～缴税\n\n为公司工作的人：挣钱～缴税～支出\n\n了解更多的财务、法律知识，利用合理的方式避税，也是穷人和富人的区别。\n\n## 财商\n\n想要积累资产，除了要最小化支出和负债，用合理的方式避税之外，更重要的是，我们要懂得如何让自己的收入，换来更多的资产，Robert 把这种能力称为 **财商**。\n\n财商由四个方面构成：\n\n> 1、会计－－财务知识，这是非常重要的技能，你管理的钱越多，越需要精确，否则这大厦就会倒下来！财务知识能帮你读懂财务报表，借助这种能力，你还能分辨业务的优势和劣势。\n> \n> 2、投资－－钱生钱的科学，投资涉及策略和方案，右脑做的事，或者说是创造。\n> \n> 3、了解市场－－供给与需求的科学，这要求了解受感情驱动的市场的“技术面”，市场的另一个因素是“基本面”，或者说一项投资的经济意义。一项投资究竟有无意义最终取决于当前的市场状况。\n> \n> 4、法律－－它可以帮助你有效运营一个进入会计、投资和市场领域的企业并实现爆炸性增长，了解税收优惠政策和公司法律的人能比雇员和小业主更快致富，这就像一个人在走，而另一个人却在飞，若从长远看这种差距会更大。\n\n踏实的学习上面的四个知识，提升财商，才能积累更多资产，让自己的每一块钱收入都能夜以继日的替自己工作，产生复利。\n\n## 勇气\n\n除了合理的消费观和财商，勇气也是影响我们致富的一个重要因素。\n\n> 我们一定是不断的摔倒才学会骑自行车的，我从就没见过一球都不失的高尔夫球手，也从来没见过不曾伤心过的恋人，更没见过从来不亏钱的富人，但是我却遇到过很多从来没有在投资活动中亏掉一毛钱的穷人。\n\nRobert 认为，我们应该克服对亏钱和失败的恐惧，为了获得更多的选择和机会而勇于冒险。\n\n因为惧怕风险和失败而止步不前，待在舒适圈，就一定会失去成功的机会。\n\n我们都听过“不要把鸡蛋放在一个篮子里”的经验，但是如果你的鸡蛋本来就很少，还只追求低风险，那只会让你的财富值止步不前，永远实现不了跃迁。\n\n**储蓄**，是一种很常见的低风险投资，但是 Robert 认为，储蓄不一定是资产，储蓄不但ROI（投资回报率）低，不一定能跑赢通货膨胀，更重要的是，储蓄会使我们失去投资增值的机会。\n\n**买房**，对于很多普通人来说，也是牵动人生的一大“投资”，依照短期的国情来看，也是一项稳定不会亏损的投资，但是房子一定是资产吗？虽然 Robert 本人的财务自由，有相当一部分是依靠投资，但是他认为，房子不一定是资产。\n\n区分房子是资产还是负债，根据前文说的方法其实很简单，如果你买房是刚需住房，那么你的房子无法给你带来正向现金流，反而会消耗你和家人前十几年（全款买房）的积蓄，或者后几十年（贷款买房）的劳动剩余价值，是“从你口袋拿钱出去”的负债。\n\n## 持续学习是最大的投资\n\nRobert 一生做了无数的投资抉择，有的给他带来了大量的财富和持续的正向现金流，但是他坚定地认为，持续学习才是他收益最高的一项投资。\n\n书中有多处描述，都印证了这一观点：\n\n> 人生是一场无知与觉醒的斗争\n\n> 人最大的财富是所受的教育\n\n> 钱不能解决一切问题，只有知识才能解决问题并创造财富\n\nRobert 认为，我们不应该单纯为了赚钱和稳定的生活而工作，应该更多的关注事业而不是职业，关注长远的发展而不是眼下的工资。\n\n他在实现财务自由之前，没有遵循“穷爸爸”的建议：长期从事在一个稳定的岗位，而是积极的投身于多种跨行业的工作，对于他来说，不同的工作经验，有助于他掌握更多维的知识，这些知识都对他实现财务自由，起到了关键作用。\n\n> 全世界到处都是才华横溢、极具天赋的人，但是只有天赋是不够的\n\n> 越极度专业化的人才，价值范围越有限\n\n不光是持续学习，Robert 更加强调的是横向发展。\n\n除非你是所在行业金字塔最顶端的人，否则过度局限的认知，会阻碍你的发展，局限你的人生。\n\n之前跟朋友聊天，他说过一句话我十分认同，也和作者的观点十分契合：我们无法赚到超出自己认知的钱，我们所赚的每一分钱都是我们对这个世界认知的变现。\n\n做一个“T型”人才，斜杠青年，有自己专业的领域，也要有宽阔的认知面，才能离成功更近。\n\n## 克服本能\n\n无论是 自律消费，还是 持续学习，都需要我们拥有坚定而强大的内心。\n\n前几天看新闻看到了博纳影业副总裁跳楼的消息，有一个[知乎回答](https://www.zhihu.com/answer/1275167187)令我印象十分深刻：\n> 很多人向上看，只能看到富贵和纸醉金迷。可是真正一步步向上走，才会发现越往上越暗流汹涌。重回平凡的路被堵死，只能咬牙继续向上。在我们用奋斗的勇气和不服输的精神向上爬的过程中，别忘了打磨自己的心，让心变得无坚不摧。\n\n一切成功的前提，都需要我们有足够的自控力，让思想控制情感，让思考先于情感反应，要克服对失败的恐惧，克服懒惰，克服自负。\n\n打磨好自己的心，才能在上升时顺风而行，在下落时稳住脚步，不落入万丈深渊。\n\n\n## 反思\n- 其实看完这本书会发现，这不是一本急功近利的财富指南，因为我们不可能因为读一本书，就实现财富自由。\n- 但是至少我们知道了，在每一份支出之前，应该有更冷静、自律的判断，不被短暂的享受和营销影响，在每一份收入之后，应该更合理的分配投资和支出。\n- 读完这本书，也不仅仅给我带来了对“金钱”的改观，除了致富，想要在其他领域做的更好，持续学习、自律、扩展认知，都是必修课。\n\n","source":"_posts/rich_dad.md","raw":"---\ntitle: 《富爸爸穷爸爸》：为什么你很穷\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2020-06-14\ndescription: 《富爸爸穷爸爸》被誉为“全球最好的”理财入门书，这本书不会教你如何理财，但是会让你对“金钱”有一个全新的观念和认知。\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211133003.png\n---\n\n## 简介\n\n- 文章标题只是想侧面说明这本书的主要内容，请勿对号入座～\n- 我本人是个工作不到两年、背着房贷、没什么存款的理财门外汉，读完这本书，彻底改变了我对“钱”的认知和观念，因此把书中启发到我的地方分享出来，希望对你有些帮助～\n- 《富爸爸穷爸爸》从1997年最初版至今已经23年，在全球范围大受欢迎，被誉为“全球最好的理财入门书”，连续六年在纽约时报畅销书榜都榜上有名，目前已翻译超过51国语言。后续又出了一系列以达成财务自由为中心的 **“富爸爸系列”丛书**，。\n- 书名中的 **穷爸爸**，指的是作者的亲生父亲，受过良好的教育：从斯坦福大学和芝加哥大学毕业，博士学位，身居夏威夷州教育部门的要职，一生勤奋工作，收入颇丰，是一个看起来十足“成功”的高级知识分子。但是他终其一生都在个人财务问题的泥潭中挣扎，操劳一生离开人世留下了一堆账单。他总是教育作者：要努力学习，取得好成绩，这样才能有好的工作。\n- 书名中的 **富爸爸**，指的是作者好友的父亲，初中学历，没有很高的教育水平，但是是一个成功的商人，充分理解金钱的力量，拥有很高的财商，富爸爸是成为了全夏威夷最富有的人之一，他身后留下的是慈善机构、教堂以及巨额的遗产。作者和朋友很小的时候，就开始接受了富爸爸的财商教育。\n- 作者：**Robert T. Kiyosaki，Robert ·清崎**，日裔美国人，在1994年47岁的时候，因为遵循了富爸爸教给他的关于金钱和投资的知识，实现了财务自由，创造了“现金流”游戏，财务自由后因出版《富爸爸》系列书而成名，成为金融教育领域的领头人。\n- 书中用很多篇幅，对比富爸爸和穷爸爸，指出性格、思想、行为和结果上的差异，从而引出造成贫富差异的原因。\n\n## 带着问题看文章\n\n- 上班、工作、打工几十年，真的能积累财富吗？\n- 退休依靠养老金的模式可靠吗？\n- 买房是稳赚不赔的投资吗？\n- 普通家境的人用父母前十几年+自己后几十的劳动剩余价值换来的房子值得吗？\n- 财商是什么？、财务自由是什么？\n- 富人和穷人的差异有哪些？消费观、财商、勇气、自律...\n\n---\n\n## 老鼠赛跑的人生\n\n我成长在一个普通家庭，和周围的大多数普通家庭的同学一样，从小到大都接受着来自父母、亲戚、老师的教育：\n\n小学中学阶段，他们让我好好学习考一个好大学\n\n大学阶段，他们让我好好学习找一个稳定的好工作。\n\n工作之后，我拿着在父母眼中还算体面的工资，开始有了消费的自由，买一些自己喜欢的东西。\n\n也许不久的将来，我会遇到心爱的人，开始组建新家庭，在我们多年不断努力的工作下，我们的薪水实现了增长，进入 “**中产阶级**” ，但是我们依然需要依靠双方父母的积蓄买房付首付，我们的消费和纳税也水涨船高，我们买车、计划旅行、养孩子......\n\n这时候工作就会变成我人生最重要的事情。\n\n我需要努力的为老板工作、通过纳税为国家发展做贡献、通过房贷为银行工作。因为工资是我唯一的收入来源，我需要依靠工资来支付生活成本，维持消费，还花呗信用卡，支付房贷月供。\n\n于是，我需要不停不休的朝九晚五(甚至996)，上班工作，直到退休。\n\n我可能还会把同样的教育施加在我的孩子身上，让这样的人生在下一代身上继续循环重复。\n\n也许看到文章的朋友中，有创业者，有事业有成的成功人士，有对理财投资颇有心得的朋友。但是当代乃至我们的上一代人，大多数人都有着类似的人生轨迹。\n\n这就是《富爸爸》这本书里写的 **“老鼠赛跑”的游戏** ：每一代人都不懂理财规划，只会通过拼命工作和加班，用大量的工作时间来换取金钱，再用这些金钱来养育子女赡养父母，而自己的子女也在重复着父母心这一辈的命运。\n\n> 人们的生活总是被恐惧和贪婪控制，太努力工作，而忘记了思考\n\n我们因为 **恐惧** 而工作：害怕付不起房贷、养不起老人孩子；\n\n我们因为 **贪婪** 而工作：随着工资增加，消费也增加；\n\n> 穷人为钱工作，富人让钱为他工作\n\n我们每天都在为了更稳定的生活、更好的生活水平，努力勤恳的上班、挣工资。\n\n但是这样的生活方式根本就不是任何一个富人的生活方式。\n\n实现了财务自由的富人，不会为了钱而工作，他们用钱创造更多的钱，为自己的消费买单。\n\n## 区分资产和负债\n\n想要向富人迈进，创造财富，最重要的第一步，就是要分清楚 **资产和负债**：\n- 资产：带来正向“现金流”的个人拥有的东西 => 能把钱放进你口袋的东西。\n- 负债：产生支出的个人拥有的东西 => 把钱从你口袋拿走的东西。\n\n## 关注自己的现金流\n\n资产和负债强调的，就是 **现金流**。\n\n现金流更多用于分析企业是否良好经营，但是对于个人来说，**越早关注现金流，有利于越早实现财务自由**。\n\n《富爸爸》中用了 **收益表+资产负债表** 分别描述了穷人、中产阶级、富人的现金流：\n\n- 穷人的现金流\n\n![穷人的现金流](/images/rich/poor_cf.png)\n\n对于大多数穷人来说，他们的收入基本全部来源于工资，工资通过日常开支、教育支出等费用消耗掉。他们的资产和负债项是空的。\n\n- 中产阶级的现金流\n\n![中产阶级的现金流](/images/rich/middle_cf.png)\n\n中产阶级的现金流中多了一部分来自于负债的支出。负债项目包括：房贷、车贷、消费分期等。对于大多数买了刚需住房的人来说，房子只能算是他们的“负债”，因为带来不了正向的现金流，如果失业，他们可能会因为这些资产比穷人产生更多的压力，因为他们的开支中除了每月的生活开销，还有他的房贷、车贷。\n\n- 富人的现金流\n\n![富人的现金流](/images/rich/rich_cf.png)\n\n富人和穷人以及中产阶级最大的区别就是：富人的现金流，更多的来自他们的资产项，也就是所谓的“税后收入”，而不是工资。\n\n这也与Robert 对 **财富** 的定义相匹配：\n\n> 财富：一个人没有工作后能生活多久的能力\n\n对于实现了财务自由的富人来说，这个时间就是无限长，因为他们拥有足够多的资产，为他们创造足够支出的现金流收入，如果收入减去支出还有盈余，他们的资产就会不断增加。\n\n## 合理的消费观\n\n想要像富人那样更多的积累资产，拥有正向的现金流，培养合理的消费观，最小化支出+负债很重要。\n\n> 富人购买资产，穷人购买负债\n\n> 重要的不是挣了多少，而是能留下多少；\n\n身边经常有人在说，越有钱的人越抠门，还有人总抱怨自己的老板，如何俭省成本，苛待员工。\n\n其实不是富人抠门，而是富人深知，最小化支出，才能有更多的钱 用于购买资产，产生更多的正向现金流。\n\n> 富人赚的比你多，花的比你少\n\n作者Robert 提倡 **享受要与财富匹配** ，先把收入用于买入资产，用资产项的得利买想要的东西。\n\n也就是要**自律消费**。\n\n因为消费一定属于支出和负债，不要追求与自身资产不匹配的、不必要的虚荣和表层物质，不要被近几年消费升级的宣传所影响，网红带货、短视频即时营销、直播...资本市场越鼓励消费，说明资本市场从消费获利越大。\n\n## 税收与公司\n\n除了消费，赋税也是每个上班族不可避免的一部分。\n\n> 中产阶级在承担着沉重的税负，尤其是那些受过良好教育、高收入的中产阶级。\n\n这个观点似乎与普遍的认知有所出入，普遍的观点都认为富人应该缴纳更多的税让穷人受益，但事实上是这样的吗？\n\n这要从税收的历史讲起。\n\n> 英国和美国在早期是不需要纳税的，只有一些因战争而临时收的税，称为“纳捐”。\n> \n> 直到1874年，英国规定纳税是国民义务，1913年，美国将征收所得税，纳入宪法。\n> \n> 其后虽然有过冲突和争议，但是英国和美国都花了几乎50年来培养公民缴纳所得税的意识。\n> \n> 最初只针对富人收税，但是随着国家发展，政府规模扩大，就需要征收更多的税以维持平衡运营。以致中产阶级也要被征税，且税收范围不断向穷人扩展。\n\n表面上来看，税收对富人和中产阶级是公平的。但实际上，有关企业的法律知识，给予了富人远超出穷人和中产阶级的优势。\n\n原因在书中也有提及：\n\n> 因为政府需要利用法制，刺激企业主和投资者创造更多的工作机会和住房，这些刺激政策降低了富人的赋税。\n\n因此，了解更多法律和财务知识的富人，总有办法从赋税中脱身，用Robert 的原话来说，就是：**只要你拥有一种合法资产，我就可以找出以企业的形式提供的好处和保护**，这也就是赋税最终落到中产阶级身上的原因。 \n\n这种税收状况和解释，在中国也是基本适用的。\n\n因此，公司可以帮助富人避税，公司，并不一定是实体意义上的公司，不一定是有公司名称的办公楼、厂房，可以只是一份没有精神和灵魂的法律文件\n\n拥有公司的富人：挣钱～支出～缴税\n\n为公司工作的人：挣钱～缴税～支出\n\n了解更多的财务、法律知识，利用合理的方式避税，也是穷人和富人的区别。\n\n## 财商\n\n想要积累资产，除了要最小化支出和负债，用合理的方式避税之外，更重要的是，我们要懂得如何让自己的收入，换来更多的资产，Robert 把这种能力称为 **财商**。\n\n财商由四个方面构成：\n\n> 1、会计－－财务知识，这是非常重要的技能，你管理的钱越多，越需要精确，否则这大厦就会倒下来！财务知识能帮你读懂财务报表，借助这种能力，你还能分辨业务的优势和劣势。\n> \n> 2、投资－－钱生钱的科学，投资涉及策略和方案，右脑做的事，或者说是创造。\n> \n> 3、了解市场－－供给与需求的科学，这要求了解受感情驱动的市场的“技术面”，市场的另一个因素是“基本面”，或者说一项投资的经济意义。一项投资究竟有无意义最终取决于当前的市场状况。\n> \n> 4、法律－－它可以帮助你有效运营一个进入会计、投资和市场领域的企业并实现爆炸性增长，了解税收优惠政策和公司法律的人能比雇员和小业主更快致富，这就像一个人在走，而另一个人却在飞，若从长远看这种差距会更大。\n\n踏实的学习上面的四个知识，提升财商，才能积累更多资产，让自己的每一块钱收入都能夜以继日的替自己工作，产生复利。\n\n## 勇气\n\n除了合理的消费观和财商，勇气也是影响我们致富的一个重要因素。\n\n> 我们一定是不断的摔倒才学会骑自行车的，我从就没见过一球都不失的高尔夫球手，也从来没见过不曾伤心过的恋人，更没见过从来不亏钱的富人，但是我却遇到过很多从来没有在投资活动中亏掉一毛钱的穷人。\n\nRobert 认为，我们应该克服对亏钱和失败的恐惧，为了获得更多的选择和机会而勇于冒险。\n\n因为惧怕风险和失败而止步不前，待在舒适圈，就一定会失去成功的机会。\n\n我们都听过“不要把鸡蛋放在一个篮子里”的经验，但是如果你的鸡蛋本来就很少，还只追求低风险，那只会让你的财富值止步不前，永远实现不了跃迁。\n\n**储蓄**，是一种很常见的低风险投资，但是 Robert 认为，储蓄不一定是资产，储蓄不但ROI（投资回报率）低，不一定能跑赢通货膨胀，更重要的是，储蓄会使我们失去投资增值的机会。\n\n**买房**，对于很多普通人来说，也是牵动人生的一大“投资”，依照短期的国情来看，也是一项稳定不会亏损的投资，但是房子一定是资产吗？虽然 Robert 本人的财务自由，有相当一部分是依靠投资，但是他认为，房子不一定是资产。\n\n区分房子是资产还是负债，根据前文说的方法其实很简单，如果你买房是刚需住房，那么你的房子无法给你带来正向现金流，反而会消耗你和家人前十几年（全款买房）的积蓄，或者后几十年（贷款买房）的劳动剩余价值，是“从你口袋拿钱出去”的负债。\n\n## 持续学习是最大的投资\n\nRobert 一生做了无数的投资抉择，有的给他带来了大量的财富和持续的正向现金流，但是他坚定地认为，持续学习才是他收益最高的一项投资。\n\n书中有多处描述，都印证了这一观点：\n\n> 人生是一场无知与觉醒的斗争\n\n> 人最大的财富是所受的教育\n\n> 钱不能解决一切问题，只有知识才能解决问题并创造财富\n\nRobert 认为，我们不应该单纯为了赚钱和稳定的生活而工作，应该更多的关注事业而不是职业，关注长远的发展而不是眼下的工资。\n\n他在实现财务自由之前，没有遵循“穷爸爸”的建议：长期从事在一个稳定的岗位，而是积极的投身于多种跨行业的工作，对于他来说，不同的工作经验，有助于他掌握更多维的知识，这些知识都对他实现财务自由，起到了关键作用。\n\n> 全世界到处都是才华横溢、极具天赋的人，但是只有天赋是不够的\n\n> 越极度专业化的人才，价值范围越有限\n\n不光是持续学习，Robert 更加强调的是横向发展。\n\n除非你是所在行业金字塔最顶端的人，否则过度局限的认知，会阻碍你的发展，局限你的人生。\n\n之前跟朋友聊天，他说过一句话我十分认同，也和作者的观点十分契合：我们无法赚到超出自己认知的钱，我们所赚的每一分钱都是我们对这个世界认知的变现。\n\n做一个“T型”人才，斜杠青年，有自己专业的领域，也要有宽阔的认知面，才能离成功更近。\n\n## 克服本能\n\n无论是 自律消费，还是 持续学习，都需要我们拥有坚定而强大的内心。\n\n前几天看新闻看到了博纳影业副总裁跳楼的消息，有一个[知乎回答](https://www.zhihu.com/answer/1275167187)令我印象十分深刻：\n> 很多人向上看，只能看到富贵和纸醉金迷。可是真正一步步向上走，才会发现越往上越暗流汹涌。重回平凡的路被堵死，只能咬牙继续向上。在我们用奋斗的勇气和不服输的精神向上爬的过程中，别忘了打磨自己的心，让心变得无坚不摧。\n\n一切成功的前提，都需要我们有足够的自控力，让思想控制情感，让思考先于情感反应，要克服对失败的恐惧，克服懒惰，克服自负。\n\n打磨好自己的心，才能在上升时顺风而行，在下落时稳住脚步，不落入万丈深渊。\n\n\n## 反思\n- 其实看完这本书会发现，这不是一本急功近利的财富指南，因为我们不可能因为读一本书，就实现财富自由。\n- 但是至少我们知道了，在每一份支出之前，应该有更冷静、自律的判断，不被短暂的享受和营销影响，在每一份收入之后，应该更合理的分配投资和支出。\n- 读完这本书，也不仅仅给我带来了对“金钱”的改观，除了致富，想要在其他领域做的更好，持续学习、自律、扩展认知，都是必修课。\n\n","slug":"rich_dad","published":1,"updated":"2021-04-21T06:53:37.262Z","_id":"ckir88jcc005lc8y6r38sqf7g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>文章标题只是想侧面说明这本书的主要内容，请勿对号入座～</li>\n<li>我本人是个工作不到两年、背着房贷、没什么存款的理财门外汉，读完这本书，彻底改变了我对“钱”的认知和观念，因此把书中启发到我的地方分享出来，希望对你有些帮助～</li>\n<li>《富爸爸穷爸爸》从1997年最初版至今已经23年，在全球范围大受欢迎，被誉为“全球最好的理财入门书”，连续六年在纽约时报畅销书榜都榜上有名，目前已翻译超过51国语言。后续又出了一系列以达成财务自由为中心的 <strong>“富爸爸系列”丛书</strong>，。</li>\n<li>书名中的 <strong>穷爸爸</strong>，指的是作者的亲生父亲，受过良好的教育：从斯坦福大学和芝加哥大学毕业，博士学位，身居夏威夷州教育部门的要职，一生勤奋工作，收入颇丰，是一个看起来十足“成功”的高级知识分子。但是他终其一生都在个人财务问题的泥潭中挣扎，操劳一生离开人世留下了一堆账单。他总是教育作者：要努力学习，取得好成绩，这样才能有好的工作。</li>\n<li>书名中的 <strong>富爸爸</strong>，指的是作者好友的父亲，初中学历，没有很高的教育水平，但是是一个成功的商人，充分理解金钱的力量，拥有很高的财商，富爸爸是成为了全夏威夷最富有的人之一，他身后留下的是慈善机构、教堂以及巨额的遗产。作者和朋友很小的时候，就开始接受了富爸爸的财商教育。</li>\n<li>作者：<strong>Robert T. Kiyosaki，Robert ·清崎</strong>，日裔美国人，在1994年47岁的时候，因为遵循了富爸爸教给他的关于金钱和投资的知识，实现了财务自由，创造了“现金流”游戏，财务自由后因出版《富爸爸》系列书而成名，成为金融教育领域的领头人。</li>\n<li>书中用很多篇幅，对比富爸爸和穷爸爸，指出性格、思想、行为和结果上的差异，从而引出造成贫富差异的原因。</li>\n</ul>\n<h2 id=\"带着问题看文章\"><a href=\"#带着问题看文章\" class=\"headerlink\" title=\"带着问题看文章\"></a>带着问题看文章</h2><ul>\n<li>上班、工作、打工几十年，真的能积累财富吗？</li>\n<li>退休依靠养老金的模式可靠吗？</li>\n<li>买房是稳赚不赔的投资吗？</li>\n<li>普通家境的人用父母前十几年+自己后几十的劳动剩余价值换来的房子值得吗？</li>\n<li>财商是什么？、财务自由是什么？</li>\n<li>富人和穷人的差异有哪些？消费观、财商、勇气、自律…</li>\n</ul>\n<hr>\n<h2 id=\"老鼠赛跑的人生\"><a href=\"#老鼠赛跑的人生\" class=\"headerlink\" title=\"老鼠赛跑的人生\"></a>老鼠赛跑的人生</h2><p>我成长在一个普通家庭，和周围的大多数普通家庭的同学一样，从小到大都接受着来自父母、亲戚、老师的教育：</p>\n<p>小学中学阶段，他们让我好好学习考一个好大学</p>\n<p>大学阶段，他们让我好好学习找一个稳定的好工作。</p>\n<p>工作之后，我拿着在父母眼中还算体面的工资，开始有了消费的自由，买一些自己喜欢的东西。</p>\n<p>也许不久的将来，我会遇到心爱的人，开始组建新家庭，在我们多年不断努力的工作下，我们的薪水实现了增长，进入 “<strong>中产阶级</strong>” ，但是我们依然需要依靠双方父母的积蓄买房付首付，我们的消费和纳税也水涨船高，我们买车、计划旅行、养孩子……</p>\n<p>这时候工作就会变成我人生最重要的事情。</p>\n<p>我需要努力的为老板工作、通过纳税为国家发展做贡献、通过房贷为银行工作。因为工资是我唯一的收入来源，我需要依靠工资来支付生活成本，维持消费，还花呗信用卡，支付房贷月供。</p>\n<p>于是，我需要不停不休的朝九晚五(甚至996)，上班工作，直到退休。</p>\n<p>我可能还会把同样的教育施加在我的孩子身上，让这样的人生在下一代身上继续循环重复。</p>\n<p>也许看到文章的朋友中，有创业者，有事业有成的成功人士，有对理财投资颇有心得的朋友。但是当代乃至我们的上一代人，大多数人都有着类似的人生轨迹。</p>\n<p>这就是《富爸爸》这本书里写的 <strong>“老鼠赛跑”的游戏</strong> ：每一代人都不懂理财规划，只会通过拼命工作和加班，用大量的工作时间来换取金钱，再用这些金钱来养育子女赡养父母，而自己的子女也在重复着父母心这一辈的命运。</p>\n<blockquote>\n<p>人们的生活总是被恐惧和贪婪控制，太努力工作，而忘记了思考</p>\n</blockquote>\n<p>我们因为 <strong>恐惧</strong> 而工作：害怕付不起房贷、养不起老人孩子；</p>\n<p>我们因为 <strong>贪婪</strong> 而工作：随着工资增加，消费也增加；</p>\n<blockquote>\n<p>穷人为钱工作，富人让钱为他工作</p>\n</blockquote>\n<p>我们每天都在为了更稳定的生活、更好的生活水平，努力勤恳的上班、挣工资。</p>\n<p>但是这样的生活方式根本就不是任何一个富人的生活方式。</p>\n<p>实现了财务自由的富人，不会为了钱而工作，他们用钱创造更多的钱，为自己的消费买单。</p>\n<h2 id=\"区分资产和负债\"><a href=\"#区分资产和负债\" class=\"headerlink\" title=\"区分资产和负债\"></a>区分资产和负债</h2><p>想要向富人迈进，创造财富，最重要的第一步，就是要分清楚 <strong>资产和负债</strong>：</p>\n<ul>\n<li>资产：带来正向“现金流”的个人拥有的东西 =&gt; 能把钱放进你口袋的东西。</li>\n<li>负债：产生支出的个人拥有的东西 =&gt; 把钱从你口袋拿走的东西。</li>\n</ul>\n<h2 id=\"关注自己的现金流\"><a href=\"#关注自己的现金流\" class=\"headerlink\" title=\"关注自己的现金流\"></a>关注自己的现金流</h2><p>资产和负债强调的，就是 <strong>现金流</strong>。</p>\n<p>现金流更多用于分析企业是否良好经营，但是对于个人来说，<strong>越早关注现金流，有利于越早实现财务自由</strong>。</p>\n<p>《富爸爸》中用了 <strong>收益表+资产负债表</strong> 分别描述了穷人、中产阶级、富人的现金流：</p>\n<ul>\n<li>穷人的现金流</li>\n</ul>\n<p><img src=\"/images/rich/poor_cf.png\" alt=\"穷人的现金流\"></p>\n<p>对于大多数穷人来说，他们的收入基本全部来源于工资，工资通过日常开支、教育支出等费用消耗掉。他们的资产和负债项是空的。</p>\n<ul>\n<li>中产阶级的现金流</li>\n</ul>\n<p><img src=\"/images/rich/middle_cf.png\" alt=\"中产阶级的现金流\"></p>\n<p>中产阶级的现金流中多了一部分来自于负债的支出。负债项目包括：房贷、车贷、消费分期等。对于大多数买了刚需住房的人来说，房子只能算是他们的“负债”，因为带来不了正向的现金流，如果失业，他们可能会因为这些资产比穷人产生更多的压力，因为他们的开支中除了每月的生活开销，还有他的房贷、车贷。</p>\n<ul>\n<li>富人的现金流</li>\n</ul>\n<p><img src=\"/images/rich/rich_cf.png\" alt=\"富人的现金流\"></p>\n<p>富人和穷人以及中产阶级最大的区别就是：富人的现金流，更多的来自他们的资产项，也就是所谓的“税后收入”，而不是工资。</p>\n<p>这也与Robert 对 <strong>财富</strong> 的定义相匹配：</p>\n<blockquote>\n<p>财富：一个人没有工作后能生活多久的能力</p>\n</blockquote>\n<p>对于实现了财务自由的富人来说，这个时间就是无限长，因为他们拥有足够多的资产，为他们创造足够支出的现金流收入，如果收入减去支出还有盈余，他们的资产就会不断增加。</p>\n<h2 id=\"合理的消费观\"><a href=\"#合理的消费观\" class=\"headerlink\" title=\"合理的消费观\"></a>合理的消费观</h2><p>想要像富人那样更多的积累资产，拥有正向的现金流，培养合理的消费观，最小化支出+负债很重要。</p>\n<blockquote>\n<p>富人购买资产，穷人购买负债</p>\n</blockquote>\n<blockquote>\n<p>重要的不是挣了多少，而是能留下多少；</p>\n</blockquote>\n<p>身边经常有人在说，越有钱的人越抠门，还有人总抱怨自己的老板，如何俭省成本，苛待员工。</p>\n<p>其实不是富人抠门，而是富人深知，最小化支出，才能有更多的钱 用于购买资产，产生更多的正向现金流。</p>\n<blockquote>\n<p>富人赚的比你多，花的比你少</p>\n</blockquote>\n<p>作者Robert 提倡 <strong>享受要与财富匹配</strong> ，先把收入用于买入资产，用资产项的得利买想要的东西。</p>\n<p>也就是要<strong>自律消费</strong>。</p>\n<p>因为消费一定属于支出和负债，不要追求与自身资产不匹配的、不必要的虚荣和表层物质，不要被近几年消费升级的宣传所影响，网红带货、短视频即时营销、直播…资本市场越鼓励消费，说明资本市场从消费获利越大。</p>\n<h2 id=\"税收与公司\"><a href=\"#税收与公司\" class=\"headerlink\" title=\"税收与公司\"></a>税收与公司</h2><p>除了消费，赋税也是每个上班族不可避免的一部分。</p>\n<blockquote>\n<p>中产阶级在承担着沉重的税负，尤其是那些受过良好教育、高收入的中产阶级。</p>\n</blockquote>\n<p>这个观点似乎与普遍的认知有所出入，普遍的观点都认为富人应该缴纳更多的税让穷人受益，但事实上是这样的吗？</p>\n<p>这要从税收的历史讲起。</p>\n<blockquote>\n<p>英国和美国在早期是不需要纳税的，只有一些因战争而临时收的税，称为“纳捐”。</p>\n<p>直到1874年，英国规定纳税是国民义务，1913年，美国将征收所得税，纳入宪法。</p>\n<p>其后虽然有过冲突和争议，但是英国和美国都花了几乎50年来培养公民缴纳所得税的意识。</p>\n<p>最初只针对富人收税，但是随着国家发展，政府规模扩大，就需要征收更多的税以维持平衡运营。以致中产阶级也要被征税，且税收范围不断向穷人扩展。</p>\n</blockquote>\n<p>表面上来看，税收对富人和中产阶级是公平的。但实际上，有关企业的法律知识，给予了富人远超出穷人和中产阶级的优势。</p>\n<p>原因在书中也有提及：</p>\n<blockquote>\n<p>因为政府需要利用法制，刺激企业主和投资者创造更多的工作机会和住房，这些刺激政策降低了富人的赋税。</p>\n</blockquote>\n<p>因此，了解更多法律和财务知识的富人，总有办法从赋税中脱身，用Robert 的原话来说，就是：<strong>只要你拥有一种合法资产，我就可以找出以企业的形式提供的好处和保护</strong>，这也就是赋税最终落到中产阶级身上的原因。 </p>\n<p>这种税收状况和解释，在中国也是基本适用的。</p>\n<p>因此，公司可以帮助富人避税，公司，并不一定是实体意义上的公司，不一定是有公司名称的办公楼、厂房，可以只是一份没有精神和灵魂的法律文件</p>\n<p>拥有公司的富人：挣钱～支出～缴税</p>\n<p>为公司工作的人：挣钱～缴税～支出</p>\n<p>了解更多的财务、法律知识，利用合理的方式避税，也是穷人和富人的区别。</p>\n<h2 id=\"财商\"><a href=\"#财商\" class=\"headerlink\" title=\"财商\"></a>财商</h2><p>想要积累资产，除了要最小化支出和负债，用合理的方式避税之外，更重要的是，我们要懂得如何让自己的收入，换来更多的资产，Robert 把这种能力称为 <strong>财商</strong>。</p>\n<p>财商由四个方面构成：</p>\n<blockquote>\n<p>1、会计－－财务知识，这是非常重要的技能，你管理的钱越多，越需要精确，否则这大厦就会倒下来！财务知识能帮你读懂财务报表，借助这种能力，你还能分辨业务的优势和劣势。</p>\n<p>2、投资－－钱生钱的科学，投资涉及策略和方案，右脑做的事，或者说是创造。</p>\n<p>3、了解市场－－供给与需求的科学，这要求了解受感情驱动的市场的“技术面”，市场的另一个因素是“基本面”，或者说一项投资的经济意义。一项投资究竟有无意义最终取决于当前的市场状况。</p>\n<p>4、法律－－它可以帮助你有效运营一个进入会计、投资和市场领域的企业并实现爆炸性增长，了解税收优惠政策和公司法律的人能比雇员和小业主更快致富，这就像一个人在走，而另一个人却在飞，若从长远看这种差距会更大。</p>\n</blockquote>\n<p>踏实的学习上面的四个知识，提升财商，才能积累更多资产，让自己的每一块钱收入都能夜以继日的替自己工作，产生复利。</p>\n<h2 id=\"勇气\"><a href=\"#勇气\" class=\"headerlink\" title=\"勇气\"></a>勇气</h2><p>除了合理的消费观和财商，勇气也是影响我们致富的一个重要因素。</p>\n<blockquote>\n<p>我们一定是不断的摔倒才学会骑自行车的，我从就没见过一球都不失的高尔夫球手，也从来没见过不曾伤心过的恋人，更没见过从来不亏钱的富人，但是我却遇到过很多从来没有在投资活动中亏掉一毛钱的穷人。</p>\n</blockquote>\n<p>Robert 认为，我们应该克服对亏钱和失败的恐惧，为了获得更多的选择和机会而勇于冒险。</p>\n<p>因为惧怕风险和失败而止步不前，待在舒适圈，就一定会失去成功的机会。</p>\n<p>我们都听过“不要把鸡蛋放在一个篮子里”的经验，但是如果你的鸡蛋本来就很少，还只追求低风险，那只会让你的财富值止步不前，永远实现不了跃迁。</p>\n<p><strong>储蓄</strong>，是一种很常见的低风险投资，但是 Robert 认为，储蓄不一定是资产，储蓄不但ROI（投资回报率）低，不一定能跑赢通货膨胀，更重要的是，储蓄会使我们失去投资增值的机会。</p>\n<p><strong>买房</strong>，对于很多普通人来说，也是牵动人生的一大“投资”，依照短期的国情来看，也是一项稳定不会亏损的投资，但是房子一定是资产吗？虽然 Robert 本人的财务自由，有相当一部分是依靠投资，但是他认为，房子不一定是资产。</p>\n<p>区分房子是资产还是负债，根据前文说的方法其实很简单，如果你买房是刚需住房，那么你的房子无法给你带来正向现金流，反而会消耗你和家人前十几年（全款买房）的积蓄，或者后几十年（贷款买房）的劳动剩余价值，是“从你口袋拿钱出去”的负债。</p>\n<h2 id=\"持续学习是最大的投资\"><a href=\"#持续学习是最大的投资\" class=\"headerlink\" title=\"持续学习是最大的投资\"></a>持续学习是最大的投资</h2><p>Robert 一生做了无数的投资抉择，有的给他带来了大量的财富和持续的正向现金流，但是他坚定地认为，持续学习才是他收益最高的一项投资。</p>\n<p>书中有多处描述，都印证了这一观点：</p>\n<blockquote>\n<p>人生是一场无知与觉醒的斗争</p>\n</blockquote>\n<blockquote>\n<p>人最大的财富是所受的教育</p>\n</blockquote>\n<blockquote>\n<p>钱不能解决一切问题，只有知识才能解决问题并创造财富</p>\n</blockquote>\n<p>Robert 认为，我们不应该单纯为了赚钱和稳定的生活而工作，应该更多的关注事业而不是职业，关注长远的发展而不是眼下的工资。</p>\n<p>他在实现财务自由之前，没有遵循“穷爸爸”的建议：长期从事在一个稳定的岗位，而是积极的投身于多种跨行业的工作，对于他来说，不同的工作经验，有助于他掌握更多维的知识，这些知识都对他实现财务自由，起到了关键作用。</p>\n<blockquote>\n<p>全世界到处都是才华横溢、极具天赋的人，但是只有天赋是不够的</p>\n</blockquote>\n<blockquote>\n<p>越极度专业化的人才，价值范围越有限</p>\n</blockquote>\n<p>不光是持续学习，Robert 更加强调的是横向发展。</p>\n<p>除非你是所在行业金字塔最顶端的人，否则过度局限的认知，会阻碍你的发展，局限你的人生。</p>\n<p>之前跟朋友聊天，他说过一句话我十分认同，也和作者的观点十分契合：我们无法赚到超出自己认知的钱，我们所赚的每一分钱都是我们对这个世界认知的变现。</p>\n<p>做一个“T型”人才，斜杠青年，有自己专业的领域，也要有宽阔的认知面，才能离成功更近。</p>\n<h2 id=\"克服本能\"><a href=\"#克服本能\" class=\"headerlink\" title=\"克服本能\"></a>克服本能</h2><p>无论是 自律消费，还是 持续学习，都需要我们拥有坚定而强大的内心。</p>\n<p>前几天看新闻看到了博纳影业副总裁跳楼的消息，有一个<a href=\"https://www.zhihu.com/answer/1275167187\" target=\"_blank\" rel=\"noopener\">知乎回答</a>令我印象十分深刻：</p>\n<blockquote>\n<p>很多人向上看，只能看到富贵和纸醉金迷。可是真正一步步向上走，才会发现越往上越暗流汹涌。重回平凡的路被堵死，只能咬牙继续向上。在我们用奋斗的勇气和不服输的精神向上爬的过程中，别忘了打磨自己的心，让心变得无坚不摧。</p>\n</blockquote>\n<p>一切成功的前提，都需要我们有足够的自控力，让思想控制情感，让思考先于情感反应，要克服对失败的恐惧，克服懒惰，克服自负。</p>\n<p>打磨好自己的心，才能在上升时顺风而行，在下落时稳住脚步，不落入万丈深渊。</p>\n<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2><ul>\n<li>其实看完这本书会发现，这不是一本急功近利的财富指南，因为我们不可能因为读一本书，就实现财富自由。</li>\n<li>但是至少我们知道了，在每一份支出之前，应该有更冷静、自律的判断，不被短暂的享受和营销影响，在每一份收入之后，应该更合理的分配投资和支出。</li>\n<li>读完这本书，也不仅仅给我带来了对“金钱”的改观，除了致富，想要在其他领域做的更好，持续学习、自律、扩展认知，都是必修课。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>文章标题只是想侧面说明这本书的主要内容，请勿对号入座～</li>\n<li>我本人是个工作不到两年、背着房贷、没什么存款的理财门外汉，读完这本书，彻底改变了我对“钱”的认知和观念，因此把书中启发到我的地方分享出来，希望对你有些帮助～</li>\n<li>《富爸爸穷爸爸》从1997年最初版至今已经23年，在全球范围大受欢迎，被誉为“全球最好的理财入门书”，连续六年在纽约时报畅销书榜都榜上有名，目前已翻译超过51国语言。后续又出了一系列以达成财务自由为中心的 <strong>“富爸爸系列”丛书</strong>，。</li>\n<li>书名中的 <strong>穷爸爸</strong>，指的是作者的亲生父亲，受过良好的教育：从斯坦福大学和芝加哥大学毕业，博士学位，身居夏威夷州教育部门的要职，一生勤奋工作，收入颇丰，是一个看起来十足“成功”的高级知识分子。但是他终其一生都在个人财务问题的泥潭中挣扎，操劳一生离开人世留下了一堆账单。他总是教育作者：要努力学习，取得好成绩，这样才能有好的工作。</li>\n<li>书名中的 <strong>富爸爸</strong>，指的是作者好友的父亲，初中学历，没有很高的教育水平，但是是一个成功的商人，充分理解金钱的力量，拥有很高的财商，富爸爸是成为了全夏威夷最富有的人之一，他身后留下的是慈善机构、教堂以及巨额的遗产。作者和朋友很小的时候，就开始接受了富爸爸的财商教育。</li>\n<li>作者：<strong>Robert T. Kiyosaki，Robert ·清崎</strong>，日裔美国人，在1994年47岁的时候，因为遵循了富爸爸教给他的关于金钱和投资的知识，实现了财务自由，创造了“现金流”游戏，财务自由后因出版《富爸爸》系列书而成名，成为金融教育领域的领头人。</li>\n<li>书中用很多篇幅，对比富爸爸和穷爸爸，指出性格、思想、行为和结果上的差异，从而引出造成贫富差异的原因。</li>\n</ul>\n<h2 id=\"带着问题看文章\"><a href=\"#带着问题看文章\" class=\"headerlink\" title=\"带着问题看文章\"></a>带着问题看文章</h2><ul>\n<li>上班、工作、打工几十年，真的能积累财富吗？</li>\n<li>退休依靠养老金的模式可靠吗？</li>\n<li>买房是稳赚不赔的投资吗？</li>\n<li>普通家境的人用父母前十几年+自己后几十的劳动剩余价值换来的房子值得吗？</li>\n<li>财商是什么？、财务自由是什么？</li>\n<li>富人和穷人的差异有哪些？消费观、财商、勇气、自律…</li>\n</ul>\n<hr>\n<h2 id=\"老鼠赛跑的人生\"><a href=\"#老鼠赛跑的人生\" class=\"headerlink\" title=\"老鼠赛跑的人生\"></a>老鼠赛跑的人生</h2><p>我成长在一个普通家庭，和周围的大多数普通家庭的同学一样，从小到大都接受着来自父母、亲戚、老师的教育：</p>\n<p>小学中学阶段，他们让我好好学习考一个好大学</p>\n<p>大学阶段，他们让我好好学习找一个稳定的好工作。</p>\n<p>工作之后，我拿着在父母眼中还算体面的工资，开始有了消费的自由，买一些自己喜欢的东西。</p>\n<p>也许不久的将来，我会遇到心爱的人，开始组建新家庭，在我们多年不断努力的工作下，我们的薪水实现了增长，进入 “<strong>中产阶级</strong>” ，但是我们依然需要依靠双方父母的积蓄买房付首付，我们的消费和纳税也水涨船高，我们买车、计划旅行、养孩子……</p>\n<p>这时候工作就会变成我人生最重要的事情。</p>\n<p>我需要努力的为老板工作、通过纳税为国家发展做贡献、通过房贷为银行工作。因为工资是我唯一的收入来源，我需要依靠工资来支付生活成本，维持消费，还花呗信用卡，支付房贷月供。</p>\n<p>于是，我需要不停不休的朝九晚五(甚至996)，上班工作，直到退休。</p>\n<p>我可能还会把同样的教育施加在我的孩子身上，让这样的人生在下一代身上继续循环重复。</p>\n<p>也许看到文章的朋友中，有创业者，有事业有成的成功人士，有对理财投资颇有心得的朋友。但是当代乃至我们的上一代人，大多数人都有着类似的人生轨迹。</p>\n<p>这就是《富爸爸》这本书里写的 <strong>“老鼠赛跑”的游戏</strong> ：每一代人都不懂理财规划，只会通过拼命工作和加班，用大量的工作时间来换取金钱，再用这些金钱来养育子女赡养父母，而自己的子女也在重复着父母心这一辈的命运。</p>\n<blockquote>\n<p>人们的生活总是被恐惧和贪婪控制，太努力工作，而忘记了思考</p>\n</blockquote>\n<p>我们因为 <strong>恐惧</strong> 而工作：害怕付不起房贷、养不起老人孩子；</p>\n<p>我们因为 <strong>贪婪</strong> 而工作：随着工资增加，消费也增加；</p>\n<blockquote>\n<p>穷人为钱工作，富人让钱为他工作</p>\n</blockquote>\n<p>我们每天都在为了更稳定的生活、更好的生活水平，努力勤恳的上班、挣工资。</p>\n<p>但是这样的生活方式根本就不是任何一个富人的生活方式。</p>\n<p>实现了财务自由的富人，不会为了钱而工作，他们用钱创造更多的钱，为自己的消费买单。</p>\n<h2 id=\"区分资产和负债\"><a href=\"#区分资产和负债\" class=\"headerlink\" title=\"区分资产和负债\"></a>区分资产和负债</h2><p>想要向富人迈进，创造财富，最重要的第一步，就是要分清楚 <strong>资产和负债</strong>：</p>\n<ul>\n<li>资产：带来正向“现金流”的个人拥有的东西 =&gt; 能把钱放进你口袋的东西。</li>\n<li>负债：产生支出的个人拥有的东西 =&gt; 把钱从你口袋拿走的东西。</li>\n</ul>\n<h2 id=\"关注自己的现金流\"><a href=\"#关注自己的现金流\" class=\"headerlink\" title=\"关注自己的现金流\"></a>关注自己的现金流</h2><p>资产和负债强调的，就是 <strong>现金流</strong>。</p>\n<p>现金流更多用于分析企业是否良好经营，但是对于个人来说，<strong>越早关注现金流，有利于越早实现财务自由</strong>。</p>\n<p>《富爸爸》中用了 <strong>收益表+资产负债表</strong> 分别描述了穷人、中产阶级、富人的现金流：</p>\n<ul>\n<li>穷人的现金流</li>\n</ul>\n<p><img src=\"/images/rich/poor_cf.png\" alt=\"穷人的现金流\"></p>\n<p>对于大多数穷人来说，他们的收入基本全部来源于工资，工资通过日常开支、教育支出等费用消耗掉。他们的资产和负债项是空的。</p>\n<ul>\n<li>中产阶级的现金流</li>\n</ul>\n<p><img src=\"/images/rich/middle_cf.png\" alt=\"中产阶级的现金流\"></p>\n<p>中产阶级的现金流中多了一部分来自于负债的支出。负债项目包括：房贷、车贷、消费分期等。对于大多数买了刚需住房的人来说，房子只能算是他们的“负债”，因为带来不了正向的现金流，如果失业，他们可能会因为这些资产比穷人产生更多的压力，因为他们的开支中除了每月的生活开销，还有他的房贷、车贷。</p>\n<ul>\n<li>富人的现金流</li>\n</ul>\n<p><img src=\"/images/rich/rich_cf.png\" alt=\"富人的现金流\"></p>\n<p>富人和穷人以及中产阶级最大的区别就是：富人的现金流，更多的来自他们的资产项，也就是所谓的“税后收入”，而不是工资。</p>\n<p>这也与Robert 对 <strong>财富</strong> 的定义相匹配：</p>\n<blockquote>\n<p>财富：一个人没有工作后能生活多久的能力</p>\n</blockquote>\n<p>对于实现了财务自由的富人来说，这个时间就是无限长，因为他们拥有足够多的资产，为他们创造足够支出的现金流收入，如果收入减去支出还有盈余，他们的资产就会不断增加。</p>\n<h2 id=\"合理的消费观\"><a href=\"#合理的消费观\" class=\"headerlink\" title=\"合理的消费观\"></a>合理的消费观</h2><p>想要像富人那样更多的积累资产，拥有正向的现金流，培养合理的消费观，最小化支出+负债很重要。</p>\n<blockquote>\n<p>富人购买资产，穷人购买负债</p>\n</blockquote>\n<blockquote>\n<p>重要的不是挣了多少，而是能留下多少；</p>\n</blockquote>\n<p>身边经常有人在说，越有钱的人越抠门，还有人总抱怨自己的老板，如何俭省成本，苛待员工。</p>\n<p>其实不是富人抠门，而是富人深知，最小化支出，才能有更多的钱 用于购买资产，产生更多的正向现金流。</p>\n<blockquote>\n<p>富人赚的比你多，花的比你少</p>\n</blockquote>\n<p>作者Robert 提倡 <strong>享受要与财富匹配</strong> ，先把收入用于买入资产，用资产项的得利买想要的东西。</p>\n<p>也就是要<strong>自律消费</strong>。</p>\n<p>因为消费一定属于支出和负债，不要追求与自身资产不匹配的、不必要的虚荣和表层物质，不要被近几年消费升级的宣传所影响，网红带货、短视频即时营销、直播…资本市场越鼓励消费，说明资本市场从消费获利越大。</p>\n<h2 id=\"税收与公司\"><a href=\"#税收与公司\" class=\"headerlink\" title=\"税收与公司\"></a>税收与公司</h2><p>除了消费，赋税也是每个上班族不可避免的一部分。</p>\n<blockquote>\n<p>中产阶级在承担着沉重的税负，尤其是那些受过良好教育、高收入的中产阶级。</p>\n</blockquote>\n<p>这个观点似乎与普遍的认知有所出入，普遍的观点都认为富人应该缴纳更多的税让穷人受益，但事实上是这样的吗？</p>\n<p>这要从税收的历史讲起。</p>\n<blockquote>\n<p>英国和美国在早期是不需要纳税的，只有一些因战争而临时收的税，称为“纳捐”。</p>\n<p>直到1874年，英国规定纳税是国民义务，1913年，美国将征收所得税，纳入宪法。</p>\n<p>其后虽然有过冲突和争议，但是英国和美国都花了几乎50年来培养公民缴纳所得税的意识。</p>\n<p>最初只针对富人收税，但是随着国家发展，政府规模扩大，就需要征收更多的税以维持平衡运营。以致中产阶级也要被征税，且税收范围不断向穷人扩展。</p>\n</blockquote>\n<p>表面上来看，税收对富人和中产阶级是公平的。但实际上，有关企业的法律知识，给予了富人远超出穷人和中产阶级的优势。</p>\n<p>原因在书中也有提及：</p>\n<blockquote>\n<p>因为政府需要利用法制，刺激企业主和投资者创造更多的工作机会和住房，这些刺激政策降低了富人的赋税。</p>\n</blockquote>\n<p>因此，了解更多法律和财务知识的富人，总有办法从赋税中脱身，用Robert 的原话来说，就是：<strong>只要你拥有一种合法资产，我就可以找出以企业的形式提供的好处和保护</strong>，这也就是赋税最终落到中产阶级身上的原因。 </p>\n<p>这种税收状况和解释，在中国也是基本适用的。</p>\n<p>因此，公司可以帮助富人避税，公司，并不一定是实体意义上的公司，不一定是有公司名称的办公楼、厂房，可以只是一份没有精神和灵魂的法律文件</p>\n<p>拥有公司的富人：挣钱～支出～缴税</p>\n<p>为公司工作的人：挣钱～缴税～支出</p>\n<p>了解更多的财务、法律知识，利用合理的方式避税，也是穷人和富人的区别。</p>\n<h2 id=\"财商\"><a href=\"#财商\" class=\"headerlink\" title=\"财商\"></a>财商</h2><p>想要积累资产，除了要最小化支出和负债，用合理的方式避税之外，更重要的是，我们要懂得如何让自己的收入，换来更多的资产，Robert 把这种能力称为 <strong>财商</strong>。</p>\n<p>财商由四个方面构成：</p>\n<blockquote>\n<p>1、会计－－财务知识，这是非常重要的技能，你管理的钱越多，越需要精确，否则这大厦就会倒下来！财务知识能帮你读懂财务报表，借助这种能力，你还能分辨业务的优势和劣势。</p>\n<p>2、投资－－钱生钱的科学，投资涉及策略和方案，右脑做的事，或者说是创造。</p>\n<p>3、了解市场－－供给与需求的科学，这要求了解受感情驱动的市场的“技术面”，市场的另一个因素是“基本面”，或者说一项投资的经济意义。一项投资究竟有无意义最终取决于当前的市场状况。</p>\n<p>4、法律－－它可以帮助你有效运营一个进入会计、投资和市场领域的企业并实现爆炸性增长，了解税收优惠政策和公司法律的人能比雇员和小业主更快致富，这就像一个人在走，而另一个人却在飞，若从长远看这种差距会更大。</p>\n</blockquote>\n<p>踏实的学习上面的四个知识，提升财商，才能积累更多资产，让自己的每一块钱收入都能夜以继日的替自己工作，产生复利。</p>\n<h2 id=\"勇气\"><a href=\"#勇气\" class=\"headerlink\" title=\"勇气\"></a>勇气</h2><p>除了合理的消费观和财商，勇气也是影响我们致富的一个重要因素。</p>\n<blockquote>\n<p>我们一定是不断的摔倒才学会骑自行车的，我从就没见过一球都不失的高尔夫球手，也从来没见过不曾伤心过的恋人，更没见过从来不亏钱的富人，但是我却遇到过很多从来没有在投资活动中亏掉一毛钱的穷人。</p>\n</blockquote>\n<p>Robert 认为，我们应该克服对亏钱和失败的恐惧，为了获得更多的选择和机会而勇于冒险。</p>\n<p>因为惧怕风险和失败而止步不前，待在舒适圈，就一定会失去成功的机会。</p>\n<p>我们都听过“不要把鸡蛋放在一个篮子里”的经验，但是如果你的鸡蛋本来就很少，还只追求低风险，那只会让你的财富值止步不前，永远实现不了跃迁。</p>\n<p><strong>储蓄</strong>，是一种很常见的低风险投资，但是 Robert 认为，储蓄不一定是资产，储蓄不但ROI（投资回报率）低，不一定能跑赢通货膨胀，更重要的是，储蓄会使我们失去投资增值的机会。</p>\n<p><strong>买房</strong>，对于很多普通人来说，也是牵动人生的一大“投资”，依照短期的国情来看，也是一项稳定不会亏损的投资，但是房子一定是资产吗？虽然 Robert 本人的财务自由，有相当一部分是依靠投资，但是他认为，房子不一定是资产。</p>\n<p>区分房子是资产还是负债，根据前文说的方法其实很简单，如果你买房是刚需住房，那么你的房子无法给你带来正向现金流，反而会消耗你和家人前十几年（全款买房）的积蓄，或者后几十年（贷款买房）的劳动剩余价值，是“从你口袋拿钱出去”的负债。</p>\n<h2 id=\"持续学习是最大的投资\"><a href=\"#持续学习是最大的投资\" class=\"headerlink\" title=\"持续学习是最大的投资\"></a>持续学习是最大的投资</h2><p>Robert 一生做了无数的投资抉择，有的给他带来了大量的财富和持续的正向现金流，但是他坚定地认为，持续学习才是他收益最高的一项投资。</p>\n<p>书中有多处描述，都印证了这一观点：</p>\n<blockquote>\n<p>人生是一场无知与觉醒的斗争</p>\n</blockquote>\n<blockquote>\n<p>人最大的财富是所受的教育</p>\n</blockquote>\n<blockquote>\n<p>钱不能解决一切问题，只有知识才能解决问题并创造财富</p>\n</blockquote>\n<p>Robert 认为，我们不应该单纯为了赚钱和稳定的生活而工作，应该更多的关注事业而不是职业，关注长远的发展而不是眼下的工资。</p>\n<p>他在实现财务自由之前，没有遵循“穷爸爸”的建议：长期从事在一个稳定的岗位，而是积极的投身于多种跨行业的工作，对于他来说，不同的工作经验，有助于他掌握更多维的知识，这些知识都对他实现财务自由，起到了关键作用。</p>\n<blockquote>\n<p>全世界到处都是才华横溢、极具天赋的人，但是只有天赋是不够的</p>\n</blockquote>\n<blockquote>\n<p>越极度专业化的人才，价值范围越有限</p>\n</blockquote>\n<p>不光是持续学习，Robert 更加强调的是横向发展。</p>\n<p>除非你是所在行业金字塔最顶端的人，否则过度局限的认知，会阻碍你的发展，局限你的人生。</p>\n<p>之前跟朋友聊天，他说过一句话我十分认同，也和作者的观点十分契合：我们无法赚到超出自己认知的钱，我们所赚的每一分钱都是我们对这个世界认知的变现。</p>\n<p>做一个“T型”人才，斜杠青年，有自己专业的领域，也要有宽阔的认知面，才能离成功更近。</p>\n<h2 id=\"克服本能\"><a href=\"#克服本能\" class=\"headerlink\" title=\"克服本能\"></a>克服本能</h2><p>无论是 自律消费，还是 持续学习，都需要我们拥有坚定而强大的内心。</p>\n<p>前几天看新闻看到了博纳影业副总裁跳楼的消息，有一个<a href=\"https://www.zhihu.com/answer/1275167187\" target=\"_blank\" rel=\"noopener\">知乎回答</a>令我印象十分深刻：</p>\n<blockquote>\n<p>很多人向上看，只能看到富贵和纸醉金迷。可是真正一步步向上走，才会发现越往上越暗流汹涌。重回平凡的路被堵死，只能咬牙继续向上。在我们用奋斗的勇气和不服输的精神向上爬的过程中，别忘了打磨自己的心，让心变得无坚不摧。</p>\n</blockquote>\n<p>一切成功的前提，都需要我们有足够的自控力，让思想控制情感，让思考先于情感反应，要克服对失败的恐惧，克服懒惰，克服自负。</p>\n<p>打磨好自己的心，才能在上升时顺风而行，在下落时稳住脚步，不落入万丈深渊。</p>\n<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2><ul>\n<li>其实看完这本书会发现，这不是一本急功近利的财富指南，因为我们不可能因为读一本书，就实现财富自由。</li>\n<li>但是至少我们知道了，在每一份支出之前，应该有更冷静、自律的判断，不被短暂的享受和营销影响，在每一份收入之后，应该更合理的分配投资和支出。</li>\n<li>读完这本书，也不仅仅给我带来了对“金钱”的改观，除了致富，想要在其他领域做的更好，持续学习、自律、扩展认知，都是必修课。</li>\n</ul>\n"},{"title":"【Vue】Vue消息插件开发 & npm发布","date":"2020-05-13T16:00:00.000Z","description":"手写一个基于 Vue.js 的消息插件，按照 ElementUI / message的接口实现","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211135913.png","_content":"\n## vue-message-plugin\n- 一个基于 Vue.js 的消息插件，按照 ElementUI / message的接口实现\n- [插件地址](https://www.npmjs.com/package/vue-message-plugin)\n- [源码地址](https://github.com/scarsu/vue-message-plugin)\n\n![vue-message-plugin预览](/images/vue-message-plugin.gif)\n\n## 源码目录结构\n\n![vue-message-plugin源码目录结构](/images/vue-message-plugin.png)\n\n\n## package.json配置\n\n```jsx\n{\n  \"name\": \"vue-message-plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A message plugin based on Vue.js which works like ElementUI/Message.\",\n  \"author\": \"scarsu <scarsu001@gmail.com>\",\n  \"private\": false,//用于公开发布\n  \"license\": \"MIT\",\n  \"main\": \"dist/vue-message-plugin.js\",//npm引用入口\n  \"repository\": {//仓库\n    \"type\": \"git\",\n    \"url\": \"https://www.github.com/scarsu/vue-message-plugin\"\n  },\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",\n    \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^2.5.2\"\n  },\n  \"keywords\": [\n    \"vue\",\n    \"toast\",\n    \"code\",\n    \"vue plugin\",\n    \"message\",\n    \"vue-message-plugin\"\n  ],\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-preset-env\": \"^1.6.0\",\n    \"babel-preset-stage-3\": \"^6.24.1\",\n    \"cross-env\": \"^5.0.5\",\n    \"css-loader\": \"^0.28.7\",\n    \"file-loader\": \"^1.1.4\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"vue-loader\": \"^13.0.5\",\n    \"vue-template-compiler\": \"^2.4.4\",\n    \"webpack\": \"^3.6.0\",\n    \"webpack-dev-server\": \"^2.9.1\"\n  },\n  \"engines\": {\n    \"node\": \">= 6.0.0\",\n    \"npm\": \">= 3.0.0\"\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\",\n    \"not ie <= 8\"\n  ]\n}\n```\n\n## 主应用 vue安装插件\n\n```jsx\nimport Vue from 'vue'\nimport App from './App'\nimport Message from './lib'\n\nVue.config.productionTip = false\nVue.use(Message)//Vue.use用于安装插件，插件中必须包含install方法，必须在创建根实例前安装插件\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  components: { App },\n  template: '<App/>'\n})\n```\n\n## Message/index.js\n\n```jsx\nimport Message from './src/main.js'\nexport default Message\n```\n\n## Message/src/main.js\n\n```jsx\n/*\n * 参数 说明 类型 可选值 默认值\n * message 消息文字 string / VNode — —\n * type 主题 string success/warning/info/error info\n * dangerouslyUseHTMLString 是否将 message 属性作为 HTML 片段处理 boolean — false\n * customClass 自定义类名 string — —\n * duration 显示时间, 毫秒。设为 0 则不会自动关闭 number — 3000\n * showClose 是否显示关闭按钮 boolean — false\n * center 文字是否居中 boolean — false\n * onClose 关闭时的回调函数, 参数为被关闭的 message 实例 function — —\n * offset Message 距离窗口顶部的偏移量 number — 20\n *\n * 调用 Message 或 this.$msg 会返回当前 Message 的实例。如果需要手动关闭实例，可以调用它的 close 方法。\n *\n * 方法名 说明\n * close 关闭当前的 Message\n */\nimport message from './main.vue'\nimport {isVNode} from '@/utils'\n\n//用于export的对象\nconst Message = {}\n\nlet instances = []\nlet seed = 0\nconst types = {\n  success: 'success',\n  info: 'info',\n  warning: 'warning',\n  error: 'error'\n}\n\n//Vue插件必须包含install方法\nMessage.install = function (Vue) {\n  const Message = Vue.component('message', message)\n\n  Vue.prototype.$message = function (opt) {\n    // 参数处理\n    if (typeof opt === 'string' || isVNode(opt)) {\n      opt = {message: opt}\n    }\n    opt.id = 'id' + seed++\n    opt.type = types[opt.type] || types.info\n    opt.userOnClose = opt.onClose\n\n    // message组件实例\n    let instance = new Message({\n      data: opt//将配置选项传入给实例的data\n    })\n\n\t\t//处理VNode类型message（使用$slots插槽分发数据\n    if (isVNode(instance.message)) {\n      instance.$slots.default = [instance.message]\n      instance.message = ''\n    }\n\n\t\t//挂载dom  并 实例的dom加入body中\n    instance.$mount()\n    document.body.append(instance.$el)\n\n    // close方法\n    instance.close = function () {\n      this.show = false\n      if (this.userOnClose) this.userOnClose()\n    }\n\n    // 显示\n    instance.show = true\n\n\t\t// 定时隐藏\n    let duration = opt.duration || 3000\n    instance.timer = setTimeout(() => {\n      instance.close()\n    }, duration)\n\n    instances.push(instance)\n\n    // 返回message组件实例\n    return instance\n  }\n}\nexport default Message\n```\n\n## isVNode方法\n\n```jsx\nfunction isVNode (node) {\n\t//通过VNode必包含的属性componentOptions来判断\n  return !!node && typeof node === 'object' && node.hasOwnProperty('componentOptions')\n}\n```\n\n## Message/src/main.vue\n\n```jsx\n<!--\n * 参数 说明 类型 可选值 默认值\n * message 消息文字 string / VNode — —\n * type 主题 string success/warning/info/error info\n * dangerouslyUseHTMLString 是否将 message 属性作为 HTML 片段处理 boolean — false\n * customClass 自定义类名 string — —\n * duration 显示时间, 毫秒。设为 0 则不会自动关闭 number — 3000\n * showClose 是否显示关闭按钮 boolean — false\n * center 文字是否居中 boolean — false\n * onClose 关闭时的回调函数, 参数为被关闭的 message 实例 function — —\n * offset Message 距离窗口顶部的偏移量 number — 20\n *\n * 调用 Message 或 this.$msg 会返回当前 Message 的实例。如果需要手动关闭实例，可以调用它的 close 方法。\n *\n * 方法名 说明\n * close 关闭当前的 Message\n-->\n<template>\n  <transition name=\"message-fade\">\n      <div\n        :class=\"[\n          'message',\n          `message-${type}`,\n          center?'is-center':'',\n          customClass]\"\n          :style=\"positionStyle\"\n          @mouseenter=stopTimer\n          @mouseleave=startTimer\n          v-if=\"show\">\n        <slot>//插槽分发v-html数据\n            <span v-if=\"message && !dangerouslyUseHTMLString\">{{message}}</span>\n            <div v-else v-html=\"message\"></div>\n        </slot>\n        <i v-if=\"showClose\" @click=\"closeMsg\" class=\"message-close-btn\">x</i>\n      </div>\n  </transition>\n</template>\n\n<script>\nexport default{\n  components: {},\n  data () {  //message组件默认数据\n    return {\n      message: '',\n      type: 'info',\n      dangerouslyUseHTMLString: false,\n      customClass: '',\n      showClose: false,\n      center: false,\n      onClose: null,\n      offset: 20,\n      show: false,\n      timer: null\n    }\n  },\n  computed: {\n    positionStyle () {\n      return `margin-top:${this.offset}px`\n    }\n  },\n  watch: {},\n  created () {},\n  mounted () {},\n  methods: {\n    closeMsg () {\n      this.close()\n    },\n    startTimer () {\n      const _this = this\n      this.timer = setTimeout(() => {\n        _this.close()\n      }, _this.duration)\n    },\n    stopTimer () {\n      clearTimeout(this.timer)\n      this.timer = null\n    }\n  }\n}\n</script>\n<style scoped>\n.message{\n  position: relative;\n  margin-top: 15vh;\n  width: 30%;\n  margin: 0 auto;\n  background: #fff;\n  box-shadow: 0 1px 3px rgba(0,0,0,.3);\n  box-sizing: border-box;\n  min-width: 200px;\n  padding: 20px 40px;\n  border-radius: 10px;\n}\n.is-center{\n  text-align: center;\n}\n.message-success{\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n  color: #67c23a;\n}\n.message-info{\n  background-color: #edf2fc;\n  border-color: #909399;\n  color: #909399;\n}\n.message-warning{\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n  color: #e6a23c;\n}\n.message-error{\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n  color: #f56c6c;\n}\n.message-fade-enter-active,\n.message-fade-leave-active {\n  transition: all 0.1s ease-out;\n}\n.message-fade-enter-to {\n  opacity: 1;\n  transform: scale(1.2);\n}\n.message-fade-leave-to {\n  opacity: 0;\n  transform: scale(0.8);\n}\n.message-close-btn{\n  position: absolute;\n  right: 10px;\n  top: 3px;\n  cursor: pointer;\n}\n</style>\n```\n\n## webpack配置\n\n```jsx\nconst path = require('path')\nconst webpack = require('webpack')\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst resolve = dir => path.resolve(__dirname, dir);\n\nmodule.exports = {\n  entry: './src/main.js', //定义webpack的入口文件\n  output: { //定义webpack的输出\n    path: path.resolve(__dirname, './dist'),  //输出路径\n    filename: 'vue-message-plugin.js',  //输出文件名\n    libraryTarget: 'umd', //把写的library打包成umd文件，把库暴露给当前使用的模块定义系统，同时适用commonJs 模块，AMD模块，也可以导出到 global 下的变量，library指定模块名或变量名\n    library: 'vue-message-plugin',  //以库的形式导出入口文件\n    umdNamedDefine: true //在 UMD 库中使用命名的 AMD 模块\n  },\n  module: { //module选项决定了如何处理项目中的不同类型的模块\n    rules: [  //array,创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)。\n      {\n        test: /\\.css$/, //rule条件：resource，请求文件的绝对路径。它已经根据 resolve 规则解析。（Rule.resource.test 的简写\n        use: [  //应用于模块的 UseEntries 列表。每个入口(entry)指定使用一个 loader。\n          'vue-style-loader',\n          'css-loader'\n        ],\n      },\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          loaders: {}\n        }\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[name].[ext]?[hash]'\n        }\n      }\n    ]\n  },\n  resolve: {  //resolve选项能设置模块如何被解析\n    alias: {  //定义 import 或 require 的别名，来确保模块引入变得更简单\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src')\n    },\n    extensions: ['*', '.js', '.vue', '.json'] //自动解析确定的扩展。能够使用户在引入模块时不带扩展\n  },\n  devServer: {\n    historyApiFallback: true, //当使用 HTML5 History API 时，任意的 404 响应都可能需要被替代为 index.html\n    noInfo: true, //启用 noInfo 后，「启动时和每次保存之后，那些显示的 webpack 包(bundle)信息」的消息将被隐藏。错误和警告仍然会显示。\n    overlay: true,  //出现编译器错误或警告时，在浏览器中显示全屏覆盖。\n    open: true, //自动打开浏览器\n    port: 3100, //设置端口\n    hot: true //启用热更新\n  },\n  performance: {\n    hints: false  //关闭提示\n  },\n  devtool: '#eval-source-map' //原始源代码生成 source map\n}\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports.devtool = '#source-map'//原始源代码生成 source map\n  module.exports.plugins = (module.exports.plugins || []).concat([\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      sourceMap: true,\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.LoaderOptionsPlugin({\n      minimize: true\n    })\n  ])\n}else if(process.env.NODE_ENV === 'development'){\n  module.exports.devtool = '#eval-source-map'\n  module.exports.plugins = (module.exports.plugins || []).concat([\n    new webpack.DefinePlugin({  //插件：允许在编译时(compile time)配置的全局常量\n      'process.env': {\n        NODE_ENV: '\"development\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({ //可以控制项目中 UglifyJS 的版本\n      sourceMap: true,\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.LoaderOptionsPlugin({ //用于从 webpack 1 迁移到 webpack 2\n      minimize: true\n    }),\n    new HtmlWebpackPlugin({ //简单创建 HTML 文件，用于服务器访问\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true  //注入打包的文件\n    })\n  ])\n}\n```","source":"_posts/vue-message-plugin.md","raw":"---\ntitle: 【Vue】Vue消息插件开发 & npm发布\ncategories:\n    - 10技术 | JavaScript # 一级分类\ntags:\ndate: 2020-05-14\ndescription: 手写一个基于 Vue.js 的消息插件，按照 ElementUI / message的接口实现\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211135913.png\n---\n\n## vue-message-plugin\n- 一个基于 Vue.js 的消息插件，按照 ElementUI / message的接口实现\n- [插件地址](https://www.npmjs.com/package/vue-message-plugin)\n- [源码地址](https://github.com/scarsu/vue-message-plugin)\n\n![vue-message-plugin预览](/images/vue-message-plugin.gif)\n\n## 源码目录结构\n\n![vue-message-plugin源码目录结构](/images/vue-message-plugin.png)\n\n\n## package.json配置\n\n```jsx\n{\n  \"name\": \"vue-message-plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A message plugin based on Vue.js which works like ElementUI/Message.\",\n  \"author\": \"scarsu <scarsu001@gmail.com>\",\n  \"private\": false,//用于公开发布\n  \"license\": \"MIT\",\n  \"main\": \"dist/vue-message-plugin.js\",//npm引用入口\n  \"repository\": {//仓库\n    \"type\": \"git\",\n    \"url\": \"https://www.github.com/scarsu/vue-message-plugin\"\n  },\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",\n    \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^2.5.2\"\n  },\n  \"keywords\": [\n    \"vue\",\n    \"toast\",\n    \"code\",\n    \"vue plugin\",\n    \"message\",\n    \"vue-message-plugin\"\n  ],\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-preset-env\": \"^1.6.0\",\n    \"babel-preset-stage-3\": \"^6.24.1\",\n    \"cross-env\": \"^5.0.5\",\n    \"css-loader\": \"^0.28.7\",\n    \"file-loader\": \"^1.1.4\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"vue-loader\": \"^13.0.5\",\n    \"vue-template-compiler\": \"^2.4.4\",\n    \"webpack\": \"^3.6.0\",\n    \"webpack-dev-server\": \"^2.9.1\"\n  },\n  \"engines\": {\n    \"node\": \">= 6.0.0\",\n    \"npm\": \">= 3.0.0\"\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\",\n    \"not ie <= 8\"\n  ]\n}\n```\n\n## 主应用 vue安装插件\n\n```jsx\nimport Vue from 'vue'\nimport App from './App'\nimport Message from './lib'\n\nVue.config.productionTip = false\nVue.use(Message)//Vue.use用于安装插件，插件中必须包含install方法，必须在创建根实例前安装插件\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  components: { App },\n  template: '<App/>'\n})\n```\n\n## Message/index.js\n\n```jsx\nimport Message from './src/main.js'\nexport default Message\n```\n\n## Message/src/main.js\n\n```jsx\n/*\n * 参数 说明 类型 可选值 默认值\n * message 消息文字 string / VNode — —\n * type 主题 string success/warning/info/error info\n * dangerouslyUseHTMLString 是否将 message 属性作为 HTML 片段处理 boolean — false\n * customClass 自定义类名 string — —\n * duration 显示时间, 毫秒。设为 0 则不会自动关闭 number — 3000\n * showClose 是否显示关闭按钮 boolean — false\n * center 文字是否居中 boolean — false\n * onClose 关闭时的回调函数, 参数为被关闭的 message 实例 function — —\n * offset Message 距离窗口顶部的偏移量 number — 20\n *\n * 调用 Message 或 this.$msg 会返回当前 Message 的实例。如果需要手动关闭实例，可以调用它的 close 方法。\n *\n * 方法名 说明\n * close 关闭当前的 Message\n */\nimport message from './main.vue'\nimport {isVNode} from '@/utils'\n\n//用于export的对象\nconst Message = {}\n\nlet instances = []\nlet seed = 0\nconst types = {\n  success: 'success',\n  info: 'info',\n  warning: 'warning',\n  error: 'error'\n}\n\n//Vue插件必须包含install方法\nMessage.install = function (Vue) {\n  const Message = Vue.component('message', message)\n\n  Vue.prototype.$message = function (opt) {\n    // 参数处理\n    if (typeof opt === 'string' || isVNode(opt)) {\n      opt = {message: opt}\n    }\n    opt.id = 'id' + seed++\n    opt.type = types[opt.type] || types.info\n    opt.userOnClose = opt.onClose\n\n    // message组件实例\n    let instance = new Message({\n      data: opt//将配置选项传入给实例的data\n    })\n\n\t\t//处理VNode类型message（使用$slots插槽分发数据\n    if (isVNode(instance.message)) {\n      instance.$slots.default = [instance.message]\n      instance.message = ''\n    }\n\n\t\t//挂载dom  并 实例的dom加入body中\n    instance.$mount()\n    document.body.append(instance.$el)\n\n    // close方法\n    instance.close = function () {\n      this.show = false\n      if (this.userOnClose) this.userOnClose()\n    }\n\n    // 显示\n    instance.show = true\n\n\t\t// 定时隐藏\n    let duration = opt.duration || 3000\n    instance.timer = setTimeout(() => {\n      instance.close()\n    }, duration)\n\n    instances.push(instance)\n\n    // 返回message组件实例\n    return instance\n  }\n}\nexport default Message\n```\n\n## isVNode方法\n\n```jsx\nfunction isVNode (node) {\n\t//通过VNode必包含的属性componentOptions来判断\n  return !!node && typeof node === 'object' && node.hasOwnProperty('componentOptions')\n}\n```\n\n## Message/src/main.vue\n\n```jsx\n<!--\n * 参数 说明 类型 可选值 默认值\n * message 消息文字 string / VNode — —\n * type 主题 string success/warning/info/error info\n * dangerouslyUseHTMLString 是否将 message 属性作为 HTML 片段处理 boolean — false\n * customClass 自定义类名 string — —\n * duration 显示时间, 毫秒。设为 0 则不会自动关闭 number — 3000\n * showClose 是否显示关闭按钮 boolean — false\n * center 文字是否居中 boolean — false\n * onClose 关闭时的回调函数, 参数为被关闭的 message 实例 function — —\n * offset Message 距离窗口顶部的偏移量 number — 20\n *\n * 调用 Message 或 this.$msg 会返回当前 Message 的实例。如果需要手动关闭实例，可以调用它的 close 方法。\n *\n * 方法名 说明\n * close 关闭当前的 Message\n-->\n<template>\n  <transition name=\"message-fade\">\n      <div\n        :class=\"[\n          'message',\n          `message-${type}`,\n          center?'is-center':'',\n          customClass]\"\n          :style=\"positionStyle\"\n          @mouseenter=stopTimer\n          @mouseleave=startTimer\n          v-if=\"show\">\n        <slot>//插槽分发v-html数据\n            <span v-if=\"message && !dangerouslyUseHTMLString\">{{message}}</span>\n            <div v-else v-html=\"message\"></div>\n        </slot>\n        <i v-if=\"showClose\" @click=\"closeMsg\" class=\"message-close-btn\">x</i>\n      </div>\n  </transition>\n</template>\n\n<script>\nexport default{\n  components: {},\n  data () {  //message组件默认数据\n    return {\n      message: '',\n      type: 'info',\n      dangerouslyUseHTMLString: false,\n      customClass: '',\n      showClose: false,\n      center: false,\n      onClose: null,\n      offset: 20,\n      show: false,\n      timer: null\n    }\n  },\n  computed: {\n    positionStyle () {\n      return `margin-top:${this.offset}px`\n    }\n  },\n  watch: {},\n  created () {},\n  mounted () {},\n  methods: {\n    closeMsg () {\n      this.close()\n    },\n    startTimer () {\n      const _this = this\n      this.timer = setTimeout(() => {\n        _this.close()\n      }, _this.duration)\n    },\n    stopTimer () {\n      clearTimeout(this.timer)\n      this.timer = null\n    }\n  }\n}\n</script>\n<style scoped>\n.message{\n  position: relative;\n  margin-top: 15vh;\n  width: 30%;\n  margin: 0 auto;\n  background: #fff;\n  box-shadow: 0 1px 3px rgba(0,0,0,.3);\n  box-sizing: border-box;\n  min-width: 200px;\n  padding: 20px 40px;\n  border-radius: 10px;\n}\n.is-center{\n  text-align: center;\n}\n.message-success{\n  background-color: #f0f9eb;\n  border-color: #e1f3d8;\n  color: #67c23a;\n}\n.message-info{\n  background-color: #edf2fc;\n  border-color: #909399;\n  color: #909399;\n}\n.message-warning{\n  background-color: #fdf6ec;\n  border-color: #faecd8;\n  color: #e6a23c;\n}\n.message-error{\n  background-color: #fef0f0;\n  border-color: #fde2e2;\n  color: #f56c6c;\n}\n.message-fade-enter-active,\n.message-fade-leave-active {\n  transition: all 0.1s ease-out;\n}\n.message-fade-enter-to {\n  opacity: 1;\n  transform: scale(1.2);\n}\n.message-fade-leave-to {\n  opacity: 0;\n  transform: scale(0.8);\n}\n.message-close-btn{\n  position: absolute;\n  right: 10px;\n  top: 3px;\n  cursor: pointer;\n}\n</style>\n```\n\n## webpack配置\n\n```jsx\nconst path = require('path')\nconst webpack = require('webpack')\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst resolve = dir => path.resolve(__dirname, dir);\n\nmodule.exports = {\n  entry: './src/main.js', //定义webpack的入口文件\n  output: { //定义webpack的输出\n    path: path.resolve(__dirname, './dist'),  //输出路径\n    filename: 'vue-message-plugin.js',  //输出文件名\n    libraryTarget: 'umd', //把写的library打包成umd文件，把库暴露给当前使用的模块定义系统，同时适用commonJs 模块，AMD模块，也可以导出到 global 下的变量，library指定模块名或变量名\n    library: 'vue-message-plugin',  //以库的形式导出入口文件\n    umdNamedDefine: true //在 UMD 库中使用命名的 AMD 模块\n  },\n  module: { //module选项决定了如何处理项目中的不同类型的模块\n    rules: [  //array,创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)。\n      {\n        test: /\\.css$/, //rule条件：resource，请求文件的绝对路径。它已经根据 resolve 规则解析。（Rule.resource.test 的简写\n        use: [  //应用于模块的 UseEntries 列表。每个入口(entry)指定使用一个 loader。\n          'vue-style-loader',\n          'css-loader'\n        ],\n      },\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          loaders: {}\n        }\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[name].[ext]?[hash]'\n        }\n      }\n    ]\n  },\n  resolve: {  //resolve选项能设置模块如何被解析\n    alias: {  //定义 import 或 require 的别名，来确保模块引入变得更简单\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src')\n    },\n    extensions: ['*', '.js', '.vue', '.json'] //自动解析确定的扩展。能够使用户在引入模块时不带扩展\n  },\n  devServer: {\n    historyApiFallback: true, //当使用 HTML5 History API 时，任意的 404 响应都可能需要被替代为 index.html\n    noInfo: true, //启用 noInfo 后，「启动时和每次保存之后，那些显示的 webpack 包(bundle)信息」的消息将被隐藏。错误和警告仍然会显示。\n    overlay: true,  //出现编译器错误或警告时，在浏览器中显示全屏覆盖。\n    open: true, //自动打开浏览器\n    port: 3100, //设置端口\n    hot: true //启用热更新\n  },\n  performance: {\n    hints: false  //关闭提示\n  },\n  devtool: '#eval-source-map' //原始源代码生成 source map\n}\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports.devtool = '#source-map'//原始源代码生成 source map\n  module.exports.plugins = (module.exports.plugins || []).concat([\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      sourceMap: true,\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.LoaderOptionsPlugin({\n      minimize: true\n    })\n  ])\n}else if(process.env.NODE_ENV === 'development'){\n  module.exports.devtool = '#eval-source-map'\n  module.exports.plugins = (module.exports.plugins || []).concat([\n    new webpack.DefinePlugin({  //插件：允许在编译时(compile time)配置的全局常量\n      'process.env': {\n        NODE_ENV: '\"development\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({ //可以控制项目中 UglifyJS 的版本\n      sourceMap: true,\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.LoaderOptionsPlugin({ //用于从 webpack 1 迁移到 webpack 2\n      minimize: true\n    }),\n    new HtmlWebpackPlugin({ //简单创建 HTML 文件，用于服务器访问\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true  //注入打包的文件\n    })\n  ])\n}\n```","slug":"vue-message-plugin","published":1,"updated":"2021-01-22T10:04:13.310Z","_id":"ckir88jcd005mc8y6xl39n7t8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"vue-message-plugin\"><a href=\"#vue-message-plugin\" class=\"headerlink\" title=\"vue-message-plugin\"></a>vue-message-plugin</h2><ul>\n<li>一个基于 Vue.js 的消息插件，按照 ElementUI / message的接口实现</li>\n<li><a href=\"https://www.npmjs.com/package/vue-message-plugin\" target=\"_blank\" rel=\"noopener\">插件地址</a></li>\n<li><a href=\"https://github.com/scarsu/vue-message-plugin\" target=\"_blank\" rel=\"noopener\">源码地址</a></li>\n</ul>\n<p><img src=\"/images/vue-message-plugin.gif\" alt=\"vue-message-plugin预览\"></p>\n<h2 id=\"源码目录结构\"><a href=\"#源码目录结构\" class=\"headerlink\" title=\"源码目录结构\"></a>源码目录结构</h2><p><img src=\"/images/vue-message-plugin.png\" alt=\"vue-message-plugin源码目录结构\"></p>\n<h2 id=\"package-json配置\"><a href=\"#package-json配置\" class=\"headerlink\" title=\"package.json配置\"></a>package.json配置</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"vue-message-plugin\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"A message plugin based on Vue.js which works like ElementUI/Message.\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"scarsu &lt;scarsu001@gmail.com&gt;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"private\"</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//用于公开发布</span></span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"dist/vue-message-plugin.js\"</span>,<span class=\"comment\">//npm引用入口</span></span><br><span class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;<span class=\"comment\">//仓库</span></span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://www.github.com/scarsu/vue-message-plugin\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"cross-env NODE_ENV=development webpack-dev-server --open --hot\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production webpack --progress --hide-modules\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"vue\"</span>: <span class=\"string\">\"^2.5.2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"toast\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"code\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue plugin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"message\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue-message-plugin\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.6.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-preset-stage-3\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cross-env\"</span>: <span class=\"string\">\"^5.0.5\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^1.1.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.30.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue-loader\"</span>: <span class=\"string\">\"^13.0.5\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue-template-compiler\"</span>: <span class=\"string\">\"^2.4.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^3.6.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^2.9.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"engines\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"node\"</span>: <span class=\"string\">\"&gt;= 6.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"npm\"</span>: <span class=\"string\">\"&gt;= 3.0.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"browserslist\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"&gt; 1%\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"last 2 versions\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"not ie &lt;= 8\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"主应用-vue安装插件\"><a href=\"#主应用-vue安装插件\" class=\"headerlink\" title=\"主应用 vue安装插件\"></a>主应用 vue安装插件</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./lib'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\">Vue.use(Message)<span class=\"comment\">//Vue.use用于安装插件，插件中必须包含install方法，必须在创建根实例前安装插件</span></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123; App &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-index-js\"><a href=\"#Message-index-js\" class=\"headerlink\" title=\"Message/index.js\"></a>Message/index.js</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Message</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-src-main-js\"><a href=\"#Message-src-main-js\" class=\"headerlink\" title=\"Message/src/main.js\"></a>Message/src/main.js</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 说明 类型 可选值 默认值</span></span><br><span class=\"line\"><span class=\"comment\"> * message 消息文字 string / VNode — —</span></span><br><span class=\"line\"><span class=\"comment\"> * type 主题 string success/warning/info/error info</span></span><br><span class=\"line\"><span class=\"comment\"> * dangerouslyUseHTMLString 是否将 message 属性作为 HTML 片段处理 boolean — false</span></span><br><span class=\"line\"><span class=\"comment\"> * customClass 自定义类名 string — —</span></span><br><span class=\"line\"><span class=\"comment\"> * duration 显示时间, 毫秒。设为 0 则不会自动关闭 number — 3000</span></span><br><span class=\"line\"><span class=\"comment\"> * showClose 是否显示关闭按钮 boolean — false</span></span><br><span class=\"line\"><span class=\"comment\"> * center 文字是否居中 boolean — false</span></span><br><span class=\"line\"><span class=\"comment\"> * onClose 关闭时的回调函数, 参数为被关闭的 message 实例 function — —</span></span><br><span class=\"line\"><span class=\"comment\"> * offset Message 距离窗口顶部的偏移量 number — 20</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用 Message 或 this.$msg 会返回当前 Message 的实例。如果需要手动关闭实例，可以调用它的 close 方法。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法名 说明</span></span><br><span class=\"line\"><span class=\"comment\"> * close 关闭当前的 Message</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'./main.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;isVNode&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于export的对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Message = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> instances = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> seed = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> types = &#123;</span><br><span class=\"line\">  success: <span class=\"string\">'success'</span>,</span><br><span class=\"line\">  info: <span class=\"string\">'info'</span>,</span><br><span class=\"line\">  warning: <span class=\"string\">'warning'</span>,</span><br><span class=\"line\">  error: <span class=\"string\">'error'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Vue插件必须包含install方法</span></span><br><span class=\"line\">Message.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Message = Vue.component(<span class=\"string\">'message'</span>, message)</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.prototype.$message = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opt === <span class=\"string\">'string'</span> || isVNode(opt)) &#123;</span><br><span class=\"line\">      opt = &#123;<span class=\"attr\">message</span>: opt&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    opt.id = <span class=\"string\">'id'</span> + seed++</span><br><span class=\"line\">    opt.type = types[opt.type] || types.info</span><br><span class=\"line\">    opt.userOnClose = opt.onClose</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// message组件实例</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> instance = <span class=\"keyword\">new</span> Message(&#123;</span><br><span class=\"line\">      data: opt<span class=\"comment\">//将配置选项传入给实例的data</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//处理VNode类型message（使用$slots插槽分发数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isVNode(instance.message)) &#123;</span><br><span class=\"line\">      instance.$slots.default = [instance.message]</span><br><span class=\"line\">      instance.message = <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//挂载dom  并 实例的dom加入body中</span></span><br><span class=\"line\">    instance.$mount()</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.append(instance.$el)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// close方法</span></span><br><span class=\"line\">    instance.close = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.show = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.userOnClose) <span class=\"keyword\">this</span>.userOnClose()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 显示</span></span><br><span class=\"line\">    instance.show = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定时隐藏</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> duration = opt.duration || <span class=\"number\">3000</span></span><br><span class=\"line\">    instance.timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      instance.close()</span><br><span class=\"line\">    &#125;, duration)</span><br><span class=\"line\"></span><br><span class=\"line\">    instances.push(instance)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回message组件实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Message</span><br></pre></td></tr></table></figure>\n<h2 id=\"isVNode方法\"><a href=\"#isVNode方法\" class=\"headerlink\" title=\"isVNode方法\"></a>isVNode方法</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isVNode</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//通过VNode必包含的属性componentOptions来判断</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!node &amp;&amp; <span class=\"keyword\">typeof</span> node === <span class=\"string\">'object'</span> &amp;&amp; node.hasOwnProperty(<span class=\"string\">'componentOptions'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-src-main-vue\"><a href=\"#Message-src-main-vue\" class=\"headerlink\" title=\"Message/src/main.vue\"></a>Message/src/main.vue</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\"> * 参数 说明 类型 可选值 默认值</span><br><span class=\"line\"> * message 消息文字 string / VNode — —</span><br><span class=\"line\"> * type 主题 string success/warning/info/error info</span><br><span class=\"line\"> * dangerouslyUseHTMLString 是否将 message 属性作为 HTML 片段处理 boolean — <span class=\"literal\">false</span></span><br><span class=\"line\"> * customClass 自定义类名 string — —</span><br><span class=\"line\"> * duration 显示时间, 毫秒。设为 <span class=\"number\">0</span> 则不会自动关闭 number — <span class=\"number\">3000</span></span><br><span class=\"line\"> * showClose 是否显示关闭按钮 boolean — <span class=\"literal\">false</span></span><br><span class=\"line\"> * center 文字是否居中 boolean — <span class=\"literal\">false</span></span><br><span class=\"line\"> * onClose 关闭时的回调函数, 参数为被关闭的 message 实例 <span class=\"function\"><span class=\"keyword\">function</span> — —</span></span><br><span class=\"line\"><span class=\"function\"> * <span class=\"title\">offset</span> <span class=\"title\">Message</span> 距离窗口顶部的偏移量 <span class=\"title\">number</span> — 20</span></span><br><span class=\"line\"><span class=\"function\"> *</span></span><br><span class=\"line\"><span class=\"function\"> * 调用 <span class=\"title\">Message</span> 或 <span class=\"title\">this</span>.<span class=\"title\">$msg</span> 会返回当前 <span class=\"title\">Message</span> 的实例。如果需要手动关闭实例，可以调用它的 <span class=\"title\">close</span> 方法。</span></span><br><span class=\"line\"><span class=\"function\"> *</span></span><br><span class=\"line\"><span class=\"function\"> * 方法名 说明</span></span><br><span class=\"line\"><span class=\"function\"> * <span class=\"title\">close</span> 关闭当前的 <span class=\"title\">Message</span></span></span><br><span class=\"line\"><span class=\"function\">--&gt;</span></span><br><span class=\"line\"><span class=\"function\">&lt;<span class=\"title\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"function\">  &lt;<span class=\"title\">transition</span> <span class=\"title\">name</span>=\"<span class=\"title\">message</span>-<span class=\"title\">fade</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"function\">      &lt;<span class=\"title\">div</span></span></span><br><span class=\"line\">        :class=\"[</span><br><span class=\"line\">          <span class=\"string\">'message'</span>,</span><br><span class=\"line\">          <span class=\"string\">`message-<span class=\"subst\">$&#123;type&#125;</span>`</span>,</span><br><span class=\"line\">          center?<span class=\"string\">'is-center'</span>:<span class=\"string\">''</span>,</span><br><span class=\"line\">          customClass]<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">          :style=\"</span>positionStyle<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">          @mouseenter=stopTimer</span></span><br><span class=\"line\"><span class=\"string\">          @mouseleave=startTimer</span></span><br><span class=\"line\"><span class=\"string\">          v-if=\"</span>show<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;//插槽分发v-html数据</span></span><br><span class=\"line\"><span class=\"string\">            &lt;span v-if=\"</span>message &amp;&amp; !dangerouslyUseHTMLString<span class=\"string\">\"&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div v-else v-html=\"</span>message<span class=\"string\">\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;i v-if=\"</span>showClose<span class=\"string\">\" @click=\"</span>closeMsg<span class=\"string\">\" class=\"</span>message-close-btn<span class=\"string\">\"&gt;x&lt;/i&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/transition&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">export default&#123;</span></span><br><span class=\"line\"><span class=\"string\">  components: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">  data () &#123;  //message组件默认数据</span></span><br><span class=\"line\"><span class=\"string\">    return &#123;</span></span><br><span class=\"line\"><span class=\"string\">      message: '',</span></span><br><span class=\"line\"><span class=\"string\">      type: 'info',</span></span><br><span class=\"line\"><span class=\"string\">      dangerouslyUseHTMLString: false,</span></span><br><span class=\"line\"><span class=\"string\">      customClass: '',</span></span><br><span class=\"line\"><span class=\"string\">      showClose: false,</span></span><br><span class=\"line\"><span class=\"string\">      center: false,</span></span><br><span class=\"line\"><span class=\"string\">      onClose: null,</span></span><br><span class=\"line\"><span class=\"string\">      offset: 20,</span></span><br><span class=\"line\"><span class=\"string\">      show: false,</span></span><br><span class=\"line\"><span class=\"string\">      timer: null</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    positionStyle () &#123;</span></span><br><span class=\"line\"><span class=\"string\">      return `margin-top:$&#123;this.offset&#125;px`</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  watch: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">  created () &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">  mounted () &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    closeMsg () &#123;</span></span><br><span class=\"line\"><span class=\"string\">      this.close()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    startTimer () &#123;</span></span><br><span class=\"line\"><span class=\"string\">      const _this = this</span></span><br><span class=\"line\"><span class=\"string\">      this.timer = setTimeout(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">        _this.close()</span></span><br><span class=\"line\"><span class=\"string\">      &#125;, _this.duration)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    stopTimer () &#123;</span></span><br><span class=\"line\"><span class=\"string\">      clearTimeout(this.timer)</span></span><br><span class=\"line\"><span class=\"string\">      this.timer = null</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;style scoped&gt;</span></span><br><span class=\"line\"><span class=\"string\">.message&#123;</span></span><br><span class=\"line\"><span class=\"string\">  position: relative;</span></span><br><span class=\"line\"><span class=\"string\">  margin-top: 15vh;</span></span><br><span class=\"line\"><span class=\"string\">  width: 30%;</span></span><br><span class=\"line\"><span class=\"string\">  margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"string\">  background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">  box-shadow: 0 1px 3px rgba(0,0,0,.3);</span></span><br><span class=\"line\"><span class=\"string\">  box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"string\">  min-width: 200px;</span></span><br><span class=\"line\"><span class=\"string\">  padding: 20px 40px;</span></span><br><span class=\"line\"><span class=\"string\">  border-radius: 10px;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.is-center&#123;</span></span><br><span class=\"line\"><span class=\"string\">  text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-success&#123;</span></span><br><span class=\"line\"><span class=\"string\">  background-color: #f0f9eb;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: #e1f3d8;</span></span><br><span class=\"line\"><span class=\"string\">  color: #67c23a;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-info&#123;</span></span><br><span class=\"line\"><span class=\"string\">  background-color: #edf2fc;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: #909399;</span></span><br><span class=\"line\"><span class=\"string\">  color: #909399;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-warning&#123;</span></span><br><span class=\"line\"><span class=\"string\">  background-color: #fdf6ec;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: #faecd8;</span></span><br><span class=\"line\"><span class=\"string\">  color: #e6a23c;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-error&#123;</span></span><br><span class=\"line\"><span class=\"string\">  background-color: #fef0f0;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: #fde2e2;</span></span><br><span class=\"line\"><span class=\"string\">  color: #f56c6c;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-fade-enter-active,</span></span><br><span class=\"line\"><span class=\"string\">.message-fade-leave-active &#123;</span></span><br><span class=\"line\"><span class=\"string\">  transition: all 0.1s ease-out;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-fade-enter-to &#123;</span></span><br><span class=\"line\"><span class=\"string\">  opacity: 1;</span></span><br><span class=\"line\"><span class=\"string\">  transform: scale(1.2);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-fade-leave-to &#123;</span></span><br><span class=\"line\"><span class=\"string\">  opacity: 0;</span></span><br><span class=\"line\"><span class=\"string\">  transform: scale(0.8);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-close-btn&#123;</span></span><br><span class=\"line\"><span class=\"string\">  position: absolute;</span></span><br><span class=\"line\"><span class=\"string\">  right: 10px;</span></span><br><span class=\"line\"><span class=\"string\">  top: 3px;</span></span><br><span class=\"line\"><span class=\"string\">  cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">dir</span> =&gt;</span> path.resolve(__dirname, dir);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>, <span class=\"comment\">//定义webpack的入口文件</span></span><br><span class=\"line\">  output: &#123; <span class=\"comment\">//定义webpack的输出</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),  <span class=\"comment\">//输出路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'vue-message-plugin.js'</span>,  <span class=\"comment\">//输出文件名</span></span><br><span class=\"line\">    libraryTarget: <span class=\"string\">'umd'</span>, <span class=\"comment\">//把写的library打包成umd文件，把库暴露给当前使用的模块定义系统，同时适用commonJs 模块，AMD模块，也可以导出到 global 下的变量，library指定模块名或变量名</span></span><br><span class=\"line\">    library: <span class=\"string\">'vue-message-plugin'</span>,  <span class=\"comment\">//以库的形式导出入口文件</span></span><br><span class=\"line\">    umdNamedDefine: <span class=\"literal\">true</span> <span class=\"comment\">//在 UMD 库中使用命名的 AMD 模块</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123; <span class=\"comment\">//module选项决定了如何处理项目中的不同类型的模块</span></span><br><span class=\"line\">    rules: [  <span class=\"comment\">//array,创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)。</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">//rule条件：resource，请求文件的绝对路径。它已经根据 resolve 规则解析。（Rule.resource.test 的简写</span></span><br><span class=\"line\">        use: [  <span class=\"comment\">//应用于模块的 UseEntries 列表。每个入口(entry)指定使用一个 loader。</span></span><br><span class=\"line\">          <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">          <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          loaders: &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|svg)$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'[name].[ext]?[hash]'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;  <span class=\"comment\">//resolve选项能设置模块如何被解析</span></span><br><span class=\"line\">    alias: &#123;  <span class=\"comment\">//定义 import 或 require 的别名，来确保模块引入变得更简单</span></span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'@'</span>: resolve(<span class=\"string\">'src'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    extensions: [<span class=\"string\">'*'</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>, <span class=\"string\">'.json'</span>] <span class=\"comment\">//自动解析确定的扩展。能够使用户在引入模块时不带扩展</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">//当使用 HTML5 History API 时，任意的 404 响应都可能需要被替代为 index.html</span></span><br><span class=\"line\">    noInfo: <span class=\"literal\">true</span>, <span class=\"comment\">//启用 noInfo 后，「启动时和每次保存之后，那些显示的 webpack 包(bundle)信息」的消息将被隐藏。错误和警告仍然会显示。</span></span><br><span class=\"line\">    overlay: <span class=\"literal\">true</span>,  <span class=\"comment\">//出现编译器错误或警告时，在浏览器中显示全屏覆盖。</span></span><br><span class=\"line\">    open: <span class=\"literal\">true</span>, <span class=\"comment\">//自动打开浏览器</span></span><br><span class=\"line\">    port: <span class=\"number\">3100</span>, <span class=\"comment\">//设置端口</span></span><br><span class=\"line\">    hot: <span class=\"literal\">true</span> <span class=\"comment\">//启用热更新</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  performance: &#123;</span><br><span class=\"line\">    hints: <span class=\"literal\">false</span>  <span class=\"comment\">//关闭提示</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">'#eval-source-map'</span> <span class=\"comment\">//原始源代码生成 source map</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.devtool = <span class=\"string\">'#source-map'</span><span class=\"comment\">//原始源代码生成 source map</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.plugins = (<span class=\"built_in\">module</span>.exports.plugins || []).concat([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class=\"line\">      minimize: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(process.env.NODE_ENV === <span class=\"string\">'development'</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.devtool = <span class=\"string\">'#eval-source-map'</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.plugins = (<span class=\"built_in\">module</span>.exports.plugins || []).concat([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;  <span class=\"comment\">//插件：允许在编译时(compile time)配置的全局常量</span></span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"string\">'\"development\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123; <span class=\"comment\">//可以控制项目中 UglifyJS 的版本</span></span><br><span class=\"line\">      sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.LoaderOptionsPlugin(&#123; <span class=\"comment\">//用于从 webpack 1 迁移到 webpack 2</span></span><br><span class=\"line\">      minimize: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"comment\">//简单创建 HTML 文件，用于服务器访问</span></span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>  <span class=\"comment\">//注入打包的文件</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue-message-plugin\"><a href=\"#vue-message-plugin\" class=\"headerlink\" title=\"vue-message-plugin\"></a>vue-message-plugin</h2><ul>\n<li>一个基于 Vue.js 的消息插件，按照 ElementUI / message的接口实现</li>\n<li><a href=\"https://www.npmjs.com/package/vue-message-plugin\" target=\"_blank\" rel=\"noopener\">插件地址</a></li>\n<li><a href=\"https://github.com/scarsu/vue-message-plugin\" target=\"_blank\" rel=\"noopener\">源码地址</a></li>\n</ul>\n<p><img src=\"/images/vue-message-plugin.gif\" alt=\"vue-message-plugin预览\"></p>\n<h2 id=\"源码目录结构\"><a href=\"#源码目录结构\" class=\"headerlink\" title=\"源码目录结构\"></a>源码目录结构</h2><p><img src=\"/images/vue-message-plugin.png\" alt=\"vue-message-plugin源码目录结构\"></p>\n<h2 id=\"package-json配置\"><a href=\"#package-json配置\" class=\"headerlink\" title=\"package.json配置\"></a>package.json配置</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"vue-message-plugin\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"A message plugin based on Vue.js which works like ElementUI/Message.\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"scarsu &lt;scarsu001@gmail.com&gt;\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"private\"</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//用于公开发布</span></span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"dist/vue-message-plugin.js\"</span>,<span class=\"comment\">//npm引用入口</span></span><br><span class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;<span class=\"comment\">//仓库</span></span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://www.github.com/scarsu/vue-message-plugin\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"cross-env NODE_ENV=development webpack-dev-server --open --hot\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production webpack --progress --hide-modules\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"vue\"</span>: <span class=\"string\">\"^2.5.2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"toast\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"code\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue plugin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"message\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue-message-plugin\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.6.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-preset-stage-3\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"cross-env\"</span>: <span class=\"string\">\"^5.0.5\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^1.1.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^2.30.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue-loader\"</span>: <span class=\"string\">\"^13.0.5\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"vue-template-compiler\"</span>: <span class=\"string\">\"^2.4.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^3.6.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^2.9.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"engines\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"node\"</span>: <span class=\"string\">\"&gt;= 6.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"npm\"</span>: <span class=\"string\">\"&gt;= 3.0.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"browserslist\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"&gt; 1%\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"last 2 versions\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"not ie &lt;= 8\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"主应用-vue安装插件\"><a href=\"#主应用-vue安装插件\" class=\"headerlink\" title=\"主应用 vue安装插件\"></a>主应用 vue安装插件</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./lib'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\">Vue.use(Message)<span class=\"comment\">//Vue.use用于安装插件，插件中必须包含install方法，必须在创建根实例前安装插件</span></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  components: &#123; App &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">'&lt;App/&gt;'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-index-js\"><a href=\"#Message-index-js\" class=\"headerlink\" title=\"Message/index.js\"></a>Message/index.js</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Message <span class=\"keyword\">from</span> <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Message</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-src-main-js\"><a href=\"#Message-src-main-js\" class=\"headerlink\" title=\"Message/src/main.js\"></a>Message/src/main.js</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数 说明 类型 可选值 默认值</span></span><br><span class=\"line\"><span class=\"comment\"> * message 消息文字 string / VNode — —</span></span><br><span class=\"line\"><span class=\"comment\"> * type 主题 string success/warning/info/error info</span></span><br><span class=\"line\"><span class=\"comment\"> * dangerouslyUseHTMLString 是否将 message 属性作为 HTML 片段处理 boolean — false</span></span><br><span class=\"line\"><span class=\"comment\"> * customClass 自定义类名 string — —</span></span><br><span class=\"line\"><span class=\"comment\"> * duration 显示时间, 毫秒。设为 0 则不会自动关闭 number — 3000</span></span><br><span class=\"line\"><span class=\"comment\"> * showClose 是否显示关闭按钮 boolean — false</span></span><br><span class=\"line\"><span class=\"comment\"> * center 文字是否居中 boolean — false</span></span><br><span class=\"line\"><span class=\"comment\"> * onClose 关闭时的回调函数, 参数为被关闭的 message 实例 function — —</span></span><br><span class=\"line\"><span class=\"comment\"> * offset Message 距离窗口顶部的偏移量 number — 20</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用 Message 或 this.$msg 会返回当前 Message 的实例。如果需要手动关闭实例，可以调用它的 close 方法。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法名 说明</span></span><br><span class=\"line\"><span class=\"comment\"> * close 关闭当前的 Message</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> message <span class=\"keyword\">from</span> <span class=\"string\">'./main.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;isVNode&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于export的对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Message = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> instances = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> seed = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> types = &#123;</span><br><span class=\"line\">  success: <span class=\"string\">'success'</span>,</span><br><span class=\"line\">  info: <span class=\"string\">'info'</span>,</span><br><span class=\"line\">  warning: <span class=\"string\">'warning'</span>,</span><br><span class=\"line\">  error: <span class=\"string\">'error'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Vue插件必须包含install方法</span></span><br><span class=\"line\">Message.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Message = Vue.component(<span class=\"string\">'message'</span>, message)</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.prototype.$message = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> opt === <span class=\"string\">'string'</span> || isVNode(opt)) &#123;</span><br><span class=\"line\">      opt = &#123;<span class=\"attr\">message</span>: opt&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    opt.id = <span class=\"string\">'id'</span> + seed++</span><br><span class=\"line\">    opt.type = types[opt.type] || types.info</span><br><span class=\"line\">    opt.userOnClose = opt.onClose</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// message组件实例</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> instance = <span class=\"keyword\">new</span> Message(&#123;</span><br><span class=\"line\">      data: opt<span class=\"comment\">//将配置选项传入给实例的data</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//处理VNode类型message（使用$slots插槽分发数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isVNode(instance.message)) &#123;</span><br><span class=\"line\">      instance.$slots.default = [instance.message]</span><br><span class=\"line\">      instance.message = <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//挂载dom  并 实例的dom加入body中</span></span><br><span class=\"line\">    instance.$mount()</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.append(instance.$el)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// close方法</span></span><br><span class=\"line\">    instance.close = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.show = <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.userOnClose) <span class=\"keyword\">this</span>.userOnClose()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 显示</span></span><br><span class=\"line\">    instance.show = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定时隐藏</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> duration = opt.duration || <span class=\"number\">3000</span></span><br><span class=\"line\">    instance.timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      instance.close()</span><br><span class=\"line\">    &#125;, duration)</span><br><span class=\"line\"></span><br><span class=\"line\">    instances.push(instance)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回message组件实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Message</span><br></pre></td></tr></table></figure>\n<h2 id=\"isVNode方法\"><a href=\"#isVNode方法\" class=\"headerlink\" title=\"isVNode方法\"></a>isVNode方法</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isVNode</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//通过VNode必包含的属性componentOptions来判断</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!node &amp;&amp; <span class=\"keyword\">typeof</span> node === <span class=\"string\">'object'</span> &amp;&amp; node.hasOwnProperty(<span class=\"string\">'componentOptions'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-src-main-vue\"><a href=\"#Message-src-main-vue\" class=\"headerlink\" title=\"Message/src/main.vue\"></a>Message/src/main.vue</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\"> * 参数 说明 类型 可选值 默认值</span><br><span class=\"line\"> * message 消息文字 string / VNode — —</span><br><span class=\"line\"> * type 主题 string success/warning/info/error info</span><br><span class=\"line\"> * dangerouslyUseHTMLString 是否将 message 属性作为 HTML 片段处理 boolean — <span class=\"literal\">false</span></span><br><span class=\"line\"> * customClass 自定义类名 string — —</span><br><span class=\"line\"> * duration 显示时间, 毫秒。设为 <span class=\"number\">0</span> 则不会自动关闭 number — <span class=\"number\">3000</span></span><br><span class=\"line\"> * showClose 是否显示关闭按钮 boolean — <span class=\"literal\">false</span></span><br><span class=\"line\"> * center 文字是否居中 boolean — <span class=\"literal\">false</span></span><br><span class=\"line\"> * onClose 关闭时的回调函数, 参数为被关闭的 message 实例 <span class=\"function\"><span class=\"keyword\">function</span> — —</span></span><br><span class=\"line\"><span class=\"function\"> * <span class=\"title\">offset</span> <span class=\"title\">Message</span> 距离窗口顶部的偏移量 <span class=\"title\">number</span> — 20</span></span><br><span class=\"line\"><span class=\"function\"> *</span></span><br><span class=\"line\"><span class=\"function\"> * 调用 <span class=\"title\">Message</span> 或 <span class=\"title\">this</span>.<span class=\"title\">$msg</span> 会返回当前 <span class=\"title\">Message</span> 的实例。如果需要手动关闭实例，可以调用它的 <span class=\"title\">close</span> 方法。</span></span><br><span class=\"line\"><span class=\"function\"> *</span></span><br><span class=\"line\"><span class=\"function\"> * 方法名 说明</span></span><br><span class=\"line\"><span class=\"function\"> * <span class=\"title\">close</span> 关闭当前的 <span class=\"title\">Message</span></span></span><br><span class=\"line\"><span class=\"function\">--&gt;</span></span><br><span class=\"line\"><span class=\"function\">&lt;<span class=\"title\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"function\">  &lt;<span class=\"title\">transition</span> <span class=\"title\">name</span>=\"<span class=\"title\">message</span>-<span class=\"title\">fade</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"function\">      &lt;<span class=\"title\">div</span></span></span><br><span class=\"line\">        :class=\"[</span><br><span class=\"line\">          <span class=\"string\">'message'</span>,</span><br><span class=\"line\">          <span class=\"string\">`message-<span class=\"subst\">$&#123;type&#125;</span>`</span>,</span><br><span class=\"line\">          center?<span class=\"string\">'is-center'</span>:<span class=\"string\">''</span>,</span><br><span class=\"line\">          customClass]<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">          :style=\"</span>positionStyle<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">          @mouseenter=stopTimer</span></span><br><span class=\"line\"><span class=\"string\">          @mouseleave=startTimer</span></span><br><span class=\"line\"><span class=\"string\">          v-if=\"</span>show<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;slot&gt;//插槽分发v-html数据</span></span><br><span class=\"line\"><span class=\"string\">            &lt;span v-if=\"</span>message &amp;&amp; !dangerouslyUseHTMLString<span class=\"string\">\"&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div v-else v-html=\"</span>message<span class=\"string\">\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/slot&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;i v-if=\"</span>showClose<span class=\"string\">\" @click=\"</span>closeMsg<span class=\"string\">\" class=\"</span>message-close-btn<span class=\"string\">\"&gt;x&lt;/i&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/transition&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">export default&#123;</span></span><br><span class=\"line\"><span class=\"string\">  components: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">  data () &#123;  //message组件默认数据</span></span><br><span class=\"line\"><span class=\"string\">    return &#123;</span></span><br><span class=\"line\"><span class=\"string\">      message: '',</span></span><br><span class=\"line\"><span class=\"string\">      type: 'info',</span></span><br><span class=\"line\"><span class=\"string\">      dangerouslyUseHTMLString: false,</span></span><br><span class=\"line\"><span class=\"string\">      customClass: '',</span></span><br><span class=\"line\"><span class=\"string\">      showClose: false,</span></span><br><span class=\"line\"><span class=\"string\">      center: false,</span></span><br><span class=\"line\"><span class=\"string\">      onClose: null,</span></span><br><span class=\"line\"><span class=\"string\">      offset: 20,</span></span><br><span class=\"line\"><span class=\"string\">      show: false,</span></span><br><span class=\"line\"><span class=\"string\">      timer: null</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    positionStyle () &#123;</span></span><br><span class=\"line\"><span class=\"string\">      return `margin-top:$&#123;this.offset&#125;px`</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  watch: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">  created () &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">  mounted () &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    closeMsg () &#123;</span></span><br><span class=\"line\"><span class=\"string\">      this.close()</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    startTimer () &#123;</span></span><br><span class=\"line\"><span class=\"string\">      const _this = this</span></span><br><span class=\"line\"><span class=\"string\">      this.timer = setTimeout(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">        _this.close()</span></span><br><span class=\"line\"><span class=\"string\">      &#125;, _this.duration)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    stopTimer () &#123;</span></span><br><span class=\"line\"><span class=\"string\">      clearTimeout(this.timer)</span></span><br><span class=\"line\"><span class=\"string\">      this.timer = null</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;style scoped&gt;</span></span><br><span class=\"line\"><span class=\"string\">.message&#123;</span></span><br><span class=\"line\"><span class=\"string\">  position: relative;</span></span><br><span class=\"line\"><span class=\"string\">  margin-top: 15vh;</span></span><br><span class=\"line\"><span class=\"string\">  width: 30%;</span></span><br><span class=\"line\"><span class=\"string\">  margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"string\">  background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">  box-shadow: 0 1px 3px rgba(0,0,0,.3);</span></span><br><span class=\"line\"><span class=\"string\">  box-sizing: border-box;</span></span><br><span class=\"line\"><span class=\"string\">  min-width: 200px;</span></span><br><span class=\"line\"><span class=\"string\">  padding: 20px 40px;</span></span><br><span class=\"line\"><span class=\"string\">  border-radius: 10px;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.is-center&#123;</span></span><br><span class=\"line\"><span class=\"string\">  text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-success&#123;</span></span><br><span class=\"line\"><span class=\"string\">  background-color: #f0f9eb;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: #e1f3d8;</span></span><br><span class=\"line\"><span class=\"string\">  color: #67c23a;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-info&#123;</span></span><br><span class=\"line\"><span class=\"string\">  background-color: #edf2fc;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: #909399;</span></span><br><span class=\"line\"><span class=\"string\">  color: #909399;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-warning&#123;</span></span><br><span class=\"line\"><span class=\"string\">  background-color: #fdf6ec;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: #faecd8;</span></span><br><span class=\"line\"><span class=\"string\">  color: #e6a23c;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-error&#123;</span></span><br><span class=\"line\"><span class=\"string\">  background-color: #fef0f0;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: #fde2e2;</span></span><br><span class=\"line\"><span class=\"string\">  color: #f56c6c;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-fade-enter-active,</span></span><br><span class=\"line\"><span class=\"string\">.message-fade-leave-active &#123;</span></span><br><span class=\"line\"><span class=\"string\">  transition: all 0.1s ease-out;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-fade-enter-to &#123;</span></span><br><span class=\"line\"><span class=\"string\">  opacity: 1;</span></span><br><span class=\"line\"><span class=\"string\">  transform: scale(1.2);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-fade-leave-to &#123;</span></span><br><span class=\"line\"><span class=\"string\">  opacity: 0;</span></span><br><span class=\"line\"><span class=\"string\">  transform: scale(0.8);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.message-close-btn&#123;</span></span><br><span class=\"line\"><span class=\"string\">  position: absolute;</span></span><br><span class=\"line\"><span class=\"string\">  right: 10px;</span></span><br><span class=\"line\"><span class=\"string\">  top: 3px;</span></span><br><span class=\"line\"><span class=\"string\">  cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">dir</span> =&gt;</span> path.resolve(__dirname, dir);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>, <span class=\"comment\">//定义webpack的入口文件</span></span><br><span class=\"line\">  output: &#123; <span class=\"comment\">//定义webpack的输出</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),  <span class=\"comment\">//输出路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'vue-message-plugin.js'</span>,  <span class=\"comment\">//输出文件名</span></span><br><span class=\"line\">    libraryTarget: <span class=\"string\">'umd'</span>, <span class=\"comment\">//把写的library打包成umd文件，把库暴露给当前使用的模块定义系统，同时适用commonJs 模块，AMD模块，也可以导出到 global 下的变量，library指定模块名或变量名</span></span><br><span class=\"line\">    library: <span class=\"string\">'vue-message-plugin'</span>,  <span class=\"comment\">//以库的形式导出入口文件</span></span><br><span class=\"line\">    umdNamedDefine: <span class=\"literal\">true</span> <span class=\"comment\">//在 UMD 库中使用命名的 AMD 模块</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123; <span class=\"comment\">//module选项决定了如何处理项目中的不同类型的模块</span></span><br><span class=\"line\">    rules: [  <span class=\"comment\">//array,创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)。</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>, <span class=\"comment\">//rule条件：resource，请求文件的绝对路径。它已经根据 resolve 规则解析。（Rule.resource.test 的简写</span></span><br><span class=\"line\">        use: [  <span class=\"comment\">//应用于模块的 UseEntries 列表。每个入口(entry)指定使用一个 loader。</span></span><br><span class=\"line\">          <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">          <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          loaders: &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|svg)$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'[name].[ext]?[hash]'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;  <span class=\"comment\">//resolve选项能设置模块如何被解析</span></span><br><span class=\"line\">    alias: &#123;  <span class=\"comment\">//定义 import 或 require 的别名，来确保模块引入变得更简单</span></span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'@'</span>: resolve(<span class=\"string\">'src'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    extensions: [<span class=\"string\">'*'</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>, <span class=\"string\">'.json'</span>] <span class=\"comment\">//自动解析确定的扩展。能够使用户在引入模块时不带扩展</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">//当使用 HTML5 History API 时，任意的 404 响应都可能需要被替代为 index.html</span></span><br><span class=\"line\">    noInfo: <span class=\"literal\">true</span>, <span class=\"comment\">//启用 noInfo 后，「启动时和每次保存之后，那些显示的 webpack 包(bundle)信息」的消息将被隐藏。错误和警告仍然会显示。</span></span><br><span class=\"line\">    overlay: <span class=\"literal\">true</span>,  <span class=\"comment\">//出现编译器错误或警告时，在浏览器中显示全屏覆盖。</span></span><br><span class=\"line\">    open: <span class=\"literal\">true</span>, <span class=\"comment\">//自动打开浏览器</span></span><br><span class=\"line\">    port: <span class=\"number\">3100</span>, <span class=\"comment\">//设置端口</span></span><br><span class=\"line\">    hot: <span class=\"literal\">true</span> <span class=\"comment\">//启用热更新</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  performance: &#123;</span><br><span class=\"line\">    hints: <span class=\"literal\">false</span>  <span class=\"comment\">//关闭提示</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">'#eval-source-map'</span> <span class=\"comment\">//原始源代码生成 source map</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.devtool = <span class=\"string\">'#source-map'</span><span class=\"comment\">//原始源代码生成 source map</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.plugins = (<span class=\"built_in\">module</span>.exports.plugins || []).concat([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class=\"line\">      minimize: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(process.env.NODE_ENV === <span class=\"string\">'development'</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.devtool = <span class=\"string\">'#eval-source-map'</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.plugins = (<span class=\"built_in\">module</span>.exports.plugins || []).concat([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;  <span class=\"comment\">//插件：允许在编译时(compile time)配置的全局常量</span></span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"string\">'\"development\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123; <span class=\"comment\">//可以控制项目中 UglifyJS 的版本</span></span><br><span class=\"line\">      sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.LoaderOptionsPlugin(&#123; <span class=\"comment\">//用于从 webpack 1 迁移到 webpack 2</span></span><br><span class=\"line\">      minimize: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"comment\">//简单创建 HTML 文件，用于服务器访问</span></span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>  <span class=\"comment\">//注入打包的文件</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Devtools 入门","date":"2020-02-15T16:00:00.000Z","description":"Devtools新手请看这篇，入门大全～","toc":1,"top":0,"_content":"# \n\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   [进阶系列文链接](https://doc.scarsu.com/devtools/devtools_01_intro.html)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   参考 ：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n\n## Chrome相关介绍\n#### Chromium\n    是谷歌的开源项目，由开源社区维护。\n    \n    国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n    \n    我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n    \n    Chromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n    \n    几乎每天都在进行更新;\n    \n#### Chrome\n    基于 Chromium，但是它是闭源的！\n    所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n    \n    支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n    \n    Chrome 内置了 Flash，Chromium 需要额外安装\n    \n    据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n    \n    集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n    \n#### Dev Canary Stable Beta\n    是Chrome的四个版本\n    \n    Stable 稳定版（几月一次更新）\n    Beta 测试版（1 月一次更新）\n    Dev 开发者版（1 星期一次更新）\n    Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n    \n    新版发布速度递增\n    新功能数量递增\n    稳定性递减\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)；\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n-   开发者版 chrome - [Canary - 开发者专用的每周更新版](https://www.google.cn/chrome/dev/)\n\n## Elements 面板\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](https://i.loli.net/2019/06/03/5cf4a9da59be527769.png)\n\n### Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n### Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n### DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](https://i.loli.net/2019/06/03/5cf4aa13906d615289.png)\n\n在 DOM 树中可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](https://i.loli.net/2019/06/03/5cf4aa2c66c6183499.png)\n\n### Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](https://i.loli.net/2019/06/03/5cf4aa3edd33430557.png)\n\n### color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n### Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](https://i.loli.net/2019/06/03/5cf4aa5b8838377487.png)\n\n### Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](https://i.loli.net/2019/06/13/5d01e076e584425630.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n### DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](https://i.loli.net/2019/06/03/5cf4aa7a33a2334307.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](https://i.loli.net/2019/06/03/5cf4aa879865e17312.png)\n\n## Console 面板\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](https://i.loli.net/2019/06/03/5cf4aaa5f1e3422250.png)\n\n### message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](https://i.loli.net/2019/06/03/5cf4aab869c8a85783.png)\n\n### javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n### 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](https://i.loli.net/2019/06/03/5cf4aac95398455074.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n### console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](https://i.loli.net/2019/06/03/5cf4aadf0381221831.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](https://i.loli.net/2019/06/03/5cf4aae17ead896661.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](https://i.loli.net/2019/06/03/5cf4aae3f1a0221583.gif)\n\n### console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](https://i.loli.net/2019/06/03/5cf4ab4d3e91911373.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](https://i.loli.net/2019/06/03/5cf4ab5e5d30e65867.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](https://i.loli.net/2019/06/03/5cf4ab71e90e874049.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](https://i.loli.net/2019/06/03/5cf4ab744d6a089649.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](https://i.loli.net/2019/06/03/5cf4ab8a6b20972501.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](https://i.loli.net/2019/06/03/5cf4ab9c55a3f55468.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](https://i.loli.net/2019/06/03/5cf4ab9eaba5f43869.png)\n\n## Sources 源文件面板\n\n在 Sources 面板你可以：\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n### 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4eeebeb78835989.gif)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abbb04c6c25181.gif)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abc790a6244461.gif)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abc8c9efb50152.png)\n6. Exception 异常断点\n\n    ![0](https://i.loli.net/2019/06/03/5cf4abca96ac072660.png)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](https://i.loli.net/2019/06/03/5cf4abeb2a86948381.gif)\n\n### Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](https://i.loli.net/2019/06/03/5cf4abfcc126341109.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](https://i.loli.net/2019/06/03/5cf4ac0980d1016641.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](https://i.loli.net/2019/06/03/5cf4ac1b7a4e440822.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](https://i.loli.net/2019/06/03/5cf4ac3a7458f65851.png)\n\n-   Continue to here：继续执行至此行\n\n![0](https://i.loli.net/2019/06/03/5cf4ac4622fe745522.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](https://i.loli.net/2019/06/03/5cf4ac556cc2358478.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n### Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有 sources 面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n\n## Network 面板\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n### 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n### 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n### 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n### Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n## Performance 性能面板\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Janky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n### RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n### 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n### FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n### CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n### SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n### HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n### Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n### Main\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n### 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n","source":"_posts/devtools_rookie_intro.md","raw":"---\ntitle: Devtools 入门\ncategories:\n    - 10技术 | 前端Debug老司机 # 一级分类\ntags:\ndate: 2020-02-16\ndescription: Devtools新手请看这篇，入门大全～\ntoc: 1\ntop: 0\n---\n# \n\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   [进阶系列文链接](https://doc.scarsu.com/devtools/devtools_01_intro.html)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   参考 ：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n\n## Chrome相关介绍\n#### Chromium\n    是谷歌的开源项目，由开源社区维护。\n    \n    国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n    \n    我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n    \n    Chromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n    \n    几乎每天都在进行更新;\n    \n#### Chrome\n    基于 Chromium，但是它是闭源的！\n    所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n    \n    支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n    \n    Chrome 内置了 Flash，Chromium 需要额外安装\n    \n    据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n    \n    集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n    \n#### Dev Canary Stable Beta\n    是Chrome的四个版本\n    \n    Stable 稳定版（几月一次更新）\n    Beta 测试版（1 月一次更新）\n    Dev 开发者版（1 星期一次更新）\n    Canary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n    \n    新版发布速度递增\n    新功能数量递增\n    稳定性递减\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)；\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n-   开发者版 chrome - [Canary - 开发者专用的每周更新版](https://www.google.cn/chrome/dev/)\n\n## Elements 面板\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](https://i.loli.net/2019/06/03/5cf4a9da59be527769.png)\n\n### Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n### Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n### DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](https://i.loli.net/2019/06/03/5cf4aa13906d615289.png)\n\n在 DOM 树中可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](https://i.loli.net/2019/06/03/5cf4aa2c66c6183499.png)\n\n### Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](https://i.loli.net/2019/06/03/5cf4aa3edd33430557.png)\n\n### color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n### Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](https://i.loli.net/2019/06/03/5cf4aa5b8838377487.png)\n\n### Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](https://i.loli.net/2019/06/13/5d01e076e584425630.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n### DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](https://i.loli.net/2019/06/03/5cf4aa7a33a2334307.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](https://i.loli.net/2019/06/03/5cf4aa879865e17312.png)\n\n## Console 面板\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](https://i.loli.net/2019/06/03/5cf4aaa5f1e3422250.png)\n\n### message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](https://i.loli.net/2019/06/03/5cf4aab869c8a85783.png)\n\n### javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n### 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](https://i.loli.net/2019/06/03/5cf4aac95398455074.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n### console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](https://i.loli.net/2019/06/03/5cf4aadf0381221831.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](https://i.loli.net/2019/06/03/5cf4aae17ead896661.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](https://i.loli.net/2019/06/03/5cf4aae3f1a0221583.gif)\n\n### console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](https://i.loli.net/2019/06/03/5cf4ab4d3e91911373.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](https://i.loli.net/2019/06/03/5cf4ab5e5d30e65867.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](https://i.loli.net/2019/06/03/5cf4ab71e90e874049.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](https://i.loli.net/2019/06/03/5cf4ab744d6a089649.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](https://i.loli.net/2019/06/03/5cf4ab8a6b20972501.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](https://i.loli.net/2019/06/03/5cf4ab9c55a3f55468.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](https://i.loli.net/2019/06/03/5cf4ab9eaba5f43869.png)\n\n## Sources 源文件面板\n\n在 Sources 面板你可以：\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n### 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4eeebeb78835989.gif)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abbb04c6c25181.gif)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abc790a6244461.gif)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](https://i.loli.net/2019/06/03/5cf4abc8c9efb50152.png)\n6. Exception 异常断点\n\n    ![0](https://i.loli.net/2019/06/03/5cf4abca96ac072660.png)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](https://i.loli.net/2019/06/03/5cf4abeb2a86948381.gif)\n\n### Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](https://i.loli.net/2019/06/03/5cf4abfcc126341109.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](https://i.loli.net/2019/06/03/5cf4ac0980d1016641.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](https://i.loli.net/2019/06/03/5cf4ac1b7a4e440822.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](https://i.loli.net/2019/06/03/5cf4ac3a7458f65851.png)\n\n-   Continue to here：继续执行至此行\n\n![0](https://i.loli.net/2019/06/03/5cf4ac4622fe745522.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](https://i.loli.net/2019/06/03/5cf4ac556cc2358478.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n### Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有 sources 面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n\n## Network 面板\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n### 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n### 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n### 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n### Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n## Performance 性能面板\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Janky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n### RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n### 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n### FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n### CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n### SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n### HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n### Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n### Main\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n### 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n","slug":"devtools_rookie_intro","published":1,"updated":"2020-09-03T07:01:27.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88jfh005rc8y6wbv4fi7u","content":"<p># </p>\n<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li><a href=\"https://doc.scarsu.com/devtools/devtools_01_intro.html\" target=\"_blank\" rel=\"noopener\">进阶系列文链接</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>参考 ：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome相关介绍\"><a href=\"#Chrome相关介绍\" class=\"headerlink\" title=\"Chrome相关介绍\"></a>Chrome相关介绍</h2><h4 id=\"Chromium\"><a href=\"#Chromium\" class=\"headerlink\" title=\"Chromium\"></a>Chromium</h4><pre><code>是谷歌的开源项目，由开源社区维护。\n\n国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n\n我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n\nChromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n\n几乎每天都在进行更新;\n</code></pre><h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><pre><code>基于 Chromium，但是它是闭源的！\n所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n\n支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n\nChrome 内置了 Flash，Chromium 需要额外安装\n\n据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n\n集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n</code></pre><h4 id=\"Dev-Canary-Stable-Beta\"><a href=\"#Dev-Canary-Stable-Beta\" class=\"headerlink\" title=\"Dev Canary Stable Beta\"></a>Dev Canary Stable Beta</h4><pre><code>是Chrome的四个版本\n\nStable 稳定版（几月一次更新）\nBeta 测试版（1 月一次更新）\nDev 开发者版（1 星期一次更新）\nCanary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n\n新版发布速度递增\n新功能数量递增\n稳定性递减\n</code></pre><h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\">；</p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n<li>开发者版 chrome - <a href=\"https://www.google.cn/chrome/dev/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每周更新版</a></li>\n</ul>\n<h2 id=\"Elements-面板\"><a href=\"#Elements-面板\" class=\"headerlink\" title=\"Elements 面板\"></a>Elements 面板</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4a9da59be527769.png\" alt=\"Elements 面板\"></p>\n<h3 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h3><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h3 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h3><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h3 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h3><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"https://i.loli.net/2019/06/03/5cf4aa13906d615289.png\" alt=\"0\"></p>\n<p>在 DOM 树中可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa2c66c6183499.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h3 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h3><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa3edd33430557.png\" alt=\"0\"></p>\n<h3 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h3><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h3><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa5b8838377487.png\" alt=\"0\"></p>\n<h3 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h3><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/13/5d01e076e584425630.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h3 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h3><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa7a33a2334307.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"https://i.loli.net/2019/06/03/5cf4aa879865e17312.png\" alt=\"0\"></p>\n<h2 id=\"Console-面板\"><a href=\"#Console-面板\" class=\"headerlink\" title=\"Console 面板\"></a>Console 面板</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"https://i.loli.net/2019/06/03/5cf4aaa5f1e3422250.png\" alt=\"0\"></p>\n<h3 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h3><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aab869c8a85783.png\" alt=\"0\"></p>\n<h3 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h3><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h3 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h3><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aac95398455074.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<h3 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h3><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"https://i.loli.net/2019/06/03/5cf4aadf0381221831.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"https://i.loli.net/2019/06/03/5cf4aae17ead896661.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"https://i.loli.net/2019/06/03/5cf4aae3f1a0221583.gif\" alt=\"0\"></li>\n</ul>\n<h3 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h3><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab4d3e91911373.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab5e5d30e65867.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab71e90e874049.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab744d6a089649.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab8a6b20972501.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab9c55a3f55468.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab9eaba5f43869.png\" alt=\"0\"></li>\n</ul>\n<h2 id=\"Sources-源文件面板\"><a href=\"#Sources-源文件面板\" class=\"headerlink\" title=\"Sources 源文件面板\"></a>Sources 源文件面板</h2><p>在 Sources 面板你可以：</p>\n<ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<h3 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h3><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4eeebeb78835989.gif\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abbb04c6c25181.gif\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abc790a6244461.gif\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abc8c9efb50152.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abca96ac072660.png\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abeb2a86948381.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h3 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h3><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4abfcc126341109.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac0980d1016641.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac1b7a4e440822.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac3a7458f65851.png\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac4622fe745522.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac556cc2358478.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h3 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h3><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有 sources 面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h2 id=\"Network-面板\"><a href=\"#Network-面板\" class=\"headerlink\" title=\"Network 面板\"></a>Network 面板</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h3 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h3><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h3 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h3><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h3 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h3><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h3 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h3><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h2 id=\"Performance-性能面板\"><a href=\"#Performance-性能面板\" class=\"headerlink\" title=\"Performance 性能面板\"></a>Performance 性能面板</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Janky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h3 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h3 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h3><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h3 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h3 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h3 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h3><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h3 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h3 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h3><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h3 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h3><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h3 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p># </p>\n<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li><a href=\"https://doc.scarsu.com/devtools/devtools_01_intro.html\" target=\"_blank\" rel=\"noopener\">进阶系列文链接</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>参考 ：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome相关介绍\"><a href=\"#Chrome相关介绍\" class=\"headerlink\" title=\"Chrome相关介绍\"></a>Chrome相关介绍</h2><h4 id=\"Chromium\"><a href=\"#Chromium\" class=\"headerlink\" title=\"Chromium\"></a>Chromium</h4><pre><code>是谷歌的开源项目，由开源社区维护。\n\n国产的所有 “双核浏览器”，都是基于 Chromium 开发的，甚至 Chrome 也是基于它。\n\n我们下载的 Chromium 浏览器都是其源码未经修改的直接编译版本。\n\nChromium 的内核版本比 Chrome 明显领先，新的技术都是先在 Chromium 上应用。\n\n几乎每天都在进行更新;\n</code></pre><h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><pre><code>基于 Chromium，但是它是闭源的！\n所以有这样的一种说法：谷歌把核心技术都保留在了之家的 Chrome 中。\n\n支持了一些商业的收费插件，这些是不会出现在开源软件中的： H.264编码、mp3编码\n\nChrome 内置了 Flash，Chromium 需要额外安装\n\n据说?在网页渲染方面 Chrome 也悄悄有一些特别的优化。\n\n集成了更多的谷歌服务（RanBinNuan），同时也有更多的限制，比如目前使用 Chrome 需要一定手段才能安装非商店的扩展，一旦被发现还会永远禁用，但 Chromium 就没有这些限制！\n</code></pre><h4 id=\"Dev-Canary-Stable-Beta\"><a href=\"#Dev-Canary-Stable-Beta\" class=\"headerlink\" title=\"Dev Canary Stable Beta\"></a>Dev Canary Stable Beta</h4><pre><code>是Chrome的四个版本\n\nStable 稳定版（几月一次更新）\nBeta 测试版（1 月一次更新）\nDev 开发者版（1 星期一次更新）\nCanary 金丝雀版（脚步几乎同步 Chromium，天天更新）图标采用了特别的土豪金版神奇宝贝球。\n\n新版发布速度递增\n新功能数量递增\n稳定性递减\n</code></pre><h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\">；</p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n<li>开发者版 chrome - <a href=\"https://www.google.cn/chrome/dev/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每周更新版</a></li>\n</ul>\n<h2 id=\"Elements-面板\"><a href=\"#Elements-面板\" class=\"headerlink\" title=\"Elements 面板\"></a>Elements 面板</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4a9da59be527769.png\" alt=\"Elements 面板\"></p>\n<h3 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h3><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h3 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h3><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h3 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h3><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"https://i.loli.net/2019/06/03/5cf4aa13906d615289.png\" alt=\"0\"></p>\n<p>在 DOM 树中可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa2c66c6183499.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h3 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h3><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa3edd33430557.png\" alt=\"0\"></p>\n<h3 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h3><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h3><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa5b8838377487.png\" alt=\"0\"></p>\n<h3 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h3><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/13/5d01e076e584425630.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h3 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h3><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aa7a33a2334307.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"https://i.loli.net/2019/06/03/5cf4aa879865e17312.png\" alt=\"0\"></p>\n<h2 id=\"Console-面板\"><a href=\"#Console-面板\" class=\"headerlink\" title=\"Console 面板\"></a>Console 面板</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"https://i.loli.net/2019/06/03/5cf4aaa5f1e3422250.png\" alt=\"0\"></p>\n<h3 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h3><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aab869c8a85783.png\" alt=\"0\"></p>\n<h3 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h3><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h3 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h3><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4aac95398455074.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<h3 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h3><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"https://i.loli.net/2019/06/03/5cf4aadf0381221831.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"https://i.loli.net/2019/06/03/5cf4aae17ead896661.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"https://i.loli.net/2019/06/03/5cf4aae3f1a0221583.gif\" alt=\"0\"></li>\n</ul>\n<h3 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h3><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab4d3e91911373.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab5e5d30e65867.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab71e90e874049.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab744d6a089649.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab8a6b20972501.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab9c55a3f55468.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"https://i.loli.net/2019/06/03/5cf4ab9eaba5f43869.png\" alt=\"0\"></li>\n</ul>\n<h2 id=\"Sources-源文件面板\"><a href=\"#Sources-源文件面板\" class=\"headerlink\" title=\"Sources 源文件面板\"></a>Sources 源文件面板</h2><p>在 Sources 面板你可以：</p>\n<ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<h3 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h3><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4eeebeb78835989.gif\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abbb04c6c25181.gif\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abc790a6244461.gif\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abc8c9efb50152.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abca96ac072660.png\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://i.loli.net/2019/06/03/5cf4abeb2a86948381.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h3 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h3><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4abfcc126341109.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac0980d1016641.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac1b7a4e440822.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac3a7458f65851.png\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac4622fe745522.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/03/5cf4ac556cc2358478.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h3 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h3><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有 sources 面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h2 id=\"Network-面板\"><a href=\"#Network-面板\" class=\"headerlink\" title=\"Network 面板\"></a>Network 面板</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h3 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h3><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h3 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h3><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h3 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h3><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h3 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h3><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h2 id=\"Performance-性能面板\"><a href=\"#Performance-性能面板\" class=\"headerlink\" title=\"Performance 性能面板\"></a>Performance 性能面板</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Janky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h3 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h3 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h3><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h3 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h3 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h3 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h3><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h3 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h3 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h3><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h3 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h3><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h3 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n"},{"title":"【Vue】Vue状态管理 & Vuex总结","date":"2020-04-29T16:00:00.000Z","description":"多组件下 共享状态 的解决方案","toc":1,"top":0,"status":"Done","img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211233730.png","_content":"# Vue状态管理 & Vuex\n\n### 单向数据流\n\n- **state：**驱动应用的数据源；\n- **view：**以声明方式将 **state** 映射到视图；\n- **actions：**响应在 **view** 上的用户输入导致的state变化。\n\n![](/images/vuex1.png)\n\n### 多组件共享状态的需求：\n\n- 多个视图依赖于同一状态：传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力\n- 来自不同视图的行为需要**变更同一状态**：父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码\n\n（共享状态，不仅仅是多组件**读取**同一状态，也包含多组件**变更**同一状态）\n\n## 基于state的简单状态管理\n\n- 在vue实例外的作用域，定义一个state对象，作为共享状态\n\n```jsx\nlet publicState = {}\nlet vm1 = new Vue({\n  name: 'vm1',\n  data: publicState\n})\nlet vm2 = new Vue({\n  name: 'vm2',\n  data: publicState\n})\n```\n\n- 简单的store模式\n\n```jsx\nlet store={\n  state:{\n    a:''\n  },\n  setStateA(){},\n  clearStateA(){},\n}\n\n//把store.state放在vue实例的data里\n\nlet vm1 = new Vue({\n  name:'vm1',\n  data:{\n    privateState:{}, //组件的私有状态\n    publicState:store.state //实例外的共有状态\n  }\n})\n\nlet vm2 = new Vue({\n  name:'vm2',\n  data:{\n    privateState:{},\n    publicState:store.state\n  }\n})\n```\n\n组件们可以共享store中的状态，也可以通过actions变更状态\n\n因为共享状态放在组件的data里，store变化也会驱动组件view变更\n\n![](/images/vuex2.png)\n\n## Vuex基本思想\n\n把组件的共享状态抽取出来，以一个全局单例模式管理\n\n在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为\n\n通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。\n\n![](/images/vuex3.png)\n\n## Vuex的使用&子组件注入\n\nsrc/store/index.js\n\n```jsx\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    },\n    decrement (state) {\n      state.count--\n    }\n  }\n})\n```\n\n/src/main.js\n\n```jsx\nimport Vue from 'vue'\nimport store from '@/store'\nimport router from '@/router'\nimport App from '@/App'\n\n// store作为选项传入根组件，是将$store注入所有子组件\n// 子组件都可以通过this.$store访问全局store\n\n// eslint-disable-next-line no-new\nnew Vue({\n  el: '#app',\n  store,\n  router,\n  render: h => h(App)\n})\n```\n\n## Vuex的核心思想一：state\n\nVuex 使用单一状态树——用一个对象（store）就包含了全部的应用层级状态。\n\n至此它便作为一个“唯一数据源 (SSOT)”而存在。\n\n这也意味着，每个应用将仅仅包含一个 store 实例。\n\n单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。\n\n### 子组件获取state & mapState辅助函数\n\n/src/page/home.vue\n\n```jsx\n <template>\n  <div id=\"home\">\n    <div>count：{{count}}</div>\n    <div>count1：{{count1}}</div>\n    <div>count3：{{count3}}</div>\n    <div>count4：{{count4}}</div>\n    <div>count5：{{count5}}</div>\n    <button @click=\"increment\">+</button>\n    <button @click=\"decrement\">-</button>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nexport default {\n  name: 'home',\n  data () {\n    return {\n      message: 'hello',\n      localCount: 1\n    }\n  },\n  computed: {\n    // 方式1：直接从Vue原型链上获取$store\n    count1 () {\n      return this.$store.state.count\n    },\n    // 方式2：mapState方法传状态名数组\n    ...mapState(['count']),\n    ...mapState({\n      // 方式3：mapState传对象，键为状态别名，值为状态名\n      count3: 'count',\n      // 方式4：mapState传对象，键为getter函数，参数是state，值为箭头函数\n      count4: state => state.count,\n      // 方式5：mapState传对象，键为getter函数，参数是state，值为普通函数（因为要再函数体内用this）\n      count5 (state) {\n        return this.localCount + state.count\n      }\n    })\n  },\n  methods: {\n    increment () {\n      this.$store.commit('increment')\n    },\n    decrement () {\n      this.$store.commit('decrement')\n    }\n  }\n}\n</script>\n```\n\n## Vuex核心思想二：getter\n\n### 派生状态\n\n类似于vue组件的计算属性，可以从store的state中派生出一些状态\n\n```jsx\nexport default new Vuex.Store({\n  state: {\n    todos: [\n      { id: 1, desc: 'test1', done: false },\n      { id: 2, desc: 'test2', done: true },\n      { id: 3, desc: 'test3', done: false }\n    ]\n  },\n  getters: {\n\t\t//getter中可以接受其他getter作为参数\n    maxTodoId (state,getters) {\n      return state.todos.sort((a, b) => { return b.id - a.id })[0].id\n    },\n    doneTodoCount (state) {\n      return state.todos.filter(todo => todo.done === true).length\n    }\n  }\n})\n```\n\n### 通过this.$store.state.getters属性 / mapGetters访问派生状态\n\n```jsx\ncomputed: {\n  ...mapGetters(['doneTodoCount']),\n  doneTodoCount2 () {\n    return this.$store.getters.doneTodoCount\n  }\n},\n```\n\n### getter传参：让getter返回函数\n\n```jsx\ngetters: {\n  getTodoBySearch: (state) => (s) => {\n    return state.todos.filter(todo => {\n      return (todo.id + todo.desc).indexOf(s) >= 0\n    })\n  }\n}\n```\n\n## Vuex核心思想三：mutation\n\n### 提交mutation\n\n组件不能直接更改Vuex store中的状态，而是要提交(commit)变更(mutations)\n\n```jsx\nexport default {\n  name: 'home',\n  data () {\n    return {\n    }\n  },\n  methods: {\n    addTodo (e) {\n      if (e.keyCode === 13 && this.model.desc) {\n        this.$store.commit('addTodo', this.model.desc)\n        this.model.desc = ''\n      }\n    }\n  }\n}\n\n```\n\n其中**addTodo**就是在store的mutation中定义的一种变更：\n\n```jsx\nmutations: {\n  addTodo (state, desc) {\n    const maxTodoId = state.todos.sort((a, b) => { return b.id - a.id })[0].id\n    const todo = {\n      desc,\n      id: maxTodoId + 1,\n      done: false\n    }\n    state.todos.push(todo)\n  }\n}\n```\n\n### **提交载荷（Payload）**\n\n可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：\n\n```jsx\n// src/store/index.js\nmutations: {\n  increment (state, payload) {\n    \n  }\n}\n\n// src/page/home.vue\nlet payload={a:1,b:2}\nstore.commit('increment', payload)\n```\n\n### Mutation 需遵守 Vue 的响应规则\n\nVuex 的 store 中的状态是响应式的，\n\n当我们变更状态时，\n\n监视状态的 Vue 组件也会自动更新,\n\n因此 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项\n\n1. 最好提前在你的 store 中初始化好所有所需属性。\n2. 当需要在对象上添加新属性时，应该\n    - 使用 `Vue.set(obj, 'newProp', 123)`\n    - 以新对象替换老对象。例如，利用**[对象展开运算符](https://github.com/tc39/proposal-object-rest-spread)**：\n\n    ```jsx\n    state.obj = { ...state.obj, newProp: 123 }\n    ```\n\n### 使用常量替代 Mutation 事件类型\n\n```jsx\n// mutation-types.js\nexport const SOME_MUTATION = 'SOME_MUTATION'\n\n// store.js\nimport Vuex from 'vuex'\nimport { SOME_MUTATION } from './mutation-types'\n\nconst store = new Vuex.Store({\n  state: { ... },\n  mutations: {\n    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名\n    [SOME_MUTATION] (state) {\n      // mutate state\n    }\n  }\n})\n```\n\n### Mutation 必须是同步函数\n\ndevtools捕捉会mutations记录，每次记录前一状态+后一状态的快照\n\n如果mutation里是异步的函数，很可能快照捕捉时，状态还未更改\n\n在回调函数中进行的状态的改变都是不可追踪的\n\n因此很**不利于调试**\n\n## Vuex核心思想四：Action\n\n### Action与Mutation类似，不同点：\n\n- Action 提交(commit)的是 mutation，而**不是直接变更状态**。\n- Action 可以包含任意**异步**操作。\n\n### action函数的定义\n\n```jsx\n//...\nactions: {\n  addTodo (context) {\n    // 可以通过context参数去调用commit，获取state和getters\n    // context区别于state（module中会讲到\n    setTimeout(() => {\n      context.commit('addTodo')\n      // context.state\n      // context.getters\n    }, 1000)\n  },\n  addTodo2 ({ commit, state, getters }) {\n    // 也可以直接用参数解构的方法获取commit，state，getters\n    setTimeout(() => {\n      commit('addTodo')\n    }, 1000)\n  }\n}\n//...\n```\n\n### 组件分发action（可以带载荷/参数\n\n```jsx\nmethods: {\n  addTodo (e) {\n    this.$store.dispatch('addTodo', payload)\n    this.$store.dispatch({\n      type: 'addTodo',\n      ...payload\n    })\n  }\n}\n\n//action接收payload参数\n//action内部也可以dispatch其他action\nactions: {\n  addTodo2 ({ commit, state, getters, dispatch }, payload) {\n    // 也可以直接用参数解构的方法获取commit，state，getters\n    setTimeout(() => {\n      commit('addTodo')\n\t\t\t//dispatch\n    }, 1000)\n  }\n}\n```\n\n### 组合action\n\n- action可以返回一个promise函数\n\n```jsx\nactions: {\n  actionA ({ commit }) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        commit('someMutation')\n        resolve()\n      }, 1000)\n    })\n  }\n}\n```\n\n- dispatch可以处理action返回的promise，并仍然返回promise\n\n```jsx\nstore.dispatch('actionA').then(() => {\n  // ...\n})\n```\n\n- 利用await/async编写组合action更加简洁\n\n```jsx\n// 假设 getData() 和 getOtherData() 返回的是 Promise\n\nactions: {\n  async actionA ({ commit }) {\n    commit('gotData', await getData())\n  },\n  async actionB ({ commit, dispatch }) {\n    await dispatch('actionA')\n    commit('gotOtherData', await getOtherData())\n  }\n}\n```\n\n## Vuex核心思想五：Module\n\n当应用较复杂时，应用所有状态集中在一个(store)对象上很臃肿\n\n因此Vuex允许将store按模块来划分，\n\n每个store拥有自己的state、getter、mutations、actions、子模块\n\n```jsx\n// src/store/module/moduleA.js\nexport default {\n  state: {},\n  getter: {},\n  mutations: {},\n  actions: {}\n}\n\n// src/store/index.js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport moduleA from 'module/moduleA'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  modules: {\n    a: moduleA\n  },\n\t...\n})\n```\n\n### 模块内的局部状态state（getter mutation action获取state\n\n**对于模块内的getter、mutation函数**：\n\n接收的第一个参数：state，指向的是模块内的局部状态\n\ngetter函数接收的**第三个**参数是根节点状态：**rootState**\n\n**对于模块内的action函数:**\n\ncontext.state指向的也是模块的局部状态，根节点的状态为**context.rootState**\n\n### 全局命名空间（组件获取getter mutation action\n\n默认情况：模块内部的 action、mutation 和 getter 是注册在**全局命名空间**的——这样使得多个模块能够对同一 mutation 或 action 作出响应。\n\n### 带命名空间的模块\n\n如果希望你的模块具有更高的**封装度和复用性**，你可以通过添加 **namespaced: true** 的方式使其成为带命名空间的模块。\n\n```jsx\nconst store = new Vuex.Store({\n  modules: {\n    account: {\n      namespaced: true,\n\n      // 模块内容（module assets）\n      state: { ... }, // 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响\n      getters: {\n        isAdmin () { ... } // -> getters['account/isAdmin']\n      },\n      actions: {\n        login () { ... } // -> dispatch('account/login')\n      },\n      mutations: {\n        login () { ... } // -> commit('account/login')\n      },\n\n      // 嵌套模块\n      modules: {\n        // 没加namespaced属性，所以继承父模块的命名空间\n        myPage: {\n          state: { ... },\n          getters: {\n            profile () { ... } // -> getters['account/profile']\n          }\n        },\n\n        // 进一步嵌套命名空间\n        posts: {\n          namespaced: true,\n\n          state: { ... },\n          getters: {\n            popular () { ... } // -> getters['account/posts/popular']\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n启用了命名空间的 getter 和 action 会**收到局部化的 getter，dispatch 和 commit**。\n\n换言之，在使用模块内容（module assets，即指模块内的state、getter、mutation、action）时不需要在同一模块内额外添加空间名前缀。\n\n所以：更改 namespaced 属性后不需要修改模块内的代码\n\n### 带命名空间的模块内访问全局内容(Global Assets)\n\nGlobal Assets即全局的state,getter,mutation,action\n\n- getter的第三、第四参数：rootState、rootGetters\n- action的context参数包含:rootState、rootGetters\n- 全局commit、dispatch：传入参数root:true\n\n### 带命名空间的模块注册全局 action\n\n传入root选项，值为true\n\n```jsx\n...\nsomeAction:{\n\troot:true,\n\thandler:()=>{}\n}\n...\n```\n\n### mapState, mapGetters, mapActions 和 mapMutations操作命名空间：\n\n```jsx\n// 方法一：直接在状态名前加命名空间\ncomputed: {\n  ...mapState({\n    a: state => state.some.nested.module.a,\n    b: state => state.some.nested.module.b\n  })\n},\nmethods: {\n  ...mapActions([\n    'some/nested/module/foo', // -> this['some/nested/module/foo']()\n    'some/nested/module/bar' // -> this['some/nested/module/bar']()\n  ])\n}\n\n// 方法二：也可以把共有的命名空间传给函数第一个参数\ncomputed: {\n  ...mapState('some/nested/module', {\n    a: state => state.a,\n    b: state => state.b\n  })\n},\nmethods: {\n  ...mapActions('some/nested/module', [\n    'foo', // -> this.foo()\n    'bar' // -> this.bar()\n  ])\n}\n\n//方法三：利用createNamespacedHelpers，传入命名空间，会返回已经绑定命名空间的map方法\nimport { createNamespacedHelpers } from 'vuex'\n\nconst { mapState, mapActions } = createNamespacedHelpers('some/nested/module')\n```\n\n### 动态注册模块\n\n在store已经实例化后，如果想添加模块，可以用registerModule方法\n\n```jsx\nimport Vuex from 'vuex'\n\nconst store = new Vuex.Store({ /* 选项 */ })\n\n// 注册模块 `myModule`\nstore.registerModule('myModule', {\n  // ...\n})\n// 注册嵌套模块 `nested/myModule`\nstore.registerModule(['nested', 'myModule'], {\n  // ...\n})\n```\n\n卸载动态模块：unregisterModule（不能卸载静态模块\n\n判断模块是否存在：hasModule\n\n## 纯对象state&函数声明state\n\n纯对象state可以通过引用被访问，造成状态对象被修改时 store 或模块间数据互相污染的问题。\n\n因此可以和vue组件内的data一样，使用函数来声明state：\n\n```jsx\nconst MyReusableModule = {\n  state () {\n    return {\n      foo: 'bar'\n    }\n  },\n  // mutation, action 和 getter 等等...\n}\n```\n\n## 严格模式\n\n在非生产环境开启严格模式，在任何尝试不通过mutation直接修改state的操作时，都会抛出错误\n\n## v-model & Vuex的state\n\nv-model直接绑定Vuex上的state，在严格模式下会报错，因为双向绑定的机制会直接尝试修改state，而不是通过mutation，解决方法是，绑定一个设置了getter和setter的计算属性：\n\n```jsx\n...\ncomputed:{\n\tattr:{\n\t\tgetter(){\n\t\t\treturn this.$store.state.attr\n\t\t},\n\t\tsetter(val){\n\t\t\tthis.$store.commit('updateAttr',val)\n\t\t}\n\t}\n}\n```","source":"_posts/vue_store_and_vuex.md","raw":"---\ntitle: 【Vue】Vue状态管理 & Vuex总结\ncategories:\n    - 10技术 | 前端工具与工程化 # 一级分类\ntags:\ndate: 2020-04-30\ndescription: 多组件下 共享状态 的解决方案\ntoc: 1\ntop: 0\nstatus: Done\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201211233730.png\n---\n# Vue状态管理 & Vuex\n\n### 单向数据流\n\n- **state：**驱动应用的数据源；\n- **view：**以声明方式将 **state** 映射到视图；\n- **actions：**响应在 **view** 上的用户输入导致的state变化。\n\n![](/images/vuex1.png)\n\n### 多组件共享状态的需求：\n\n- 多个视图依赖于同一状态：传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力\n- 来自不同视图的行为需要**变更同一状态**：父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码\n\n（共享状态，不仅仅是多组件**读取**同一状态，也包含多组件**变更**同一状态）\n\n## 基于state的简单状态管理\n\n- 在vue实例外的作用域，定义一个state对象，作为共享状态\n\n```jsx\nlet publicState = {}\nlet vm1 = new Vue({\n  name: 'vm1',\n  data: publicState\n})\nlet vm2 = new Vue({\n  name: 'vm2',\n  data: publicState\n})\n```\n\n- 简单的store模式\n\n```jsx\nlet store={\n  state:{\n    a:''\n  },\n  setStateA(){},\n  clearStateA(){},\n}\n\n//把store.state放在vue实例的data里\n\nlet vm1 = new Vue({\n  name:'vm1',\n  data:{\n    privateState:{}, //组件的私有状态\n    publicState:store.state //实例外的共有状态\n  }\n})\n\nlet vm2 = new Vue({\n  name:'vm2',\n  data:{\n    privateState:{},\n    publicState:store.state\n  }\n})\n```\n\n组件们可以共享store中的状态，也可以通过actions变更状态\n\n因为共享状态放在组件的data里，store变化也会驱动组件view变更\n\n![](/images/vuex2.png)\n\n## Vuex基本思想\n\n把组件的共享状态抽取出来，以一个全局单例模式管理\n\n在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为\n\n通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。\n\n![](/images/vuex3.png)\n\n## Vuex的使用&子组件注入\n\nsrc/store/index.js\n\n```jsx\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment (state) {\n      state.count++\n    },\n    decrement (state) {\n      state.count--\n    }\n  }\n})\n```\n\n/src/main.js\n\n```jsx\nimport Vue from 'vue'\nimport store from '@/store'\nimport router from '@/router'\nimport App from '@/App'\n\n// store作为选项传入根组件，是将$store注入所有子组件\n// 子组件都可以通过this.$store访问全局store\n\n// eslint-disable-next-line no-new\nnew Vue({\n  el: '#app',\n  store,\n  router,\n  render: h => h(App)\n})\n```\n\n## Vuex的核心思想一：state\n\nVuex 使用单一状态树——用一个对象（store）就包含了全部的应用层级状态。\n\n至此它便作为一个“唯一数据源 (SSOT)”而存在。\n\n这也意味着，每个应用将仅仅包含一个 store 实例。\n\n单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。\n\n### 子组件获取state & mapState辅助函数\n\n/src/page/home.vue\n\n```jsx\n <template>\n  <div id=\"home\">\n    <div>count：{{count}}</div>\n    <div>count1：{{count1}}</div>\n    <div>count3：{{count3}}</div>\n    <div>count4：{{count4}}</div>\n    <div>count5：{{count5}}</div>\n    <button @click=\"increment\">+</button>\n    <button @click=\"decrement\">-</button>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nexport default {\n  name: 'home',\n  data () {\n    return {\n      message: 'hello',\n      localCount: 1\n    }\n  },\n  computed: {\n    // 方式1：直接从Vue原型链上获取$store\n    count1 () {\n      return this.$store.state.count\n    },\n    // 方式2：mapState方法传状态名数组\n    ...mapState(['count']),\n    ...mapState({\n      // 方式3：mapState传对象，键为状态别名，值为状态名\n      count3: 'count',\n      // 方式4：mapState传对象，键为getter函数，参数是state，值为箭头函数\n      count4: state => state.count,\n      // 方式5：mapState传对象，键为getter函数，参数是state，值为普通函数（因为要再函数体内用this）\n      count5 (state) {\n        return this.localCount + state.count\n      }\n    })\n  },\n  methods: {\n    increment () {\n      this.$store.commit('increment')\n    },\n    decrement () {\n      this.$store.commit('decrement')\n    }\n  }\n}\n</script>\n```\n\n## Vuex核心思想二：getter\n\n### 派生状态\n\n类似于vue组件的计算属性，可以从store的state中派生出一些状态\n\n```jsx\nexport default new Vuex.Store({\n  state: {\n    todos: [\n      { id: 1, desc: 'test1', done: false },\n      { id: 2, desc: 'test2', done: true },\n      { id: 3, desc: 'test3', done: false }\n    ]\n  },\n  getters: {\n\t\t//getter中可以接受其他getter作为参数\n    maxTodoId (state,getters) {\n      return state.todos.sort((a, b) => { return b.id - a.id })[0].id\n    },\n    doneTodoCount (state) {\n      return state.todos.filter(todo => todo.done === true).length\n    }\n  }\n})\n```\n\n### 通过this.$store.state.getters属性 / mapGetters访问派生状态\n\n```jsx\ncomputed: {\n  ...mapGetters(['doneTodoCount']),\n  doneTodoCount2 () {\n    return this.$store.getters.doneTodoCount\n  }\n},\n```\n\n### getter传参：让getter返回函数\n\n```jsx\ngetters: {\n  getTodoBySearch: (state) => (s) => {\n    return state.todos.filter(todo => {\n      return (todo.id + todo.desc).indexOf(s) >= 0\n    })\n  }\n}\n```\n\n## Vuex核心思想三：mutation\n\n### 提交mutation\n\n组件不能直接更改Vuex store中的状态，而是要提交(commit)变更(mutations)\n\n```jsx\nexport default {\n  name: 'home',\n  data () {\n    return {\n    }\n  },\n  methods: {\n    addTodo (e) {\n      if (e.keyCode === 13 && this.model.desc) {\n        this.$store.commit('addTodo', this.model.desc)\n        this.model.desc = ''\n      }\n    }\n  }\n}\n\n```\n\n其中**addTodo**就是在store的mutation中定义的一种变更：\n\n```jsx\nmutations: {\n  addTodo (state, desc) {\n    const maxTodoId = state.todos.sort((a, b) => { return b.id - a.id })[0].id\n    const todo = {\n      desc,\n      id: maxTodoId + 1,\n      done: false\n    }\n    state.todos.push(todo)\n  }\n}\n```\n\n### **提交载荷（Payload）**\n\n可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：\n\n```jsx\n// src/store/index.js\nmutations: {\n  increment (state, payload) {\n    \n  }\n}\n\n// src/page/home.vue\nlet payload={a:1,b:2}\nstore.commit('increment', payload)\n```\n\n### Mutation 需遵守 Vue 的响应规则\n\nVuex 的 store 中的状态是响应式的，\n\n当我们变更状态时，\n\n监视状态的 Vue 组件也会自动更新,\n\n因此 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项\n\n1. 最好提前在你的 store 中初始化好所有所需属性。\n2. 当需要在对象上添加新属性时，应该\n    - 使用 `Vue.set(obj, 'newProp', 123)`\n    - 以新对象替换老对象。例如，利用**[对象展开运算符](https://github.com/tc39/proposal-object-rest-spread)**：\n\n    ```jsx\n    state.obj = { ...state.obj, newProp: 123 }\n    ```\n\n### 使用常量替代 Mutation 事件类型\n\n```jsx\n// mutation-types.js\nexport const SOME_MUTATION = 'SOME_MUTATION'\n\n// store.js\nimport Vuex from 'vuex'\nimport { SOME_MUTATION } from './mutation-types'\n\nconst store = new Vuex.Store({\n  state: { ... },\n  mutations: {\n    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名\n    [SOME_MUTATION] (state) {\n      // mutate state\n    }\n  }\n})\n```\n\n### Mutation 必须是同步函数\n\ndevtools捕捉会mutations记录，每次记录前一状态+后一状态的快照\n\n如果mutation里是异步的函数，很可能快照捕捉时，状态还未更改\n\n在回调函数中进行的状态的改变都是不可追踪的\n\n因此很**不利于调试**\n\n## Vuex核心思想四：Action\n\n### Action与Mutation类似，不同点：\n\n- Action 提交(commit)的是 mutation，而**不是直接变更状态**。\n- Action 可以包含任意**异步**操作。\n\n### action函数的定义\n\n```jsx\n//...\nactions: {\n  addTodo (context) {\n    // 可以通过context参数去调用commit，获取state和getters\n    // context区别于state（module中会讲到\n    setTimeout(() => {\n      context.commit('addTodo')\n      // context.state\n      // context.getters\n    }, 1000)\n  },\n  addTodo2 ({ commit, state, getters }) {\n    // 也可以直接用参数解构的方法获取commit，state，getters\n    setTimeout(() => {\n      commit('addTodo')\n    }, 1000)\n  }\n}\n//...\n```\n\n### 组件分发action（可以带载荷/参数\n\n```jsx\nmethods: {\n  addTodo (e) {\n    this.$store.dispatch('addTodo', payload)\n    this.$store.dispatch({\n      type: 'addTodo',\n      ...payload\n    })\n  }\n}\n\n//action接收payload参数\n//action内部也可以dispatch其他action\nactions: {\n  addTodo2 ({ commit, state, getters, dispatch }, payload) {\n    // 也可以直接用参数解构的方法获取commit，state，getters\n    setTimeout(() => {\n      commit('addTodo')\n\t\t\t//dispatch\n    }, 1000)\n  }\n}\n```\n\n### 组合action\n\n- action可以返回一个promise函数\n\n```jsx\nactions: {\n  actionA ({ commit }) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        commit('someMutation')\n        resolve()\n      }, 1000)\n    })\n  }\n}\n```\n\n- dispatch可以处理action返回的promise，并仍然返回promise\n\n```jsx\nstore.dispatch('actionA').then(() => {\n  // ...\n})\n```\n\n- 利用await/async编写组合action更加简洁\n\n```jsx\n// 假设 getData() 和 getOtherData() 返回的是 Promise\n\nactions: {\n  async actionA ({ commit }) {\n    commit('gotData', await getData())\n  },\n  async actionB ({ commit, dispatch }) {\n    await dispatch('actionA')\n    commit('gotOtherData', await getOtherData())\n  }\n}\n```\n\n## Vuex核心思想五：Module\n\n当应用较复杂时，应用所有状态集中在一个(store)对象上很臃肿\n\n因此Vuex允许将store按模块来划分，\n\n每个store拥有自己的state、getter、mutations、actions、子模块\n\n```jsx\n// src/store/module/moduleA.js\nexport default {\n  state: {},\n  getter: {},\n  mutations: {},\n  actions: {}\n}\n\n// src/store/index.js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport moduleA from 'module/moduleA'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  modules: {\n    a: moduleA\n  },\n\t...\n})\n```\n\n### 模块内的局部状态state（getter mutation action获取state\n\n**对于模块内的getter、mutation函数**：\n\n接收的第一个参数：state，指向的是模块内的局部状态\n\ngetter函数接收的**第三个**参数是根节点状态：**rootState**\n\n**对于模块内的action函数:**\n\ncontext.state指向的也是模块的局部状态，根节点的状态为**context.rootState**\n\n### 全局命名空间（组件获取getter mutation action\n\n默认情况：模块内部的 action、mutation 和 getter 是注册在**全局命名空间**的——这样使得多个模块能够对同一 mutation 或 action 作出响应。\n\n### 带命名空间的模块\n\n如果希望你的模块具有更高的**封装度和复用性**，你可以通过添加 **namespaced: true** 的方式使其成为带命名空间的模块。\n\n```jsx\nconst store = new Vuex.Store({\n  modules: {\n    account: {\n      namespaced: true,\n\n      // 模块内容（module assets）\n      state: { ... }, // 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响\n      getters: {\n        isAdmin () { ... } // -> getters['account/isAdmin']\n      },\n      actions: {\n        login () { ... } // -> dispatch('account/login')\n      },\n      mutations: {\n        login () { ... } // -> commit('account/login')\n      },\n\n      // 嵌套模块\n      modules: {\n        // 没加namespaced属性，所以继承父模块的命名空间\n        myPage: {\n          state: { ... },\n          getters: {\n            profile () { ... } // -> getters['account/profile']\n          }\n        },\n\n        // 进一步嵌套命名空间\n        posts: {\n          namespaced: true,\n\n          state: { ... },\n          getters: {\n            popular () { ... } // -> getters['account/posts/popular']\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n启用了命名空间的 getter 和 action 会**收到局部化的 getter，dispatch 和 commit**。\n\n换言之，在使用模块内容（module assets，即指模块内的state、getter、mutation、action）时不需要在同一模块内额外添加空间名前缀。\n\n所以：更改 namespaced 属性后不需要修改模块内的代码\n\n### 带命名空间的模块内访问全局内容(Global Assets)\n\nGlobal Assets即全局的state,getter,mutation,action\n\n- getter的第三、第四参数：rootState、rootGetters\n- action的context参数包含:rootState、rootGetters\n- 全局commit、dispatch：传入参数root:true\n\n### 带命名空间的模块注册全局 action\n\n传入root选项，值为true\n\n```jsx\n...\nsomeAction:{\n\troot:true,\n\thandler:()=>{}\n}\n...\n```\n\n### mapState, mapGetters, mapActions 和 mapMutations操作命名空间：\n\n```jsx\n// 方法一：直接在状态名前加命名空间\ncomputed: {\n  ...mapState({\n    a: state => state.some.nested.module.a,\n    b: state => state.some.nested.module.b\n  })\n},\nmethods: {\n  ...mapActions([\n    'some/nested/module/foo', // -> this['some/nested/module/foo']()\n    'some/nested/module/bar' // -> this['some/nested/module/bar']()\n  ])\n}\n\n// 方法二：也可以把共有的命名空间传给函数第一个参数\ncomputed: {\n  ...mapState('some/nested/module', {\n    a: state => state.a,\n    b: state => state.b\n  })\n},\nmethods: {\n  ...mapActions('some/nested/module', [\n    'foo', // -> this.foo()\n    'bar' // -> this.bar()\n  ])\n}\n\n//方法三：利用createNamespacedHelpers，传入命名空间，会返回已经绑定命名空间的map方法\nimport { createNamespacedHelpers } from 'vuex'\n\nconst { mapState, mapActions } = createNamespacedHelpers('some/nested/module')\n```\n\n### 动态注册模块\n\n在store已经实例化后，如果想添加模块，可以用registerModule方法\n\n```jsx\nimport Vuex from 'vuex'\n\nconst store = new Vuex.Store({ /* 选项 */ })\n\n// 注册模块 `myModule`\nstore.registerModule('myModule', {\n  // ...\n})\n// 注册嵌套模块 `nested/myModule`\nstore.registerModule(['nested', 'myModule'], {\n  // ...\n})\n```\n\n卸载动态模块：unregisterModule（不能卸载静态模块\n\n判断模块是否存在：hasModule\n\n## 纯对象state&函数声明state\n\n纯对象state可以通过引用被访问，造成状态对象被修改时 store 或模块间数据互相污染的问题。\n\n因此可以和vue组件内的data一样，使用函数来声明state：\n\n```jsx\nconst MyReusableModule = {\n  state () {\n    return {\n      foo: 'bar'\n    }\n  },\n  // mutation, action 和 getter 等等...\n}\n```\n\n## 严格模式\n\n在非生产环境开启严格模式，在任何尝试不通过mutation直接修改state的操作时，都会抛出错误\n\n## v-model & Vuex的state\n\nv-model直接绑定Vuex上的state，在严格模式下会报错，因为双向绑定的机制会直接尝试修改state，而不是通过mutation，解决方法是，绑定一个设置了getter和setter的计算属性：\n\n```jsx\n...\ncomputed:{\n\tattr:{\n\t\tgetter(){\n\t\t\treturn this.$store.state.attr\n\t\t},\n\t\tsetter(val){\n\t\t\tthis.$store.commit('updateAttr',val)\n\t\t}\n\t}\n}\n```","slug":"vue_store_and_vuex","published":1,"updated":"2021-01-22T10:04:02.468Z","_id":"ckir88jfi005sc8y674owpx8n","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue状态管理-amp-Vuex\"><a href=\"#Vue状态管理-amp-Vuex\" class=\"headerlink\" title=\"Vue状态管理 &amp; Vuex\"></a>Vue状态管理 &amp; Vuex</h1><h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><ul>\n<li><strong>state：</strong>驱动应用的数据源；</li>\n<li><strong>view：</strong>以声明方式将 <strong>state</strong> 映射到视图；</li>\n<li><strong>actions：</strong>响应在 <strong>view</strong> 上的用户输入导致的state变化。</li>\n</ul>\n<p><img src=\"/images/vuex1.png\" alt></p>\n<h3 id=\"多组件共享状态的需求：\"><a href=\"#多组件共享状态的需求：\" class=\"headerlink\" title=\"多组件共享状态的需求：\"></a>多组件共享状态的需求：</h3><ul>\n<li>多个视图依赖于同一状态：传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力</li>\n<li>来自不同视图的行为需要<strong>变更同一状态</strong>：父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码</li>\n</ul>\n<p>（共享状态，不仅仅是多组件<strong>读取</strong>同一状态，也包含多组件<strong>变更</strong>同一状态）</p>\n<h2 id=\"基于state的简单状态管理\"><a href=\"#基于state的简单状态管理\" class=\"headerlink\" title=\"基于state的简单状态管理\"></a>基于state的简单状态管理</h2><ul>\n<li>在vue实例外的作用域，定义一个state对象，作为共享状态</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publicState = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'vm1'</span>,</span><br><span class=\"line\">  data: publicState</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'vm2'</span>,</span><br><span class=\"line\">  data: publicState</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>简单的store模式</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> store=&#123;</span><br><span class=\"line\">  state:&#123;</span><br><span class=\"line\">    a:<span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setStateA()&#123;&#125;,</span><br><span class=\"line\">  clearStateA()&#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把store.state放在vue实例的data里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vm1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name:<span class=\"string\">'vm1'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    privateState:&#123;&#125;, <span class=\"comment\">//组件的私有状态</span></span><br><span class=\"line\">    publicState:store.state <span class=\"comment\">//实例外的共有状态</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vm2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name:<span class=\"string\">'vm2'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    privateState:&#123;&#125;,</span><br><span class=\"line\">    publicState:store.state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>组件们可以共享store中的状态，也可以通过actions变更状态</p>\n<p>因为共享状态放在组件的data里，store变化也会驱动组件view变更</p>\n<p><img src=\"/images/vuex2.png\" alt></p>\n<h2 id=\"Vuex基本思想\"><a href=\"#Vuex基本思想\" class=\"headerlink\" title=\"Vuex基本思想\"></a>Vuex基本思想</h2><p>把组件的共享状态抽取出来，以一个全局单例模式管理</p>\n<p>在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为</p>\n<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p>\n<p><img src=\"/images/vuex3.png\" alt></p>\n<h2 id=\"Vuex的使用-amp-子组件注入\"><a href=\"#Vuex的使用-amp-子组件注入\" class=\"headerlink\" title=\"Vuex的使用&amp;子组件注入\"></a>Vuex的使用&amp;子组件注入</h2><p>src/store/index.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrement (state) &#123;</span><br><span class=\"line\">      state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>/src/main.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'@/store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'@/router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'@/App'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store作为选项传入根组件，是将$store注入所有子组件</span></span><br><span class=\"line\"><span class=\"comment\">// 子组件都可以通过this.$store访问全局store</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line no-new</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex的核心思想一：state\"><a href=\"#Vuex的核心思想一：state\" class=\"headerlink\" title=\"Vuex的核心思想一：state\"></a>Vuex的核心思想一：state</h2><p>Vuex 使用单一状态树——用一个对象（store）就包含了全部的应用层级状态。</p>\n<p>至此它便作为一个“唯一数据源 (SSOT)”而存在。</p>\n<p>这也意味着，每个应用将仅仅包含一个 store 实例。</p>\n<p>单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p>\n<h3 id=\"子组件获取state-amp-mapState辅助函数\"><a href=\"#子组件获取state-amp-mapState辅助函数\" class=\"headerlink\" title=\"子组件获取state &amp; mapState辅助函数\"></a>子组件获取state &amp; mapState辅助函数</h3><p>/src/page/home.vue</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">\"home\"</span>&gt;</span><br><span class=\"line\">    &lt;div&gt;count：&#123;&#123;count&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;count1：&#123;&#123;count1&#125;&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div&gt;count3：&#123;&#123;count3&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;count4：&#123;&#123;count4&#125;&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div&gt;count5：&#123;&#123;count5&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;button @click=\"increment\"&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;button @click=<span class=\"string\">\"decrement\"</span>&gt;-&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import &#123; mapState &#125; from 'vuex'</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  name: 'home',</span></span><br><span class=\"line\"><span class=\"regexp\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      message: 'hello',</span></span><br><span class=\"line\"><span class=\"regexp\">      localCount: 1</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 方式1：直接从Vue原型链上获取$store</span></span><br><span class=\"line\"><span class=\"regexp\">    count1 () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      return this.$store.state.count</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 方式2：mapState方法传状态名数组</span></span><br><span class=\"line\"><span class=\"regexp\">    ...mapState(['count']),</span></span><br><span class=\"line\"><span class=\"regexp\">    ...mapState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式3：mapState传对象，键为状态别名，值为状态名</span></span><br><span class=\"line\"><span class=\"regexp\">      count3: 'count',</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式4：mapState传对象，键为getter函数，参数是state，值为箭头函数</span></span><br><span class=\"line\"><span class=\"regexp\">      count4: state =&gt; state.count,</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式5：mapState传对象，键为getter函数，参数是state，值为普通函数（因为要再函数体内用this）</span></span><br><span class=\"line\"><span class=\"regexp\">      count5 (state) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return this.localCount + state.count</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    increment () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$store.commit('increment')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    decrement () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$store.commit('decrement')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想二：getter\"><a href=\"#Vuex核心思想二：getter\" class=\"headerlink\" title=\"Vuex核心思想二：getter\"></a>Vuex核心思想二：getter</h2><h3 id=\"派生状态\"><a href=\"#派生状态\" class=\"headerlink\" title=\"派生状态\"></a>派生状态</h3><p>类似于vue组件的计算属性，可以从store的state中派生出一些状态</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test1'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test2'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test3'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//getter中可以接受其他getter作为参数</span></span><br><span class=\"line\">    maxTodoId (state,getters) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> b.id - a.id &#125;)[<span class=\"number\">0</span>].id</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doneTodoCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.done === <span class=\"literal\">true</span>).length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过this-store-state-getters属性-mapGetters访问派生状态\"><a href=\"#通过this-store-state-getters属性-mapGetters访问派生状态\" class=\"headerlink\" title=\"通过this.$store.state.getters属性 / mapGetters访问派生状态\"></a>通过this.$store.state.getters属性 / mapGetters访问派生状态</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">'doneTodoCount'</span>]),</span><br><span class=\"line\">  doneTodoCount2 () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.doneTodoCount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"getter传参：让getter返回函数\"><a href=\"#getter传参：让getter返回函数\" class=\"headerlink\" title=\"getter传参：让getter返回函数\"></a>getter传参：让getter返回函数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">  getTodoBySearch: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">s</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (todo.id + todo.desc).indexOf(s) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想三：mutation\"><a href=\"#Vuex核心思想三：mutation\" class=\"headerlink\" title=\"Vuex核心思想三：mutation\"></a>Vuex核心思想三：mutation</h2><h3 id=\"提交mutation\"><a href=\"#提交mutation\" class=\"headerlink\" title=\"提交mutation\"></a>提交mutation</h3><p>组件不能直接更改Vuex store中的状态，而是要提交(commit)变更(mutations)</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addTodo (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span> &amp;&amp; <span class=\"keyword\">this</span>.model.desc) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'addTodo'</span>, <span class=\"keyword\">this</span>.model.desc)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.model.desc = <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<strong>addTodo</strong>就是在store的mutation中定义的一种变更：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  addTodo (state, desc) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxTodoId = state.todos.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> b.id - a.id &#125;)[<span class=\"number\">0</span>].id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> todo = &#123;</span><br><span class=\"line\">      desc,</span><br><span class=\"line\">      id: maxTodoId + <span class=\"number\">1</span>,</span><br><span class=\"line\">      done: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    state.todos.push(todo)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交载荷（Payload）\"><a href=\"#提交载荷（Payload）\" class=\"headerlink\" title=\"提交载荷（Payload）\"></a><strong>提交载荷（Payload）</strong></h3><p>可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/page/home.vue</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> payload=&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, payload)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-需遵守-Vue-的响应规则\"><a href=\"#Mutation-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutation 需遵守 Vue 的响应规则\"></a>Mutation 需遵守 Vue 的响应规则</h3><p>Vuex 的 store 中的状态是响应式的，</p>\n<p>当我们变更状态时，</p>\n<p>监视状态的 Vue 组件也会自动更新,</p>\n<p>因此 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项</p>\n<ol>\n<li>最好提前在你的 store 中初始化好所有所需属性。</li>\n<li><p>当需要在对象上添加新属性时，应该</p>\n<ul>\n<li>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code></li>\n<li><p>以新对象替换老对象。例如，利用<strong><a href=\"https://github.com/tc39/proposal-object-rest-spread\" target=\"_blank\" rel=\"noopener\">对象展开运算符</a></strong>：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.obj = &#123; ...state.obj, <span class=\"attr\">newProp</span>: <span class=\"number\">123</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用常量替代-Mutation-事件类型\"><a href=\"#使用常量替代-Mutation-事件类型\" class=\"headerlink\" title=\"使用常量替代 Mutation 事件类型\"></a>使用常量替代 Mutation 事件类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mutation-types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SOME_MUTATION = <span class=\"string\">'SOME_MUTATION'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SOME_MUTATION &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mutation-types'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class=\"line\">    [SOME_MUTATION] (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// mutate state</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-必须是同步函数\"><a href=\"#Mutation-必须是同步函数\" class=\"headerlink\" title=\"Mutation 必须是同步函数\"></a>Mutation 必须是同步函数</h3><p>devtools捕捉会mutations记录，每次记录前一状态+后一状态的快照</p>\n<p>如果mutation里是异步的函数，很可能快照捕捉时，状态还未更改</p>\n<p>在回调函数中进行的状态的改变都是不可追踪的</p>\n<p>因此很<strong>不利于调试</strong></p>\n<h2 id=\"Vuex核心思想四：Action\"><a href=\"#Vuex核心思想四：Action\" class=\"headerlink\" title=\"Vuex核心思想四：Action\"></a>Vuex核心思想四：Action</h2><h3 id=\"Action与Mutation类似，不同点：\"><a href=\"#Action与Mutation类似，不同点：\" class=\"headerlink\" title=\"Action与Mutation类似，不同点：\"></a>Action与Mutation类似，不同点：</h3><ul>\n<li>Action 提交(commit)的是 mutation，而<strong>不是直接变更状态</strong>。</li>\n<li>Action 可以包含任意<strong>异步</strong>操作。</li>\n</ul>\n<h3 id=\"action函数的定义\"><a href=\"#action函数的定义\" class=\"headerlink\" title=\"action函数的定义\"></a>action函数的定义</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  addTodo (context) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以通过context参数去调用commit，获取state和getters</span></span><br><span class=\"line\">    <span class=\"comment\">// context区别于state（module中会讲到</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      context.commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// context.state</span></span><br><span class=\"line\">      <span class=\"comment\">// context.getters</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  addTodo2 (&#123; commit, state, getters &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 也可以直接用参数解构的方法获取commit，state，getters</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件分发action（可以带载荷-参数\"><a href=\"#组件分发action（可以带载荷-参数\" class=\"headerlink\" title=\"组件分发action（可以带载荷/参数\"></a>组件分发action（可以带载荷/参数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  addTodo (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'addTodo'</span>, payload)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.dispatch(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">'addTodo'</span>,</span><br><span class=\"line\">      ...payload</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//action接收payload参数</span></span><br><span class=\"line\"><span class=\"comment\">//action内部也可以dispatch其他action</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  addTodo2 (&#123; commit, state, getters, dispatch &#125;, payload) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 也可以直接用参数解构的方法获取commit，state，getters</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//dispatch</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合action\"><a href=\"#组合action\" class=\"headerlink\" title=\"组合action\"></a>组合action</h3><ul>\n<li>action可以返回一个promise函数</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'someMutation'</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dispatch可以处理action返回的promise，并仍然返回promise</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'actionA'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用await/async编写组合action更加简洁</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'gotData'</span>, <span class=\"keyword\">await</span> getData())</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionB (&#123; commit, dispatch &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> dispatch(<span class=\"string\">'actionA'</span>)</span><br><span class=\"line\">    commit(<span class=\"string\">'gotOtherData'</span>, <span class=\"keyword\">await</span> getOtherData())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想五：Module\"><a href=\"#Vuex核心思想五：Module\" class=\"headerlink\" title=\"Vuex核心思想五：Module\"></a>Vuex核心思想五：Module</h2><p>当应用较复杂时，应用所有状态集中在一个(store)对象上很臃肿</p>\n<p>因此Vuex允许将store按模块来划分，</p>\n<p>每个store拥有自己的state、getter、mutations、actions、子模块</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/module/moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  state: &#123;&#125;,</span><br><span class=\"line\">  getter: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moduleA <span class=\"keyword\">from</span> <span class=\"string\">'module/moduleA'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块内的局部状态state（getter-mutation-action获取state\"><a href=\"#模块内的局部状态state（getter-mutation-action获取state\" class=\"headerlink\" title=\"模块内的局部状态state（getter mutation action获取state\"></a>模块内的局部状态state（getter mutation action获取state</h3><p><strong>对于模块内的getter、mutation函数</strong>：</p>\n<p>接收的第一个参数：state，指向的是模块内的局部状态</p>\n<p>getter函数接收的<strong>第三个</strong>参数是根节点状态：<strong>rootState</strong></p>\n<p><strong>对于模块内的action函数:</strong></p>\n<p>context.state指向的也是模块的局部状态，根节点的状态为<strong>context.rootState</strong></p>\n<h3 id=\"全局命名空间（组件获取getter-mutation-action\"><a href=\"#全局命名空间（组件获取getter-mutation-action\" class=\"headerlink\" title=\"全局命名空间（组件获取getter mutation action\"></a>全局命名空间（组件获取getter mutation action</h3><p>默认情况：模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p>\n<h3 id=\"带命名空间的模块\"><a href=\"#带命名空间的模块\" class=\"headerlink\" title=\"带命名空间的模块\"></a>带命名空间的模块</h3><p>如果希望你的模块具有更高的<strong>封装度和复用性</strong>，你可以通过添加 <strong>namespaced: true</strong> 的方式使其成为带命名空间的模块。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    account: &#123;</span><br><span class=\"line\">      namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 模块内容（module assets）</span></span><br><span class=\"line\">      state: &#123; ... &#125;, <span class=\"comment\">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class=\"line\">      getters: &#123;</span><br><span class=\"line\">        isAdmin () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/isAdmin']</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      actions: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; dispatch('account/login')</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mutations: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; commit('account/login')</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 嵌套模块</span></span><br><span class=\"line\">      modules: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没加namespaced属性，所以继承父模块的命名空间</span></span><br><span class=\"line\">        myPage: &#123;</span><br><span class=\"line\">          state: &#123; ... &#125;,</span><br><span class=\"line\">          getters: &#123;</span><br><span class=\"line\">            profile () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/profile']</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 进一步嵌套命名空间</span></span><br><span class=\"line\">        posts: &#123;</span><br><span class=\"line\">          namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          state: &#123; ... &#125;,</span><br><span class=\"line\">          getters: &#123;</span><br><span class=\"line\">            popular () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/posts/popular']</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>启用了命名空间的 getter 和 action 会<strong>收到局部化的 getter，dispatch 和 commit</strong>。</p>\n<p>换言之，在使用模块内容（module assets，即指模块内的state、getter、mutation、action）时不需要在同一模块内额外添加空间名前缀。</p>\n<p>所以：更改 namespaced 属性后不需要修改模块内的代码</p>\n<h3 id=\"带命名空间的模块内访问全局内容-Global-Assets\"><a href=\"#带命名空间的模块内访问全局内容-Global-Assets\" class=\"headerlink\" title=\"带命名空间的模块内访问全局内容(Global Assets)\"></a>带命名空间的模块内访问全局内容(Global Assets)</h3><p>Global Assets即全局的state,getter,mutation,action</p>\n<ul>\n<li>getter的第三、第四参数：rootState、rootGetters</li>\n<li>action的context参数包含:rootState、rootGetters</li>\n<li>全局commit、dispatch：传入参数root:true</li>\n</ul>\n<h3 id=\"带命名空间的模块注册全局-action\"><a href=\"#带命名空间的模块注册全局-action\" class=\"headerlink\" title=\"带命名空间的模块注册全局 action\"></a>带命名空间的模块注册全局 action</h3><p>传入root选项，值为true</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">someAction:&#123;</span><br><span class=\"line\">\troot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\thandler:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapState-mapGetters-mapActions-和-mapMutations操作命名空间：\"><a href=\"#mapState-mapGetters-mapActions-和-mapMutations操作命名空间：\" class=\"headerlink\" title=\"mapState, mapGetters, mapActions 和 mapMutations操作命名空间：\"></a>mapState, mapGetters, mapActions 和 mapMutations操作命名空间：</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：直接在状态名前加命名空间</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.some.nested.module.a,</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.some.nested.module.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([</span><br><span class=\"line\">    <span class=\"string\">'some/nested/module/foo'</span>, <span class=\"comment\">// -&gt; this['some/nested/module/foo']()</span></span><br><span class=\"line\">    <span class=\"string\">'some/nested/module/bar'</span> <span class=\"comment\">// -&gt; this['some/nested/module/bar']()</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二：也可以把共有的命名空间传给函数第一个参数</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(<span class=\"string\">'some/nested/module'</span>, &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.a,</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions(<span class=\"string\">'some/nested/module'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'foo'</span>, <span class=\"comment\">// -&gt; this.foo()</span></span><br><span class=\"line\">    <span class=\"string\">'bar'</span> <span class=\"comment\">// -&gt; this.bar()</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法三：利用createNamespacedHelpers，传入命名空间，会返回已经绑定命名空间的map方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createNamespacedHelpers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class=\"string\">'some/nested/module'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态注册模块\"><a href=\"#动态注册模块\" class=\"headerlink\" title=\"动态注册模块\"></a>动态注册模块</h3><p>在store已经实例化后，如果想添加模块，可以用registerModule方法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123; <span class=\"comment\">/* 选项 */</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册模块 `myModule`</span></span><br><span class=\"line\">store.registerModule(<span class=\"string\">'myModule'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 注册嵌套模块 `nested/myModule`</span></span><br><span class=\"line\">store.registerModule([<span class=\"string\">'nested'</span>, <span class=\"string\">'myModule'</span>], &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>卸载动态模块：unregisterModule（不能卸载静态模块</p>\n<p>判断模块是否存在：hasModule</p>\n<h2 id=\"纯对象state-amp-函数声明state\"><a href=\"#纯对象state-amp-函数声明state\" class=\"headerlink\" title=\"纯对象state&amp;函数声明state\"></a>纯对象state&amp;函数声明state</h2><p>纯对象state可以通过引用被访问，造成状态对象被修改时 store 或模块间数据互相污染的问题。</p>\n<p>因此可以和vue组件内的data一样，使用函数来声明state：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyReusableModule = &#123;</span><br><span class=\"line\">  state () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// mutation, action 和 getter 等等...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>在非生产环境开启严格模式，在任何尝试不通过mutation直接修改state的操作时，都会抛出错误</p>\n<h2 id=\"v-model-amp-Vuex的state\"><a href=\"#v-model-amp-Vuex的state\" class=\"headerlink\" title=\"v-model &amp; Vuex的state\"></a>v-model &amp; Vuex的state</h2><p>v-model直接绑定Vuex上的state，在严格模式下会报错，因为双向绑定的机制会直接尝试修改state，而不是通过mutation，解决方法是，绑定一个设置了getter和setter的计算属性：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tattr:&#123;</span><br><span class=\"line\">\t\tgetter()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.attr</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsetter(val)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'updateAttr'</span>,val)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue状态管理-amp-Vuex\"><a href=\"#Vue状态管理-amp-Vuex\" class=\"headerlink\" title=\"Vue状态管理 &amp; Vuex\"></a>Vue状态管理 &amp; Vuex</h1><h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><ul>\n<li><strong>state：</strong>驱动应用的数据源；</li>\n<li><strong>view：</strong>以声明方式将 <strong>state</strong> 映射到视图；</li>\n<li><strong>actions：</strong>响应在 <strong>view</strong> 上的用户输入导致的state变化。</li>\n</ul>\n<p><img src=\"/images/vuex1.png\" alt></p>\n<h3 id=\"多组件共享状态的需求：\"><a href=\"#多组件共享状态的需求：\" class=\"headerlink\" title=\"多组件共享状态的需求：\"></a>多组件共享状态的需求：</h3><ul>\n<li>多个视图依赖于同一状态：传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力</li>\n<li>来自不同视图的行为需要<strong>变更同一状态</strong>：父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码</li>\n</ul>\n<p>（共享状态，不仅仅是多组件<strong>读取</strong>同一状态，也包含多组件<strong>变更</strong>同一状态）</p>\n<h2 id=\"基于state的简单状态管理\"><a href=\"#基于state的简单状态管理\" class=\"headerlink\" title=\"基于state的简单状态管理\"></a>基于state的简单状态管理</h2><ul>\n<li>在vue实例外的作用域，定义一个state对象，作为共享状态</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> publicState = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'vm1'</span>,</span><br><span class=\"line\">  data: publicState</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> vm2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'vm2'</span>,</span><br><span class=\"line\">  data: publicState</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>简单的store模式</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> store=&#123;</span><br><span class=\"line\">  state:&#123;</span><br><span class=\"line\">    a:<span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setStateA()&#123;&#125;,</span><br><span class=\"line\">  clearStateA()&#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把store.state放在vue实例的data里</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vm1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name:<span class=\"string\">'vm1'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    privateState:&#123;&#125;, <span class=\"comment\">//组件的私有状态</span></span><br><span class=\"line\">    publicState:store.state <span class=\"comment\">//实例外的共有状态</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> vm2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  name:<span class=\"string\">'vm2'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    privateState:&#123;&#125;,</span><br><span class=\"line\">    publicState:store.state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>组件们可以共享store中的状态，也可以通过actions变更状态</p>\n<p>因为共享状态放在组件的data里，store变化也会驱动组件view变更</p>\n<p><img src=\"/images/vuex2.png\" alt></p>\n<h2 id=\"Vuex基本思想\"><a href=\"#Vuex基本思想\" class=\"headerlink\" title=\"Vuex基本思想\"></a>Vuex基本思想</h2><p>把组件的共享状态抽取出来，以一个全局单例模式管理</p>\n<p>在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为</p>\n<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p>\n<p><img src=\"/images/vuex3.png\" alt></p>\n<h2 id=\"Vuex的使用-amp-子组件注入\"><a href=\"#Vuex的使用-amp-子组件注入\" class=\"headerlink\" title=\"Vuex的使用&amp;子组件注入\"></a>Vuex的使用&amp;子组件注入</h2><p>src/store/index.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.count++</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrement (state) &#123;</span><br><span class=\"line\">      state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>/src/main.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'@/store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'@/router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'@/App'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store作为选项传入根组件，是将$store注入所有子组件</span></span><br><span class=\"line\"><span class=\"comment\">// 子组件都可以通过this.$store访问全局store</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line no-new</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex的核心思想一：state\"><a href=\"#Vuex的核心思想一：state\" class=\"headerlink\" title=\"Vuex的核心思想一：state\"></a>Vuex的核心思想一：state</h2><p>Vuex 使用单一状态树——用一个对象（store）就包含了全部的应用层级状态。</p>\n<p>至此它便作为一个“唯一数据源 (SSOT)”而存在。</p>\n<p>这也意味着，每个应用将仅仅包含一个 store 实例。</p>\n<p>单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p>\n<h3 id=\"子组件获取state-amp-mapState辅助函数\"><a href=\"#子组件获取state-amp-mapState辅助函数\" class=\"headerlink\" title=\"子组件获取state &amp; mapState辅助函数\"></a>子组件获取state &amp; mapState辅助函数</h3><p>/src/page/home.vue</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">\"home\"</span>&gt;</span><br><span class=\"line\">    &lt;div&gt;count：&#123;&#123;count&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;count1：&#123;&#123;count1&#125;&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div&gt;count3：&#123;&#123;count3&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;count4：&#123;&#123;count4&#125;&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div&gt;count5：&#123;&#123;count5&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;button @click=\"increment\"&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;button @click=<span class=\"string\">\"decrement\"</span>&gt;-&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/template&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">import &#123; mapState &#125; from 'vuex'</span></span><br><span class=\"line\"><span class=\"regexp\">export default &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  name: 'home',</span></span><br><span class=\"line\"><span class=\"regexp\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      message: 'hello',</span></span><br><span class=\"line\"><span class=\"regexp\">      localCount: 1</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 方式1：直接从Vue原型链上获取$store</span></span><br><span class=\"line\"><span class=\"regexp\">    count1 () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      return this.$store.state.count</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 方式2：mapState方法传状态名数组</span></span><br><span class=\"line\"><span class=\"regexp\">    ...mapState(['count']),</span></span><br><span class=\"line\"><span class=\"regexp\">    ...mapState(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式3：mapState传对象，键为状态别名，值为状态名</span></span><br><span class=\"line\"><span class=\"regexp\">      count3: 'count',</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式4：mapState传对象，键为getter函数，参数是state，值为箭头函数</span></span><br><span class=\"line\"><span class=\"regexp\">      count4: state =&gt; state.count,</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ 方式5：mapState传对象，键为getter函数，参数是state，值为普通函数（因为要再函数体内用this）</span></span><br><span class=\"line\"><span class=\"regexp\">      count5 (state) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        return this.localCount + state.count</span></span><br><span class=\"line\"><span class=\"regexp\">      &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  methods: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    increment () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$store.commit('increment')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    decrement () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.$store.commit('decrement')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想二：getter\"><a href=\"#Vuex核心思想二：getter\" class=\"headerlink\" title=\"Vuex核心思想二：getter\"></a>Vuex核心思想二：getter</h2><h3 id=\"派生状态\"><a href=\"#派生状态\" class=\"headerlink\" title=\"派生状态\"></a>派生状态</h3><p>类似于vue组件的计算属性，可以从store的state中派生出一些状态</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test1'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test2'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'test3'</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//getter中可以接受其他getter作为参数</span></span><br><span class=\"line\">    maxTodoId (state,getters) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> b.id - a.id &#125;)[<span class=\"number\">0</span>].id</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    doneTodoCount (state) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.done === <span class=\"literal\">true</span>).length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过this-store-state-getters属性-mapGetters访问派生状态\"><a href=\"#通过this-store-state-getters属性-mapGetters访问派生状态\" class=\"headerlink\" title=\"通过this.$store.state.getters属性 / mapGetters访问派生状态\"></a>通过this.$store.state.getters属性 / mapGetters访问派生状态</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([<span class=\"string\">'doneTodoCount'</span>]),</span><br><span class=\"line\">  doneTodoCount2 () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.getters.doneTodoCount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"getter传参：让getter返回函数\"><a href=\"#getter传参：让getter返回函数\" class=\"headerlink\" title=\"getter传参：让getter返回函数\"></a>getter传参：让getter返回函数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">  getTodoBySearch: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">s</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (todo.id + todo.desc).indexOf(s) &gt;= <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想三：mutation\"><a href=\"#Vuex核心思想三：mutation\" class=\"headerlink\" title=\"Vuex核心思想三：mutation\"></a>Vuex核心思想三：mutation</h2><h3 id=\"提交mutation\"><a href=\"#提交mutation\" class=\"headerlink\" title=\"提交mutation\"></a>提交mutation</h3><p>组件不能直接更改Vuex store中的状态，而是要提交(commit)变更(mutations)</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'home'</span>,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addTodo (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (e.keyCode === <span class=\"number\">13</span> &amp;&amp; <span class=\"keyword\">this</span>.model.desc) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'addTodo'</span>, <span class=\"keyword\">this</span>.model.desc)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.model.desc = <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<strong>addTodo</strong>就是在store的mutation中定义的一种变更：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  addTodo (state, desc) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxTodoId = state.todos.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> b.id - a.id &#125;)[<span class=\"number\">0</span>].id</span><br><span class=\"line\">    <span class=\"keyword\">const</span> todo = &#123;</span><br><span class=\"line\">      desc,</span><br><span class=\"line\">      id: maxTodoId + <span class=\"number\">1</span>,</span><br><span class=\"line\">      done: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    state.todos.push(todo)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交载荷（Payload）\"><a href=\"#提交载荷（Payload）\" class=\"headerlink\" title=\"提交载荷（Payload）\"></a><strong>提交载荷（Payload）</strong></h3><p>可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/page/home.vue</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> payload=&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">store.commit(<span class=\"string\">'increment'</span>, payload)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-需遵守-Vue-的响应规则\"><a href=\"#Mutation-需遵守-Vue-的响应规则\" class=\"headerlink\" title=\"Mutation 需遵守 Vue 的响应规则\"></a>Mutation 需遵守 Vue 的响应规则</h3><p>Vuex 的 store 中的状态是响应式的，</p>\n<p>当我们变更状态时，</p>\n<p>监视状态的 Vue 组件也会自动更新,</p>\n<p>因此 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项</p>\n<ol>\n<li>最好提前在你的 store 中初始化好所有所需属性。</li>\n<li><p>当需要在对象上添加新属性时，应该</p>\n<ul>\n<li>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code></li>\n<li><p>以新对象替换老对象。例如，利用<strong><a href=\"https://github.com/tc39/proposal-object-rest-spread\" target=\"_blank\" rel=\"noopener\">对象展开运算符</a></strong>：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.obj = &#123; ...state.obj, <span class=\"attr\">newProp</span>: <span class=\"number\">123</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用常量替代-Mutation-事件类型\"><a href=\"#使用常量替代-Mutation-事件类型\" class=\"headerlink\" title=\"使用常量替代 Mutation 事件类型\"></a>使用常量替代 Mutation 事件类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mutation-types.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SOME_MUTATION = <span class=\"string\">'SOME_MUTATION'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SOME_MUTATION &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mutation-types'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class=\"line\">    [SOME_MUTATION] (state) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// mutate state</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mutation-必须是同步函数\"><a href=\"#Mutation-必须是同步函数\" class=\"headerlink\" title=\"Mutation 必须是同步函数\"></a>Mutation 必须是同步函数</h3><p>devtools捕捉会mutations记录，每次记录前一状态+后一状态的快照</p>\n<p>如果mutation里是异步的函数，很可能快照捕捉时，状态还未更改</p>\n<p>在回调函数中进行的状态的改变都是不可追踪的</p>\n<p>因此很<strong>不利于调试</strong></p>\n<h2 id=\"Vuex核心思想四：Action\"><a href=\"#Vuex核心思想四：Action\" class=\"headerlink\" title=\"Vuex核心思想四：Action\"></a>Vuex核心思想四：Action</h2><h3 id=\"Action与Mutation类似，不同点：\"><a href=\"#Action与Mutation类似，不同点：\" class=\"headerlink\" title=\"Action与Mutation类似，不同点：\"></a>Action与Mutation类似，不同点：</h3><ul>\n<li>Action 提交(commit)的是 mutation，而<strong>不是直接变更状态</strong>。</li>\n<li>Action 可以包含任意<strong>异步</strong>操作。</li>\n</ul>\n<h3 id=\"action函数的定义\"><a href=\"#action函数的定义\" class=\"headerlink\" title=\"action函数的定义\"></a>action函数的定义</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  addTodo (context) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以通过context参数去调用commit，获取state和getters</span></span><br><span class=\"line\">    <span class=\"comment\">// context区别于state（module中会讲到</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      context.commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">      <span class=\"comment\">// context.state</span></span><br><span class=\"line\">      <span class=\"comment\">// context.getters</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  addTodo2 (&#123; commit, state, getters &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 也可以直接用参数解构的方法获取commit，state，getters</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"组件分发action（可以带载荷-参数\"><a href=\"#组件分发action（可以带载荷-参数\" class=\"headerlink\" title=\"组件分发action（可以带载荷/参数\"></a>组件分发action（可以带载荷/参数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  addTodo (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'addTodo'</span>, payload)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.dispatch(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">'addTodo'</span>,</span><br><span class=\"line\">      ...payload</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//action接收payload参数</span></span><br><span class=\"line\"><span class=\"comment\">//action内部也可以dispatch其他action</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  addTodo2 (&#123; commit, state, getters, dispatch &#125;, payload) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 也可以直接用参数解构的方法获取commit，state，getters</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      commit(<span class=\"string\">'addTodo'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//dispatch</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合action\"><a href=\"#组合action\" class=\"headerlink\" title=\"组合action\"></a>组合action</h3><ul>\n<li>action可以返回一个promise函数</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">'someMutation'</span>)</span><br><span class=\"line\">        resolve()</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dispatch可以处理action返回的promise，并仍然返回promise</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.dispatch(<span class=\"string\">'actionA'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>利用await/async编写组合action更加简洁</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设 getData() 和 getOtherData() 返回的是 Promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(<span class=\"string\">'gotData'</span>, <span class=\"keyword\">await</span> getData())</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> actionB (&#123; commit, dispatch &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> dispatch(<span class=\"string\">'actionA'</span>)</span><br><span class=\"line\">    commit(<span class=\"string\">'gotOtherData'</span>, <span class=\"keyword\">await</span> getOtherData())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vuex核心思想五：Module\"><a href=\"#Vuex核心思想五：Module\" class=\"headerlink\" title=\"Vuex核心思想五：Module\"></a>Vuex核心思想五：Module</h2><p>当应用较复杂时，应用所有状态集中在一个(store)对象上很臃肿</p>\n<p>因此Vuex允许将store按模块来划分，</p>\n<p>每个store拥有自己的state、getter、mutations、actions、子模块</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/store/module/moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  state: &#123;&#125;,</span><br><span class=\"line\">  getter: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moduleA <span class=\"keyword\">from</span> <span class=\"string\">'module/moduleA'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块内的局部状态state（getter-mutation-action获取state\"><a href=\"#模块内的局部状态state（getter-mutation-action获取state\" class=\"headerlink\" title=\"模块内的局部状态state（getter mutation action获取state\"></a>模块内的局部状态state（getter mutation action获取state</h3><p><strong>对于模块内的getter、mutation函数</strong>：</p>\n<p>接收的第一个参数：state，指向的是模块内的局部状态</p>\n<p>getter函数接收的<strong>第三个</strong>参数是根节点状态：<strong>rootState</strong></p>\n<p><strong>对于模块内的action函数:</strong></p>\n<p>context.state指向的也是模块的局部状态，根节点的状态为<strong>context.rootState</strong></p>\n<h3 id=\"全局命名空间（组件获取getter-mutation-action\"><a href=\"#全局命名空间（组件获取getter-mutation-action\" class=\"headerlink\" title=\"全局命名空间（组件获取getter mutation action\"></a>全局命名空间（组件获取getter mutation action</h3><p>默认情况：模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p>\n<h3 id=\"带命名空间的模块\"><a href=\"#带命名空间的模块\" class=\"headerlink\" title=\"带命名空间的模块\"></a>带命名空间的模块</h3><p>如果希望你的模块具有更高的<strong>封装度和复用性</strong>，你可以通过添加 <strong>namespaced: true</strong> 的方式使其成为带命名空间的模块。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    account: &#123;</span><br><span class=\"line\">      namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 模块内容（module assets）</span></span><br><span class=\"line\">      state: &#123; ... &#125;, <span class=\"comment\">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class=\"line\">      getters: &#123;</span><br><span class=\"line\">        isAdmin () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/isAdmin']</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      actions: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; dispatch('account/login')</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      mutations: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; commit('account/login')</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 嵌套模块</span></span><br><span class=\"line\">      modules: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没加namespaced属性，所以继承父模块的命名空间</span></span><br><span class=\"line\">        myPage: &#123;</span><br><span class=\"line\">          state: &#123; ... &#125;,</span><br><span class=\"line\">          getters: &#123;</span><br><span class=\"line\">            profile () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/profile']</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 进一步嵌套命名空间</span></span><br><span class=\"line\">        posts: &#123;</span><br><span class=\"line\">          namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          state: &#123; ... &#125;,</span><br><span class=\"line\">          getters: &#123;</span><br><span class=\"line\">            popular () &#123; ... &#125; <span class=\"comment\">// -&gt; getters['account/posts/popular']</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>启用了命名空间的 getter 和 action 会<strong>收到局部化的 getter，dispatch 和 commit</strong>。</p>\n<p>换言之，在使用模块内容（module assets，即指模块内的state、getter、mutation、action）时不需要在同一模块内额外添加空间名前缀。</p>\n<p>所以：更改 namespaced 属性后不需要修改模块内的代码</p>\n<h3 id=\"带命名空间的模块内访问全局内容-Global-Assets\"><a href=\"#带命名空间的模块内访问全局内容-Global-Assets\" class=\"headerlink\" title=\"带命名空间的模块内访问全局内容(Global Assets)\"></a>带命名空间的模块内访问全局内容(Global Assets)</h3><p>Global Assets即全局的state,getter,mutation,action</p>\n<ul>\n<li>getter的第三、第四参数：rootState、rootGetters</li>\n<li>action的context参数包含:rootState、rootGetters</li>\n<li>全局commit、dispatch：传入参数root:true</li>\n</ul>\n<h3 id=\"带命名空间的模块注册全局-action\"><a href=\"#带命名空间的模块注册全局-action\" class=\"headerlink\" title=\"带命名空间的模块注册全局 action\"></a>带命名空间的模块注册全局 action</h3><p>传入root选项，值为true</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">someAction:&#123;</span><br><span class=\"line\">\troot:<span class=\"literal\">true</span>,</span><br><span class=\"line\">\thandler:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapState-mapGetters-mapActions-和-mapMutations操作命名空间：\"><a href=\"#mapState-mapGetters-mapActions-和-mapMutations操作命名空间：\" class=\"headerlink\" title=\"mapState, mapGetters, mapActions 和 mapMutations操作命名空间：\"></a>mapState, mapGetters, mapActions 和 mapMutations操作命名空间：</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一：直接在状态名前加命名空间</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.some.nested.module.a,</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.some.nested.module.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([</span><br><span class=\"line\">    <span class=\"string\">'some/nested/module/foo'</span>, <span class=\"comment\">// -&gt; this['some/nested/module/foo']()</span></span><br><span class=\"line\">    <span class=\"string\">'some/nested/module/bar'</span> <span class=\"comment\">// -&gt; this['some/nested/module/bar']()</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二：也可以把共有的命名空间传给函数第一个参数</span></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(<span class=\"string\">'some/nested/module'</span>, &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.a,</span><br><span class=\"line\">    b: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions(<span class=\"string\">'some/nested/module'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'foo'</span>, <span class=\"comment\">// -&gt; this.foo()</span></span><br><span class=\"line\">    <span class=\"string\">'bar'</span> <span class=\"comment\">// -&gt; this.bar()</span></span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法三：利用createNamespacedHelpers，传入命名空间，会返回已经绑定命名空间的map方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createNamespacedHelpers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class=\"string\">'some/nested/module'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态注册模块\"><a href=\"#动态注册模块\" class=\"headerlink\" title=\"动态注册模块\"></a>动态注册模块</h3><p>在store已经实例化后，如果想添加模块，可以用registerModule方法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123; <span class=\"comment\">/* 选项 */</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册模块 `myModule`</span></span><br><span class=\"line\">store.registerModule(<span class=\"string\">'myModule'</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 注册嵌套模块 `nested/myModule`</span></span><br><span class=\"line\">store.registerModule([<span class=\"string\">'nested'</span>, <span class=\"string\">'myModule'</span>], &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>卸载动态模块：unregisterModule（不能卸载静态模块</p>\n<p>判断模块是否存在：hasModule</p>\n<h2 id=\"纯对象state-amp-函数声明state\"><a href=\"#纯对象state-amp-函数声明state\" class=\"headerlink\" title=\"纯对象state&amp;函数声明state\"></a>纯对象state&amp;函数声明state</h2><p>纯对象state可以通过引用被访问，造成状态对象被修改时 store 或模块间数据互相污染的问题。</p>\n<p>因此可以和vue组件内的data一样，使用函数来声明state：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyReusableModule = &#123;</span><br><span class=\"line\">  state () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// mutation, action 和 getter 等等...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>在非生产环境开启严格模式，在任何尝试不通过mutation直接修改state的操作时，都会抛出错误</p>\n<h2 id=\"v-model-amp-Vuex的state\"><a href=\"#v-model-amp-Vuex的state\" class=\"headerlink\" title=\"v-model &amp; Vuex的state\"></a>v-model &amp; Vuex的state</h2><p>v-model直接绑定Vuex上的state，在严格模式下会报错，因为双向绑定的机制会直接尝试修改state，而不是通过mutation，解决方法是，绑定一个设置了getter和setter的计算属性：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tattr:&#123;</span><br><span class=\"line\">\t\tgetter()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.attr</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tsetter(val)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">'updateAttr'</span>,val)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"_content":"# Devtools 入门\n\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   [进阶系列文链接](https://www.scarsu.com/categories/devtools%E8%80%81%E5%8F%B8%E6%9C%BA%E5%85%BB%E6%88%90%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；另工具类知识需要实践，建议阅读本文时打开 [sample](https://masteringdevtools.com/)用 devtools 操作一遍\n-   参考 1：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n-   参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 [Mastering Chrome Developer Tools v2 课程](https://frontendmasters.com/courses/chrome-dev-tools-v2)\n-   参考 3：来自 作者 Tomek Sułkowski 在 medium 的[系列文章](https://medium.com/@tomsu)\n-   [系列文脑图.xmind]()\n-   [脑图.png](https://i.loli.net/2019/04/19/5cb95639a9f73.png)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   或者使用金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n\n## Elements 面板\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](../images/devtools/000.png)\n\n### Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n### Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n### DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](../images/devtools/010.png)\n\n在 DOM 树中你可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](../images/devtools/011.png)\n\n### Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](../images/devtools/020.png)\n\n### color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n### Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](../images/devtools/030.png)\n\n### Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](../images/devtools/040.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n### DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](../images/devtools/051.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](../images/devtools/050.png)\n\n### Properties\n\nProperties 面板会列出元素 DOM 底层相关属性\n![0](../images/devtools/060.png)\n\n### Accessibility(可访问性)\n\n-   在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。\n-   查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。\n-   查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性\n\n![accessibility.png](https://i.loli.net/2019/04/21/5cbc83e1561e4.png)\n\n## Console 面板\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](../images/devtools/100.png)\n\n### message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](../images/devtools/110.png)\n\n### javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n### 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](../images/devtools/120.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n默认情况下\n\n-   子 frame 中：\n\n```js\n(window === self) === self.window;\n//top.window是顶级页面top的全局变量window\n```\n\n-   top frame 中：\n\n```js\n(((window === self) === self.window) === top) === top.window;\n```\n\n### console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](../images/devtools/131.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](../images/devtools/132.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](../images/devtools/133.gif)\n\n### console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](../images/devtools/191.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](../images/devtools/140.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](../images/devtools/135.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](../images/devtools/160.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](../images/devtools/170.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](../images/devtools/180.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](../images/devtools/190.png)\n\n## Sources 源文件面板\n\n在 Sources 面板你可以：\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n### 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](../images/devtools/201.GIF)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](../images/devtools/202.GIF)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](../images/devtools/203.GIF)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](../images/devtools/204.png)\n6. Exception 异常断点\n\n    ![0](../images/devtools/205.png)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](../images/devtools/206.gif)\n\n### Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](../images/devtools/209.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](../images/devtools/210.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](../images/devtools/207.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](../images/devtools/211.png)\n\n-   Continue to here：继续执行至此行\n\n![0](../images/devtools/207.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](../images/devtools/208.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n### Devtools Nodejs debug\n\n-   node 执行 js 文件，文件名前加--inspect 标志，启用浏览器 nodejs 调试\n\n![nodeDebug.png](https://i.loli.net/2019/04/22/5cbd33c700aed.png)\n\n-   点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试\n-   [更多相关](https://nodejs.org/en/docs/guides/debugging-getting-started/)\n\n### BlackBox\n\n-   BlackBox 的用途：\n\n    “BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数\n\n    ```\n    function animate() {\n    prepare();\n    lib.doFancyStuff(); // A\n    render();\n    }\n    ```\n\n    例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数\n\n    如果我确认该第三方库没有 bug\n\n    就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行\n\n-   三种添加 BlackBox 的方法：\n\n1. 在源代码窗格右键，选择\"BlackBox Script\"\n   ![0](../images/devtools/212.gif)\n\n2. 在 Call Stack 中右键某一帧，选择\"BlackBox Script\"\n   ![0](../images/devtools/211.gif)\n\n3. 在设置中的 Blackboxing 面板添加**正则表达式**匹配**文件名**\n\n    ![0](../images/devtools/213.gif)\n\n### Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有 sources 面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n### Source Map\n\n-   组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰\n-   Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持\n-   在 Chorme devtools 中，settings -> preferen -> sources 中，选中`Enable Javascript source maps`和`Enable CSS source maps`\n-   source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释`//# sourceMappingURL=/path/to/script.js.map`至生产文件末尾，也可以由服务端在响应头中添加`X-SourceMap: /path/to/script.js.map`，将 map 文件与生产文件对应。[更多关于 source map 的介绍](https://blog.teamtreehouse.com/introduction-source-maps)\n\n![sourceMap.png](https://i.loli.net/2019/04/22/5cbd10f324e07.png)\n\n### Local Overrides\n\n-   通过 Local Overrides，可以在 DevTools 中进行更改，并在页面加载后保留这些更改\n-   在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。\n-   与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。\n\n### Snippets 代码片段\n\n-   在 Sources 面板左侧选择 Snippets，或`crlt shift p`输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似\n-   snippets 中，选中代码并`ctrl enter`，或点击右下角的执行按钮，即可执行代码片段\n\n![snippet.png](https://i.loli.net/2019/04/22/5cbd147145955.png)\n\n### Content scripts\n\n-   这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同\n-   插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。\n-   Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。\n-   如果有浏览器插件相关的工作，可以更深入[研究](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions)，不赘述。\n\n## Network 面板\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n### 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n### 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n### 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n### Websocket\n\n-   在 network 的 filter 条件后，选择`ws`类型的请求，即可看到所有 Websocket 请求\n-   在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息\n\n![networkWebsocket.png](https://i.loli.net/2019/04/22/5cbdbe96a4597.png)\n\n### Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n### data URLs\n\n-   即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，[更多相关](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n## Performance 性能面板\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Janky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n### RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n### 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n### FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n### CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n### SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n### HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n### Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n### FPS 仪表工具\n\n-   通过`more -> more tools -> Rendering` 或者 `ctrl+shift+p -> rendering` 打开`Rendering`面板\n\n![](https://i.loli.net/2019/05/05/5ccee9d226d2e.png)\n\n-   启用`FPS meter`，即可看到的页面实时帧率\n\n![](https://i.loli.net/2019/05/05/5cceeb3144e12.gif)\n\n### Mian\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n### 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n\n## Memory 内存面板\n\n### 内存 && 内存泄露\n\n内存占用：\n\n1. allocate 分配内存(eg 声明变量\n2. 使用内存\n3. release 释放内存\n\n内存泄漏：\n\n-   `内存泄露-Memory Leak`：内存被占用后无法被 release，且无法被垃圾回收器回收\n-   内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少\n-   `垃圾回收-Garbage Collect-GC`：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停\n\n### 造成内存泄露常见原因\n\n-   `fogotten timer`被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件\n-   `Dettached HTMLElement`分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在\n\n### 内存监控 1-Task manager 任务管理器\n\n-   chorme 浏览器 -> task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小\n\n![](https://i.loli.net/2019/05/07/5cd194ba3a655.png)\n\n-   `Memory` 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。\n-   `JavaScript Memory`列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。\n\n### 内存监控 2-Devtools Performance 面板\n\n-   在`Performance`面板记录性能时，勾选`memory`即可在分析结果中看到 memory 占用情况\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n```js\n//示例1:正常的内存占用与GC\n\nvar x = [];\n\nfunction grow() {\n    for (var i = 0; i < 10000; i++) {\n        document.body.appendChild(document.createElement(\"div\"));\n    }\n    x.push(new Array(1000000).join(\"x\"));\n}\n\nsetInterval(grow, 100);\n```\n\n![](https://i.loli.net/2019/05/07/5cd19db41fbbc.png)\n\n```js\n//示例2:不可被GC的内存泄漏\n\nfunction grow() {\n    // for (var i = 0; i < 10000; i++) {\n    //     document.body.appendChild(document.createElement(\"div\"));\n    // }\n    // x.push(new Array(1000000).join(\"x\"));\n    var ul = document.createElement(\"ul\");\n    for (var i = 0; i < 10; i++) {\n        var li = document.createElement(\"li\");\n        ul.appendChild(li);\n    }\n    detachedTree = ul;\n}\n\nsetInterval(grow, 1000);\n```\n\n![](https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png)\n\n### 内存监控 3-Devtools Memory 面板\n\n![](https://i.loli.net/2019/05/07/5cd18fa5d8489.png)\n\n-   如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角`record`开始记录内存\n\n1.  `Heap snapshot`堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况\n2.  `Allocation instrumentation on timeline`按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)\n3.  `Allocation sampling`使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。\n\n-   左上角的垃圾桶图标`Collect garbage`是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收\n\n-   利用上述示例 2 代码，执行时间线 Memory 分析：\n\n![](https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png)\n\n### 扩展\n\n-   [内存相关术语](https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101)\n-   [深入内存分析](https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots)\n","source":"_drafts/devtools_intro_share.md","raw":"# Devtools 入门\n\n## 相关\n\n-   本文作者：[ScarSu](www.scarsu.com)\n-   [进阶系列文链接](https://www.scarsu.com/categories/devtools%E8%80%81%E5%8F%B8%E6%9C%BA%E5%85%BB%E6%88%90%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/)\n-   本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结\n-   本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；另工具类知识需要实践，建议阅读本文时打开 [sample](https://masteringdevtools.com/)用 devtools 操作一遍\n-   参考 1：[google developers 官方文档](https://developers.google.com/web/tools/chrome-devtools/)\n-   参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 [Mastering Chrome Developer Tools v2 课程](https://frontendmasters.com/courses/chrome-dev-tools-v2)\n-   参考 3：来自 作者 Tomek Sułkowski 在 medium 的[系列文章](https://medium.com/@tomsu)\n-   [系列文脑图.xmind]()\n-   [脑图.png](https://i.loli.net/2019/04/19/5cb95639a9f73.png)\n\n## web devtool 历史\n\n-   view-source + alert 调试法\n-   [Live DOM Viewer](https://software.hixie.ch/utilities/js/live-dom-viewer/)\n-   [Firebug](https://getfirebug.com/)\n\n## Chrome Devtools 界面概览\n\n![000devtoolsAll.png](https://i.loli.net/2019/04/19/5cb955bed88ce.png)\n\n## Tips and Tricks\n\n-   快捷键：ctrl shift p：执行命令\n-   快捷键：ctrl p：打开文件\n-   快捷键：esc：显示/隐藏 drawer(第二行面板\n-   快捷键：ctrl shift c：选择元素\n-   more -> focus debugee：切换至正在被调试的页面\n-   more -> more tools：全部面板\n-   无痕模式打开网页 —> 更纯净的调试环境，无扩展代码干扰\n-   实验性功能：\n\n```\n    打开url     chrome://flags/\n    搜索dev\n    打开Experimental Extension APIs开关\n    在settings中找到experiments可以找到相关实验性功能\n    shift按七次，显示隐藏的实验性功能（比如terminal\n```\n\n-   或者使用金丝雀版 chrome - [Canary - 开发者专用的每日更新版](https://www.google.cn/chrome/canary/)\n\n## Elements 面板\n\n使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS\n\n![Elements 面板](../images/devtools/000.png)\n\n### Inspect Mode\n\n快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式\n![inspect](https://i.loli.net/2019/04/19/5cb9cb351d6a2.png)\n\n在新版本 chrome 中，选择元素时会显示更多元素信息\n![inspect](https://i.loli.net/2019/04/19/5cb9ca97739bb.png)\n\n### Device Mode 设备模式\n\n-   模拟不同尺寸移动端设备下，网页的表现。\n-   是自适应网页调试利器。\n-   内置/可配置既有设备属性，例如 iphone/ipad\n-   支持调试媒体查询 media-query。\n\n![deviceMode](https://i.loli.net/2019/04/19/5cb9cc03d400a.png)\n\n### DOM 树\n\n在元素面板左侧是当前页的 DOM 树\n![0](../images/devtools/010.png)\n\n在 DOM 树中你可以：\n\n-   直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)\n-   添加元素断点(节点移除断点，属性变更断点，子树变更断点)\n-   模拟元素 focus/hover/actice 等状态\n-   选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置\n-   按快捷键**h**来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)\n-   按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素\n\n    ![0](../images/devtools/011.png)\n\n### Styles\n\n在面板右侧 Styles 窗格中：\n\n-   会显示节点的各级样式\n-   每级样式的来源\n-   每条样式属性是否命中\n-   可以直接增/删/改元素样式，查看实时效果(非持久化)\n\n![0](../images/devtools/020.png)\n\n### color picker\n\n![](https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png)\n\n-   在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具\n-   按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex\n\n![](https://i.loli.net/2019/05/13/5cd95e1abea2793787.png)\n\n-   page colors：color picker 中会列出页面所有的颜色\n-   material colors：color picker 中会列出 google 设计推荐色系\n\n### Computed\n\n在 Styles 右侧的 Computed 窗格中可以查看：\n\n-   元素的盒模型(双击值可编辑)\n-   元素所有样式的**计算后最终值**(即最终实际应用到元素的值)\n-   点开每一条最终值，可以看到所有该条样式的规则，以及代码来源\n-   勾选**show all**选项，会同时列出元素**继承 / 默认**样式\n\n![0](../images/devtools/030.png)\n\n### Event Listeners\n\n-   在 Event Listeners 窗格中，可以看到元素的事件监听器\n-   例如\"load\",\"DOMContentLoaded\",\"click\"等，以及每个事件对应的事件处理函数\n\n![0](../images/devtools/040.png)\n\n在源代码中加 **行 debugger 断点**，或者**debug(函数)断点**(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；\n\n或者你想调试别人开发的 你不拥有源码的 网页；\n\n这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的**事件函数代码**并调试。\n\n### DOM Breakpoints\n\n在面板右侧 DOM Breakpoints 中，可以查看**元素断点**\n\n![0](../images/devtools/051.png)\n\n相应的在左侧 DOM 树右键点击元素，可以给元素添加断点\n\n元素断点有三种类型：属性变更，子树变更，节点删除\n\n例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试\n![0](../images/devtools/050.png)\n\n### Properties\n\nProperties 面板会列出元素 DOM 底层相关属性\n![0](../images/devtools/060.png)\n\n### Accessibility(可访问性)\n\n-   在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。\n-   查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。\n-   查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性\n\n![accessibility.png](https://i.loli.net/2019/04/21/5cbc83e1561e4.png)\n\n## Console 面板\n\nConsole 面板是浏览器的控制台，也是 Devtools 的灵魂。\n\n可以通过**设置->Show Console drawer**或者**Esc 快捷键**让 Console 在每个面板都能显示。\n![0](../images/devtools/100.png)\n\n### message\n\n-   在 console 中，可以看到来自**浏览器**/**代码**的五种类型的信息：\n    -   user message\n    -   error\n    -   warning\n    -   info\n    -   verbose\n-   相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到**timestamps**命令，给消息加上时间戳\n-   通过选项**Log XMLHttpRequest**选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)\n-   通过**Hide network**选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)\n-   通过**Preserve log**选择保留历史记录，即刷新页面后是否还显示先前的消息\n\n![0](../images/devtools/110.png)\n\n### javascript 实时执行环境\n\n-   console 除了能输出调试信息，也是一个 javascript 实时执行环境。\n-   可以直接在这里输入任何**全局变量名**/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取**局部变量**值\n-   右键选**Store as global variable**，可以将输出值存储为一个临时的全局变量\n-   双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）\n-   console 中输出的 dom 元素 -> 右键 -> reveal in elements：快速定位到元素面板中的当前元素\n\n### 选择执行环境\n\n可以通过左上的下拉列表，选择不同的**执行环境**\n\n![0](../images/devtools/120.png)\n\ntop 是最外层的顶级页面,其他的是 iframe 子页面\n\n默认情况下\n\n-   子 frame 中：\n\n```js\n(window === self) === self.window;\n//top.window是顶级页面top的全局变量window\n```\n\n-   top frame 中：\n\n```js\n(((window === self) === self.window) === top) === top.window;\n```\n\n### console 中的`$`符号：\n\n-   可以通过`$0`，获取当前在 Elements 面板所选中的元素节点\n-   如果 `$` 在当前页面没被占用，可以用来替代 document.querySlector 方法使用\n-   `$$` 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而`$$`能直接返回数组(Array)\n    ![0](../images/devtools/131.png)\n-   `$_`可以引用上一次执行的结果\n    ![0](../images/devtools/132.png)\n-   如果需要使用 npm 的包，可以安装 Console Importer 插件，用`$i`方法引入 npm 中的库\n    ![0](../images/devtools/133.gif)\n\n### console 下的方法：\n\n-   除了被用烂了的`console.log()`（当然 console.log 也有特别一点的用法）\n    ![0](../images/devtools/191.png)\n-   console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法\n-   直接在 console 中输入 console，可以看到 console 对象下的所有方法\n    ![0](../images/devtools/140.png)\n-   例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出\n    ![0](../images/devtools/135.gif)\n-   例如可以使用 console.time()和 console.timeEnd()方法来测量时间差\n    ![0](../images/devtools/160.png)\n-   另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象\n    ![0](../images/devtools/170.png)\n\n```js\nqueryObjects(Object); //返回所有object对象\nqueryObjects(Function); //返回所有函数\nqueryObjects(Array); //返回所有数组\n```\n\n-   monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息\n    ![0](../images/devtools/180.png)\n-   monitorEvents(el,eventType)方法来追踪事件\n    ![0](../images/devtools/190.png)\n\n## Sources 源文件面板\n\n在 Sources 面板你可以：\n\n-   Debug : 在源代码面板中可以设置**断点**来调试 JavaScript ，比 console.log()调试更快速高效\n-   Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的**实时编辑器**\n\n### 七种断点类型\n\n1. 行断点：代码运行到当前行之前暂停执行\n    ```\n    在源代码添加debugger关键字\n    或者\n    点击Sources面板中的源代码的行号\n    ```\n2. 条件行断点：当满足条件时才会触发该断点\n    ```\n    右击Sources面板中的源代码的行号\n    选择“Add conditional breakpoint”\n    ```\n    ![0](../images/devtools/201.GIF)\n3. DOM 断点\n    ```\n    即Elements面板提及过的三种DOM断点：\n    - 节点属性断点\n    - 节点删除断点\n    - 子树变更断点\n    ```\n    ![0](../images/devtools/202.GIF)\n4. XHR/Fetch 断点\n    ```\n    在页面发出XHR或Fetch请求前加断点\n    ```\n    ![0](../images/devtools/203.GIF)\n5. Event Listener 事件监听断点\n    ```\n    可以在所有类型的事件函数被出发前加断点\n    ```\n    ![0](../images/devtools/204.png)\n6. Exception 异常断点\n\n    ![0](../images/devtools/205.png)\n\n7. Function 函数断点\n\n    ```\n    把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码\n    ```\n\n    ![0](../images/devtools/206.gif)\n\n### Debug\n\n-   函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态\n\n![0](../images/devtools/209.png)\n\n-   全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure\n\n![0](../images/devtools/210.png)\n\n-   step over next function\n-   step into next function\n-   step out current function\n-   step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)\n\n![0](../images/devtools/207.png)\n\n-   long resume：恢复执行，并将断点停用 500ms\n\n![0](../images/devtools/211.png)\n\n-   Continue to here：继续执行至此行\n\n![0](../images/devtools/207.gif)\n\n-   Restart Frame：重新执行函数调用堆栈中的某一帧\n\n![0](../images/devtools/208.gif)\n\n-   行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点\n\n![](https://i.loli.net/2019/05/13/5cd969192e3cf64417.png)\n\n### Devtools Nodejs debug\n\n-   node 执行 js 文件，文件名前加--inspect 标志，启用浏览器 nodejs 调试\n\n![nodeDebug.png](https://i.loli.net/2019/04/22/5cbd33c700aed.png)\n\n-   点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试\n-   [更多相关](https://nodejs.org/en/docs/guides/debugging-getting-started/)\n\n### BlackBox\n\n-   BlackBox 的用途：\n\n    “BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数\n\n    ```\n    function animate() {\n    prepare();\n    lib.doFancyStuff(); // A\n    render();\n    }\n    ```\n\n    例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数\n\n    如果我确认该第三方库没有 bug\n\n    就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行\n\n-   三种添加 BlackBox 的方法：\n\n1. 在源代码窗格右键，选择\"BlackBox Script\"\n   ![0](../images/devtools/212.gif)\n\n2. 在 Call Stack 中右键某一帧，选择\"BlackBox Script\"\n   ![0](../images/devtools/211.gif)\n\n3. 在设置中的 Blackboxing 面板添加**正则表达式**匹配**文件名**\n\n    ![0](../images/devtools/213.gif)\n\n### Workspace：Devtools as IDE 将更改持久化\n\n-   在 sources 左侧的面板中选择`Filesystem`，点击`Add folder to workspace`，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）\n-   绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识\n    ![workspace.png](https://i.loli.net/2019/04/22/5cbd0771e5e31.png)\n    ![workspace2.png](https://i.loli.net/2019/04/22/5cbd07bf14dc8.png)\n-   目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react\n-   所有 sources 面板的文件，都可以右键选择`local modifications`，查看所有更改\n-   对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存\n\n### Source Map\n\n-   组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰\n-   Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持\n-   在 Chorme devtools 中，settings -> preferen -> sources 中，选中`Enable Javascript source maps`和`Enable CSS source maps`\n-   source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释`//# sourceMappingURL=/path/to/script.js.map`至生产文件末尾，也可以由服务端在响应头中添加`X-SourceMap: /path/to/script.js.map`，将 map 文件与生产文件对应。[更多关于 source map 的介绍](https://blog.teamtreehouse.com/introduction-source-maps)\n\n![sourceMap.png](https://i.loli.net/2019/04/22/5cbd10f324e07.png)\n\n### Local Overrides\n\n-   通过 Local Overrides，可以在 DevTools 中进行更改，并在页面加载后保留这些更改\n-   在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。\n-   与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。\n\n### Snippets 代码片段\n\n-   在 Sources 面板左侧选择 Snippets，或`crlt shift p`输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似\n-   snippets 中，选中代码并`ctrl enter`，或点击右下角的执行按钮，即可执行代码片段\n\n![snippet.png](https://i.loli.net/2019/04/22/5cbd147145955.png)\n\n### Content scripts\n\n-   这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同\n-   插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。\n-   Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。\n-   如果有浏览器插件相关的工作，可以更深入[研究](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions)，不赘述。\n\n## Network 面板\n\n![network.png](https://i.loli.net/2019/04/22/5cbd4f884b14c.png)\n\n-   默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。\n-   左上红点按钮：停止记录网络请求\n-   第二个按钮：清空请求记录\n-   录像按钮：页面加载时捕获屏幕截图\n-   过滤按钮：显示/隐藏 过滤条件行\n-   View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图\n-   Group By Frame：是否根据不同的 frame 分类显示请求\n-   Preserve Log：保存显示跨页面的加载请求\n-   Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验\n-   Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G\n\n### 筛选请求\n\n-   filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔\n-   支持过滤的属性：\n    -   domain。 仅显示来自指定域的资源。 可以使用通配符字符 (`*`) 纳入多个域。 例如，\\*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。\n    -   has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。\n    -   is。 使用 is:running 可以查找 WebSocket 资源。\n    -   larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。\n    -   method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。\n    -   mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。\n    -   mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。\n    -   scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。\n    -   set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。\n    -   set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。\n    -   set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。\n    -   status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。\n-   例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF\n-   `Hide Data URLs`：隐藏 [data 类型的 url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n### 瀑布图\n\n-   瀑布图按时间线展示所有请求\n-   可以用鼠标拖动选中一段时间，只查看改时间线内的请求\n-   瀑布图中有两条竖线，一条蓝色，代表[DOMContentLoaded](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)事件发生的事件，一条红色代表[load](https://developer.mozilla.org/zh-CN/docs/Web/Events/load)事件发生的时间点\n\n### 分析请求/请求列表\n\n-   重播请求：右键点击 Requests 表格中的请求 -> `Replay XHR`\n-   手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cache`\n-   手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -> 选择 `Clear Browser Cookies`\n-   自定义列表中展示的列\n\n![network2.png](https://i.loli.net/2019/04/22/5cbd553d024cc.png)\n\n-   请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：\n\n![networkOrder.png](https://i.loli.net/2019/04/22/5cbd63427ece0.png)\n\n-   每条请求，可以看到网络请求以及被清华求资源的全部信息：\n    -   请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址\n    -   请求相关：请求头、Initiator、Priority\n    -   响应相关：响应头、响应内容\n-   Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码\n-   两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）\n\n-   按住`shift`鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。\n\n![initiator.png](https://i.loli.net/2019/04/22/5cbd9945dd05b.png)\n\n-   Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。\n\n### Websocket\n\n-   在 network 的 filter 条件后，选择`ws`类型的请求，即可看到所有 Websocket 请求\n-   在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息\n\n![networkWebsocket.png](https://i.loli.net/2019/04/22/5cbdbe96a4597.png)\n\n### Color Code：瀑布图中的几种颜色与代码\n\n![colorCode.png](https://i.loli.net/2019/04/22/5cbdc5acaff77.png)\n\n-   Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：\n    -   存在更高优先级的请求。\n    -   此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能->避免 queue->合并资源请求）\n    -   浏览器正在短暂分配磁盘缓存中的空间\n-   Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。\n-   DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。\n-   Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。\n-   initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间\n-   SSL 完成 SLL 握手所需要的时间\n-   Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。\n-   ServiceWorker Preparation。 浏览器正在启动 Service Worker。\n-   Request to ServiceWorker。 正在将请求发送到 Service Worker。\n-   Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。\n-   Content Download。 浏览器正在接收响应。\n-   Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。\n-   Reading Push。 浏览器正在读取之前收到的本地数据。\n\n### DOMContentLoaded 和 load 事件\n\n-   DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 `<img>` 和样式表等外部资源可能并没有下载完毕。\n-   load — 浏览器已经加载了所有的资源（图像，样式表等）。\n-   beforeunload/unload -- 当用户离开页面的时候触发。\n-   [更多](https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded)\n\n### data URLs\n\n-   即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，[更多相关](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n\n## Performance 性能面板\n\n-   performance 面板可以用于分析`运行时性能`(运行时强调的是与页面加载性能相区分)\n-   以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响\n-   [Janky Animation demo ：性能测试 demo](https://googlechrome.github.io/devtools-samples/jank/)\n-   视图 overview：\n\n![performance.png](https://i.loli.net/2019/04/23/5cbf1d586fe21.png)\n\n### RAIL 模型\n\n-   [RAIL 模型](https://developers.google.com/web/fundamentals/performance/rail)是一种性能模型，定义了四个维度的性能分析指标\n-   `Response`：在`100 毫秒`以内响应（例如从点按到绘制）\n-   `Animation`： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 `10 毫秒`来执行代码）\n-   `Idle`：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 `50ms`，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。\n-   `Load`：在 `1000 毫秒`以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段\n\n-   通过 performance 面板，可以得到这四个维度的分析数据\n\n### 控制区\n\n![](https://i.loli.net/2019/05/01/5cc9642fa35b5.png)\n\n-   点击`录制按钮`或者`开始录制并刷新页面按钮`,可以在控制区下方得到全部性能分析结果\n-   其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴\n-   可以在 overview 窗格拖动鼠标，选择某段时间的分析结果\n-   滚动鼠标滚轮，缩放/移动选中事件\n-   在火焰图窗格，按住`shift`，滚动鼠标滚轮，可以上下\n-   在火焰图窗格，也可以直接左右拖动图表\n-   或者用`W A S D`按键控制缩放移动\n-   `Disable JavaScript samples`默认情况，在`Main`主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录\n-   `Enable advanced paint instrumentation`启用高级绘图工具，可以在分析结果的`Frames`中的每一帧的详细结果中看到`Layer`选项卡，其中有选中帧的详细图层信息；也可以在`Main`主线程火焰图中选中绿色的`Paint`事件，在最底部详细信息的`Paint Profile`选项卡中，看到详细的页面绘制过程分析\n-   `Collect garbage`控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用\n\n### FPS 图表 - Frames Per Seconds\n\n![](https://i.loli.net/2019/05/05/5ccee0f3335be.png)\n\n-   FPS 图表中，绿色代表帧率高低，参考`RAIL`模型，帧率>=60 时，用户能体验的顺滑的网页\n-   红色出现 代表有掉帧情况\n\n### CPU 图表\n\n![](https://i.loli.net/2019/05/05/5ccee13cd4479.png)\n\n-   CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图\n\n![](https://i.loli.net/2019/05/05/5ccee05903554.png)\n\n-   当 CPU 长时间被占满，就是当前网页性能需要优化的信号\n\n### SCREENSHOTS\n\n-   鼠标在`FPS,CPU,NET`图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果\n\n![](https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif)\n\n### HEAP\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n-   在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的`JS Heap`相对应\n-   在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计\n\n### Frames\n\n-   点击三角箭头展开`Frames`区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低\n\n![](https://i.loli.net/2019/05/05/5ccee92a52b29.png)\n\n### FPS 仪表工具\n\n-   通过`more -> more tools -> Rendering` 或者 `ctrl+shift+p -> rendering` 打开`Rendering`面板\n\n![](https://i.loli.net/2019/05/05/5ccee9d226d2e.png)\n\n-   启用`FPS meter`，即可看到的页面实时帧率\n\n![](https://i.loli.net/2019/05/05/5cceeb3144e12.gif)\n\n### Mian\n\n-   点击三角箭头展开`Main`区域，可以看到主线程上事件的`火焰图`\n-   x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件\n\n![](https://i.loli.net/2019/05/05/5cceec8b11f7f.png)\n\n-   通过调用堆栈，可以找出导致低性能的事件及其源码位置\n-   当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码\n\n![](https://i.loli.net/2019/05/05/5cceef6801439.png)\n\n![](https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif)\n\n-   点击`Animation Frame Fired`事件，可以在最下方`Summary`窗格查看触发动画事件的详细信息，点击`Initiator`后的`reveal`链接，会高亮到引起动画事件的事件\n\n![](https://i.loli.net/2019/05/05/5ccef012a3dba.gif)\n\n### 性能相关扩展\n\n-   [网页性能-性能模型/加载/渲染/审计/优化](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n-   [the-anatomy-of-a-frame - 一个帧的剖析](https://aerotwist.com/blog/the-anatomy-of-a-frame/)\n-   [常见的时间线事件参考](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference)\n\n## Memory 内存面板\n\n### 内存 && 内存泄露\n\n内存占用：\n\n1. allocate 分配内存(eg 声明变量\n2. 使用内存\n3. release 释放内存\n\n内存泄漏：\n\n-   `内存泄露-Memory Leak`：内存被占用后无法被 release，且无法被垃圾回收器回收\n-   内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少\n-   `垃圾回收-Garbage Collect-GC`：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停\n\n### 造成内存泄露常见原因\n\n-   `fogotten timer`被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件\n-   `Dettached HTMLElement`分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在\n\n### 内存监控 1-Task manager 任务管理器\n\n-   chorme 浏览器 -> task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小\n\n![](https://i.loli.net/2019/05/07/5cd194ba3a655.png)\n\n-   `Memory` 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。\n-   `JavaScript Memory`列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。\n\n### 内存监控 2-Devtools Performance 面板\n\n-   在`Performance`面板记录性能时，勾选`memory`即可在分析结果中看到 memory 占用情况\n\n![](https://i.loli.net/2019/05/05/5ccee6f4b968d.png)\n\n```js\n//示例1:正常的内存占用与GC\n\nvar x = [];\n\nfunction grow() {\n    for (var i = 0; i < 10000; i++) {\n        document.body.appendChild(document.createElement(\"div\"));\n    }\n    x.push(new Array(1000000).join(\"x\"));\n}\n\nsetInterval(grow, 100);\n```\n\n![](https://i.loli.net/2019/05/07/5cd19db41fbbc.png)\n\n```js\n//示例2:不可被GC的内存泄漏\n\nfunction grow() {\n    // for (var i = 0; i < 10000; i++) {\n    //     document.body.appendChild(document.createElement(\"div\"));\n    // }\n    // x.push(new Array(1000000).join(\"x\"));\n    var ul = document.createElement(\"ul\");\n    for (var i = 0; i < 10; i++) {\n        var li = document.createElement(\"li\");\n        ul.appendChild(li);\n    }\n    detachedTree = ul;\n}\n\nsetInterval(grow, 1000);\n```\n\n![](https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png)\n\n### 内存监控 3-Devtools Memory 面板\n\n![](https://i.loli.net/2019/05/07/5cd18fa5d8489.png)\n\n-   如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角`record`开始记录内存\n\n1.  `Heap snapshot`堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况\n2.  `Allocation instrumentation on timeline`按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)\n3.  `Allocation sampling`使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。\n\n-   左上角的垃圾桶图标`Collect garbage`是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收\n\n-   利用上述示例 2 代码，执行时间线 Memory 分析：\n\n![](https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png)\n\n### 扩展\n\n-   [内存相关术语](https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101)\n-   [深入内存分析](https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots)\n","slug":"devtools_intro_share","published":0,"date":"2020-04-08T00:43:01.153Z","updated":"2020-09-12T05:46:15.085Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88jfo005vc8y6sbqff3he","content":"<h1 id=\"Devtools-入门\"><a href=\"#Devtools-入门\" class=\"headerlink\" title=\"Devtools 入门\"></a>Devtools 入门</h1><h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li><a href=\"https://www.scarsu.com/categories/devtools%E8%80%81%E5%8F%B8%E6%9C%BA%E5%85%BB%E6%88%90%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/\">进阶系列文链接</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；另工具类知识需要实践，建议阅读本文时打开 <a href=\"https://masteringdevtools.com/\" target=\"_blank\" rel=\"noopener\">sample</a>用 devtools 操作一遍</li>\n<li>参考 1：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n<li>参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 <a href=\"https://frontendmasters.com/courses/chrome-dev-tools-v2\" target=\"_blank\" rel=\"noopener\">Mastering Chrome Developer Tools v2 课程</a></li>\n<li>参考 3：来自 作者 Tomek Sułkowski 在 medium 的<a href=\"https://medium.com/@tomsu\" target=\"_blank\" rel=\"noopener\">系列文章</a></li>\n<li><a href>系列文脑图.xmind</a></li>\n<li><a href=\"https://i.loli.net/2019/04/19/5cb95639a9f73.png\" target=\"_blank\" rel=\"noopener\">脑图.png</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\"></p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>或者使用金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n</ul>\n<h2 id=\"Elements-面板\"><a href=\"#Elements-面板\" class=\"headerlink\" title=\"Elements 面板\"></a>Elements 面板</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"../images/devtools/000.png\" alt=\"Elements 面板\"></p>\n<h3 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h3><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h3 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h3><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h3 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h3><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"../images/devtools/010.png\" alt=\"0\"></p>\n<p>在 DOM 树中你可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"../images/devtools/011.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h3 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h3><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"../images/devtools/020.png\" alt=\"0\"></p>\n<h3 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h3><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h3><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"../images/devtools/030.png\" alt=\"0\"></p>\n<h3 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h3><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"../images/devtools/040.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h3 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h3><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"../images/devtools/051.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"../images/devtools/050.png\" alt=\"0\"></p>\n<h3 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h3><p>Properties 面板会列出元素 DOM 底层相关属性<br><img src=\"../images/devtools/060.png\" alt=\"0\"></p>\n<h3 id=\"Accessibility-可访问性\"><a href=\"#Accessibility-可访问性\" class=\"headerlink\" title=\"Accessibility(可访问性)\"></a>Accessibility(可访问性)</h3><ul>\n<li>在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。</li>\n<li>查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。</li>\n<li>查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/21/5cbc83e1561e4.png\" alt=\"accessibility.png\"></p>\n<h2 id=\"Console-面板\"><a href=\"#Console-面板\" class=\"headerlink\" title=\"Console 面板\"></a>Console 面板</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"../images/devtools/100.png\" alt=\"0\"></p>\n<h3 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h3><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"../images/devtools/110.png\" alt=\"0\"></p>\n<h3 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h3><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h3 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h3><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"../images/devtools/120.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<p>默认情况下</p>\n<ul>\n<li>子 frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">window</span> === self) === self.window;</span><br><span class=\"line\"><span class=\"comment\">//top.window是顶级页面top的全局变量window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>top frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(((<span class=\"built_in\">window</span> === self) === self.window) === top) === top.window;</span><br></pre></td></tr></table></figure>\n<h3 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h3><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"../images/devtools/131.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"../images/devtools/132.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"../images/devtools/133.gif\" alt=\"0\"></li>\n</ul>\n<h3 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h3><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"../images/devtools/191.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"../images/devtools/140.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"../images/devtools/135.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"../images/devtools/160.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"../images/devtools/170.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"../images/devtools/180.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"../images/devtools/190.png\" alt=\"0\"></li>\n</ul>\n<h2 id=\"Sources-源文件面板\"><a href=\"#Sources-源文件面板\" class=\"headerlink\" title=\"Sources 源文件面板\"></a>Sources 源文件面板</h2><p>在 Sources 面板你可以：</p>\n<ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<h3 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h3><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/201.GIF\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/202.GIF\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/203.GIF\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/204.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"../images/devtools/205.png\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/206.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h3 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h3><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"../images/devtools/209.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"../images/devtools/210.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"../images/devtools/207.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"../images/devtools/211.png\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"../images/devtools/207.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"../images/devtools/208.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h3 id=\"Devtools-Nodejs-debug\"><a href=\"#Devtools-Nodejs-debug\" class=\"headerlink\" title=\"Devtools Nodejs debug\"></a>Devtools Nodejs debug</h3><ul>\n<li>node 执行 js 文件，文件名前加–inspect 标志，启用浏览器 nodejs 调试</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd33c700aed.png\" alt=\"nodeDebug.png\"></p>\n<ul>\n<li>点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试</li>\n<li><a href=\"https://nodejs.org/en/docs/guides/debugging-getting-started/\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n<h3 id=\"BlackBox\"><a href=\"#BlackBox\" class=\"headerlink\" title=\"BlackBox\"></a>BlackBox</h3><ul>\n<li><p>BlackBox 的用途：</p>\n<p>“BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function animate() &#123;</span><br><span class=\"line\">prepare();</span><br><span class=\"line\">lib.doFancyStuff(); // A</span><br><span class=\"line\">render();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数</p>\n<p>如果我确认该第三方库没有 bug</p>\n<p>就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行</p>\n</li>\n<li><p>三种添加 BlackBox 的方法：</p>\n</li>\n</ul>\n<ol>\n<li><p>在源代码窗格右键，选择”BlackBox Script”<br><img src=\"../images/devtools/212.gif\" alt=\"0\"></p>\n</li>\n<li><p>在 Call Stack 中右键某一帧，选择”BlackBox Script”<br><img src=\"../images/devtools/211.gif\" alt=\"0\"></p>\n</li>\n<li><p>在设置中的 Blackboxing 面板添加<strong>正则表达式</strong>匹配<strong>文件名</strong></p>\n<p> <img src=\"../images/devtools/213.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h3 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h3><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有 sources 面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h3 id=\"Source-Map\"><a href=\"#Source-Map\" class=\"headerlink\" title=\"Source Map\"></a>Source Map</h3><ul>\n<li>组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰</li>\n<li>Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持</li>\n<li>在 Chorme devtools 中，settings -&gt; preferen -&gt; sources 中，选中<code>Enable Javascript source maps</code>和<code>Enable CSS source maps</code></li>\n<li>source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释<code>//# sourceMappingURL=/path/to/script.js.map</code>至生产文件末尾，也可以由服务端在响应头中添加<code>X-SourceMap: /path/to/script.js.map</code>，将 map 文件与生产文件对应。<a href=\"https://blog.teamtreehouse.com/introduction-source-maps\" target=\"_blank\" rel=\"noopener\">更多关于 source map 的介绍</a></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd10f324e07.png\" alt=\"sourceMap.png\"></p>\n<h3 id=\"Local-Overrides\"><a href=\"#Local-Overrides\" class=\"headerlink\" title=\"Local Overrides\"></a>Local Overrides</h3><ul>\n<li>通过 Local Overrides，可以在 DevTools 中进行更改，并在页面加载后保留这些更改</li>\n<li>在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。</li>\n<li>与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。</li>\n</ul>\n<h3 id=\"Snippets-代码片段\"><a href=\"#Snippets-代码片段\" class=\"headerlink\" title=\"Snippets 代码片段\"></a>Snippets 代码片段</h3><ul>\n<li>在 Sources 面板左侧选择 Snippets，或<code>crlt shift p</code>输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似</li>\n<li>snippets 中，选中代码并<code>ctrl enter</code>，或点击右下角的执行按钮，即可执行代码片段</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd147145955.png\" alt=\"snippet.png\"></p>\n<h3 id=\"Content-scripts\"><a href=\"#Content-scripts\" class=\"headerlink\" title=\"Content scripts\"></a>Content scripts</h3><ul>\n<li>这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同</li>\n<li>插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。</li>\n<li>Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。</li>\n<li>如果有浏览器插件相关的工作，可以更深入<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions\" target=\"_blank\" rel=\"noopener\">研究</a>，不赘述。</li>\n</ul>\n<h2 id=\"Network-面板\"><a href=\"#Network-面板\" class=\"headerlink\" title=\"Network 面板\"></a>Network 面板</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h3 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h3><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h3 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h3><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h3 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h3><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h3 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h3><ul>\n<li>在 network 的 filter 条件后，选择<code>ws</code>类型的请求，即可看到所有 Websocket 请求</li>\n<li>在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbdbe96a4597.png\" alt=\"networkWebsocket.png\"></p>\n<h3 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h3><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h3 id=\"data-URLs\"><a href=\"#data-URLs\" class=\"headerlink\" title=\"data URLs\"></a>data URLs</h3><ul>\n<li>即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n<h2 id=\"Performance-性能面板\"><a href=\"#Performance-性能面板\" class=\"headerlink\" title=\"Performance 性能面板\"></a>Performance 性能面板</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Janky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h3 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h3 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h3><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h3 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h3 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h3 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h3><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h3 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h3 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h3><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h3 id=\"FPS-仪表工具\"><a href=\"#FPS-仪表工具\" class=\"headerlink\" title=\"FPS 仪表工具\"></a>FPS 仪表工具</h3><ul>\n<li>通过<code>more -&gt; more tools -&gt; Rendering</code> 或者 <code>ctrl+shift+p -&gt; rendering</code> 打开<code>Rendering</code>面板</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee9d226d2e.png\" alt></p>\n<ul>\n<li>启用<code>FPS meter</code>，即可看到的页面实时帧率</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceeb3144e12.gif\" alt></p>\n<h3 id=\"Mian\"><a href=\"#Mian\" class=\"headerlink\" title=\"Mian\"></a>Mian</h3><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h3 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n<h2 id=\"Memory-内存面板\"><a href=\"#Memory-内存面板\" class=\"headerlink\" title=\"Memory 内存面板\"></a>Memory 内存面板</h2><h3 id=\"内存-amp-amp-内存泄露\"><a href=\"#内存-amp-amp-内存泄露\" class=\"headerlink\" title=\"内存 &amp;&amp; 内存泄露\"></a>内存 &amp;&amp; 内存泄露</h3><p>内存占用：</p>\n<ol>\n<li>allocate 分配内存(eg 声明变量</li>\n<li>使用内存</li>\n<li>release 释放内存</li>\n</ol>\n<p>内存泄漏：</p>\n<ul>\n<li><code>内存泄露-Memory Leak</code>：内存被占用后无法被 release，且无法被垃圾回收器回收</li>\n<li>内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少</li>\n<li><code>垃圾回收-Garbage Collect-GC</code>：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停</li>\n</ul>\n<h3 id=\"造成内存泄露常见原因\"><a href=\"#造成内存泄露常见原因\" class=\"headerlink\" title=\"造成内存泄露常见原因\"></a>造成内存泄露常见原因</h3><ul>\n<li><code>fogotten timer</code>被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件</li>\n<li><code>Dettached HTMLElement</code>分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在</li>\n</ul>\n<h3 id=\"内存监控-1-Task-manager-任务管理器\"><a href=\"#内存监控-1-Task-manager-任务管理器\" class=\"headerlink\" title=\"内存监控 1-Task manager 任务管理器\"></a>内存监控 1-Task manager 任务管理器</h3><ul>\n<li>chorme 浏览器 -&gt; task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd194ba3a655.png\" alt></p>\n<ul>\n<li><code>Memory</code> 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。</li>\n<li><code>JavaScript Memory</code>列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。</li>\n</ul>\n<h3 id=\"内存监控-2-Devtools-Performance-面板\"><a href=\"#内存监控-2-Devtools-Performance-面板\" class=\"headerlink\" title=\"内存监控 2-Devtools Performance 面板\"></a>内存监控 2-Devtools Performance 面板</h3><ul>\n<li>在<code>Performance</code>面板记录性能时，勾选<code>memory</code>即可在分析结果中看到 memory 占用情况</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例1:正常的内存占用与GC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">\"x\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd19db41fbbc.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例2:不可被GC的内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// for (var i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     document.body.appendChild(document.createElement(\"div\"));</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// x.push(new Array(1000000).join(\"x\"));</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"ul\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">        ul.appendChild(li);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detachedTree = ul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png\" alt></p>\n<h3 id=\"内存监控-3-Devtools-Memory-面板\"><a href=\"#内存监控-3-Devtools-Memory-面板\" class=\"headerlink\" title=\"内存监控 3-Devtools Memory 面板\"></a>内存监控 3-Devtools Memory 面板</h3><p><img src=\"https://i.loli.net/2019/05/07/5cd18fa5d8489.png\" alt></p>\n<ul>\n<li>如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角<code>record</code>开始记录内存</li>\n</ul>\n<ol>\n<li><code>Heap snapshot</code>堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况</li>\n<li><code>Allocation instrumentation on timeline</code>按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)</li>\n<li><code>Allocation sampling</code>使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。</li>\n</ol>\n<ul>\n<li><p>左上角的垃圾桶图标<code>Collect garbage</code>是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收</p>\n</li>\n<li><p>利用上述示例 2 代码，执行时间线 Memory 分析：</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png\" alt></p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><ul>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101\" target=\"_blank\" rel=\"noopener\">内存相关术语</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots\" target=\"_blank\" rel=\"noopener\">深入内存分析</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Devtools-入门\"><a href=\"#Devtools-入门\" class=\"headerlink\" title=\"Devtools 入门\"></a>Devtools 入门</h1><h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><ul>\n<li>本文作者：<a href=\"www.scarsu.com\">ScarSu</a></li>\n<li><a href=\"https://www.scarsu.com/categories/devtools%E8%80%81%E5%8F%B8%E6%9C%BA%E5%85%BB%E6%88%90%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/\">进阶系列文链接</a></li>\n<li>本文基于 chrome 浏览器版本 73.0.3683.103（正式版本）总结</li>\n<li>本文目的：关于【devtools 能做什么】建立完善的知识结构，至于怎么做，请查阅官方文档；另工具类知识需要实践，建议阅读本文时打开 <a href=\"https://masteringdevtools.com/\" target=\"_blank\" rel=\"noopener\">sample</a>用 devtools 操作一遍</li>\n<li>参考 1：<a href=\"https://developers.google.com/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">google developers 官方文档</a></li>\n<li>参考 2：来自作者 Jon Kuoerman 在 FrontEndMaster 的 <a href=\"https://frontendmasters.com/courses/chrome-dev-tools-v2\" target=\"_blank\" rel=\"noopener\">Mastering Chrome Developer Tools v2 课程</a></li>\n<li>参考 3：来自 作者 Tomek Sułkowski 在 medium 的<a href=\"https://medium.com/@tomsu\" target=\"_blank\" rel=\"noopener\">系列文章</a></li>\n<li><a href>系列文脑图.xmind</a></li>\n<li><a href=\"https://i.loli.net/2019/04/19/5cb95639a9f73.png\" target=\"_blank\" rel=\"noopener\">脑图.png</a></li>\n</ul>\n<h2 id=\"web-devtool-历史\"><a href=\"#web-devtool-历史\" class=\"headerlink\" title=\"web devtool 历史\"></a>web devtool 历史</h2><ul>\n<li>view-source + alert 调试法</li>\n<li><a href=\"https://software.hixie.ch/utilities/js/live-dom-viewer/\" target=\"_blank\" rel=\"noopener\">Live DOM Viewer</a></li>\n<li><a href=\"https://getfirebug.com/\" target=\"_blank\" rel=\"noopener\">Firebug</a></li>\n</ul>\n<h2 id=\"Chrome-Devtools-界面概览\"><a href=\"#Chrome-Devtools-界面概览\" class=\"headerlink\" title=\"Chrome Devtools 界面概览\"></a>Chrome Devtools 界面概览</h2><p><img src=\"https://i.loli.net/2019/04/19/5cb955bed88ce.png\" alt=\"000devtoolsAll.png\"></p>\n<h2 id=\"Tips-and-Tricks\"><a href=\"#Tips-and-Tricks\" class=\"headerlink\" title=\"Tips and Tricks\"></a>Tips and Tricks</h2><ul>\n<li>快捷键：ctrl shift p：执行命令</li>\n<li>快捷键：ctrl p：打开文件</li>\n<li>快捷键：esc：显示/隐藏 drawer(第二行面板</li>\n<li>快捷键：ctrl shift c：选择元素</li>\n<li>more -&gt; focus debugee：切换至正在被调试的页面</li>\n<li>more -&gt; more tools：全部面板</li>\n<li>无痕模式打开网页 —&gt; 更纯净的调试环境，无扩展代码干扰</li>\n<li>实验性功能：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开url     chrome://flags/</span><br><span class=\"line\">搜索dev</span><br><span class=\"line\">打开Experimental Extension APIs开关</span><br><span class=\"line\">在settings中找到experiments可以找到相关实验性功能</span><br><span class=\"line\">shift按七次，显示隐藏的实验性功能（比如terminal</span><br></pre></td></tr></table></figure>\n<ul>\n<li>或者使用金丝雀版 chrome - <a href=\"https://www.google.cn/chrome/canary/\" target=\"_blank\" rel=\"noopener\">Canary - 开发者专用的每日更新版</a></li>\n</ul>\n<h2 id=\"Elements-面板\"><a href=\"#Elements-面板\" class=\"headerlink\" title=\"Elements 面板\"></a>Elements 面板</h2><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS</p>\n<p><img src=\"../images/devtools/000.png\" alt=\"Elements 面板\"></p>\n<h3 id=\"Inspect-Mode\"><a href=\"#Inspect-Mode\" class=\"headerlink\" title=\"Inspect Mode\"></a>Inspect Mode</h3><p>快捷键 ctrl shift c/点击面板左上角的按钮，进入元素选择模式<br><img src=\"https://i.loli.net/2019/04/19/5cb9cb351d6a2.png\" alt=\"inspect\"></p>\n<p>在新版本 chrome 中，选择元素时会显示更多元素信息<br><img src=\"https://i.loli.net/2019/04/19/5cb9ca97739bb.png\" alt=\"inspect\"></p>\n<h3 id=\"Device-Mode-设备模式\"><a href=\"#Device-Mode-设备模式\" class=\"headerlink\" title=\"Device Mode 设备模式\"></a>Device Mode 设备模式</h3><ul>\n<li>模拟不同尺寸移动端设备下，网页的表现。</li>\n<li>是自适应网页调试利器。</li>\n<li>内置/可配置既有设备属性，例如 iphone/ipad</li>\n<li>支持调试媒体查询 media-query。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/19/5cb9cc03d400a.png\" alt=\"deviceMode\"></p>\n<h3 id=\"DOM-树\"><a href=\"#DOM-树\" class=\"headerlink\" title=\"DOM 树\"></a>DOM 树</h3><p>在元素面板左侧是当前页的 DOM 树<br><img src=\"../images/devtools/010.png\" alt=\"0\"></p>\n<p>在 DOM 树中你可以：</p>\n<ul>\n<li>直接增/删/改/复制/拖放移动 DOM 元素，查看实时效果(非持久化)</li>\n<li>添加元素断点(节点移除断点，属性变更断点，子树变更断点)</li>\n<li>模拟元素 focus/hover/actice 等状态</li>\n<li>选中元素后通过右键“Scroll into view”突出显示当前元素在页面的位置</li>\n<li>按快捷键<strong>h</strong>来快速隐藏/显示元素当前元素及其后代元素(原理是 visibility 设为 hidden,不影响其他元素,不引起重绘)</li>\n<li><p>按住 alt 键 点击 dom 元素前的箭头：全部折叠/展开当前元素及其后代元素</p>\n<p><img src=\"../images/devtools/011.png\" alt=\"0\"></p>\n</li>\n</ul>\n<h3 id=\"Styles\"><a href=\"#Styles\" class=\"headerlink\" title=\"Styles\"></a>Styles</h3><p>在面板右侧 Styles 窗格中：</p>\n<ul>\n<li>会显示节点的各级样式</li>\n<li>每级样式的来源</li>\n<li>每条样式属性是否命中</li>\n<li>可以直接增/删/改元素样式，查看实时效果(非持久化)</li>\n</ul>\n<p><img src=\"../images/devtools/020.png\" alt=\"0\"></p>\n<h3 id=\"color-picker\"><a href=\"#color-picker\" class=\"headerlink\" title=\"color picker\"></a>color picker</h3><p><img src=\"https://i.loli.net/2019/05/13/5cd95d7a5c09c98927.png\" alt></p>\n<ul>\n<li>在样式窗格中，devtools 给所有颜色属性值前添加了 color picker 工具</li>\n<li>按住 shift 点击色块，快速切换颜色格式 rgb/hsl/hex</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd95e1abea2793787.png\" alt></p>\n<ul>\n<li>page colors：color picker 中会列出页面所有的颜色</li>\n<li>material colors：color picker 中会列出 google 设计推荐色系</li>\n</ul>\n<h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h3><p>在 Styles 右侧的 Computed 窗格中可以查看：</p>\n<ul>\n<li>元素的盒模型(双击值可编辑)</li>\n<li>元素所有样式的<strong>计算后最终值</strong>(即最终实际应用到元素的值)</li>\n<li>点开每一条最终值，可以看到所有该条样式的规则，以及代码来源</li>\n<li>勾选<strong>show all</strong>选项，会同时列出元素<strong>继承 / 默认</strong>样式</li>\n</ul>\n<p><img src=\"../images/devtools/030.png\" alt=\"0\"></p>\n<h3 id=\"Event-Listeners\"><a href=\"#Event-Listeners\" class=\"headerlink\" title=\"Event Listeners\"></a>Event Listeners</h3><ul>\n<li>在 Event Listeners 窗格中，可以看到元素的事件监听器</li>\n<li>例如”load”,”DOMContentLoaded”,”click”等，以及每个事件对应的事件处理函数</li>\n</ul>\n<p><img src=\"../images/devtools/040.png\" alt=\"0\"></p>\n<p>在源代码中加 <strong>行 debugger 断点</strong>，或者<strong>debug(函数)断点</strong>(Sources 面板会提及这两种断点)，是需要代码维护成本的，有时候还会忘记删除；</p>\n<p>或者你想调试别人开发的 你不拥有源码的 网页；</p>\n<p>这些时候可以利用 Event Listeners 窗格快速定位当前元素被绑定的所有的<strong>事件函数代码</strong>并调试。</p>\n<h3 id=\"DOM-Breakpoints\"><a href=\"#DOM-Breakpoints\" class=\"headerlink\" title=\"DOM Breakpoints\"></a>DOM Breakpoints</h3><p>在面板右侧 DOM Breakpoints 中，可以查看<strong>元素断点</strong></p>\n<p><img src=\"../images/devtools/051.png\" alt=\"0\"></p>\n<p>相应的在左侧 DOM 树右键点击元素，可以给元素添加断点</p>\n<p>元素断点有三种类型：属性变更，子树变更，节点删除</p>\n<p>例如添加“node removal”断点，就会在 有代码移除当前节点时，在当前行代码执行前暂停执行，并自动转换到 Sources 面板，以便做进一步调试<br><img src=\"../images/devtools/050.png\" alt=\"0\"></p>\n<h3 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h3><p>Properties 面板会列出元素 DOM 底层相关属性<br><img src=\"../images/devtools/060.png\" alt=\"0\"></p>\n<h3 id=\"Accessibility-可访问性\"><a href=\"#Accessibility-可访问性\" class=\"headerlink\" title=\"Accessibility(可访问性)\"></a>Accessibility(可访问性)</h3><ul>\n<li>在辅助功能树中查看元素的位置(可访问性树/无障碍树是 DOM 树的子集。它只包含来自 DOM 树的元素，这些元素可以展示在屏幕阅读器中页面的内容。</li>\n<li>查看元素的 ARIA 属性(ARIA 属性确保屏幕阅读器具有所需的所有信息，以便正确表示页面的内容。</li>\n<li>查看元素的计算辅助功能属性(某些辅助功能属性由浏览器动态计算。可以在“ 辅助功能”窗格的“ 计算属性”部分中查看这些属性</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/21/5cbc83e1561e4.png\" alt=\"accessibility.png\"></p>\n<h2 id=\"Console-面板\"><a href=\"#Console-面板\" class=\"headerlink\" title=\"Console 面板\"></a>Console 面板</h2><p>Console 面板是浏览器的控制台，也是 Devtools 的灵魂。</p>\n<p>可以通过<strong>设置-&gt;Show Console drawer</strong>或者<strong>Esc 快捷键</strong>让 Console 在每个面板都能显示。<br><img src=\"../images/devtools/100.png\" alt=\"0\"></p>\n<h3 id=\"message\"><a href=\"#message\" class=\"headerlink\" title=\"message\"></a>message</h3><ul>\n<li>在 console 中，可以看到来自<strong>浏览器</strong>/<strong>代码</strong>的五种类型的信息：<ul>\n<li>user message</li>\n<li>error</li>\n<li>warning</li>\n<li>info</li>\n<li>verbose</li>\n</ul>\n</li>\n<li>相同的消息默认是堆叠的，可以通过 ctrl+shift+p 输入 time 命令或者设置中找到<strong>timestamps</strong>命令，给消息加上时间戳</li>\n<li>通过选项<strong>Log XMLHttpRequest</strong>选择是否输出所有 XMLHttp 请求日志(可以监控页面所有 ajax 请求 定位其代码调用栈)</li>\n<li>通过<strong>Hide network</strong>选择显示/隐藏网络请求的错误信息(例如 GET xxx 404)</li>\n<li>通过<strong>Preserve log</strong>选择保留历史记录，即刷新页面后是否还显示先前的消息</li>\n</ul>\n<p><img src=\"../images/devtools/110.png\" alt=\"0\"></p>\n<h3 id=\"javascript-实时执行环境\"><a href=\"#javascript-实时执行环境\" class=\"headerlink\" title=\"javascript 实时执行环境\"></a>javascript 实时执行环境</h3><ul>\n<li>console 除了能输出调试信息，也是一个 javascript 实时执行环境。</li>\n<li>可以直接在这里输入任何<strong>全局变量名</strong>/内置对象名/函数名，会得到相应的值输出;在调试环境下的断点内，可以获取<strong>局部变量</strong>值</li>\n<li>右键选<strong>Store as global variable</strong>，可以将输出值存储为一个临时的全局变量</li>\n<li>双击对象的属性值，可以直接更改这个对象（持久化的更改,因为 console 存储下来的是对象的引用）</li>\n<li>console 中输出的 dom 元素 -&gt; 右键 -&gt; reveal in elements：快速定位到元素面板中的当前元素</li>\n</ul>\n<h3 id=\"选择执行环境\"><a href=\"#选择执行环境\" class=\"headerlink\" title=\"选择执行环境\"></a>选择执行环境</h3><p>可以通过左上的下拉列表，选择不同的<strong>执行环境</strong></p>\n<p><img src=\"../images/devtools/120.png\" alt=\"0\"></p>\n<p>top 是最外层的顶级页面,其他的是 iframe 子页面</p>\n<p>默认情况下</p>\n<ul>\n<li>子 frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">window</span> === self) === self.window;</span><br><span class=\"line\"><span class=\"comment\">//top.window是顶级页面top的全局变量window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>top frame 中：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(((<span class=\"built_in\">window</span> === self) === self.window) === top) === top.window;</span><br></pre></td></tr></table></figure>\n<h3 id=\"console-中的-符号：\"><a href=\"#console-中的-符号：\" class=\"headerlink\" title=\"console 中的$符号：\"></a>console 中的<code>$</code>符号：</h3><ul>\n<li>可以通过<code>$0</code>，获取当前在 Elements 面板所选中的元素节点</li>\n<li>如果 <code>$</code> 在当前页面没被占用，可以用来替代 document.querySlector 方法使用</li>\n<li><code>$$</code> 是 document.querySelectorAll 方法的更佳替代，因为 document.querySelectorAll 返回的是 nodeList(NodeList)，而<code>$$</code>能直接返回数组(Array)<br><img src=\"../images/devtools/131.png\" alt=\"0\"></li>\n<li><code>$_</code>可以引用上一次执行的结果<br><img src=\"../images/devtools/132.png\" alt=\"0\"></li>\n<li>如果需要使用 npm 的包，可以安装 Console Importer 插件，用<code>$i</code>方法引入 npm 中的库<br><img src=\"../images/devtools/133.gif\" alt=\"0\"></li>\n</ul>\n<h3 id=\"console-下的方法：\"><a href=\"#console-下的方法：\" class=\"headerlink\" title=\"console 下的方法：\"></a>console 下的方法：</h3><ul>\n<li>除了被用烂了的<code>console.log()</code>（当然 console.log 也有特别一点的用法）<br><img src=\"../images/devtools/191.png\" alt=\"0\"></li>\n<li>console 对象还有 console.error/clear/debug/count/time/table/tarce 等等方法</li>\n<li>直接在 console 中输入 console，可以看到 console 对象下的所有方法<br><img src=\"../images/devtools/140.png\" alt=\"0\"></li>\n<li>例如 console.table(obj)可以把你的对象以可视化的表格形式进行输出<br><img src=\"../images/devtools/135.gif\" alt=\"0\"></li>\n<li>例如可以使用 console.time()和 console.timeEnd()方法来测量时间差<br><img src=\"../images/devtools/160.png\" alt=\"0\"></li>\n<li>另:console 命令行还内置了一些 API 方法，例如 queryObjects(),可以返回指定类型的对象下所有的实例化的对象<br><img src=\"../images/devtools/170.png\" alt=\"0\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryObjects(<span class=\"built_in\">Object</span>); <span class=\"comment\">//返回所有object对象</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Function</span>); <span class=\"comment\">//返回所有函数</span></span><br><span class=\"line\">queryObjects(<span class=\"built_in\">Array</span>); <span class=\"comment\">//返回所有数组</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>monitor(function)方法来追踪函数调用信息，当函数被执行，会输出追踪信息<br><img src=\"../images/devtools/180.png\" alt=\"0\"></li>\n<li>monitorEvents(el,eventType)方法来追踪事件<br><img src=\"../images/devtools/190.png\" alt=\"0\"></li>\n</ul>\n<h2 id=\"Sources-源文件面板\"><a href=\"#Sources-源文件面板\" class=\"headerlink\" title=\"Sources 源文件面板\"></a>Sources 源文件面板</h2><p>在 Sources 面板你可以：</p>\n<ul>\n<li>Debug : 在源代码面板中可以设置<strong>断点</strong>来调试 JavaScript ，比 console.log()调试更快速高效</li>\n<li>Devtools as IDE : 通过 Workspaces（工作区）连接本地文件来使用开发者工具的<strong>实时编辑器</strong></li>\n</ul>\n<h3 id=\"七种断点类型\"><a href=\"#七种断点类型\" class=\"headerlink\" title=\"七种断点类型\"></a>七种断点类型</h3><ol>\n<li><p>行断点：代码运行到当前行之前暂停执行</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在源代码添加debugger关键字</span><br><span class=\"line\">或者</span><br><span class=\"line\">点击Sources面板中的源代码的行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件行断点：当满足条件时才会触发该断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击Sources面板中的源代码的行号</span><br><span class=\"line\">选择“Add conditional breakpoint”</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/201.GIF\" alt=\"0\"></p>\n</li>\n<li><p>DOM 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">即Elements面板提及过的三种DOM断点：</span><br><span class=\"line\">- 节点属性断点</span><br><span class=\"line\">- 节点删除断点</span><br><span class=\"line\">- 子树变更断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/202.GIF\" alt=\"0\"></p>\n</li>\n<li><p>XHR/Fetch 断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在页面发出XHR或Fetch请求前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/203.GIF\" alt=\"0\"></p>\n</li>\n<li><p>Event Listener 事件监听断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以在所有类型的事件函数被出发前加断点</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/204.png\" alt=\"0\"></p>\n</li>\n<li><p>Exception 异常断点</p>\n<p> <img src=\"../images/devtools/205.png\" alt=\"0\"></p>\n</li>\n<li><p>Function 函数断点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把想调试的函数名作为参数，调用debug()函数，可以在每次执行该函数前暂停执行代码</span><br></pre></td></tr></table></figure>\n<p> <img src=\"../images/devtools/206.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h3 id=\"Debug\"><a href=\"#Debug\" class=\"headerlink\" title=\"Debug\"></a>Debug</h3><ul>\n<li>函数调用栈 Call Stack：Call Stack 是 time traveling 的，即点击栈中的任一节点，当前的作用域和局部变量等信息，都会模拟至该节点执行时的状态</li>\n</ul>\n<p><img src=\"../images/devtools/209.png\" alt=\"0\"></p>\n<ul>\n<li>全局作用域 Global ，局部作用域 Local ，闭包作用域 Closure</li>\n</ul>\n<p><img src=\"../images/devtools/210.png\" alt=\"0\"></p>\n<ul>\n<li>step over next function</li>\n<li>step into next function</li>\n<li>step out current function</li>\n<li>step (与 step over/into 的区别就是，step 会优先尝试 step into，当没有可步入的代码时，就会执行 step over)</li>\n</ul>\n<p><img src=\"../images/devtools/207.png\" alt=\"0\"></p>\n<ul>\n<li>long resume：恢复执行，并将断点停用 500ms</li>\n</ul>\n<p><img src=\"../images/devtools/211.png\" alt=\"0\"></p>\n<ul>\n<li>Continue to here：继续执行至此行</li>\n</ul>\n<p><img src=\"../images/devtools/207.gif\" alt=\"0\"></p>\n<ul>\n<li>Restart Frame：重新执行函数调用堆栈中的某一帧</li>\n</ul>\n<p><img src=\"../images/devtools/208.gif\" alt=\"0\"></p>\n<ul>\n<li>行断点内的多个箭头：行内断点（行内的，可 step into 的 执行点</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/13/5cd969192e3cf64417.png\" alt></p>\n<h3 id=\"Devtools-Nodejs-debug\"><a href=\"#Devtools-Nodejs-debug\" class=\"headerlink\" title=\"Devtools Nodejs debug\"></a>Devtools Nodejs debug</h3><ul>\n<li>node 执行 js 文件，文件名前加–inspect 标志，启用浏览器 nodejs 调试</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd33c700aed.png\" alt=\"nodeDebug.png\"></p>\n<ul>\n<li>点击 devtools 中，左上角的 devices mode 右侧的绿色按钮，即可启用 node 服务端中的脚本调试</li>\n<li><a href=\"https://nodejs.org/en/docs/guides/debugging-getting-started/\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n<h3 id=\"BlackBox\"><a href=\"#BlackBox\" class=\"headerlink\" title=\"BlackBox\"></a>BlackBox</h3><ul>\n<li><p>BlackBox 的用途：</p>\n<p>“BlackBox Script”可以在调试中忽略某些脚本(此处的 BlackBox 为动词)，在 Call Stack 堆栈中会将该脚本隐藏，单步调试时也不会步入脚本中的任何函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function animate() &#123;</span><br><span class=\"line\">prepare();</span><br><span class=\"line\">lib.doFancyStuff(); // A</span><br><span class=\"line\">render();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如以上代码的 A 行，调用的是第三方库的 doFancyStuff 函数</p>\n<p>如果我确认该第三方库没有 bug</p>\n<p>就可以 BlackBox 整个第三方库的 js 脚本，在调试中跳过这些代码的执行</p>\n</li>\n<li><p>三种添加 BlackBox 的方法：</p>\n</li>\n</ul>\n<ol>\n<li><p>在源代码窗格右键，选择”BlackBox Script”<br><img src=\"../images/devtools/212.gif\" alt=\"0\"></p>\n</li>\n<li><p>在 Call Stack 中右键某一帧，选择”BlackBox Script”<br><img src=\"../images/devtools/211.gif\" alt=\"0\"></p>\n</li>\n<li><p>在设置中的 Blackboxing 面板添加<strong>正则表达式</strong>匹配<strong>文件名</strong></p>\n<p> <img src=\"../images/devtools/213.gif\" alt=\"0\"></p>\n</li>\n</ol>\n<h3 id=\"Workspace：Devtools-as-IDE-将更改持久化\"><a href=\"#Workspace：Devtools-as-IDE-将更改持久化\" class=\"headerlink\" title=\"Workspace：Devtools as IDE 将更改持久化\"></a>Workspace：Devtools as IDE 将更改持久化</h3><ul>\n<li>在 sources 左侧的面板中选择<code>Filesystem</code>，点击<code>Add folder to workspace</code>，将你本地运行的站点的相关源文件添加到 Devtools 的工作区，会自动识别 Page 下和工作区下相对应的文件，在 devtools 更改文件并保存，即持久化保存（目前只支持自动识别，不支持添加映射）</li>\n<li>绿标文件：成功的映射到本地的文件，在 Styles 和 Sources 中的文件名前，都会添加绿色圆点作为标识<br><img src=\"https://i.loli.net/2019/04/22/5cbd0771e5e31.png\" alt=\"workspace.png\"><br><img src=\"https://i.loli.net/2019/04/22/5cbd07bf14dc8.png\" alt=\"workspace2.png\"></li>\n<li>目前 Devtools 已经支持 sass/scss、UglifyJS、Grunt、Coffescript、Closure 等等，暂时还不支持 webpack，和其他现代的复杂框架，如 react</li>\n<li>所有 sources 面板的文件，都可以右键选择<code>local modifications</code>，查看所有更改</li>\n<li>对 DOM 树的更改不会持久化至 html 文件：因为 dom 的最终表现，受到 html、css、javascript 的共同影响，DOM 树 !== HTML，因此可以在 sources 中直接更改 html 文件并保存</li>\n</ul>\n<h3 id=\"Source-Map\"><a href=\"#Source-Map\" class=\"headerlink\" title=\"Source Map\"></a>Source Map</h3><ul>\n<li>组合/压缩 css,js 文件是常见的性能优化方案，但是会对开发调试造成困扰</li>\n<li>Source Map 用于将生产代码映射至源代码，Chrome 和 firefox 都内置了对 Source Map 的支持</li>\n<li>在 Chorme devtools 中，settings -&gt; preferen -&gt; sources 中，选中<code>Enable Javascript source maps</code>和<code>Enable CSS source maps</code></li>\n<li>source map 映射信息存在 json 对象中，保存在 .map 文件中，可以由编译程序添加注释<code>//# sourceMappingURL=/path/to/script.js.map</code>至生产文件末尾，也可以由服务端在响应头中添加<code>X-SourceMap: /path/to/script.js.map</code>，将 map 文件与生产文件对应。<a href=\"https://blog.teamtreehouse.com/introduction-source-maps\" target=\"_blank\" rel=\"noopener\">更多关于 source map 的介绍</a></li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd10f324e07.png\" alt=\"sourceMap.png\"></p>\n<h3 id=\"Local-Overrides\"><a href=\"#Local-Overrides\" class=\"headerlink\" title=\"Local Overrides\"></a>Local Overrides</h3><ul>\n<li>通过 Local Overrides，可以在 DevTools 中进行更改，并在页面加载后保留这些更改</li>\n<li>在 Sources 面板左侧选择 Overrides，指定 DevTools 应保存更改的目录，当在 DevTools 中进行更改时，DevTools 会将修改后的文件的副本保存到所选的本地目录中，重新加载页面时，DevTools 提供本地修改的文件，而不是请求的网络资源。</li>\n<li>与 Workspace 相似的，不支持保存对 DOM 树的更改，需要直接更改 html 源文件。</li>\n</ul>\n<h3 id=\"Snippets-代码片段\"><a href=\"#Snippets-代码片段\" class=\"headerlink\" title=\"Snippets 代码片段\"></a>Snippets 代码片段</h3><ul>\n<li>在 Sources 面板左侧选择 Snippets，或<code>crlt shift p</code>输入 snippet 打开 Snippets 面板，可以创建并保存常用的代码片段，和用 gist 类似</li>\n<li>snippets 中，选中代码并<code>ctrl enter</code>，或点击右下角的执行按钮，即可执行代码片段</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd147145955.png\" alt=\"snippet.png\"></p>\n<h3 id=\"Content-scripts\"><a href=\"#Content-scripts\" class=\"headerlink\" title=\"Content scripts\"></a>Content scripts</h3><ul>\n<li>这部分脚本是浏览器插件的脚本，在特定网页的上下文中运行。（与插件运行在服务端的脚本，页面上引用的脚本，页面上 script 中的内嵌脚本都不同</li>\n<li>插件在服务端的脚本可以访问所有 WebExtension JavaScript API，但它们无法直接访问网页内容。</li>\n<li>Content scripts 只能访问 WebExtension API 的一小部分，但它们可以使用消息传递系统与后台脚本进行通信，从而间接访问 WebExtension API。</li>\n<li>如果有浏览器插件相关的工作，可以更深入<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions\" target=\"_blank\" rel=\"noopener\">研究</a>，不赘述。</li>\n</ul>\n<h2 id=\"Network-面板\"><a href=\"#Network-面板\" class=\"headerlink\" title=\"Network 面板\"></a>Network 面板</h2><p><img src=\"https://i.loli.net/2019/04/22/5cbd4f884b14c.png\" alt=\"network.png\"></p>\n<ul>\n<li>默认情况下，只要 DevTools 处于打开状态，DevTools 就会在 Network 面板中记录所有网络请求。</li>\n<li>左上红点按钮：停止记录网络请求</li>\n<li>第二个按钮：清空请求记录</li>\n<li>录像按钮：页面加载时捕获屏幕截图</li>\n<li>过滤按钮：显示/隐藏 过滤条件行</li>\n<li>View 中的两个按钮：第一个是切换请求列表中每行的显示样式（大小请求行），第二个是显示/隐藏瀑布图</li>\n<li>Group By Frame：是否根据不同的 frame 分类显示请求</li>\n<li>Preserve Log：保存显示跨页面的加载请求</li>\n<li>Disable Cache：禁用浏览器缓存，模拟新用户打开页面的体验</li>\n<li>Offline 是模拟断网离线的状态，其后的下拉框可以选择模拟其他网络状况，比如 2G,3G</li>\n</ul>\n<h3 id=\"筛选请求\"><a href=\"#筛选请求\" class=\"headerlink\" title=\"筛选请求\"></a>筛选请求</h3><ul>\n<li>filter 文本框中可输入请求的属性 对 请求进行过滤，多个属性用空格分隔</li>\n<li>支持过滤的属性：<ul>\n<li>domain。 仅显示来自指定域的资源。 可以使用通配符字符 (<code>*</code>) 纳入多个域。 例如，*.com 将显示来自以 .com 结尾的所有域名的资源。 DevTools 会使用其遇到的所有域填充自动填充下拉菜单。</li>\n<li>has-response-header。 显示包含指定 HTTP 响应标头的资源。 DevTools 会使用其遇到的所有响应标头填充自动填充下拉菜单。</li>\n<li>is。 使用 is:running 可以查找 WebSocket 资源。</li>\n<li>larger-than。 显示大于指定大小的资源（以字节为单位）。 将值设为 1000 等同于设置为 1k。</li>\n<li>method。 显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用其遇到的所有 HTTP 方法填充下拉菜单。</li>\n<li>mime-type。 显示指定 MIME 类型的资源。 DevTools 会使用其遇到的所有 MIME 类型填充下拉菜单。</li>\n<li>mixed-content。 显示所有混合内容资源 (mixed-content:all)，或者仅显示当前显示的资源 (mixed-content:displayed)。</li>\n<li>scheme。 显示通过未保护 HTTP (scheme:http) 或受保护 HTTPS (scheme:https) 检索的资源。</li>\n<li>set-cookie-domain。 显示具有 Set-Cookie 标头并且 Domain 属性与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 域填充自动填充下拉菜单。</li>\n<li>set-cookie-name。 显示具有 Set-Cookie 标头并且名称与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>\n<li>set-cookie-value。 显示具有 Set-Cookie 标头并且值与指定值匹配的资源。 DevTools 会使用其遇到的所有 Cookie 值填充自动填充下拉菜单。</li>\n<li>status-code。 仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用其遇到的所有状态代码填充自动填充下拉菜单。</li>\n</ul>\n</li>\n<li>例如：mime-type:image/gif larger-than:1K 显示大于一千字节的所有 GIF</li>\n<li><code>Hide Data URLs</code>：隐藏 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data 类型的 url</a></li>\n</ul>\n<h3 id=\"瀑布图\"><a href=\"#瀑布图\" class=\"headerlink\" title=\"瀑布图\"></a>瀑布图</h3><ul>\n<li>瀑布图按时间线展示所有请求</li>\n<li>可以用鼠标拖动选中一段时间，只查看改时间线内的请求</li>\n<li>瀑布图中有两条竖线，一条蓝色，代表<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" target=\"_blank\" rel=\"noopener\">DOMContentLoaded</a>事件发生的事件，一条红色代表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/load\" target=\"_blank\" rel=\"noopener\">load</a>事件发生的时间点</li>\n</ul>\n<h3 id=\"分析请求-请求列表\"><a href=\"#分析请求-请求列表\" class=\"headerlink\" title=\"分析请求/请求列表\"></a>分析请求/请求列表</h3><ul>\n<li>重播请求：右键点击 Requests 表格中的请求 -&gt; <code>Replay XHR</code></li>\n<li>手动清除浏览器缓存：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cache</code></li>\n<li>手动清除浏览器 Cookie：右键点击 Requests 表格中的任意位置 -&gt; 选择 <code>Clear Browser Cookies</code></li>\n<li>自定义列表中展示的列</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd553d024cc.png\" alt=\"network2.png\"></p>\n<ul>\n<li>请求行排序，默认按照瀑布图 start time 升序排序，即请求发起的时间点：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd63427ece0.png\" alt=\"networkOrder.png\"></p>\n<ul>\n<li>每条请求，可以看到网络请求以及被清华求资源的全部信息：<ul>\n<li>请求的一般信息：url、HTTP 方法(GET POST 等)、状态码、ip 地址</li>\n<li>请求相关：请求头、Initiator、Priority</li>\n<li>响应相关：响应头、响应内容</li>\n</ul>\n</li>\n<li>Initiator：请求的来源/发起者。parser：一般来自解析器解析到的 html 页面内的请求；script：来自脚本文件的请求。鼠标悬浮到 Initiator 列中的文件名上，可以看到发起当前请求的堆栈轨迹，点击文件名，可以定位到直接发起请求的代码</li>\n<li><p>两个 size：在 size 列中，有两个数值，上面的较小值代表下载到的资源的大小，下面的较大值是资源解压后的大小。（例如 在 Content-Encoding 中可以看到的 gzip 和 br）</p>\n</li>\n<li><p>按住<code>shift</code>鼠标悬浮在请求行上，变绿色的行是当前行的发起者，红色的行是当前行的依赖项。</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbd9945dd05b.png\" alt=\"initiator.png\"></p>\n<ul>\n<li>Priority：High,Highest,Low。根据时间线中的蓝线和红线（DOMContentLoaded 和 load），以及请求的优先级，可以从结果的角度观察浏览器的加载流程。</li>\n</ul>\n<h3 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h3><ul>\n<li>在 network 的 filter 条件后，选择<code>ws</code>类型的请求，即可看到所有 Websocket 请求</li>\n<li>在请求详情的 Message 栏中，可以看到 wensocket 全双工通信中客户端接收和发送的信息</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/22/5cbdbe96a4597.png\" alt=\"networkWebsocket.png\"></p>\n<h3 id=\"Color-Code：瀑布图中的几种颜色与代码\"><a href=\"#Color-Code：瀑布图中的几种颜色与代码\" class=\"headerlink\" title=\"Color Code：瀑布图中的几种颜色与代码\"></a>Color Code：瀑布图中的几种颜色与代码</h3><p><img src=\"https://i.loli.net/2019/04/22/5cbdc5acaff77.png\" alt=\"colorCode.png\"></p>\n<ul>\n<li>Queueing 排队，请求未发出，正在等待。 浏览器在以下情况下对请求排队：<ul>\n<li>存在更高优先级的请求。</li>\n<li>此源已打开六个 TCP 连接，达到限值。 仅适用于 HTTP/1.0 和 HTTP/1.1（在 HTTP1 下浏览器一次最允许 6 个 TCP 连接，超出 6 个，就要 queue 排队)(优化 web 性能-&gt;避免 queue-&gt;合并资源请求）</li>\n<li>浏览器正在短暂分配磁盘缓存中的空间</li>\n</ul>\n</li>\n<li>Stalled/Blocking 停滞/阻塞，请求仍未发出。请求可能会因 Queueing 中描述的任何原因而停止。</li>\n<li>DNS Lookup dns 查找，浏览器正在解析请求的 IP 地址，每次有指向新 domian 的请求时，会有 dns 查找的时间消耗。</li>\n<li>Proxy negotiation 代理协商。 浏览器正在与代理服务器协商请求。</li>\n<li>initial connection/connecting 正在初始化连接 或 正在连接，包含 tcp 的三次握手的时间</li>\n<li>SSL 完成 SLL 握手所需要的时间</li>\n<li>Request sent/senting 正在发送请求，发请求所占的时间，通常只有几分之一毫秒。</li>\n<li>ServiceWorker Preparation。 浏览器正在启动 Service Worker。</li>\n<li>Request to ServiceWorker。 正在将请求发送到 Service Worker。</li>\n<li>Waiting (TTFB)。 浏览器正在等待响应的第一个字节。 TTFB 表示 Time To First Byte（至第一字节的时间）。 此时间包括 1 次往返延迟时间及服务器准备响应所用的时间。</li>\n<li>Content Download。 浏览器正在接收响应。</li>\n<li>Receiving Push。 浏览器正在通过 HTTP/2 服务器推送接收此响应的数据。</li>\n<li>Reading Push。 浏览器正在读取之前收到的本地数据。</li>\n</ul>\n<h3 id=\"DOMContentLoaded-和-load-事件\"><a href=\"#DOMContentLoaded-和-load-事件\" class=\"headerlink\" title=\"DOMContentLoaded 和 load 事件\"></a>DOMContentLoaded 和 load 事件</h3><ul>\n<li>DOMContentLoaded — 浏览器已经完全加载了 HTML，DOM 树已经构建完毕，但是像是 <code>&lt;img&gt;</code> 和样式表等外部资源可能并没有下载完毕。</li>\n<li>load — 浏览器已经加载了所有的资源（图像，样式表等）。</li>\n<li>beforeunload/unload – 当用户离开页面的时候触发。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">更多</a></li>\n</ul>\n<h3 id=\"data-URLs\"><a href=\"#data-URLs\" class=\"headerlink\" title=\"data URLs\"></a>data URLs</h3><ul>\n<li>即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件，例如浏览器 API canvas 支持的 base64 编码格式图片，<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">更多相关</a></li>\n</ul>\n<h2 id=\"Performance-性能面板\"><a href=\"#Performance-性能面板\" class=\"headerlink\" title=\"Performance 性能面板\"></a>Performance 性能面板</h2><ul>\n<li>performance 面板可以用于分析<code>运行时性能</code>(运行时强调的是与页面加载性能相区分)</li>\n<li>以隐身模式打开网页 （隐身模式可确保 Chrome 以干净的状态运行。例如，排除扩展对性能测量的影响</li>\n<li><a href=\"https://googlechrome.github.io/devtools-samples/jank/\" target=\"_blank\" rel=\"noopener\">Janky Animation demo ：性能测试 demo</a></li>\n<li>视图 overview：</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbf1d586fe21.png\" alt=\"performance.png\"></p>\n<h3 id=\"RAIL-模型\"><a href=\"#RAIL-模型\" class=\"headerlink\" title=\"RAIL 模型\"></a>RAIL 模型</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">RAIL 模型</a>是一种性能模型，定义了四个维度的性能分析指标</li>\n<li><code>Response</code>：在<code>100 毫秒</code>以内响应（例如从点按到绘制）</li>\n<li><code>Animation</code>： 每秒生成 60 帧，每个帧的工作（从 JS 到绘制）完成时间小于 16 毫秒,达到人眼顺滑（例如滚动 拖动都是动画类型）（因为浏览器需要花费时间将新帧绘制到屏幕上，只有 <code>10 毫秒</code>来执行代码）</li>\n<li><code>Idle</code>：利用空闲时间完成推迟的工作（要实现第一条 response 在 100ms 内响应，Main 主线程 JS 工作应该小于 <code>50ms</code>，剩余的时间将主线程的控制从 js 返回给浏览器执行其像素管道、对用户输入作出反应等，因此最佳实践是将 js 的工作分成不大于 50 毫秒的块,如果用户开始交互，优先级最高的事项是响应用户。</li>\n<li><p><code>Load</code>：在 <code>1000 毫秒</code>以内呈现内容（无需完整加载，启用渐进式渲染，将非必需的加载推迟到空闲时间段</p>\n</li>\n<li><p>通过 performance 面板，可以得到这四个维度的分析数据</p>\n</li>\n</ul>\n<h3 id=\"控制区\"><a href=\"#控制区\" class=\"headerlink\" title=\"控制区\"></a>控制区</h3><p><img src=\"https://i.loli.net/2019/05/01/5cc9642fa35b5.png\" alt></p>\n<ul>\n<li>点击<code>录制按钮</code>或者<code>开始录制并刷新页面按钮</code>,可以在控制区下方得到全部性能分析结果</li>\n<li>其中除了最下方的详细信息窗格以外，分析结果都是以时间为轴</li>\n<li>可以在 overview 窗格拖动鼠标，选择某段时间的分析结果</li>\n<li>滚动鼠标滚轮，缩放/移动选中事件</li>\n<li>在火焰图窗格，按住<code>shift</code>，滚动鼠标滚轮，可以上下</li>\n<li>在火焰图窗格，也可以直接左右拖动图表</li>\n<li>或者用<code>W A S D</code>按键控制缩放移动</li>\n<li><code>Disable JavaScript samples</code>默认情况，在<code>Main</code>主线程的火焰图中，会详细记录 js 函数之间的调用栈，可以开启此选项禁用调用栈记录</li>\n<li><code>Enable advanced paint instrumentation</code>启用高级绘图工具，可以在分析结果的<code>Frames</code>中的每一帧的详细结果中看到<code>Layer</code>选项卡，其中有选中帧的详细图层信息；也可以在<code>Main</code>主线程火焰图中选中绿色的<code>Paint</code>事件，在最底部详细信息的<code>Paint Profile</code>选项卡中，看到详细的页面绘制过程分析</li>\n<li><code>Collect garbage</code>控制器最右的垃圾桶图标，是强制执行垃圾回收，对于监控内存比较有用</li>\n</ul>\n<h3 id=\"FPS-图表-Frames-Per-Seconds\"><a href=\"#FPS-图表-Frames-Per-Seconds\" class=\"headerlink\" title=\"FPS 图表 - Frames Per Seconds\"></a>FPS 图表 - Frames Per Seconds</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee0f3335be.png\" alt></p>\n<ul>\n<li>FPS 图表中，绿色代表帧率高低，参考<code>RAIL</code>模型，帧率&gt;=60 时，用户能体验的顺滑的网页</li>\n<li>红色出现 代表有掉帧情况</li>\n</ul>\n<h3 id=\"CPU-图表\"><a href=\"#CPU-图表\" class=\"headerlink\" title=\"CPU 图表\"></a>CPU 图表</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee13cd4479.png\" alt></p>\n<ul>\n<li>CPU 图表中，不同的颜色代表不同事件对 CPU 的占用，颜色信息如图</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee05903554.png\" alt></p>\n<ul>\n<li>当 CPU 长时间被占满，就是当前网页性能需要优化的信号</li>\n</ul>\n<h3 id=\"SCREENSHOTS\"><a href=\"#SCREENSHOTS\" class=\"headerlink\" title=\"SCREENSHOTS\"></a>SCREENSHOTS</h3><ul>\n<li>鼠标在<code>FPS,CPU,NET</code>图表悬浮时，会展示出鼠标对应时间点的网页截屏，左右移动鼠标可以看到网页变化的重播效果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee37b9a4b3.gif\" alt></p>\n<h3 id=\"HEAP\"><a href=\"#HEAP\" class=\"headerlink\" title=\"HEAP\"></a>HEAP</h3><p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<ul>\n<li>在 HEAP 图表中可以看到 JS 内存占用情况，与下方的 memory 窗格中的<code>JS Heap</code>相对应</li>\n<li>在 Memory 窗格还可以看到 Document 文档、Nodes DOM 节点、监听器、GPU 内存的习份内存统计</li>\n</ul>\n<h3 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h3><ul>\n<li>点击三角箭头展开<code>Frames</code>区域，鼠标悬浮/点击绿色方块，可以看到该特定帧的帧率和渲染耗时，当 FPS 低于 60，表明当前帧的渲染效率较低</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee92a52b29.png\" alt></p>\n<h3 id=\"FPS-仪表工具\"><a href=\"#FPS-仪表工具\" class=\"headerlink\" title=\"FPS 仪表工具\"></a>FPS 仪表工具</h3><ul>\n<li>通过<code>more -&gt; more tools -&gt; Rendering</code> 或者 <code>ctrl+shift+p -&gt; rendering</code> 打开<code>Rendering</code>面板</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee9d226d2e.png\" alt></p>\n<ul>\n<li>启用<code>FPS meter</code>，即可看到的页面实时帧率</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceeb3144e12.gif\" alt></p>\n<h3 id=\"Mian\"><a href=\"#Mian\" class=\"headerlink\" title=\"Mian\"></a>Mian</h3><ul>\n<li>点击三角箭头展开<code>Main</code>区域，可以看到主线程上事件的<code>火焰图</code></li>\n<li>x 轴是时间，每一块代表一个事件，y 轴代表堆栈，事件的上下堆叠，代表上层事件引发/调用了下层事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceec8b11f7f.png\" alt></p>\n<ul>\n<li>通过调用堆栈，可以找出导致低性能的事件及其源码位置</li>\n<li>当事件块出现红色三角，可以点击三角查看该事件的性能相关警告信息，并定位到引起警告的代码</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5cceef6801439.png\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef1a7c2c2a.gif\" alt></p>\n<ul>\n<li>点击<code>Animation Frame Fired</code>事件，可以在最下方<code>Summary</code>窗格查看触发动画事件的详细信息，点击<code>Initiator</code>后的<code>reveal</code>链接，会高亮到引起动画事件的事件</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccef012a3dba.gif\" alt></p>\n<h3 id=\"性能相关扩展\"><a href=\"#性能相关扩展\" class=\"headerlink\" title=\"性能相关扩展\"></a>性能相关扩展</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">网页性能-性能模型/加载/渲染/审计/优化</a></li>\n<li><a href=\"https://aerotwist.com/blog/the-anatomy-of-a-frame/\" target=\"_blank\" rel=\"noopener\">the-anatomy-of-a-frame - 一个帧的剖析</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/performance-reference\" target=\"_blank\" rel=\"noopener\">常见的时间线事件参考</a></li>\n</ul>\n<h2 id=\"Memory-内存面板\"><a href=\"#Memory-内存面板\" class=\"headerlink\" title=\"Memory 内存面板\"></a>Memory 内存面板</h2><h3 id=\"内存-amp-amp-内存泄露\"><a href=\"#内存-amp-amp-内存泄露\" class=\"headerlink\" title=\"内存 &amp;&amp; 内存泄露\"></a>内存 &amp;&amp; 内存泄露</h3><p>内存占用：</p>\n<ol>\n<li>allocate 分配内存(eg 声明变量</li>\n<li>使用内存</li>\n<li>release 释放内存</li>\n</ol>\n<p>内存泄漏：</p>\n<ul>\n<li><code>内存泄露-Memory Leak</code>：内存被占用后无法被 release，且无法被垃圾回收器回收</li>\n<li>内存泄漏会引起性能问题，且时间越久越严重，因为被占用且无法回收的内存只会增加不会减少</li>\n<li><code>垃圾回收-Garbage Collect-GC</code>：浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停</li>\n</ul>\n<h3 id=\"造成内存泄露常见原因\"><a href=\"#造成内存泄露常见原因\" class=\"headerlink\" title=\"造成内存泄露常见原因\"></a>造成内存泄露常见原因</h3><ul>\n<li><code>fogotten timer</code>被遗忘的计时器：例如调用 setInterval()方法一定要加结束条件</li>\n<li><code>Dettached HTMLElement</code>分离的 dom 节点：在 dom 被移除后，dom 变量仍然存在</li>\n</ul>\n<h3 id=\"内存监控-1-Task-manager-任务管理器\"><a href=\"#内存监控-1-Task-manager-任务管理器\" class=\"headerlink\" title=\"内存监控 1-Task manager 任务管理器\"></a>内存监控 1-Task manager 任务管理器</h3><ul>\n<li>chorme 浏览器 -&gt; task manager 任务管理器工具中，可以监控每个 tab 页的 js 内存占用大小</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd194ba3a655.png\" alt></p>\n<ul>\n<li><code>Memory</code> 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。</li>\n<li><code>JavaScript Memory</code>列表示 JS 堆。此列包含两个值。 实际大小表示页面上的对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。</li>\n</ul>\n<h3 id=\"内存监控-2-Devtools-Performance-面板\"><a href=\"#内存监控-2-Devtools-Performance-面板\" class=\"headerlink\" title=\"内存监控 2-Devtools Performance 面板\"></a>内存监控 2-Devtools Performance 面板</h3><ul>\n<li>在<code>Performance</code>面板记录性能时，勾选<code>memory</code>即可在分析结果中看到 memory 占用情况</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/05/5ccee6f4b968d.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例1:正常的内存占用与GC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">\"x\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd19db41fbbc.png\" alt></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例2:不可被GC的内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// for (var i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     document.body.appendChild(document.createElement(\"div\"));</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// x.push(new Array(1000000).join(\"x\"));</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"ul\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">        ul.appendChild(li);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detachedTree = ul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(grow, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a62aa1bfd.png\" alt></p>\n<h3 id=\"内存监控-3-Devtools-Memory-面板\"><a href=\"#内存监控-3-Devtools-Memory-面板\" class=\"headerlink\" title=\"内存监控 3-Devtools Memory 面板\"></a>内存监控 3-Devtools Memory 面板</h3><p><img src=\"https://i.loli.net/2019/05/07/5cd18fa5d8489.png\" alt></p>\n<ul>\n<li>如上图所示，在右侧三种内存分析模式选择一种后，即可点击左上角<code>record</code>开始记录内存</li>\n</ul>\n<ol>\n<li><code>Heap snapshot</code>堆快照，记录当前时间点内存中页面 js 对象和 dom 节点的分配情况</li>\n<li><code>Allocation instrumentation on timeline</code>按时间轴记录内存，可以选记录内存分配调用栈(可以帮助定位到具体分配内存的源码)</li>\n<li><code>Allocation sampling</code>使用抽样方法记录内存分配。具有最小的性能开销，可用于长时间运行的操作。提供了由 JavaScript 执行堆栈细分的良好近似分配。</li>\n</ol>\n<ul>\n<li><p>左上角的垃圾桶图标<code>Collect garbage</code>是强制执行一次垃圾回收，内存监控的最佳实践是在监控内存前执行一次强制垃圾回收</p>\n</li>\n<li><p>利用上述示例 2 代码，执行时间线 Memory 分析：</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/05/07/5cd1a7db0cfe0.png\" alt></p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><ul>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/memory-101\" target=\"_blank\" rel=\"noopener\">内存相关术语</a></li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/memory-problems/heap-snapshots\" target=\"_blank\" rel=\"noopener\">深入内存分析</a></li>\n</ul>\n"},{"title":"JavaScript开发者应懂的33个概念","date":"2019-06-30T16:00:00.000Z","description":"基本都是面试考点了","toc":1,"top":0,"_content":"\n## 简介\n[原文链接](https://github.com/stephentian/33-js-concepts)\n> 本篇文章是参照 @leonardomso 创立，英文版项目地址在[这里](https://github.com/leonardomso/33-js-concepts)。\n\n---\n\n## 目录\n\n1. **[调用堆栈](#1-调用堆栈)**\n2. **[原始类型](#2-原始类型)**\n3. **[值类型和引用类型](#3-值类型和引用类型)**\n4. **[隐式, 显式, 名义和鸭子类型](#4-隐式-显式-名义和鸭子类型)**\n5. **[== 与 ===, typeof 与 instanceof](#5--vs--typeof-vs-instanceof)**\n6. **[this, call, apply 和 bind](#6-this-call-apply-和-bind)**\n7. **[函数作用域, 块级作用域和词法作用域](#7-函数作用域-块级作用域和词法作用域)**\n8. **[闭包](#8-闭包)**\n9. **[map, reduce, filter 等高阶函数](#9-map-reduce-filter-等高阶函数)**\n10. **[表达式和语句](#10-表达式和语句)**\n11. **[变量提升](#11-变量提升)**\n12. **[Promise](#12-promise)**\n13. **[立即执行函数, 模块化, 命名空间](#13-立即执行函数-模块化-命名空间)**\n14. **[递归](#14-递归)**\n15. **[算法](#15-算法)**\n16. **[数据结构](#16-数据结构)**\n17. **[消息队列和事件循环](#17-消息队列和事件循环)**\n18. **[setTimeout, setInterval 和 requestAnimationFrame](#18-settimeout-setinterval-和-requestanimationframe)**\n19. **[继承, 多态和代码复用](#19-继承-多态和代码复用)**\n20. **[按位操作符, 类数组对象和类型化数组](#20-按位操作符-类数组对象和类型化数组)**\n21. **[DOM 树和渲染过程](#21-dom-树和渲染过程)**\n22. **[new 与构造函数, instanceof 与实例](#22-new-与构造函数-instanceof-与实例)**\n23. **[原型继承与原型链](#23-原型继承与原型链)**\n24. **[Object.create 和 Object.assign](#24-objectcreate-和-objectassign)**\n25. **[工厂函数和类](#25-工厂函数和类)**\n26. **[设计模式](#26-设计模式)**\n27. **[Memoization](#27-memoization)**\n28. **[纯函数, 函数副作用和状态变化](#28-纯函数-函数副作用和状态变化)**\n29. **[耗性能操作和时间复杂度](#29-耗性能操作和时间复杂度)**\n30. **[JavaScript 引擎](#30-javascript-引擎)**\n31. **[二进制, 十进制, 十六进制, 科学记数法](#31-二进制-十六进制-十进制-科学记数法)**\n32. **[偏函数, 柯里化, Compose 和 Pipe](#32-偏函数-柯里化-compose-和-pipe)**\n33. **[代码整洁之道](#33-代码整洁之道)**\n\n---\n\n## 1. 调用堆栈\n\n### 文章\n\n- :book: [Call Stack — MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack)\n- :book: [[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金](https://juejin.im/post/5a05b4576fb9a04519690d42)\n- :book: [[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金](https://juejin.im/post/5ba32171f265da0ab719a6d7)\n- :book: [这一次，彻底弄懂 JavaScript 执行机制 —— 掘金](https://juejin.im/post/59e85eebf265da430d571f89)\n- :book: [解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国](https://www.oschina.net/translate/how-does-javascript-actually-work-part-1)\n- :book: [Tasks, microtasks, queues and schedules —— Jake Archibald](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n- :book: [Tasks, microtasks, queues and schedules（译） —— 掘金](https://juejin.im/entry/55dbd51a60b2f3a92a8f5bff)\n\n### 视频\n\n- :tv: [What is the event loop anyway? —— 腾讯视频(英文字幕)](https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser)\n- :tv: [Understanding The JavaScript Call Stack, Event Queue, Event Table, & Event Loop —— Bilibili](https://www.bilibili.com/video/av33824933/)\n- :tv: [JS 中的变量提升、堆栈内存及闭包详解 —— Acfun](http://www.acfun.cn/v/ac4495641)\n- :tv: [事件循环模型 —— PHP 中文网](http://www.php.cn/code/21194.html)\n- :tv: [Javascript: the Call Stack explained — Coding Blocks India](https://www.youtube.com/watch?v=w6QGEiQceOM)\n- :tv: [The JS Call Stack Explained In 9 Minutes — Colt Steele](https://www.youtube.com/watch?v=W8AeMrVtFLY)\n- :tv: [JavaScript Execution Stack — Codecademy](https://www.youtube.com/watch?v=jT0USJeNFEA)\n- :tv: [What is the Call Stack? — Eric Traub](https://www.youtube.com/watch?v=w7QWQlkLY_s)\n- :tv: [The Call Stack — Kevin Drumm](https://www.youtube.com/watch?v=Q2sFmqvpBe0)\n- :tv: [Understanding JavaScript Execution — Codesmith](https://www.youtube.com/watch?v=Z6a1cLyq7Ac&list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD)\n- :tv: [Call Stack & Event Loop — movies com](https://www.youtube.com/watch?v=mk0lu9MKBto)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 2. 原始类型\n\n### 文章\n\n- :book: [原始数据 —— MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)\n- :book: [[译]JavaScript 是怎样编码数字的 —— SegmentFault](https://segmentfault.com/a/1190000017090272)\n- :book: [每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜](https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/)\n- :book: [JavaScript 标准参考教程(基本语法之数值) —— 阮一峰](https://wangdoc.com/javascript/types/number.html)\n- :book: [The Secret Life of JavaScript Primitives —— Angus Croll](https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/)\n\n### 视频\n\n- :tv: [javascript 六种数据类型 —— 慕课网](https://www.imooc.com/video/5674)\n- :tv: [javascript 视频教程(数据类型) —— PHP 中文网](http://www.php.cn/code/5808.html)\n- :tv: [JavaScript Reference vs Primitive Types — Academind](https://www.youtube.com/watch?v=9ooYYRLdg_g)\n- :tv: [JavaScript Primitive Types — Simon Sez IT](https://www.youtube.com/watch?v=HsbWQsSCE5Y)\n- :tv: [Javascript Primitive and Reference Types — Baljeet Singh](https://www.youtube.com/watch?v=F7YbhKbpFic)\n- :tv: [Value Types and Reference Types in JavaScript — Programming with Mosh](https://www.youtube.com/watch?v=e-_mDyqm2oU)\n- :tv: [JavaScript Primitive Data Types — Avelx](https://www.youtube.com/watch?v=qw3j0A3DIzQ)\n- :tv: [Everything you never wanted to know about JavaScript numbers — Bartek Szopka](https://www.youtube.com/watch?v=MqHDDtVYJRI)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 3. 值类型和引用类型\n\n### 文章\n\n- :book: [ECMAScript 引用类型 —— W3school](http://www.w3school.com.cn/js/pro_js_referencetypes.asp)\n- :book: [js 中的值类型和引用类型的区别 —— 博客园](https://www.cnblogs.com/leiting/p/8081413.html)\n- :book: [JavaScript 的值传递和引用传递 —— FunDebug](https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/)\n- :book: [Primitive Types & Reference Types in JavaScript —— Bran van der Meer](https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm)\n- :book: [JavaScript: Passing by Value or by Reference —— CSDN](https://blog.csdn.net/xiaojia_boke/article/details/54906509)\n- :book: [js 值引用和值复制 —— SegmentFault](https://segmentfault.com/a/1190000015411195)\n- :book: [js- 引用和复制(传值和传址) —— CSDN](https://blog.csdn.net/zzzaquarius/article/details/4902235)\n\n### 视频\n\n- :tv: [Javascript Pass by Value vs Pass by Reference — techsith](https://www.youtube.com/watch?v=E-dAnFdq8k8)\n- :tv: [JavaScript Value vs Reference Types — Programming with Mosh](https://www.youtube.com/watch?v=fD0t_DKREbE)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 4. 隐式, 显式, 名义和鸭子类型\n\n### 文章\n\n- :book: [ECMAScript 类型转换 —— W3school](http://www.w3school.com.cn/js/pro_js_typeconversion.asp)\n- :book: [JavaScript 的怪癖 1：隐式类型转换 —— justjavac](http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html)\n- :book: [JavaScript 运算符规则与隐式类型转换详解 —— 掘金](https://juejin.im/post/59ad2585f265da246a20e026)\n- :book: [聊一聊 JS 中的隐式类型转换 —— SegmentFault](https://segmentfault.com/a/1190000004482388)\n- :book: [有趣的 JavaScript 隐式类型转换 —— 博客园](https://www.cnblogs.com/yugege/p/5277883.html)\n- :book: [JavaScript 显式类型转换与隐式类型转换 —— CSDN](https://blog.csdn.net/yangjvn/article/details/48284163)\n- :book: [你不知道的 JavaScript（中卷）强制类型转换 —— 简书](https://www.jianshu.com/p/777a89b4ed9a)\n- :book: [你懂 JavaScript 嗎？#8 強制轉型 —— cythilya](https://ithelp.ithome.com.tw/articles/10201512)\n- :book: [动态类型语言和鸭子类型 —— 曾探](http://book.51cto.com/art/201505/475153.htm)\n- :book: [Nominal & Structural Typing —— flow](https://flow.org/en/docs/lang/nominal-structural/)\n- :book: [What exactly is Type Coercion in Javascript? —— stackoverflow](https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript)\n- :book: [You Don't Know JS: Types & Grammar —— github](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&%20grammar/ch4.md)\n\n### 视频\n\n- :tv: [javascript 隐式转换 —— 慕课网](https://www.imooc.com/video/5675)\n- :tv: [Javascript 基础加强-类型转换 —— 黑马程序员](http://www.le.com/ptv/vplay/27767009.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n<div id=\"5--vs--typeof-vs-instanceof\"></div>\n\n## 5. == vs ===, typeof vs instanceof\n\n### 文章\n\n- :book: [JavaScript 中的相等性判断 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n- :book: [js 中 == 和 === 的区别 —— 掘金](https://juejin.im/entry/584918612f301e005716add6)\n- :book: [== vs === in Javascript —— CSDN](https://blog.csdn.net/w97531/article/details/82255225)\n- :book: [深入理解 javascript 之 typeof 和 instanceof —— CSDN](https://blog.csdn.net/mevicky/article/details/50353881)\n- :book: [JavaScript 的 typeof 的用途 —— justjavac](http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html)\n- :book: [一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金](https://juejin.im/post/58358606570c35005e4142bd)\n- :book: [浅谈 instanceof 和 typeof 的实现原理 —— 掘金](https://juejin.im/post/5b0b9b9051882515773ae714)\n- :book: [typeof 和 instanceOf 的区别](https://segmentfault.com/a/1190000000730982)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 6. this, call, apply 和 bind\n\n### 文章\n\n- :book: [Javascript 的 this 用法 —— 阮一峰](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n- :book: [学会 JS 的 this 这一篇就够了，根本不用记 —— 简书](https://www.jianshu.com/p/6b4333e78bf5)\n- :book: [[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金](https://juejin.im/post/5b9f176b6fb9a05d3827d03f)\n- :book: [this、apply、call、bind —— 掘金](https://juejin.im/post/59bfe84351882531b730bac2)\n- :book: [使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园](https://www.cnblogs.com/tingyu-blog/p/6212392.html)\n- :book: [call、apply 和 bind 的原生实现 —— github](https://github.com/Abiel1024/blog/issues/16)\n\n### 视频\n\n- :tv: [JavaScript 关于 this 关键字解释 —— 爱奇艺](https://www.iqiyi.com/w_19rr1augsd.html)\n- :tv: [JS 关于作用域闭包和 this 的综合面试题 —— 百度视频](http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed)\n- :tv: [js 面向对象闭包数组 12.函数中的 this —— 乐视视频](http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s)\n- :tv: [1.3.10-this 指向及 this 应用 —— 乐视视频](http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s)\n- :tv: [珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂](https://study.163.com/course/introduction/590005.htm)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 7. 函数作用域, 块级作用域和词法作用域\n\n### 文章\n\n- :book: [变量作用域与解构赋值 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000)\n- :book: [学习 Javascript 闭包（Closure） —— 阮一峰](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n- :book: [JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault](https://segmentfault.com/a/1190000006671020)\n- :book: [JavaScript 深入之词法作用域和动态作用域 —— 掘金](https://juejin.im/entry/58e70077b123db15eb88dc7e)\n- :book: [深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金](https://juejin.im/post/5afb0ae56fb9a07aa2138425)\n- :book: [What is lexical scope? —— stackoverflow](https://stackoverflow.com/questions/1047454/what-is-lexical-scope)\n- :book: [You Don't Know JS: Scope & Closures —— Kyle Simpson](https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope%20&%20closures/ch2.md)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 8. 闭包\n\n### 文章\n\n- :book: [闭包 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n- :book: [ECMAScript 闭包（closure）—— w3school](http://www.w3school.com.cn/js/pro_js_functions_closures.asp)\n- :book: [学习 Javascript 闭包（Closure） —— 阮一峰](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n- :book: [闭包 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000)\n- :book: [一次性搞懂 JavaScript 闭包 —— 简书](https://www.jianshu.com/p/796e903754f1)\n- :book: [JavaScript 闭包 —— SegmentFault](https://segmentfault.com/a/1190000006875662)\n- :book: [js 匿名自执行函数中闭包的高级使用 —— 掘金](https://juejin.im/entry/5800eb7da22b9d005b36156e)\n- :book: [高效使用 JavaScript 闭包 —— 掘金](https://juejin.im/entry/59df405251882551bf7e58c6)\n- :book: [深入理解 JavaScript 原型与闭包 —— 王福朋](https://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n### 视频\n\n- :tv: [JavaScript 闭包和闭包面试题 —— 爱奇艺](http://www.iqiyi.com/w_19rr1amael.html)\n- :tv: [js 面向对象闭包数组 11.闭包 —— 乐视](http://www.le.com/ptv/vplay/27478410.html)\n- :tv: [白贺翔\\_函数(闭包) —— 乐视](http://www.le.com/ptv/vplay/30505852.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 9. map, reduce, filter 等高阶函数\n\n### 文章\n\n- :book: [高阶函数 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000)\n- :book: [ES5 中新增的 Array 方法详细说明 —— 张鑫旭](https://www.zhangxinxu.com/wordpress/2013/04/es5%e6%96%b0%e5%a2%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95/)\n- :book: [一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金](https://juejin.im/post/5835808067f3560065ed4ab2)\n- :book: [Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault](https://segmentfault.com/a/1190000012127329)\n- :book: [JavaScript 函数式编程（三） —— @BuptStEve](https://github.com/BuptStEve/blog/issues/15)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 10. 表达式和语句\n\n### 文章\n\n- :book: [js 表达式与语句 —— 博客园](https://www.cnblogs.com/xianshenglu/p/8386918.html)\n- :book: [JS 表达式和语句的区别 —— SegmentFault](https://segmentfault.com/q/1010000004102804)\n- :book: [JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN](https://blog.csdn.net/mett_smith/article/details/78761247)\n- :book: [重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault](https://segmentfault.com/a/1190000004565693)\n- :book: [Expressions versus statements in JavaScript —— Dr. Axel](http://2ality.com/2012/09/expressions-vs-statements.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 11. 变量提升\n\n### 文章\n\n- :book: [JavaScript 变量提升 —— 菜鸟教程](http://www.runoob.com/js/js-hoisting.html)\n- :book: [ES6 变量作用域与提升：变量的生命周期详解 —— 掘金](https://juejin.im/post/59905bea6fb9a03c34192c51)\n- :book: [[翻译] JavaScript Scoping and Hoisting —— SegmentFault](https://segmentfault.com/a/1190000004345355#articleHeader5)\n- :book: [JavaScript Scoping and Hoisting —— Ben Cherry](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 12. Promise\n\n### 文章\n\n- :book: [使用 promises —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\n- :book: [Promise —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- :book: [Promise — 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n- :book: [JavaScript Promise：去而复返 —— 司徒正美](https://www.cnblogs.com/rubylouvre/p/3495286.html)\n- :book: [(上面的原文)JavaScript Promise：简介 —— Web Fundamentals](https://developers.google.com/web/fundamentals/primers/promises#_1)\n- :book: [1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac](https://segmentfault.com/a/1190000011813934)\n- :book: [JavaScript Promise 迷你书（中文版）](https://juejin.im/entry/56499ae160b2d1404c4f8834)\n- :book: [JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园](https://www.cnblogs.com/yunfeifei/p/4453690.html)\n\n### 视频\n\n- :tv: [Promise 入门 —— 慕课网](https://www.imooc.com/learn/949)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 13. 立即执行函数, 模块化, 命名空间\n\n### 文章\n\n- :book: [Javascript 模块化编程（一）：模块的写法 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n- :book: [javascript 模块化编程-详解立即执行函数表达式 —— 简书](https://www.jianshu.com/p/4dbf4a4c8ebb)\n- :book: [Javascript 的匿名函数与自执行 —— 掘金](https://juejin.im/entry/57fee360a22b9d005b1d9ae3)\n- :book: [前端模块化——技术选型 —— SegmentFault](https://segmentfault.com/a/1190000006966358)\n- :book: [谈谈 Js 前端模块化规范 —— SegmentFault](https://segmentfault.com/a/1190000015991869#articleHeader8)\n- :book: [函数声明与函数表达式的区别 —— 伯乐在线](http://web.jobbole.com/87534/)\n\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 14. 递归\n\n### 文章\n\n- :book: [求解释 js 递归 —— SegmentFault](https://segmentfault.com/q/1010000003942347)\n- :book: [JavaScript 中的递归 —— 掘金](https://juejin.im/post/5948c0d8fe88c2006a939e2a)\n- :book: [递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金](https://juejin.im/post/59c1d91d6fb9a00a53275f79)\n- :book: [递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金](https://juejin.im/post/59c87fb46fb9a00a437b1a2e)\n- :book: [尾调用和尾递归 —— 掘金](https://juejin.im/post/5acdd7486fb9a028ca53547c)\n- :book: [几个经典递归问题用 js 实现 —— CSDN](https://blog.csdn.net/qianqianstd/article/details/75807462)\n- :book: [递归函数的几个例子 —— CSDN](https://blog.csdn.net/x_i_xw/article/details/72026868)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 15. 算法\n\n### 文章\n\n- :book: [十大经典排序算法总结（JavaScript 描述） —— 掘金](https://juejin.im/post/57dcd394a22b9d00610c5ec8)\n- :book: [在 JavaScript 中学习数据结构与算法 —— 掘金](https://juejin.im/post/594dfe795188250d725a220a#comment)\n- :book: [JS 中可能用得到的全部的排序算法 —— 掘金](https://juejin.im/post/58c9d5fb1b69e6006b686bce)\n- :book: [JS 家的排序算法 —— 简书](https://www.jianshu.com/p/1b4068ccd505)\n- :book: [前端常见算法的 JS 实现 —— SegmentFault](https://segmentfault.com/a/1190000008593715)\n- :book: [前端面试中的常见的算法问题 ——蒲小花的博客](https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/)\n\n### 视频\n\n- :tv: [Javascript 实现二叉树算法 —— 慕课网](https://www.imooc.com/learn/888)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 16. 数据结构\n\n### 文章\n\n- :book: [来我们浅谈一下 js 的数据结构 —— 简书](https://www.jianshu.com/p/5e0e8d183102)\n- :book: [JavaScript 中的算法与数据结构 —— 简书](https://www.jianshu.com/nb/16835496)\n- :book: [学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客](http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html)\n- :book: [js 中基础数据结构数组去重问题 —— 掘金](https://juejin.im/entry/586effe0da2f600053d85a9a)\n\n### 视频\n\n- :tv: :tv: [JavaScript 数据结构-运算符 —— 乐视](http://www.le.com/ptv/vplay/27606964.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 17. 消息队列和事件循环\n\n### 文章\n\n- :book: [并发模型与事件循环 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n- :book: [JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n- :book: [深入理解 JavaScript 事件循环 —— 博客园](https://www.cnblogs.com/dong-xu/p/7000163.html)\n- :book: [深入浅出 Javascript 事件循环机制 —— 知乎](https://zhuanlan.zhihu.com/p/26229293)\n- :book: [JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault](https://segmentfault.com/a/1190000014940904#articleHeader7)\n- :book: [JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault](https://segmentfault.com/a/1190000004322358)\n- :book: [从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金](https://juejin.im/post/5a6547d0f265da3e283a1df7)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 18. setTimeout, setInterval 和 requestAnimationFrame\n\n### 文章\n\n- :book: [Window setTimeout() 方法 —— 菜鸟教程](http://www.runoob.com/jsref/met-win-settimeout.html)\n- :book: [Window setInterval() 方法 —— 菜鸟教程](http://www.runoob.com/jsref/met-win-setinterval.html)\n- :book: [关于 setTimeout —— 掘金](https://juejin.im/post/5aa4c47af265da239866e236)\n- :book: [你不知道的 Javascript：有趣的 setTimeout —— 掘金](https://juejin.im/post/5a77f8ce5188257a6d635d76)\n- :book: [原来你是这样的 setTimeout —— 掘金](https://juejin.im/entry/5861ebf01b69e6006ce61d38)\n- :book: [setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault](https://segmentfault.com/q/1010000005989491)\n- book: [window.requestAnimationFrame —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n- :book: [requestAnimationFrame 知多少？ —— 博客园](http://www.cnblogs.com/onepixel/p/7078617.html)\n- :book: [CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭](https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%e5%8a%a8%e7%94%bb%e7%ae%97%e6%b3%95/)\n- :book: [「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault](https://segmentfault.com/a/1190000014661035)\n- :book: [翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault](https://segmentfault.com/a/1190000000386368)\n- :book: [阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault](https://segmentfault.com/q/1010000013909430)\n\n### 视频\n\n- :tv: [setTimeout 和 setInterval —— 优酷](http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 19. 继承, 多态和代码复用\n\n### 文章\n\n- :book: [JS 面向对象编程之：封装、继承、多态 —— 博客园](https://www.cnblogs.com/Leo_wl/p/5734794.html)\n- :book: [Javascript 的继承与多态 —— 简书](https://www.jianshu.com/p/5cb692658704)\n- :book: [js:面向对象编程，带你认识封装、继承和多态 —— 掘金](https://juejin.im/post/59396c96fe88c2006afc2707)\n- :book: [JavaScript 中的“多继承” —— 掘金](https://zhuanlan.zhihu.com/p/34693209)\n- :book: [代码复用模式 —— github](https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown)\n- :book: [深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔](http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html)\n- :book: [深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔](https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 20. 按位操作符, 类数组对象和类型化数组\n\n### 文章\n\n- :book: [按位操作符 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators)\n- :book: [类数组对象 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays)\n- :book: [类型化数组 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)\n- :book: [JavaScript ArrayBuffer 浅析 —— 博客园](https://www.cnblogs.com/gradolabs/p/4762134.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 21. DOM 树和渲染过程\n\n### 文章\n\n- :book: [如何创建一个 DOM 树 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree)\n- :book: [HTML DOM 节点 —— W3school](http://www.w3school.com.cn/htmldom/dom_nodes.asp)\n- :book: [DOM 概述 —— 阮一峰](http://javascript.ruanyifeng.com/dom/node.html)\n- :book: [《JavaScript 闯关记》之 DOM（上）—— 掘金](https://juejin.im/post/583cbbfa61ff4b006ccc41fe)\n- :book: [《JavaScript 闯关记》之 DOM（下）—— 掘金](https://juejin.im/post/583cbc4961ff4b006ccc44fb)\n- :book: [掌握 DOM 操作 —— 掘金](https://juejin.im/entry/58314efd8ac2470061bb30fd)\n- :book: [操作 DOM —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000)\n- :book: [原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金](https://juejin.im/post/59c60691518825396f4f71a1)\n\n### 视频\n\n- :tv: [DOM 探索之基础详解篇 —— 慕课网](https://www.imooc.com/learn/488)\n- :tv: [DOM 事件探秘 —— 慕课网](https://www.imooc.com/learn/138)\n- :tv: [jQuery 基础(二)DOM 篇 —— 慕课网](https://www.imooc.com/learn/530)\n- :tv: [JS 操作 DOM 对象属性和方法 —— 爱奇艺](http://www.iqiyi.com/w_19rr19s08l.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 22. new 与构造函数, instanceof 与实例\n\n### 文章\n\n- :book: [构造函数与 new 命令 —— 阮一峰](http://javascript.ruanyifeng.com/oop/basic.html)\n- :book: [Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)\n- :book: [完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN](https://blog.csdn.net/SpicyBoiledFish/article/details/71123162)\n- :book: [JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网](http://www.php.cn/js-tutorial-376246.html)\n- :book: [构造函数、实例、原型、原型链之间的关系 —— CSDN](https://blog.csdn.net/yin_991/article/details/80954453)\n- :book: [深入理解 JS—instanceof 和原型链 —— CSDN](https://blog.csdn.net/cecilia620/article/details/71158048)\n- :book: [前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书](https://www.jianshu.com/p/15ac7393bc1f)\n- :book: [js 用 new 实例化对象与直接调用的 this 的区别 —— 简书](https://www.jianshu.com/p/60ffc4831bff)\n- :book: [JavaScript 并非所有的东西都是对象 —— justjavac](http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html)\n- :book: [JavaScript instanceof 运算符深入剖析 —— IBM](https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/)\n\n### 视频\n\n- :tv: [改良版的构造函数 —— 乐视](http://www.le.com/ptv/vplay/27766889.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 23. 原型继承与原型链\n\n### 文章\n\n- :book: [继承与原型链 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n- :book: [构造函数、原型与原型链 —— github](https://github.com/bigdots/blog/issues/1)\n- :book: [原型及原型链 —— github(1269 Star)](https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype)\n- :book: [理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault](https://segmentfault.com/a/1190000004282206)\n- :book: [JavaScript：继承和原型链(译) —— justjavac](http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html)\n- :book: [三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园](http://www.cnblogs.com/shuiyi/p/5305435.html)\n- :book: [一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN](https://blog.csdn.net/the__apollo/article/details/76774698)\n- :book: [JS 高级--原型链(一看就懂，但 18 岁以下请绕道) —— CSDN](https://blog.csdn.net/xiaotao_css/article/details/72782416)\n- :book: [原型继承 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000)\n- :book: [JS 原型链与继承别再被问倒了 —— 掘金](https://juejin.im/post/58f94c9bb123db411953691b)\n- :book: [征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金](https://juejin.im/entry/5885db221b69e600592253e7)\n- :book: [JavaScript 深入之从原型到原型链 —— 冴羽](https://github.com/mqyqingfeng/Blog/issues/2)\n- :book: [深入理解 JavaScript 原型与闭包 —— 王福朋](https://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n### 视频\n\n- :tv: [JS 高级-07-原型链继承 —— 乐视](http://www.le.com/ptv/vplay/27552753.html)\n- :tv: [JS 原型对象和原型链简介 —— 腾讯视频](https://v.qq.com/x/page/b0511nwa7d3.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 24. Object.create 和 Object.assign\n\n### 文章\n\n- :book: [Object.create —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n- :book: [Object.assign —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n- :book: [Object.create vs Object.assign —— 慕课网手记](https://www.imooc.com/article/17591)\n- :book: [JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN](https://blog.csdn.net/DeepLies/article/details/52915143)\n- :book: [es6 中 object.create()和 object.assign() —— 风信子博客](http://www.onlyfordream.cn/2018/03/19/es6%E4%B8%ADobject-create%E5%92%8Cobject-assign/)\n- :book: [Object-Assign-Deep —— github](https://github.com/saikojosh/Object-Assign-Deep)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 25. 工厂函数和类\n\n### 文章\n\n- :book: [类 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes)\n- :book: [类和实例 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000)\n- :book: [Javascript 定义类（class）的三种方法 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html)\n- :book: [【译】ES6 的工厂函数 —— 掘金](https://juejin.im/post/59c8c8756fb9a00a681ae5bd)\n- :book: [JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金](https://juejin.im/entry/587992c961ff4b0065edf1ff)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 26. 设计模式\n\n### 文章\n\n- :book: [JavaScript 设计模式 —— 掘金](https://juejin.im/post/59df4f74f265da430f311909)\n- :book: [学用 JavaScript 设计模式 —— 极客学院](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)\n- :book: [[面试专题]JS 设计模式 —— SegmentFault](https://segmentfault.com/a/1190000010914032)\n- :book: [JavaScript Patterns 中译本 —— github](https://github.com/lxj/javascript.patterns)\n\n### 视频\n\n- :tv: [HTML5 课程大纲 2-11JS 设计模式](https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 27. Memoization\n\n### 文章\n\n- :book: [JavaScript Memoization —— 司徒正美](https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html)\n- :book: [memoization 提升递归效率 —— 博客园](https://www.cnblogs.com/yingshuizy/p/4517102.html)\n- :book: [如何提升 JavaScript 的递归效率 —— 51CTO](http://developer.51cto.com/art/201010/231513.htm)\n- :book: [JavaScript 高级技巧 Memoization —— SegmentFaut](https://segmentfault.com/a/1190000016703106)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 28. 纯函数, 函数副作用和状态变化\n\n### 文章\n\n- :book: [纯函数(Pure Function) —— React.js 小书](http://huziketang.mangojuice.top/books/react/lesson32)\n- :book: [JavaScript Functional Programming：纯函数 —— 宁皓网](https://ninghao.net/blog/4634)\n- :book: [js 函数的副作用分析 —— 脚本之家](https://www.jb51.net/article/28079.htm)\n- :book: [如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金](https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&utm_source=hao.caibaojian.com)\n- :book: [原生 JavaScript 实现 state 状态管理系统 —— 博客园](http://www.cnblogs.com/zhangycun/p/9403335.html)\n- :book: [JavaScript 函数式编程 —— @BuptStEve](https://github.com/BuptStEve/blog/issues/10)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 29. 耗性能操作和时间复杂度\n\n### 文章\n\n- :book: [时间复杂度 O(log n) 意味着什么？ —— 掘金](https://juejin.im/entry/593f56528d6d810058a355f4)\n- :book: [算法的时间复杂度和空间复杂度 —— 掘金](https://juejin.im/entry/5a49f7d36fb9a0450a67b269)\n- :book: [算法（一）时间复杂度 —— 掘金](https://juejin.im/post/58d15f1044d90400691834d4)\n- :book: [Big O Search Algorithms in JavaScript —— Bradley Braithwaite](http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html)\n- :book: [Time Complexity Analysis in JavaScript — Jennifer Bland](https://www.jenniferbland.com/time-complexity-analysis-in-javascript/)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 30. JavaScript 引擎\n\n### 文章\n\n- :book: [javascript 引擎 —— 百度百科](https://baike.baidu.com/item/javascript引擎/5356108)\n- :book: [V8(JavaScript 引擎) —— 百度百科](https://baike.baidu.com/item/V8/6178125)\n- :book: [图解搞懂 JavaScript 引擎 Event Loop —— 掘金](https://juejin.im/post/5a6309f76fb9a01cab2858b1)3\n- :book: [V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac](https://segmentfault.com/a/1190000010819020)\n- :book: [10 分钟理解 JS 引擎的执行机制 —— SegmentFaut](https://segmentfault.com/a/1190000012806637)\n- :book: [V8 javascript 引擎 —— 博客园](https://www.cnblogs.com/weirdoQi/p/6609811.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 31. 二进制, 十六进制, 十进制, 科学记数法\n\n### 文章\n\n- :book: [二、八、十、十六进制转换(图解篇) —— 博客园](http://www.cnblogs.com/gaizai/p/4233780.html)\n- :book: [JavaScript 读写二进制数据 —— 掘金](https://juejin.im/post/5b93dadaf265da0a857a58a3)\n\n### 视频\n\n- :tv: [二进制、十进制、十六进制互相转化很难吗？ —— 百度视频](http://baishi.baidu.com/watch/7873060963471478456.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 32. 偏函数, 柯里化, Compose 和 Pipe\n\n### 文章\n\n- :book: [Javascript 函数式编程之偏函数 —— CSDN](https://blog.csdn.net/qq_42129063/article/details/81874314)\n- :book: [JavaScript 专题之偏函数 —— SegmentFault](https://segmentfault.com/a/1190000010686144)\n- :book: [柯里化和偏函数有什么区别？ —— SegmentFault](https://segmentfault.com/q/1010000008626058)\n- :book: [Javascript 偏函数与柯里化 —— CSDN](https://blog.csdn.net/neweastsun/article/details/75947785)\n- :book: [柯里化(curry) —— JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html)\n- :book: [代码组合(compose) —— JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html)\n- :book: [关于 javascript 函数式编程中 compose 的实现 —— SegmentFault](https://segmentfault.com/a/1190000008394749)\n- :book: [实现 compose 的五种思路 —— SegmentFault](https://segmentfault.com/a/1190000011447164)\n- :book: [JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault](https://segmentfault.com/a/1190000015102804)\n- :book: [JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金](https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment)\n- :book: [JavaScript 函数式编程（二） —— @BuptStEve](https://github.com/BuptStEve/blog/issues/11)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 33. 代码整洁之道\n\n### 文章\n\n- :book: [[译] JavaScript 代码整洁之道 —— 边城](https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html)\n- :book: [Javascript 编程风格 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n- :book: [重构 - 代码整洁之道 —— 掘金](https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9)\n- :book: [让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金](https://juejin.im/post/5a7d71836fb9a063435ecf51)\n- :book: [Web 前端：11 个让你代码整洁的原则 —— 伯乐在线](http://blog.jobbole.com/23617/)\n- :book: [Clean Code concepts adapted for JavaScript —— ryanmcdermott](https://github.com/ryanmcdermott/clean-code-javascript)\n\n<br>\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n","source":"_posts/33_js_concepts.md","raw":"---\ntitle: JavaScript开发者应懂的33个概念\ncategories:\n    - 10技术 | JavaScript # 一级分类\ntags:\ndate: 2019-07-01\ndescription: 基本都是面试考点了\ntoc: 1\ntop: 0\n---\n\n## 简介\n[原文链接](https://github.com/stephentian/33-js-concepts)\n> 本篇文章是参照 @leonardomso 创立，英文版项目地址在[这里](https://github.com/leonardomso/33-js-concepts)。\n\n---\n\n## 目录\n\n1. **[调用堆栈](#1-调用堆栈)**\n2. **[原始类型](#2-原始类型)**\n3. **[值类型和引用类型](#3-值类型和引用类型)**\n4. **[隐式, 显式, 名义和鸭子类型](#4-隐式-显式-名义和鸭子类型)**\n5. **[== 与 ===, typeof 与 instanceof](#5--vs--typeof-vs-instanceof)**\n6. **[this, call, apply 和 bind](#6-this-call-apply-和-bind)**\n7. **[函数作用域, 块级作用域和词法作用域](#7-函数作用域-块级作用域和词法作用域)**\n8. **[闭包](#8-闭包)**\n9. **[map, reduce, filter 等高阶函数](#9-map-reduce-filter-等高阶函数)**\n10. **[表达式和语句](#10-表达式和语句)**\n11. **[变量提升](#11-变量提升)**\n12. **[Promise](#12-promise)**\n13. **[立即执行函数, 模块化, 命名空间](#13-立即执行函数-模块化-命名空间)**\n14. **[递归](#14-递归)**\n15. **[算法](#15-算法)**\n16. **[数据结构](#16-数据结构)**\n17. **[消息队列和事件循环](#17-消息队列和事件循环)**\n18. **[setTimeout, setInterval 和 requestAnimationFrame](#18-settimeout-setinterval-和-requestanimationframe)**\n19. **[继承, 多态和代码复用](#19-继承-多态和代码复用)**\n20. **[按位操作符, 类数组对象和类型化数组](#20-按位操作符-类数组对象和类型化数组)**\n21. **[DOM 树和渲染过程](#21-dom-树和渲染过程)**\n22. **[new 与构造函数, instanceof 与实例](#22-new-与构造函数-instanceof-与实例)**\n23. **[原型继承与原型链](#23-原型继承与原型链)**\n24. **[Object.create 和 Object.assign](#24-objectcreate-和-objectassign)**\n25. **[工厂函数和类](#25-工厂函数和类)**\n26. **[设计模式](#26-设计模式)**\n27. **[Memoization](#27-memoization)**\n28. **[纯函数, 函数副作用和状态变化](#28-纯函数-函数副作用和状态变化)**\n29. **[耗性能操作和时间复杂度](#29-耗性能操作和时间复杂度)**\n30. **[JavaScript 引擎](#30-javascript-引擎)**\n31. **[二进制, 十进制, 十六进制, 科学记数法](#31-二进制-十六进制-十进制-科学记数法)**\n32. **[偏函数, 柯里化, Compose 和 Pipe](#32-偏函数-柯里化-compose-和-pipe)**\n33. **[代码整洁之道](#33-代码整洁之道)**\n\n---\n\n## 1. 调用堆栈\n\n### 文章\n\n- :book: [Call Stack — MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack)\n- :book: [[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金](https://juejin.im/post/5a05b4576fb9a04519690d42)\n- :book: [[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金](https://juejin.im/post/5ba32171f265da0ab719a6d7)\n- :book: [这一次，彻底弄懂 JavaScript 执行机制 —— 掘金](https://juejin.im/post/59e85eebf265da430d571f89)\n- :book: [解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国](https://www.oschina.net/translate/how-does-javascript-actually-work-part-1)\n- :book: [Tasks, microtasks, queues and schedules —— Jake Archibald](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n- :book: [Tasks, microtasks, queues and schedules（译） —— 掘金](https://juejin.im/entry/55dbd51a60b2f3a92a8f5bff)\n\n### 视频\n\n- :tv: [What is the event loop anyway? —— 腾讯视频(英文字幕)](https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser)\n- :tv: [Understanding The JavaScript Call Stack, Event Queue, Event Table, & Event Loop —— Bilibili](https://www.bilibili.com/video/av33824933/)\n- :tv: [JS 中的变量提升、堆栈内存及闭包详解 —— Acfun](http://www.acfun.cn/v/ac4495641)\n- :tv: [事件循环模型 —— PHP 中文网](http://www.php.cn/code/21194.html)\n- :tv: [Javascript: the Call Stack explained — Coding Blocks India](https://www.youtube.com/watch?v=w6QGEiQceOM)\n- :tv: [The JS Call Stack Explained In 9 Minutes — Colt Steele](https://www.youtube.com/watch?v=W8AeMrVtFLY)\n- :tv: [JavaScript Execution Stack — Codecademy](https://www.youtube.com/watch?v=jT0USJeNFEA)\n- :tv: [What is the Call Stack? — Eric Traub](https://www.youtube.com/watch?v=w7QWQlkLY_s)\n- :tv: [The Call Stack — Kevin Drumm](https://www.youtube.com/watch?v=Q2sFmqvpBe0)\n- :tv: [Understanding JavaScript Execution — Codesmith](https://www.youtube.com/watch?v=Z6a1cLyq7Ac&list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD)\n- :tv: [Call Stack & Event Loop — movies com](https://www.youtube.com/watch?v=mk0lu9MKBto)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 2. 原始类型\n\n### 文章\n\n- :book: [原始数据 —— MDN](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)\n- :book: [[译]JavaScript 是怎样编码数字的 —— SegmentFault](https://segmentfault.com/a/1190000017090272)\n- :book: [每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜](https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/)\n- :book: [JavaScript 标准参考教程(基本语法之数值) —— 阮一峰](https://wangdoc.com/javascript/types/number.html)\n- :book: [The Secret Life of JavaScript Primitives —— Angus Croll](https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/)\n\n### 视频\n\n- :tv: [javascript 六种数据类型 —— 慕课网](https://www.imooc.com/video/5674)\n- :tv: [javascript 视频教程(数据类型) —— PHP 中文网](http://www.php.cn/code/5808.html)\n- :tv: [JavaScript Reference vs Primitive Types — Academind](https://www.youtube.com/watch?v=9ooYYRLdg_g)\n- :tv: [JavaScript Primitive Types — Simon Sez IT](https://www.youtube.com/watch?v=HsbWQsSCE5Y)\n- :tv: [Javascript Primitive and Reference Types — Baljeet Singh](https://www.youtube.com/watch?v=F7YbhKbpFic)\n- :tv: [Value Types and Reference Types in JavaScript — Programming with Mosh](https://www.youtube.com/watch?v=e-_mDyqm2oU)\n- :tv: [JavaScript Primitive Data Types — Avelx](https://www.youtube.com/watch?v=qw3j0A3DIzQ)\n- :tv: [Everything you never wanted to know about JavaScript numbers — Bartek Szopka](https://www.youtube.com/watch?v=MqHDDtVYJRI)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 3. 值类型和引用类型\n\n### 文章\n\n- :book: [ECMAScript 引用类型 —— W3school](http://www.w3school.com.cn/js/pro_js_referencetypes.asp)\n- :book: [js 中的值类型和引用类型的区别 —— 博客园](https://www.cnblogs.com/leiting/p/8081413.html)\n- :book: [JavaScript 的值传递和引用传递 —— FunDebug](https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/)\n- :book: [Primitive Types & Reference Types in JavaScript —— Bran van der Meer](https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm)\n- :book: [JavaScript: Passing by Value or by Reference —— CSDN](https://blog.csdn.net/xiaojia_boke/article/details/54906509)\n- :book: [js 值引用和值复制 —— SegmentFault](https://segmentfault.com/a/1190000015411195)\n- :book: [js- 引用和复制(传值和传址) —— CSDN](https://blog.csdn.net/zzzaquarius/article/details/4902235)\n\n### 视频\n\n- :tv: [Javascript Pass by Value vs Pass by Reference — techsith](https://www.youtube.com/watch?v=E-dAnFdq8k8)\n- :tv: [JavaScript Value vs Reference Types — Programming with Mosh](https://www.youtube.com/watch?v=fD0t_DKREbE)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 4. 隐式, 显式, 名义和鸭子类型\n\n### 文章\n\n- :book: [ECMAScript 类型转换 —— W3school](http://www.w3school.com.cn/js/pro_js_typeconversion.asp)\n- :book: [JavaScript 的怪癖 1：隐式类型转换 —— justjavac](http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html)\n- :book: [JavaScript 运算符规则与隐式类型转换详解 —— 掘金](https://juejin.im/post/59ad2585f265da246a20e026)\n- :book: [聊一聊 JS 中的隐式类型转换 —— SegmentFault](https://segmentfault.com/a/1190000004482388)\n- :book: [有趣的 JavaScript 隐式类型转换 —— 博客园](https://www.cnblogs.com/yugege/p/5277883.html)\n- :book: [JavaScript 显式类型转换与隐式类型转换 —— CSDN](https://blog.csdn.net/yangjvn/article/details/48284163)\n- :book: [你不知道的 JavaScript（中卷）强制类型转换 —— 简书](https://www.jianshu.com/p/777a89b4ed9a)\n- :book: [你懂 JavaScript 嗎？#8 強制轉型 —— cythilya](https://ithelp.ithome.com.tw/articles/10201512)\n- :book: [动态类型语言和鸭子类型 —— 曾探](http://book.51cto.com/art/201505/475153.htm)\n- :book: [Nominal & Structural Typing —— flow](https://flow.org/en/docs/lang/nominal-structural/)\n- :book: [What exactly is Type Coercion in Javascript? —— stackoverflow](https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript)\n- :book: [You Don't Know JS: Types & Grammar —— github](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&%20grammar/ch4.md)\n\n### 视频\n\n- :tv: [javascript 隐式转换 —— 慕课网](https://www.imooc.com/video/5675)\n- :tv: [Javascript 基础加强-类型转换 —— 黑马程序员](http://www.le.com/ptv/vplay/27767009.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n<div id=\"5--vs--typeof-vs-instanceof\"></div>\n\n## 5. == vs ===, typeof vs instanceof\n\n### 文章\n\n- :book: [JavaScript 中的相等性判断 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n- :book: [js 中 == 和 === 的区别 —— 掘金](https://juejin.im/entry/584918612f301e005716add6)\n- :book: [== vs === in Javascript —— CSDN](https://blog.csdn.net/w97531/article/details/82255225)\n- :book: [深入理解 javascript 之 typeof 和 instanceof —— CSDN](https://blog.csdn.net/mevicky/article/details/50353881)\n- :book: [JavaScript 的 typeof 的用途 —— justjavac](http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html)\n- :book: [一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金](https://juejin.im/post/58358606570c35005e4142bd)\n- :book: [浅谈 instanceof 和 typeof 的实现原理 —— 掘金](https://juejin.im/post/5b0b9b9051882515773ae714)\n- :book: [typeof 和 instanceOf 的区别](https://segmentfault.com/a/1190000000730982)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 6. this, call, apply 和 bind\n\n### 文章\n\n- :book: [Javascript 的 this 用法 —— 阮一峰](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n- :book: [学会 JS 的 this 这一篇就够了，根本不用记 —— 简书](https://www.jianshu.com/p/6b4333e78bf5)\n- :book: [[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金](https://juejin.im/post/5b9f176b6fb9a05d3827d03f)\n- :book: [this、apply、call、bind —— 掘金](https://juejin.im/post/59bfe84351882531b730bac2)\n- :book: [使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园](https://www.cnblogs.com/tingyu-blog/p/6212392.html)\n- :book: [call、apply 和 bind 的原生实现 —— github](https://github.com/Abiel1024/blog/issues/16)\n\n### 视频\n\n- :tv: [JavaScript 关于 this 关键字解释 —— 爱奇艺](https://www.iqiyi.com/w_19rr1augsd.html)\n- :tv: [JS 关于作用域闭包和 this 的综合面试题 —— 百度视频](http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed)\n- :tv: [js 面向对象闭包数组 12.函数中的 this —— 乐视视频](http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s)\n- :tv: [1.3.10-this 指向及 this 应用 —— 乐视视频](http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s)\n- :tv: [珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂](https://study.163.com/course/introduction/590005.htm)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 7. 函数作用域, 块级作用域和词法作用域\n\n### 文章\n\n- :book: [变量作用域与解构赋值 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000)\n- :book: [学习 Javascript 闭包（Closure） —— 阮一峰](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n- :book: [JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault](https://segmentfault.com/a/1190000006671020)\n- :book: [JavaScript 深入之词法作用域和动态作用域 —— 掘金](https://juejin.im/entry/58e70077b123db15eb88dc7e)\n- :book: [深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金](https://juejin.im/post/5afb0ae56fb9a07aa2138425)\n- :book: [What is lexical scope? —— stackoverflow](https://stackoverflow.com/questions/1047454/what-is-lexical-scope)\n- :book: [You Don't Know JS: Scope & Closures —— Kyle Simpson](https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope%20&%20closures/ch2.md)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 8. 闭包\n\n### 文章\n\n- :book: [闭包 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)\n- :book: [ECMAScript 闭包（closure）—— w3school](http://www.w3school.com.cn/js/pro_js_functions_closures.asp)\n- :book: [学习 Javascript 闭包（Closure） —— 阮一峰](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n- :book: [闭包 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000)\n- :book: [一次性搞懂 JavaScript 闭包 —— 简书](https://www.jianshu.com/p/796e903754f1)\n- :book: [JavaScript 闭包 —— SegmentFault](https://segmentfault.com/a/1190000006875662)\n- :book: [js 匿名自执行函数中闭包的高级使用 —— 掘金](https://juejin.im/entry/5800eb7da22b9d005b36156e)\n- :book: [高效使用 JavaScript 闭包 —— 掘金](https://juejin.im/entry/59df405251882551bf7e58c6)\n- :book: [深入理解 JavaScript 原型与闭包 —— 王福朋](https://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n### 视频\n\n- :tv: [JavaScript 闭包和闭包面试题 —— 爱奇艺](http://www.iqiyi.com/w_19rr1amael.html)\n- :tv: [js 面向对象闭包数组 11.闭包 —— 乐视](http://www.le.com/ptv/vplay/27478410.html)\n- :tv: [白贺翔\\_函数(闭包) —— 乐视](http://www.le.com/ptv/vplay/30505852.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 9. map, reduce, filter 等高阶函数\n\n### 文章\n\n- :book: [高阶函数 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000)\n- :book: [ES5 中新增的 Array 方法详细说明 —— 张鑫旭](https://www.zhangxinxu.com/wordpress/2013/04/es5%e6%96%b0%e5%a2%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95/)\n- :book: [一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金](https://juejin.im/post/5835808067f3560065ed4ab2)\n- :book: [Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault](https://segmentfault.com/a/1190000012127329)\n- :book: [JavaScript 函数式编程（三） —— @BuptStEve](https://github.com/BuptStEve/blog/issues/15)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 10. 表达式和语句\n\n### 文章\n\n- :book: [js 表达式与语句 —— 博客园](https://www.cnblogs.com/xianshenglu/p/8386918.html)\n- :book: [JS 表达式和语句的区别 —— SegmentFault](https://segmentfault.com/q/1010000004102804)\n- :book: [JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN](https://blog.csdn.net/mett_smith/article/details/78761247)\n- :book: [重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault](https://segmentfault.com/a/1190000004565693)\n- :book: [Expressions versus statements in JavaScript —— Dr. Axel](http://2ality.com/2012/09/expressions-vs-statements.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 11. 变量提升\n\n### 文章\n\n- :book: [JavaScript 变量提升 —— 菜鸟教程](http://www.runoob.com/js/js-hoisting.html)\n- :book: [ES6 变量作用域与提升：变量的生命周期详解 —— 掘金](https://juejin.im/post/59905bea6fb9a03c34192c51)\n- :book: [[翻译] JavaScript Scoping and Hoisting —— SegmentFault](https://segmentfault.com/a/1190000004345355#articleHeader5)\n- :book: [JavaScript Scoping and Hoisting —— Ben Cherry](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 12. Promise\n\n### 文章\n\n- :book: [使用 promises —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\n- :book: [Promise —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- :book: [Promise — 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000)\n- :book: [JavaScript Promise：去而复返 —— 司徒正美](https://www.cnblogs.com/rubylouvre/p/3495286.html)\n- :book: [(上面的原文)JavaScript Promise：简介 —— Web Fundamentals](https://developers.google.com/web/fundamentals/primers/promises#_1)\n- :book: [1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac](https://segmentfault.com/a/1190000011813934)\n- :book: [JavaScript Promise 迷你书（中文版）](https://juejin.im/entry/56499ae160b2d1404c4f8834)\n- :book: [JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园](https://www.cnblogs.com/yunfeifei/p/4453690.html)\n\n### 视频\n\n- :tv: [Promise 入门 —— 慕课网](https://www.imooc.com/learn/949)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 13. 立即执行函数, 模块化, 命名空间\n\n### 文章\n\n- :book: [Javascript 模块化编程（一）：模块的写法 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n- :book: [javascript 模块化编程-详解立即执行函数表达式 —— 简书](https://www.jianshu.com/p/4dbf4a4c8ebb)\n- :book: [Javascript 的匿名函数与自执行 —— 掘金](https://juejin.im/entry/57fee360a22b9d005b1d9ae3)\n- :book: [前端模块化——技术选型 —— SegmentFault](https://segmentfault.com/a/1190000006966358)\n- :book: [谈谈 Js 前端模块化规范 —— SegmentFault](https://segmentfault.com/a/1190000015991869#articleHeader8)\n- :book: [函数声明与函数表达式的区别 —— 伯乐在线](http://web.jobbole.com/87534/)\n\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 14. 递归\n\n### 文章\n\n- :book: [求解释 js 递归 —— SegmentFault](https://segmentfault.com/q/1010000003942347)\n- :book: [JavaScript 中的递归 —— 掘金](https://juejin.im/post/5948c0d8fe88c2006a939e2a)\n- :book: [递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金](https://juejin.im/post/59c1d91d6fb9a00a53275f79)\n- :book: [递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金](https://juejin.im/post/59c87fb46fb9a00a437b1a2e)\n- :book: [尾调用和尾递归 —— 掘金](https://juejin.im/post/5acdd7486fb9a028ca53547c)\n- :book: [几个经典递归问题用 js 实现 —— CSDN](https://blog.csdn.net/qianqianstd/article/details/75807462)\n- :book: [递归函数的几个例子 —— CSDN](https://blog.csdn.net/x_i_xw/article/details/72026868)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 15. 算法\n\n### 文章\n\n- :book: [十大经典排序算法总结（JavaScript 描述） —— 掘金](https://juejin.im/post/57dcd394a22b9d00610c5ec8)\n- :book: [在 JavaScript 中学习数据结构与算法 —— 掘金](https://juejin.im/post/594dfe795188250d725a220a#comment)\n- :book: [JS 中可能用得到的全部的排序算法 —— 掘金](https://juejin.im/post/58c9d5fb1b69e6006b686bce)\n- :book: [JS 家的排序算法 —— 简书](https://www.jianshu.com/p/1b4068ccd505)\n- :book: [前端常见算法的 JS 实现 —— SegmentFault](https://segmentfault.com/a/1190000008593715)\n- :book: [前端面试中的常见的算法问题 ——蒲小花的博客](https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/)\n\n### 视频\n\n- :tv: [Javascript 实现二叉树算法 —— 慕课网](https://www.imooc.com/learn/888)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 16. 数据结构\n\n### 文章\n\n- :book: [来我们浅谈一下 js 的数据结构 —— 简书](https://www.jianshu.com/p/5e0e8d183102)\n- :book: [JavaScript 中的算法与数据结构 —— 简书](https://www.jianshu.com/nb/16835496)\n- :book: [学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客](http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html)\n- :book: [js 中基础数据结构数组去重问题 —— 掘金](https://juejin.im/entry/586effe0da2f600053d85a9a)\n\n### 视频\n\n- :tv: :tv: [JavaScript 数据结构-运算符 —— 乐视](http://www.le.com/ptv/vplay/27606964.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 17. 消息队列和事件循环\n\n### 文章\n\n- :book: [并发模型与事件循环 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n- :book: [JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n- :book: [深入理解 JavaScript 事件循环 —— 博客园](https://www.cnblogs.com/dong-xu/p/7000163.html)\n- :book: [深入浅出 Javascript 事件循环机制 —— 知乎](https://zhuanlan.zhihu.com/p/26229293)\n- :book: [JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault](https://segmentfault.com/a/1190000014940904#articleHeader7)\n- :book: [JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault](https://segmentfault.com/a/1190000004322358)\n- :book: [从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金](https://juejin.im/post/5a6547d0f265da3e283a1df7)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 18. setTimeout, setInterval 和 requestAnimationFrame\n\n### 文章\n\n- :book: [Window setTimeout() 方法 —— 菜鸟教程](http://www.runoob.com/jsref/met-win-settimeout.html)\n- :book: [Window setInterval() 方法 —— 菜鸟教程](http://www.runoob.com/jsref/met-win-setinterval.html)\n- :book: [关于 setTimeout —— 掘金](https://juejin.im/post/5aa4c47af265da239866e236)\n- :book: [你不知道的 Javascript：有趣的 setTimeout —— 掘金](https://juejin.im/post/5a77f8ce5188257a6d635d76)\n- :book: [原来你是这样的 setTimeout —— 掘金](https://juejin.im/entry/5861ebf01b69e6006ce61d38)\n- :book: [setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault](https://segmentfault.com/q/1010000005989491)\n- book: [window.requestAnimationFrame —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n- :book: [requestAnimationFrame 知多少？ —— 博客园](http://www.cnblogs.com/onepixel/p/7078617.html)\n- :book: [CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭](https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%e5%8a%a8%e7%94%bb%e7%ae%97%e6%b3%95/)\n- :book: [「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault](https://segmentfault.com/a/1190000014661035)\n- :book: [翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault](https://segmentfault.com/a/1190000000386368)\n- :book: [阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault](https://segmentfault.com/q/1010000013909430)\n\n### 视频\n\n- :tv: [setTimeout 和 setInterval —— 优酷](http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 19. 继承, 多态和代码复用\n\n### 文章\n\n- :book: [JS 面向对象编程之：封装、继承、多态 —— 博客园](https://www.cnblogs.com/Leo_wl/p/5734794.html)\n- :book: [Javascript 的继承与多态 —— 简书](https://www.jianshu.com/p/5cb692658704)\n- :book: [js:面向对象编程，带你认识封装、继承和多态 —— 掘金](https://juejin.im/post/59396c96fe88c2006afc2707)\n- :book: [JavaScript 中的“多继承” —— 掘金](https://zhuanlan.zhihu.com/p/34693209)\n- :book: [代码复用模式 —— github](https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown)\n- :book: [深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔](http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html)\n- :book: [深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔](https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 20. 按位操作符, 类数组对象和类型化数组\n\n### 文章\n\n- :book: [按位操作符 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators)\n- :book: [类数组对象 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays)\n- :book: [类型化数组 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)\n- :book: [JavaScript ArrayBuffer 浅析 —— 博客园](https://www.cnblogs.com/gradolabs/p/4762134.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 21. DOM 树和渲染过程\n\n### 文章\n\n- :book: [如何创建一个 DOM 树 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree)\n- :book: [HTML DOM 节点 —— W3school](http://www.w3school.com.cn/htmldom/dom_nodes.asp)\n- :book: [DOM 概述 —— 阮一峰](http://javascript.ruanyifeng.com/dom/node.html)\n- :book: [《JavaScript 闯关记》之 DOM（上）—— 掘金](https://juejin.im/post/583cbbfa61ff4b006ccc41fe)\n- :book: [《JavaScript 闯关记》之 DOM（下）—— 掘金](https://juejin.im/post/583cbc4961ff4b006ccc44fb)\n- :book: [掌握 DOM 操作 —— 掘金](https://juejin.im/entry/58314efd8ac2470061bb30fd)\n- :book: [操作 DOM —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000)\n- :book: [原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金](https://juejin.im/post/59c60691518825396f4f71a1)\n\n### 视频\n\n- :tv: [DOM 探索之基础详解篇 —— 慕课网](https://www.imooc.com/learn/488)\n- :tv: [DOM 事件探秘 —— 慕课网](https://www.imooc.com/learn/138)\n- :tv: [jQuery 基础(二)DOM 篇 —— 慕课网](https://www.imooc.com/learn/530)\n- :tv: [JS 操作 DOM 对象属性和方法 —— 爱奇艺](http://www.iqiyi.com/w_19rr19s08l.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 22. new 与构造函数, instanceof 与实例\n\n### 文章\n\n- :book: [构造函数与 new 命令 —— 阮一峰](http://javascript.ruanyifeng.com/oop/basic.html)\n- :book: [Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html)\n- :book: [完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN](https://blog.csdn.net/SpicyBoiledFish/article/details/71123162)\n- :book: [JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网](http://www.php.cn/js-tutorial-376246.html)\n- :book: [构造函数、实例、原型、原型链之间的关系 —— CSDN](https://blog.csdn.net/yin_991/article/details/80954453)\n- :book: [深入理解 JS—instanceof 和原型链 —— CSDN](https://blog.csdn.net/cecilia620/article/details/71158048)\n- :book: [前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书](https://www.jianshu.com/p/15ac7393bc1f)\n- :book: [js 用 new 实例化对象与直接调用的 this 的区别 —— 简书](https://www.jianshu.com/p/60ffc4831bff)\n- :book: [JavaScript 并非所有的东西都是对象 —— justjavac](http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html)\n- :book: [JavaScript instanceof 运算符深入剖析 —— IBM](https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/)\n\n### 视频\n\n- :tv: [改良版的构造函数 —— 乐视](http://www.le.com/ptv/vplay/27766889.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 23. 原型继承与原型链\n\n### 文章\n\n- :book: [继承与原型链 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n- :book: [构造函数、原型与原型链 —— github](https://github.com/bigdots/blog/issues/1)\n- :book: [原型及原型链 —— github(1269 Star)](https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype)\n- :book: [理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault](https://segmentfault.com/a/1190000004282206)\n- :book: [JavaScript：继承和原型链(译) —— justjavac](http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html)\n- :book: [三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园](http://www.cnblogs.com/shuiyi/p/5305435.html)\n- :book: [一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN](https://blog.csdn.net/the__apollo/article/details/76774698)\n- :book: [JS 高级--原型链(一看就懂，但 18 岁以下请绕道) —— CSDN](https://blog.csdn.net/xiaotao_css/article/details/72782416)\n- :book: [原型继承 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000)\n- :book: [JS 原型链与继承别再被问倒了 —— 掘金](https://juejin.im/post/58f94c9bb123db411953691b)\n- :book: [征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金](https://juejin.im/entry/5885db221b69e600592253e7)\n- :book: [JavaScript 深入之从原型到原型链 —— 冴羽](https://github.com/mqyqingfeng/Blog/issues/2)\n- :book: [深入理解 JavaScript 原型与闭包 —— 王福朋](https://www.cnblogs.com/wangfupeng1988/p/3977924.html)\n\n### 视频\n\n- :tv: [JS 高级-07-原型链继承 —— 乐视](http://www.le.com/ptv/vplay/27552753.html)\n- :tv: [JS 原型对象和原型链简介 —— 腾讯视频](https://v.qq.com/x/page/b0511nwa7d3.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 24. Object.create 和 Object.assign\n\n### 文章\n\n- :book: [Object.create —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n- :book: [Object.assign —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n- :book: [Object.create vs Object.assign —— 慕课网手记](https://www.imooc.com/article/17591)\n- :book: [JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN](https://blog.csdn.net/DeepLies/article/details/52915143)\n- :book: [es6 中 object.create()和 object.assign() —— 风信子博客](http://www.onlyfordream.cn/2018/03/19/es6%E4%B8%ADobject-create%E5%92%8Cobject-assign/)\n- :book: [Object-Assign-Deep —— github](https://github.com/saikojosh/Object-Assign-Deep)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 25. 工厂函数和类\n\n### 文章\n\n- :book: [类 —— MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes)\n- :book: [类和实例 —— 廖雪峰](https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000)\n- :book: [Javascript 定义类（class）的三种方法 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html)\n- :book: [【译】ES6 的工厂函数 —— 掘金](https://juejin.im/post/59c8c8756fb9a00a681ae5bd)\n- :book: [JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金](https://juejin.im/entry/587992c961ff4b0065edf1ff)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 26. 设计模式\n\n### 文章\n\n- :book: [JavaScript 设计模式 —— 掘金](https://juejin.im/post/59df4f74f265da430f311909)\n- :book: [学用 JavaScript 设计模式 —— 极客学院](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)\n- :book: [[面试专题]JS 设计模式 —— SegmentFault](https://segmentfault.com/a/1190000010914032)\n- :book: [JavaScript Patterns 中译本 —— github](https://github.com/lxj/javascript.patterns)\n\n### 视频\n\n- :tv: [HTML5 课程大纲 2-11JS 设计模式](https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 27. Memoization\n\n### 文章\n\n- :book: [JavaScript Memoization —— 司徒正美](https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html)\n- :book: [memoization 提升递归效率 —— 博客园](https://www.cnblogs.com/yingshuizy/p/4517102.html)\n- :book: [如何提升 JavaScript 的递归效率 —— 51CTO](http://developer.51cto.com/art/201010/231513.htm)\n- :book: [JavaScript 高级技巧 Memoization —— SegmentFaut](https://segmentfault.com/a/1190000016703106)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 28. 纯函数, 函数副作用和状态变化\n\n### 文章\n\n- :book: [纯函数(Pure Function) —— React.js 小书](http://huziketang.mangojuice.top/books/react/lesson32)\n- :book: [JavaScript Functional Programming：纯函数 —— 宁皓网](https://ninghao.net/blog/4634)\n- :book: [js 函数的副作用分析 —— 脚本之家](https://www.jb51.net/article/28079.htm)\n- :book: [如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金](https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&utm_source=hao.caibaojian.com)\n- :book: [原生 JavaScript 实现 state 状态管理系统 —— 博客园](http://www.cnblogs.com/zhangycun/p/9403335.html)\n- :book: [JavaScript 函数式编程 —— @BuptStEve](https://github.com/BuptStEve/blog/issues/10)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 29. 耗性能操作和时间复杂度\n\n### 文章\n\n- :book: [时间复杂度 O(log n) 意味着什么？ —— 掘金](https://juejin.im/entry/593f56528d6d810058a355f4)\n- :book: [算法的时间复杂度和空间复杂度 —— 掘金](https://juejin.im/entry/5a49f7d36fb9a0450a67b269)\n- :book: [算法（一）时间复杂度 —— 掘金](https://juejin.im/post/58d15f1044d90400691834d4)\n- :book: [Big O Search Algorithms in JavaScript —— Bradley Braithwaite](http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html)\n- :book: [Time Complexity Analysis in JavaScript — Jennifer Bland](https://www.jenniferbland.com/time-complexity-analysis-in-javascript/)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 30. JavaScript 引擎\n\n### 文章\n\n- :book: [javascript 引擎 —— 百度百科](https://baike.baidu.com/item/javascript引擎/5356108)\n- :book: [V8(JavaScript 引擎) —— 百度百科](https://baike.baidu.com/item/V8/6178125)\n- :book: [图解搞懂 JavaScript 引擎 Event Loop —— 掘金](https://juejin.im/post/5a6309f76fb9a01cab2858b1)3\n- :book: [V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac](https://segmentfault.com/a/1190000010819020)\n- :book: [10 分钟理解 JS 引擎的执行机制 —— SegmentFaut](https://segmentfault.com/a/1190000012806637)\n- :book: [V8 javascript 引擎 —— 博客园](https://www.cnblogs.com/weirdoQi/p/6609811.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 31. 二进制, 十六进制, 十进制, 科学记数法\n\n### 文章\n\n- :book: [二、八、十、十六进制转换(图解篇) —— 博客园](http://www.cnblogs.com/gaizai/p/4233780.html)\n- :book: [JavaScript 读写二进制数据 —— 掘金](https://juejin.im/post/5b93dadaf265da0a857a58a3)\n\n### 视频\n\n- :tv: [二进制、十进制、十六进制互相转化很难吗？ —— 百度视频](http://baishi.baidu.com/watch/7873060963471478456.html)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 32. 偏函数, 柯里化, Compose 和 Pipe\n\n### 文章\n\n- :book: [Javascript 函数式编程之偏函数 —— CSDN](https://blog.csdn.net/qq_42129063/article/details/81874314)\n- :book: [JavaScript 专题之偏函数 —— SegmentFault](https://segmentfault.com/a/1190000010686144)\n- :book: [柯里化和偏函数有什么区别？ —— SegmentFault](https://segmentfault.com/q/1010000008626058)\n- :book: [Javascript 偏函数与柯里化 —— CSDN](https://blog.csdn.net/neweastsun/article/details/75947785)\n- :book: [柯里化(curry) —— JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html)\n- :book: [代码组合(compose) —— JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html)\n- :book: [关于 javascript 函数式编程中 compose 的实现 —— SegmentFault](https://segmentfault.com/a/1190000008394749)\n- :book: [实现 compose 的五种思路 —— SegmentFault](https://segmentfault.com/a/1190000011447164)\n- :book: [JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault](https://segmentfault.com/a/1190000015102804)\n- :book: [JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金](https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment)\n- :book: [JavaScript 函数式编程（二） —— @BuptStEve](https://github.com/BuptStEve/blog/issues/11)\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n\n## 33. 代码整洁之道\n\n### 文章\n\n- :book: [[译] JavaScript 代码整洁之道 —— 边城](https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html)\n- :book: [Javascript 编程风格 —— 阮一峰](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n- :book: [重构 - 代码整洁之道 —— 掘金](https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9)\n- :book: [让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金](https://juejin.im/post/5a7d71836fb9a063435ecf51)\n- :book: [Web 前端：11 个让你代码整洁的原则 —— 伯乐在线](http://blog.jobbole.com/23617/)\n- :book: [Clean Code concepts adapted for JavaScript —— ryanmcdermott](https://github.com/ryanmcdermott/clean-code-javascript)\n\n<br>\n\n**[:arrow_up: 返回目录](#目录)**\n\n---\n","slug":"33_js_concepts","published":1,"updated":"2020-09-03T07:00:54.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckir88jfp005wc8y61b8xexrl","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<blockquote>\n<p>本篇文章是参照 @leonardomso 创立，英文版项目地址在<a href=\"https://github.com/leonardomso/33-js-concepts\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</blockquote>\n<hr>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><strong><a href=\"#1-调用堆栈\">调用堆栈</a></strong></li>\n<li><strong><a href=\"#2-原始类型\">原始类型</a></strong></li>\n<li><strong><a href=\"#3-值类型和引用类型\">值类型和引用类型</a></strong></li>\n<li><strong><a href=\"#4-隐式-显式-名义和鸭子类型\">隐式, 显式, 名义和鸭子类型</a></strong></li>\n<li><strong><a href=\"#5--vs--typeof-vs-instanceof\">== 与 ===, typeof 与 instanceof</a></strong></li>\n<li><strong><a href=\"#6-this-call-apply-和-bind\">this, call, apply 和 bind</a></strong></li>\n<li><strong><a href=\"#7-函数作用域-块级作用域和词法作用域\">函数作用域, 块级作用域和词法作用域</a></strong></li>\n<li><strong><a href=\"#8-闭包\">闭包</a></strong></li>\n<li><strong><a href=\"#9-map-reduce-filter-等高阶函数\">map, reduce, filter 等高阶函数</a></strong></li>\n<li><strong><a href=\"#10-表达式和语句\">表达式和语句</a></strong></li>\n<li><strong><a href=\"#11-变量提升\">变量提升</a></strong></li>\n<li><strong><a href=\"#12-promise\">Promise</a></strong></li>\n<li><strong><a href=\"#13-立即执行函数-模块化-命名空间\">立即执行函数, 模块化, 命名空间</a></strong></li>\n<li><strong><a href=\"#14-递归\">递归</a></strong></li>\n<li><strong><a href=\"#15-算法\">算法</a></strong></li>\n<li><strong><a href=\"#16-数据结构\">数据结构</a></strong></li>\n<li><strong><a href=\"#17-消息队列和事件循环\">消息队列和事件循环</a></strong></li>\n<li><strong><a href=\"#18-settimeout-setinterval-和-requestanimationframe\">setTimeout, setInterval 和 requestAnimationFrame</a></strong></li>\n<li><strong><a href=\"#19-继承-多态和代码复用\">继承, 多态和代码复用</a></strong></li>\n<li><strong><a href=\"#20-按位操作符-类数组对象和类型化数组\">按位操作符, 类数组对象和类型化数组</a></strong></li>\n<li><strong><a href=\"#21-dom-树和渲染过程\">DOM 树和渲染过程</a></strong></li>\n<li><strong><a href=\"#22-new-与构造函数-instanceof-与实例\">new 与构造函数, instanceof 与实例</a></strong></li>\n<li><strong><a href=\"#23-原型继承与原型链\">原型继承与原型链</a></strong></li>\n<li><strong><a href=\"#24-objectcreate-和-objectassign\">Object.create 和 Object.assign</a></strong></li>\n<li><strong><a href=\"#25-工厂函数和类\">工厂函数和类</a></strong></li>\n<li><strong><a href=\"#26-设计模式\">设计模式</a></strong></li>\n<li><strong><a href=\"#27-memoization\">Memoization</a></strong></li>\n<li><strong><a href=\"#28-纯函数-函数副作用和状态变化\">纯函数, 函数副作用和状态变化</a></strong></li>\n<li><strong><a href=\"#29-耗性能操作和时间复杂度\">耗性能操作和时间复杂度</a></strong></li>\n<li><strong><a href=\"#30-javascript-引擎\">JavaScript 引擎</a></strong></li>\n<li><strong><a href=\"#31-二进制-十六进制-十进制-科学记数法\">二进制, 十进制, 十六进制, 科学记数法</a></strong></li>\n<li><strong><a href=\"#32-偏函数-柯里化-compose-和-pipe\">偏函数, 柯里化, Compose 和 Pipe</a></strong></li>\n<li><strong><a href=\"#33-代码整洁之道\">代码整洁之道</a></strong></li>\n</ol>\n<hr>\n<h2 id=\"1-调用堆栈\"><a href=\"#1-调用堆栈\" class=\"headerlink\" title=\"1. 调用堆栈\"></a>1. 调用堆栈</h2><h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack\" target=\"_blank\" rel=\"noopener\">Call Stack — MDN</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a05b4576fb9a04519690d42\" target=\"_blank\" rel=\"noopener\">[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5ba32171f265da0ab719a6d7\" target=\"_blank\" rel=\"noopener\">[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">这一次，彻底弄懂 JavaScript 执行机制 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.oschina.net/translate/how-does-javascript-actually-work-part-1\" target=\"_blank\" rel=\"noopener\">解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国</a></li>\n<li>:book: <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules —— Jake Archibald</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/55dbd51a60b2f3a92a8f5bff\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules（译） —— 掘金</a></li>\n</ul>\n<h3 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser\" target=\"_blank\" rel=\"noopener\">What is the event loop anyway? —— 腾讯视频(英文字幕)</a></li>\n<li>:tv: <a href=\"https://www.bilibili.com/video/av33824933/\" target=\"_blank\" rel=\"noopener\">Understanding The JavaScript Call Stack, Event Queue, Event Table, &amp; Event Loop —— Bilibili</a></li>\n<li>:tv: <a href=\"http://www.acfun.cn/v/ac4495641\" target=\"_blank\" rel=\"noopener\">JS 中的变量提升、堆栈内存及闭包详解 —— Acfun</a></li>\n<li>:tv: <a href=\"http://www.php.cn/code/21194.html\" target=\"_blank\" rel=\"noopener\">事件循环模型 —— PHP 中文网</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=w6QGEiQceOM\" target=\"_blank\" rel=\"noopener\">Javascript: the Call Stack explained — Coding Blocks India</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=W8AeMrVtFLY\" target=\"_blank\" rel=\"noopener\">The JS Call Stack Explained In 9 Minutes — Colt Steele</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=jT0USJeNFEA\" target=\"_blank\" rel=\"noopener\">JavaScript Execution Stack — Codecademy</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=w7QWQlkLY_s\" target=\"_blank\" rel=\"noopener\">What is the Call Stack? — Eric Traub</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=Q2sFmqvpBe0\" target=\"_blank\" rel=\"noopener\">The Call Stack — Kevin Drumm</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=Z6a1cLyq7Ac&amp;list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD\" target=\"_blank\" rel=\"noopener\">Understanding JavaScript Execution — Codesmith</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=mk0lu9MKBto\" target=\"_blank\" rel=\"noopener\">Call Stack &amp; Event Loop — movies com</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"2-原始类型\"><a href=\"#2-原始类型\" class=\"headerlink\" title=\"2. 原始类型\"></a>2. 原始类型</h2><h3 id=\"文章-1\"><a href=\"#文章-1\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive\" target=\"_blank\" rel=\"noopener\">原始数据 —— MDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000017090272\" target=\"_blank\" rel=\"noopener\">[译]JavaScript 是怎样编码数字的 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/\" target=\"_blank\" rel=\"noopener\">每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜</a></li>\n<li>:book: <a href=\"https://wangdoc.com/javascript/types/number.html\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程(基本语法之数值) —— 阮一峰</a></li>\n<li>:book: <a href=\"https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\" target=\"_blank\" rel=\"noopener\">The Secret Life of JavaScript Primitives —— Angus Croll</a></li>\n</ul>\n<h3 id=\"视频-1\"><a href=\"#视频-1\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/video/5674\" target=\"_blank\" rel=\"noopener\">javascript 六种数据类型 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.php.cn/code/5808.html\" target=\"_blank\" rel=\"noopener\">javascript 视频教程(数据类型) —— PHP 中文网</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=9ooYYRLdg_g\" target=\"_blank\" rel=\"noopener\">JavaScript Reference vs Primitive Types — Academind</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=HsbWQsSCE5Y\" target=\"_blank\" rel=\"noopener\">JavaScript Primitive Types — Simon Sez IT</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=F7YbhKbpFic\" target=\"_blank\" rel=\"noopener\">Javascript Primitive and Reference Types — Baljeet Singh</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=e-_mDyqm2oU\" target=\"_blank\" rel=\"noopener\">Value Types and Reference Types in JavaScript — Programming with Mosh</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=qw3j0A3DIzQ\" target=\"_blank\" rel=\"noopener\">JavaScript Primitive Data Types — Avelx</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=MqHDDtVYJRI\" target=\"_blank\" rel=\"noopener\">Everything you never wanted to know about JavaScript numbers — Bartek Szopka</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"3-值类型和引用类型\"><a href=\"#3-值类型和引用类型\" class=\"headerlink\" title=\"3. 值类型和引用类型\"></a>3. 值类型和引用类型</h2><h3 id=\"文章-2\"><a href=\"#文章-2\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_referencetypes.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 引用类型 —— W3school</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/leiting/p/8081413.html\" target=\"_blank\" rel=\"noopener\">js 中的值类型和引用类型的区别 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/\" target=\"_blank\" rel=\"noopener\">JavaScript 的值传递和引用传递 —— FunDebug</a></li>\n<li>:book: <a href=\"https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm\" target=\"_blank\" rel=\"noopener\">Primitive Types &amp; Reference Types in JavaScript —— Bran van der Meer</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/xiaojia_boke/article/details/54906509\" target=\"_blank\" rel=\"noopener\">JavaScript: Passing by Value or by Reference —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015411195\" target=\"_blank\" rel=\"noopener\">js 值引用和值复制 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/zzzaquarius/article/details/4902235\" target=\"_blank\" rel=\"noopener\">js- 引用和复制(传值和传址) —— CSDN</a></li>\n</ul>\n<h3 id=\"视频-2\"><a href=\"#视频-2\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=E-dAnFdq8k8\" target=\"_blank\" rel=\"noopener\">Javascript Pass by Value vs Pass by Reference — techsith</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=fD0t_DKREbE\" target=\"_blank\" rel=\"noopener\">JavaScript Value vs Reference Types — Programming with Mosh</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"4-隐式-显式-名义和鸭子类型\"><a href=\"#4-隐式-显式-名义和鸭子类型\" class=\"headerlink\" title=\"4. 隐式, 显式, 名义和鸭子类型\"></a>4. 隐式, 显式, 名义和鸭子类型</h2><h3 id=\"文章-3\"><a href=\"#文章-3\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_typeconversion.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 类型转换 —— W3school</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html\" target=\"_blank\" rel=\"noopener\">JavaScript 的怪癖 1：隐式类型转换 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59ad2585f265da246a20e026\" target=\"_blank\" rel=\"noopener\">JavaScript 运算符规则与隐式类型转换详解 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004482388\" target=\"_blank\" rel=\"noopener\">聊一聊 JS 中的隐式类型转换 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yugege/p/5277883.html\" target=\"_blank\" rel=\"noopener\">有趣的 JavaScript 隐式类型转换 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/yangjvn/article/details/48284163\" target=\"_blank\" rel=\"noopener\">JavaScript 显式类型转换与隐式类型转换 —— CSDN</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/777a89b4ed9a\" target=\"_blank\" rel=\"noopener\">你不知道的 JavaScript（中卷）强制类型转换 —— 简书</a></li>\n<li>:book: <a href=\"https://ithelp.ithome.com.tw/articles/10201512\" target=\"_blank\" rel=\"noopener\">你懂 JavaScript 嗎？#8 強制轉型 —— cythilya</a></li>\n<li>:book: <a href=\"http://book.51cto.com/art/201505/475153.htm\" target=\"_blank\" rel=\"noopener\">动态类型语言和鸭子类型 —— 曾探</a></li>\n<li>:book: <a href=\"https://flow.org/en/docs/lang/nominal-structural/\" target=\"_blank\" rel=\"noopener\">Nominal &amp; Structural Typing —— flow</a></li>\n<li>:book: <a href=\"https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript\" target=\"_blank\" rel=\"noopener\">What exactly is Type Coercion in Javascript? —— stackoverflow</a></li>\n<li>:book: <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&amp;%20grammar/ch4.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Types &amp; Grammar —— github</a></li>\n</ul>\n<h3 id=\"视频-3\"><a href=\"#视频-3\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/video/5675\" target=\"_blank\" rel=\"noopener\">javascript 隐式转换 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27767009.html\" target=\"_blank\" rel=\"noopener\">Javascript 基础加强-类型转换 —— 黑马程序员</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<div id=\"5--vs--typeof-vs-instanceof\"></div>\n\n<h2 id=\"5-vs-typeof-vs-instanceof\"><a href=\"#5-vs-typeof-vs-instanceof\" class=\"headerlink\" title=\"5. == vs ===, typeof vs instanceof\"></a>5. == vs ===, typeof vs instanceof</h2><h3 id=\"文章-4\"><a href=\"#文章-4\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"noopener\">JavaScript 中的相等性判断 —— MDN</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/584918612f301e005716add6\" target=\"_blank\" rel=\"noopener\">js 中 == 和 === 的区别 —— 掘金</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/w97531/article/details/82255225\" target=\"_blank\" rel=\"noopener\">== vs === in Javascript —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/mevicky/article/details/50353881\" target=\"_blank\" rel=\"noopener\">深入理解 javascript 之 typeof 和 instanceof —— CSDN</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html\" target=\"_blank\" rel=\"noopener\">JavaScript 的 typeof 的用途 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58358606570c35005e4142bd\" target=\"_blank\" rel=\"noopener\">一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b0b9b9051882515773ae714\" target=\"_blank\" rel=\"noopener\">浅谈 instanceof 和 typeof 的实现原理 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000000730982\" target=\"_blank\" rel=\"noopener\">typeof 和 instanceOf 的区别</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"6-this-call-apply-和-bind\"><a href=\"#6-this-call-apply-和-bind\" class=\"headerlink\" title=\"6. this, call, apply 和 bind\"></a>6. this, call, apply 和 bind</h2><h3 id=\"文章-5\"><a href=\"#文章-5\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript 的 this 用法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/6b4333e78bf5\" target=\"_blank\" rel=\"noopener\">学会 JS 的 this 这一篇就够了，根本不用记 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b9f176b6fb9a05d3827d03f\" target=\"_blank\" rel=\"noopener\">[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59bfe84351882531b730bac2\" target=\"_blank\" rel=\"noopener\">this、apply、call、bind —— 掘金</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/tingyu-blog/p/6212392.html\" target=\"_blank\" rel=\"noopener\">使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园</a></li>\n<li>:book: <a href=\"https://github.com/Abiel1024/blog/issues/16\" target=\"_blank\" rel=\"noopener\">call、apply 和 bind 的原生实现 —— github</a></li>\n</ul>\n<h3 id=\"视频-4\"><a href=\"#视频-4\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.iqiyi.com/w_19rr1augsd.html\" target=\"_blank\" rel=\"noopener\">JavaScript 关于 this 关键字解释 —— 爱奇艺</a></li>\n<li>:tv: <a href=\"http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed\" target=\"_blank\" rel=\"noopener\">JS 关于作用域闭包和 this 的综合面试题 —— 百度视频</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s\" target=\"_blank\" rel=\"noopener\">js 面向对象闭包数组 12.函数中的 this —— 乐视视频</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s\" target=\"_blank\" rel=\"noopener\">1.3.10-this 指向及 this 应用 —— 乐视视频</a></li>\n<li>:tv: <a href=\"https://study.163.com/course/introduction/590005.htm\" target=\"_blank\" rel=\"noopener\">珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"7-函数作用域-块级作用域和词法作用域\"><a href=\"#7-函数作用域-块级作用域和词法作用域\" class=\"headerlink\" title=\"7. 函数作用域, 块级作用域和词法作用域\"></a>7. 函数作用域, 块级作用域和词法作用域</h2><h3 id=\"文章-6\"><a href=\"#文章-6\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000\" target=\"_blank\" rel=\"noopener\">变量作用域与解构赋值 —— 廖雪峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习 Javascript 闭包（Closure） —— 阮一峰</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006671020\" target=\"_blank\" rel=\"noopener\">JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/58e70077b123db15eb88dc7e\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之词法作用域和动态作用域 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5afb0ae56fb9a07aa2138425\" target=\"_blank\" rel=\"noopener\">深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金</a></li>\n<li>:book: <a href=\"https://stackoverflow.com/questions/1047454/what-is-lexical-scope\" target=\"_blank\" rel=\"noopener\">What is lexical scope? —— stackoverflow</a></li>\n<li>:book: <a href=\"https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/ch2.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Scope &amp; Closures —— Kyle Simpson</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"8-闭包\"><a href=\"#8-闭包\" class=\"headerlink\" title=\"8. 闭包\"></a>8. 闭包</h2><h3 id=\"文章-7\"><a href=\"#文章-7\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">闭包 —— MDN</a></li>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_functions_closures.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 闭包（closure）—— w3school</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习 Javascript 闭包（Closure） —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000\" target=\"_blank\" rel=\"noopener\">闭包 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/796e903754f1\" target=\"_blank\" rel=\"noopener\">一次性搞懂 JavaScript 闭包 —— 简书</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006875662\" target=\"_blank\" rel=\"noopener\">JavaScript 闭包 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5800eb7da22b9d005b36156e\" target=\"_blank\" rel=\"noopener\">js 匿名自执行函数中闭包的高级使用 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/59df405251882551bf7e58c6\" target=\"_blank\" rel=\"noopener\">高效使用 JavaScript 闭包 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li>\n</ul>\n<h3 id=\"视频-5\"><a href=\"#视频-5\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.iqiyi.com/w_19rr1amael.html\" target=\"_blank\" rel=\"noopener\">JavaScript 闭包和闭包面试题 —— 爱奇艺</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27478410.html\" target=\"_blank\" rel=\"noopener\">js 面向对象闭包数组 11.闭包 —— 乐视</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/30505852.html\" target=\"_blank\" rel=\"noopener\">白贺翔_函数(闭包) —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"9-map-reduce-filter-等高阶函数\"><a href=\"#9-map-reduce-filter-等高阶函数\" class=\"headerlink\" title=\"9. map, reduce, filter 等高阶函数\"></a>9. map, reduce, filter 等高阶函数</h2><h3 id=\"文章-8\"><a href=\"#文章-8\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000\" target=\"_blank\" rel=\"noopener\">高阶函数 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.zhangxinxu.com/wordpress/2013/04/es5%e6%96%b0%e5%a2%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95/\" target=\"_blank\" rel=\"noopener\">ES5 中新增的 Array 方法详细说明 —— 张鑫旭</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5835808067f3560065ed4ab2\" target=\"_blank\" rel=\"noopener\">一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000012127329\" target=\"_blank\" rel=\"noopener\">Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/15\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程（三） —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"10-表达式和语句\"><a href=\"#10-表达式和语句\" class=\"headerlink\" title=\"10. 表达式和语句\"></a>10. 表达式和语句</h2><h3 id=\"文章-9\"><a href=\"#文章-9\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/xianshenglu/p/8386918.html\" target=\"_blank\" rel=\"noopener\">js 表达式与语句 —— 博客园</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000004102804\" target=\"_blank\" rel=\"noopener\">JS 表达式和语句的区别 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/mett_smith/article/details/78761247\" target=\"_blank\" rel=\"noopener\">JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004565693\" target=\"_blank\" rel=\"noopener\">重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://2ality.com/2012/09/expressions-vs-statements.html\" target=\"_blank\" rel=\"noopener\">Expressions versus statements in JavaScript —— Dr. Axel</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"11-变量提升\"><a href=\"#11-变量提升\" class=\"headerlink\" title=\"11. 变量提升\"></a>11. 变量提升</h2><h3 id=\"文章-10\"><a href=\"#文章-10\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.runoob.com/js/js-hoisting.html\" target=\"_blank\" rel=\"noopener\">JavaScript 变量提升 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59905bea6fb9a03c34192c51\" target=\"_blank\" rel=\"noopener\">ES6 变量作用域与提升：变量的生命周期详解 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004345355#articleHeader5\" target=\"_blank\" rel=\"noopener\">[翻译] JavaScript Scoping and Hoisting —— SegmentFault</a></li>\n<li>:book: <a href=\"http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html\" target=\"_blank\" rel=\"noopener\">JavaScript Scoping and Hoisting —— Ben Cherry</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"12-Promise\"><a href=\"#12-Promise\" class=\"headerlink\" title=\"12. Promise\"></a>12. Promise</h2><h3 id=\"文章-11\"><a href=\"#文章-11\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\" target=\"_blank\" rel=\"noopener\">使用 promises —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">Promise —— MDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000\" target=\"_blank\" rel=\"noopener\">Promise — 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/rubylouvre/p/3495286.html\" target=\"_blank\" rel=\"noopener\">JavaScript Promise：去而复返 —— 司徒正美</a></li>\n<li>:book: <a href=\"https://developers.google.com/web/fundamentals/primers/promises#_1\" target=\"_blank\" rel=\"noopener\">(上面的原文)JavaScript Promise：简介 —— Web Fundamentals</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000011813934\" target=\"_blank\" rel=\"noopener\">1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/56499ae160b2d1404c4f8834\" target=\"_blank\" rel=\"noopener\">JavaScript Promise 迷你书（中文版）</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yunfeifei/p/4453690.html\" target=\"_blank\" rel=\"noopener\">JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园</a></li>\n</ul>\n<h3 id=\"视频-6\"><a href=\"#视频-6\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise 入门 —— 慕课网</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"13-立即执行函数-模块化-命名空间\"><a href=\"#13-立即执行函数-模块化-命名空间\" class=\"headerlink\" title=\"13. 立即执行函数, 模块化, 命名空间\"></a>13. 立即执行函数, 模块化, 命名空间</h2><h3 id=\"文章-12\"><a href=\"#文章-12\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"noopener\">Javascript 模块化编程（一）：模块的写法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/4dbf4a4c8ebb\" target=\"_blank\" rel=\"noopener\">javascript 模块化编程-详解立即执行函数表达式 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/57fee360a22b9d005b1d9ae3\" target=\"_blank\" rel=\"noopener\">Javascript 的匿名函数与自执行 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006966358\" target=\"_blank\" rel=\"noopener\">前端模块化——技术选型 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015991869#articleHeader8\" target=\"_blank\" rel=\"noopener\">谈谈 Js 前端模块化规范 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://web.jobbole.com/87534/\" target=\"_blank\" rel=\"noopener\">函数声明与函数表达式的区别 —— 伯乐在线</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"14-递归\"><a href=\"#14-递归\" class=\"headerlink\" title=\"14. 递归\"></a>14. 递归</h2><h3 id=\"文章-13\"><a href=\"#文章-13\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000003942347\" target=\"_blank\" rel=\"noopener\">求解释 js 递归 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5948c0d8fe88c2006a939e2a\" target=\"_blank\" rel=\"noopener\">JavaScript 中的递归 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c1d91d6fb9a00a53275f79\" target=\"_blank\" rel=\"noopener\">递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c87fb46fb9a00a437b1a2e\" target=\"_blank\" rel=\"noopener\">递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5acdd7486fb9a028ca53547c\" target=\"_blank\" rel=\"noopener\">尾调用和尾递归 —— 掘金</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/qianqianstd/article/details/75807462\" target=\"_blank\" rel=\"noopener\">几个经典递归问题用 js 实现 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/x_i_xw/article/details/72026868\" target=\"_blank\" rel=\"noopener\">递归函数的几个例子 —— CSDN</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"15-算法\"><a href=\"#15-算法\" class=\"headerlink\" title=\"15. 算法\"></a>15. 算法</h2><h3 id=\"文章-14\"><a href=\"#文章-14\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/post/57dcd394a22b9d00610c5ec8\" target=\"_blank\" rel=\"noopener\">十大经典排序算法总结（JavaScript 描述） —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/594dfe795188250d725a220a#comment\" target=\"_blank\" rel=\"noopener\">在 JavaScript 中学习数据结构与算法 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58c9d5fb1b69e6006b686bce\" target=\"_blank\" rel=\"noopener\">JS 中可能用得到的全部的排序算法 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/1b4068ccd505\" target=\"_blank\" rel=\"noopener\">JS 家的排序算法 —— 简书</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000008593715\" target=\"_blank\" rel=\"noopener\">前端常见算法的 JS 实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/\" target=\"_blank\" rel=\"noopener\">前端面试中的常见的算法问题 ——蒲小花的博客</a></li>\n</ul>\n<h3 id=\"视频-7\"><a href=\"#视频-7\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/888\" target=\"_blank\" rel=\"noopener\">Javascript 实现二叉树算法 —— 慕课网</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"16-数据结构\"><a href=\"#16-数据结构\" class=\"headerlink\" title=\"16. 数据结构\"></a>16. 数据结构</h2><h3 id=\"文章-15\"><a href=\"#文章-15\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.jianshu.com/p/5e0e8d183102\" target=\"_blank\" rel=\"noopener\">来我们浅谈一下 js 的数据结构 —— 简书</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/nb/16835496\" target=\"_blank\" rel=\"noopener\">JavaScript 中的算法与数据结构 —— 简书</a></li>\n<li>:book: <a href=\"http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html\" target=\"_blank\" rel=\"noopener\">学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/586effe0da2f600053d85a9a\" target=\"_blank\" rel=\"noopener\">js 中基础数据结构数组去重问题 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-8\"><a href=\"#视频-8\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: :tv: <a href=\"http://www.le.com/ptv/vplay/27606964.html\" target=\"_blank\" rel=\"noopener\">JavaScript 数据结构-运算符 —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"17-消息队列和事件循环\"><a href=\"#17-消息队列和事件循环\" class=\"headerlink\" title=\"17. 消息队列和事件循环\"></a>17. 消息队列和事件循环</h2><h3 id=\"文章-16\"><a href=\"#文章-16\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">并发模型与事件循环 —— MDN</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/dong-xu/p/7000163.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 事件循环 —— 博客园</a></li>\n<li>:book: <a href=\"https://zhuanlan.zhihu.com/p/26229293\" target=\"_blank\" rel=\"noopener\">深入浅出 Javascript 事件循环机制 —— 知乎</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000014940904#articleHeader7\" target=\"_blank\" rel=\"noopener\">JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004322358\" target=\"_blank\" rel=\"noopener\">JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a6547d0f265da3e283a1df7\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"18-setTimeout-setInterval-和-requestAnimationFrame\"><a href=\"#18-setTimeout-setInterval-和-requestAnimationFrame\" class=\"headerlink\" title=\"18. setTimeout, setInterval 和 requestAnimationFrame\"></a>18. setTimeout, setInterval 和 requestAnimationFrame</h2><h3 id=\"文章-17\"><a href=\"#文章-17\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.runoob.com/jsref/met-win-settimeout.html\" target=\"_blank\" rel=\"noopener\">Window setTimeout() 方法 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"http://www.runoob.com/jsref/met-win-setinterval.html\" target=\"_blank\" rel=\"noopener\">Window setInterval() 方法 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5aa4c47af265da239866e236\" target=\"_blank\" rel=\"noopener\">关于 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a77f8ce5188257a6d635d76\" target=\"_blank\" rel=\"noopener\">你不知道的 Javascript：有趣的 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5861ebf01b69e6006ce61d38\" target=\"_blank\" rel=\"noopener\">原来你是这样的 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000005989491\" target=\"_blank\" rel=\"noopener\">setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault</a></li>\n<li>book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">window.requestAnimationFrame —— MDN</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/onepixel/p/7078617.html\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame 知多少？ —— 博客园</a></li>\n<li>:book: <a href=\"https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%e5%8a%a8%e7%94%bb%e7%ae%97%e6%b3%95/\" target=\"_blank\" rel=\"noopener\">CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000014661035\" target=\"_blank\" rel=\"noopener\">「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000000386368\" target=\"_blank\" rel=\"noopener\">翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000013909430\" target=\"_blank\" rel=\"noopener\">阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault</a></li>\n</ul>\n<h3 id=\"视频-9\"><a href=\"#视频-9\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html\" target=\"_blank\" rel=\"noopener\">setTimeout 和 setInterval —— 优酷</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"19-继承-多态和代码复用\"><a href=\"#19-继承-多态和代码复用\" class=\"headerlink\" title=\"19. 继承, 多态和代码复用\"></a>19. 继承, 多态和代码复用</h2><h3 id=\"文章-18\"><a href=\"#文章-18\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/Leo_wl/p/5734794.html\" target=\"_blank\" rel=\"noopener\">JS 面向对象编程之：封装、继承、多态 —— 博客园</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/5cb692658704\" target=\"_blank\" rel=\"noopener\">Javascript 的继承与多态 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59396c96fe88c2006afc2707\" target=\"_blank\" rel=\"noopener\">js:面向对象编程，带你认识封装、继承和多态 —— 掘金</a></li>\n<li>:book: <a href=\"https://zhuanlan.zhihu.com/p/34693209\" target=\"_blank\" rel=\"noopener\">JavaScript 中的“多继承” —— 掘金</a></li>\n<li>:book: <a href=\"https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown\" target=\"_blank\" rel=\"noopener\">代码复用模式 —— github</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"20-按位操作符-类数组对象和类型化数组\"><a href=\"#20-按位操作符-类数组对象和类型化数组\" class=\"headerlink\" title=\"20. 按位操作符, 类数组对象和类型化数组\"></a>20. 按位操作符, 类数组对象和类型化数组</h2><h3 id=\"文章-19\"><a href=\"#文章-19\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"noopener\">按位操作符 —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays\" target=\"_blank\" rel=\"noopener\">类数组对象 —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" target=\"_blank\" rel=\"noopener\">类型化数组 —— MDN</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/gradolabs/p/4762134.html\" target=\"_blank\" rel=\"noopener\">JavaScript ArrayBuffer 浅析 —— 博客园</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"21-DOM-树和渲染过程\"><a href=\"#21-DOM-树和渲染过程\" class=\"headerlink\" title=\"21. DOM 树和渲染过程\"></a>21. DOM 树和渲染过程</h2><h3 id=\"文章-20\"><a href=\"#文章-20\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree\" target=\"_blank\" rel=\"noopener\">如何创建一个 DOM 树 —— MDN</a></li>\n<li>:book: <a href=\"http://www.w3school.com.cn/htmldom/dom_nodes.asp\" target=\"_blank\" rel=\"noopener\">HTML DOM 节点 —— W3school</a></li>\n<li>:book: <a href=\"http://javascript.ruanyifeng.com/dom/node.html\" target=\"_blank\" rel=\"noopener\">DOM 概述 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/583cbbfa61ff4b006ccc41fe\" target=\"_blank\" rel=\"noopener\">《JavaScript 闯关记》之 DOM（上）—— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/583cbc4961ff4b006ccc44fb\" target=\"_blank\" rel=\"noopener\">《JavaScript 闯关记》之 DOM（下）—— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/58314efd8ac2470061bb30fd\" target=\"_blank\" rel=\"noopener\">掌握 DOM 操作 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000\" target=\"_blank\" rel=\"noopener\">操作 DOM —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c60691518825396f4f71a1\" target=\"_blank\" rel=\"noopener\">原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-10\"><a href=\"#视频-10\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/488\" target=\"_blank\" rel=\"noopener\">DOM 探索之基础详解篇 —— 慕课网</a></li>\n<li>:tv: <a href=\"https://www.imooc.com/learn/138\" target=\"_blank\" rel=\"noopener\">DOM 事件探秘 —— 慕课网</a></li>\n<li>:tv: <a href=\"https://www.imooc.com/learn/530\" target=\"_blank\" rel=\"noopener\">jQuery 基础(二)DOM 篇 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.iqiyi.com/w_19rr19s08l.html\" target=\"_blank\" rel=\"noopener\">JS 操作 DOM 对象属性和方法 —— 爱奇艺</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"22-new-与构造函数-instanceof-与实例\"><a href=\"#22-new-与构造函数-instanceof-与实例\" class=\"headerlink\" title=\"22. new 与构造函数, instanceof 与实例\"></a>22. new 与构造函数, instanceof 与实例</h2><h3 id=\"文章-21\"><a href=\"#文章-21\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://javascript.ruanyifeng.com/oop/basic.html\" target=\"_blank\" rel=\"noopener\">构造函数与 new 命令 —— 阮一峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/SpicyBoiledFish/article/details/71123162\" target=\"_blank\" rel=\"noopener\">完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN</a></li>\n<li>:book: <a href=\"http://www.php.cn/js-tutorial-376246.html\" target=\"_blank\" rel=\"noopener\">JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/yin_991/article/details/80954453\" target=\"_blank\" rel=\"noopener\">构造函数、实例、原型、原型链之间的关系 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/cecilia620/article/details/71158048\" target=\"_blank\" rel=\"noopener\">深入理解 JS—instanceof 和原型链 —— CSDN</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/15ac7393bc1f\" target=\"_blank\" rel=\"noopener\">前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/60ffc4831bff\" target=\"_blank\" rel=\"noopener\">js 用 new 实例化对象与直接调用的 this 的区别 —— 简书</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html\" target=\"_blank\" rel=\"noopener\">JavaScript 并非所有的东西都是对象 —— justjavac</a></li>\n<li>:book: <a href=\"https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/\" target=\"_blank\" rel=\"noopener\">JavaScript instanceof 运算符深入剖析 —— IBM</a></li>\n</ul>\n<h3 id=\"视频-11\"><a href=\"#视频-11\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27766889.html\" target=\"_blank\" rel=\"noopener\">改良版的构造函数 —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"23-原型继承与原型链\"><a href=\"#23-原型继承与原型链\" class=\"headerlink\" title=\"23. 原型继承与原型链\"></a>23. 原型继承与原型链</h2><h3 id=\"文章-22\"><a href=\"#文章-22\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链 —— MDN</a></li>\n<li>:book: <a href=\"https://github.com/bigdots/blog/issues/1\" target=\"_blank\" rel=\"noopener\">构造函数、原型与原型链 —— github</a></li>\n<li>:book: <a href=\"https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype\" target=\"_blank\" rel=\"noopener\">原型及原型链 —— github(1269 Star)</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004282206\" target=\"_blank\" rel=\"noopener\">理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html\" target=\"_blank\" rel=\"noopener\">JavaScript：继承和原型链(译) —— justjavac</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/shuiyi/p/5305435.html\" target=\"_blank\" rel=\"noopener\">三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/the__apollo/article/details/76774698\" target=\"_blank\" rel=\"noopener\">一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/xiaotao_css/article/details/72782416\" target=\"_blank\" rel=\"noopener\">JS 高级–原型链(一看就懂，但 18 岁以下请绕道) —— CSDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000\" target=\"_blank\" rel=\"noopener\">原型继承 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58f94c9bb123db411953691b\" target=\"_blank\" rel=\"noopener\">JS 原型链与继承别再被问倒了 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5885db221b69e600592253e7\" target=\"_blank\" rel=\"noopener\">征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金</a></li>\n<li>:book: <a href=\"https://github.com/mqyqingfeng/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之从原型到原型链 —— 冴羽</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li>\n</ul>\n<h3 id=\"视频-12\"><a href=\"#视频-12\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27552753.html\" target=\"_blank\" rel=\"noopener\">JS 高级-07-原型链继承 —— 乐视</a></li>\n<li>:tv: <a href=\"https://v.qq.com/x/page/b0511nwa7d3.html\" target=\"_blank\" rel=\"noopener\">JS 原型对象和原型链简介 —— 腾讯视频</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"24-Object-create-和-Object-assign\"><a href=\"#24-Object-create-和-Object-assign\" class=\"headerlink\" title=\"24. Object.create 和 Object.assign\"></a>24. Object.create 和 Object.assign</h2><h3 id=\"文章-23\"><a href=\"#文章-23\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\">Object.create —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" target=\"_blank\" rel=\"noopener\">Object.assign —— MDN</a></li>\n<li>:book: <a href=\"https://www.imooc.com/article/17591\" target=\"_blank\" rel=\"noopener\">Object.create vs Object.assign —— 慕课网手记</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/DeepLies/article/details/52915143\" target=\"_blank\" rel=\"noopener\">JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN</a></li>\n<li>:book: <a href=\"http://www.onlyfordream.cn/2018/03/19/es6%E4%B8%ADobject-create%E5%92%8Cobject-assign/\" target=\"_blank\" rel=\"noopener\">es6 中 object.create()和 object.assign() —— 风信子博客</a></li>\n<li>:book: <a href=\"https://github.com/saikojosh/Object-Assign-Deep\" target=\"_blank\" rel=\"noopener\">Object-Assign-Deep —— github</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"25-工厂函数和类\"><a href=\"#25-工厂函数和类\" class=\"headerlink\" title=\"25. 工厂函数和类\"></a>25. 工厂函数和类</h2><h3 id=\"文章-24\"><a href=\"#文章-24\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener\">类 —— MDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000\" target=\"_blank\" rel=\"noopener\">类和实例 —— 廖雪峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html\" target=\"_blank\" rel=\"noopener\">Javascript 定义类（class）的三种方法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c8c8756fb9a00a681ae5bd\" target=\"_blank\" rel=\"noopener\">【译】ES6 的工厂函数 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/587992c961ff4b0065edf1ff\" target=\"_blank\" rel=\"noopener\">JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"26-设计模式\"><a href=\"#26-设计模式\" class=\"headerlink\" title=\"26. 设计模式\"></a>26. 设计模式</h2><h3 id=\"文章-25\"><a href=\"#文章-25\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/post/59df4f74f265da430f311909\" target=\"_blank\" rel=\"noopener\">JavaScript 设计模式 —— 掘金</a></li>\n<li>:book: <a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/\" target=\"_blank\" rel=\"noopener\">学用 JavaScript 设计模式 —— 极客学院</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010914032\" target=\"_blank\" rel=\"noopener\">[面试专题]JS 设计模式 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://github.com/lxj/javascript.patterns\" target=\"_blank\" rel=\"noopener\">JavaScript Patterns 中译本 —— github</a></li>\n</ul>\n<h3 id=\"视频-13\"><a href=\"#视频-13\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html\" target=\"_blank\" rel=\"noopener\">HTML5 课程大纲 2-11JS 设计模式</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"27-Memoization\"><a href=\"#27-Memoization\" class=\"headerlink\" title=\"27. Memoization\"></a>27. Memoization</h2><h3 id=\"文章-26\"><a href=\"#文章-26\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html\" target=\"_blank\" rel=\"noopener\">JavaScript Memoization —— 司徒正美</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yingshuizy/p/4517102.html\" target=\"_blank\" rel=\"noopener\">memoization 提升递归效率 —— 博客园</a></li>\n<li>:book: <a href=\"http://developer.51cto.com/art/201010/231513.htm\" target=\"_blank\" rel=\"noopener\">如何提升 JavaScript 的递归效率 —— 51CTO</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000016703106\" target=\"_blank\" rel=\"noopener\">JavaScript 高级技巧 Memoization —— SegmentFaut</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"28-纯函数-函数副作用和状态变化\"><a href=\"#28-纯函数-函数副作用和状态变化\" class=\"headerlink\" title=\"28. 纯函数, 函数副作用和状态变化\"></a>28. 纯函数, 函数副作用和状态变化</h2><h3 id=\"文章-27\"><a href=\"#文章-27\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://huziketang.mangojuice.top/books/react/lesson32\" target=\"_blank\" rel=\"noopener\">纯函数(Pure Function) —— React.js 小书</a></li>\n<li>:book: <a href=\"https://ninghao.net/blog/4634\" target=\"_blank\" rel=\"noopener\">JavaScript Functional Programming：纯函数 —— 宁皓网</a></li>\n<li>:book: <a href=\"https://www.jb51.net/article/28079.htm\" target=\"_blank\" rel=\"noopener\">js 函数的副作用分析 —— 脚本之家</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com\" target=\"_blank\" rel=\"noopener\">如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/zhangycun/p/9403335.html\" target=\"_blank\" rel=\"noopener\">原生 JavaScript 实现 state 状态管理系统 —— 博客园</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/10\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程 —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"29-耗性能操作和时间复杂度\"><a href=\"#29-耗性能操作和时间复杂度\" class=\"headerlink\" title=\"29. 耗性能操作和时间复杂度\"></a>29. 耗性能操作和时间复杂度</h2><h3 id=\"文章-28\"><a href=\"#文章-28\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/entry/593f56528d6d810058a355f4\" target=\"_blank\" rel=\"noopener\">时间复杂度 O(log n) 意味着什么？ —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5a49f7d36fb9a0450a67b269\" target=\"_blank\" rel=\"noopener\">算法的时间复杂度和空间复杂度 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58d15f1044d90400691834d4\" target=\"_blank\" rel=\"noopener\">算法（一）时间复杂度 —— 掘金</a></li>\n<li>:book: <a href=\"http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html\" target=\"_blank\" rel=\"noopener\">Big O Search Algorithms in JavaScript —— Bradley Braithwaite</a></li>\n<li>:book: <a href=\"https://www.jenniferbland.com/time-complexity-analysis-in-javascript/\" target=\"_blank\" rel=\"noopener\">Time Complexity Analysis in JavaScript — Jennifer Bland</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"30-JavaScript-引擎\"><a href=\"#30-JavaScript-引擎\" class=\"headerlink\" title=\"30. JavaScript 引擎\"></a>30. JavaScript 引擎</h2><h3 id=\"文章-29\"><a href=\"#文章-29\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://baike.baidu.com/item/javascript引擎/5356108\" target=\"_blank\" rel=\"noopener\">javascript 引擎 —— 百度百科</a></li>\n<li>:book: <a href=\"https://baike.baidu.com/item/V8/6178125\" target=\"_blank\" rel=\"noopener\">V8(JavaScript 引擎) —— 百度百科</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a6309f76fb9a01cab2858b1\" target=\"_blank\" rel=\"noopener\">图解搞懂 JavaScript 引擎 Event Loop —— 掘金</a>3</li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010819020\" target=\"_blank\" rel=\"noopener\">V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000012806637\" target=\"_blank\" rel=\"noopener\">10 分钟理解 JS 引擎的执行机制 —— SegmentFaut</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/weirdoQi/p/6609811.html\" target=\"_blank\" rel=\"noopener\">V8 javascript 引擎 —— 博客园</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"31-二进制-十六进制-十进制-科学记数法\"><a href=\"#31-二进制-十六进制-十进制-科学记数法\" class=\"headerlink\" title=\"31. 二进制, 十六进制, 十进制, 科学记数法\"></a>31. 二进制, 十六进制, 十进制, 科学记数法</h2><h3 id=\"文章-30\"><a href=\"#文章-30\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.cnblogs.com/gaizai/p/4233780.html\" target=\"_blank\" rel=\"noopener\">二、八、十、十六进制转换(图解篇) —— 博客园</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b93dadaf265da0a857a58a3\" target=\"_blank\" rel=\"noopener\">JavaScript 读写二进制数据 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-14\"><a href=\"#视频-14\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://baishi.baidu.com/watch/7873060963471478456.html\" target=\"_blank\" rel=\"noopener\">二进制、十进制、十六进制互相转化很难吗？ —— 百度视频</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"32-偏函数-柯里化-Compose-和-Pipe\"><a href=\"#32-偏函数-柯里化-Compose-和-Pipe\" class=\"headerlink\" title=\"32. 偏函数, 柯里化, Compose 和 Pipe\"></a>32. 偏函数, 柯里化, Compose 和 Pipe</h2><h3 id=\"文章-31\"><a href=\"#文章-31\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://blog.csdn.net/qq_42129063/article/details/81874314\" target=\"_blank\" rel=\"noopener\">Javascript 函数式编程之偏函数 —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010686144\" target=\"_blank\" rel=\"noopener\">JavaScript 专题之偏函数 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000008626058\" target=\"_blank\" rel=\"noopener\">柯里化和偏函数有什么区别？ —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/neweastsun/article/details/75947785\" target=\"_blank\" rel=\"noopener\">Javascript 偏函数与柯里化 —— CSDN</a></li>\n<li>:book: <a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html\" target=\"_blank\" rel=\"noopener\">柯里化(curry) —— JS 函数式编程指南</a></li>\n<li>:book: <a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html\" target=\"_blank\" rel=\"noopener\">代码组合(compose) —— JS 函数式编程指南</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000008394749\" target=\"_blank\" rel=\"noopener\">关于 javascript 函数式编程中 compose 的实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000011447164\" target=\"_blank\" rel=\"noopener\">实现 compose 的五种思路 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015102804\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment\" target=\"_blank\" rel=\"noopener\">JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/11\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程（二） —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"33-代码整洁之道\"><a href=\"#33-代码整洁之道\" class=\"headerlink\" title=\"33. 代码整洁之道\"></a>33. 代码整洁之道</h2><h3 id=\"文章-32\"><a href=\"#文章-32\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html\" target=\"_blank\" rel=\"noopener\">[译] JavaScript 代码整洁之道 —— 边城</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">Javascript 编程风格 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9\" target=\"_blank\" rel=\"noopener\">重构 - 代码整洁之道 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a7d71836fb9a063435ecf51\" target=\"_blank\" rel=\"noopener\">让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金</a></li>\n<li>:book: <a href=\"http://blog.jobbole.com/23617/\" target=\"_blank\" rel=\"noopener\">Web 前端：11 个让你代码整洁的原则 —— 伯乐在线</a></li>\n<li>:book: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">Clean Code concepts adapted for JavaScript —— ryanmcdermott</a></li>\n</ul>\n<p><br></p>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://github.com/stephentian/33-js-concepts\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<blockquote>\n<p>本篇文章是参照 @leonardomso 创立，英文版项目地址在<a href=\"https://github.com/leonardomso/33-js-concepts\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n</blockquote>\n<hr>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><strong><a href=\"#1-调用堆栈\">调用堆栈</a></strong></li>\n<li><strong><a href=\"#2-原始类型\">原始类型</a></strong></li>\n<li><strong><a href=\"#3-值类型和引用类型\">值类型和引用类型</a></strong></li>\n<li><strong><a href=\"#4-隐式-显式-名义和鸭子类型\">隐式, 显式, 名义和鸭子类型</a></strong></li>\n<li><strong><a href=\"#5--vs--typeof-vs-instanceof\">== 与 ===, typeof 与 instanceof</a></strong></li>\n<li><strong><a href=\"#6-this-call-apply-和-bind\">this, call, apply 和 bind</a></strong></li>\n<li><strong><a href=\"#7-函数作用域-块级作用域和词法作用域\">函数作用域, 块级作用域和词法作用域</a></strong></li>\n<li><strong><a href=\"#8-闭包\">闭包</a></strong></li>\n<li><strong><a href=\"#9-map-reduce-filter-等高阶函数\">map, reduce, filter 等高阶函数</a></strong></li>\n<li><strong><a href=\"#10-表达式和语句\">表达式和语句</a></strong></li>\n<li><strong><a href=\"#11-变量提升\">变量提升</a></strong></li>\n<li><strong><a href=\"#12-promise\">Promise</a></strong></li>\n<li><strong><a href=\"#13-立即执行函数-模块化-命名空间\">立即执行函数, 模块化, 命名空间</a></strong></li>\n<li><strong><a href=\"#14-递归\">递归</a></strong></li>\n<li><strong><a href=\"#15-算法\">算法</a></strong></li>\n<li><strong><a href=\"#16-数据结构\">数据结构</a></strong></li>\n<li><strong><a href=\"#17-消息队列和事件循环\">消息队列和事件循环</a></strong></li>\n<li><strong><a href=\"#18-settimeout-setinterval-和-requestanimationframe\">setTimeout, setInterval 和 requestAnimationFrame</a></strong></li>\n<li><strong><a href=\"#19-继承-多态和代码复用\">继承, 多态和代码复用</a></strong></li>\n<li><strong><a href=\"#20-按位操作符-类数组对象和类型化数组\">按位操作符, 类数组对象和类型化数组</a></strong></li>\n<li><strong><a href=\"#21-dom-树和渲染过程\">DOM 树和渲染过程</a></strong></li>\n<li><strong><a href=\"#22-new-与构造函数-instanceof-与实例\">new 与构造函数, instanceof 与实例</a></strong></li>\n<li><strong><a href=\"#23-原型继承与原型链\">原型继承与原型链</a></strong></li>\n<li><strong><a href=\"#24-objectcreate-和-objectassign\">Object.create 和 Object.assign</a></strong></li>\n<li><strong><a href=\"#25-工厂函数和类\">工厂函数和类</a></strong></li>\n<li><strong><a href=\"#26-设计模式\">设计模式</a></strong></li>\n<li><strong><a href=\"#27-memoization\">Memoization</a></strong></li>\n<li><strong><a href=\"#28-纯函数-函数副作用和状态变化\">纯函数, 函数副作用和状态变化</a></strong></li>\n<li><strong><a href=\"#29-耗性能操作和时间复杂度\">耗性能操作和时间复杂度</a></strong></li>\n<li><strong><a href=\"#30-javascript-引擎\">JavaScript 引擎</a></strong></li>\n<li><strong><a href=\"#31-二进制-十六进制-十进制-科学记数法\">二进制, 十进制, 十六进制, 科学记数法</a></strong></li>\n<li><strong><a href=\"#32-偏函数-柯里化-compose-和-pipe\">偏函数, 柯里化, Compose 和 Pipe</a></strong></li>\n<li><strong><a href=\"#33-代码整洁之道\">代码整洁之道</a></strong></li>\n</ol>\n<hr>\n<h2 id=\"1-调用堆栈\"><a href=\"#1-调用堆栈\" class=\"headerlink\" title=\"1. 调用堆栈\"></a>1. 调用堆栈</h2><h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack\" target=\"_blank\" rel=\"noopener\">Call Stack — MDN</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a05b4576fb9a04519690d42\" target=\"_blank\" rel=\"noopener\">[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5ba32171f265da0ab719a6d7\" target=\"_blank\" rel=\"noopener\">[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" target=\"_blank\" rel=\"noopener\">这一次，彻底弄懂 JavaScript 执行机制 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.oschina.net/translate/how-does-javascript-actually-work-part-1\" target=\"_blank\" rel=\"noopener\">解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国</a></li>\n<li>:book: <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules —— Jake Archibald</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/55dbd51a60b2f3a92a8f5bff\" target=\"_blank\" rel=\"noopener\">Tasks, microtasks, queues and schedules（译） —— 掘金</a></li>\n</ul>\n<h3 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser\" target=\"_blank\" rel=\"noopener\">What is the event loop anyway? —— 腾讯视频(英文字幕)</a></li>\n<li>:tv: <a href=\"https://www.bilibili.com/video/av33824933/\" target=\"_blank\" rel=\"noopener\">Understanding The JavaScript Call Stack, Event Queue, Event Table, &amp; Event Loop —— Bilibili</a></li>\n<li>:tv: <a href=\"http://www.acfun.cn/v/ac4495641\" target=\"_blank\" rel=\"noopener\">JS 中的变量提升、堆栈内存及闭包详解 —— Acfun</a></li>\n<li>:tv: <a href=\"http://www.php.cn/code/21194.html\" target=\"_blank\" rel=\"noopener\">事件循环模型 —— PHP 中文网</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=w6QGEiQceOM\" target=\"_blank\" rel=\"noopener\">Javascript: the Call Stack explained — Coding Blocks India</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=W8AeMrVtFLY\" target=\"_blank\" rel=\"noopener\">The JS Call Stack Explained In 9 Minutes — Colt Steele</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=jT0USJeNFEA\" target=\"_blank\" rel=\"noopener\">JavaScript Execution Stack — Codecademy</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=w7QWQlkLY_s\" target=\"_blank\" rel=\"noopener\">What is the Call Stack? — Eric Traub</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=Q2sFmqvpBe0\" target=\"_blank\" rel=\"noopener\">The Call Stack — Kevin Drumm</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=Z6a1cLyq7Ac&amp;list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD\" target=\"_blank\" rel=\"noopener\">Understanding JavaScript Execution — Codesmith</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=mk0lu9MKBto\" target=\"_blank\" rel=\"noopener\">Call Stack &amp; Event Loop — movies com</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"2-原始类型\"><a href=\"#2-原始类型\" class=\"headerlink\" title=\"2. 原始类型\"></a>2. 原始类型</h2><h3 id=\"文章-1\"><a href=\"#文章-1\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive\" target=\"_blank\" rel=\"noopener\">原始数据 —— MDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000017090272\" target=\"_blank\" rel=\"noopener\">[译]JavaScript 是怎样编码数字的 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/\" target=\"_blank\" rel=\"noopener\">每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜</a></li>\n<li>:book: <a href=\"https://wangdoc.com/javascript/types/number.html\" target=\"_blank\" rel=\"noopener\">JavaScript 标准参考教程(基本语法之数值) —— 阮一峰</a></li>\n<li>:book: <a href=\"https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/\" target=\"_blank\" rel=\"noopener\">The Secret Life of JavaScript Primitives —— Angus Croll</a></li>\n</ul>\n<h3 id=\"视频-1\"><a href=\"#视频-1\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/video/5674\" target=\"_blank\" rel=\"noopener\">javascript 六种数据类型 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.php.cn/code/5808.html\" target=\"_blank\" rel=\"noopener\">javascript 视频教程(数据类型) —— PHP 中文网</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=9ooYYRLdg_g\" target=\"_blank\" rel=\"noopener\">JavaScript Reference vs Primitive Types — Academind</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=HsbWQsSCE5Y\" target=\"_blank\" rel=\"noopener\">JavaScript Primitive Types — Simon Sez IT</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=F7YbhKbpFic\" target=\"_blank\" rel=\"noopener\">Javascript Primitive and Reference Types — Baljeet Singh</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=e-_mDyqm2oU\" target=\"_blank\" rel=\"noopener\">Value Types and Reference Types in JavaScript — Programming with Mosh</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=qw3j0A3DIzQ\" target=\"_blank\" rel=\"noopener\">JavaScript Primitive Data Types — Avelx</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=MqHDDtVYJRI\" target=\"_blank\" rel=\"noopener\">Everything you never wanted to know about JavaScript numbers — Bartek Szopka</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"3-值类型和引用类型\"><a href=\"#3-值类型和引用类型\" class=\"headerlink\" title=\"3. 值类型和引用类型\"></a>3. 值类型和引用类型</h2><h3 id=\"文章-2\"><a href=\"#文章-2\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_referencetypes.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 引用类型 —— W3school</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/leiting/p/8081413.html\" target=\"_blank\" rel=\"noopener\">js 中的值类型和引用类型的区别 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/\" target=\"_blank\" rel=\"noopener\">JavaScript 的值传递和引用传递 —— FunDebug</a></li>\n<li>:book: <a href=\"https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm\" target=\"_blank\" rel=\"noopener\">Primitive Types &amp; Reference Types in JavaScript —— Bran van der Meer</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/xiaojia_boke/article/details/54906509\" target=\"_blank\" rel=\"noopener\">JavaScript: Passing by Value or by Reference —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015411195\" target=\"_blank\" rel=\"noopener\">js 值引用和值复制 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/zzzaquarius/article/details/4902235\" target=\"_blank\" rel=\"noopener\">js- 引用和复制(传值和传址) —— CSDN</a></li>\n</ul>\n<h3 id=\"视频-2\"><a href=\"#视频-2\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=E-dAnFdq8k8\" target=\"_blank\" rel=\"noopener\">Javascript Pass by Value vs Pass by Reference — techsith</a></li>\n<li>:tv: <a href=\"https://www.youtube.com/watch?v=fD0t_DKREbE\" target=\"_blank\" rel=\"noopener\">JavaScript Value vs Reference Types — Programming with Mosh</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"4-隐式-显式-名义和鸭子类型\"><a href=\"#4-隐式-显式-名义和鸭子类型\" class=\"headerlink\" title=\"4. 隐式, 显式, 名义和鸭子类型\"></a>4. 隐式, 显式, 名义和鸭子类型</h2><h3 id=\"文章-3\"><a href=\"#文章-3\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_typeconversion.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 类型转换 —— W3school</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html\" target=\"_blank\" rel=\"noopener\">JavaScript 的怪癖 1：隐式类型转换 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59ad2585f265da246a20e026\" target=\"_blank\" rel=\"noopener\">JavaScript 运算符规则与隐式类型转换详解 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004482388\" target=\"_blank\" rel=\"noopener\">聊一聊 JS 中的隐式类型转换 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yugege/p/5277883.html\" target=\"_blank\" rel=\"noopener\">有趣的 JavaScript 隐式类型转换 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/yangjvn/article/details/48284163\" target=\"_blank\" rel=\"noopener\">JavaScript 显式类型转换与隐式类型转换 —— CSDN</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/777a89b4ed9a\" target=\"_blank\" rel=\"noopener\">你不知道的 JavaScript（中卷）强制类型转换 —— 简书</a></li>\n<li>:book: <a href=\"https://ithelp.ithome.com.tw/articles/10201512\" target=\"_blank\" rel=\"noopener\">你懂 JavaScript 嗎？#8 強制轉型 —— cythilya</a></li>\n<li>:book: <a href=\"http://book.51cto.com/art/201505/475153.htm\" target=\"_blank\" rel=\"noopener\">动态类型语言和鸭子类型 —— 曾探</a></li>\n<li>:book: <a href=\"https://flow.org/en/docs/lang/nominal-structural/\" target=\"_blank\" rel=\"noopener\">Nominal &amp; Structural Typing —— flow</a></li>\n<li>:book: <a href=\"https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript\" target=\"_blank\" rel=\"noopener\">What exactly is Type Coercion in Javascript? —— stackoverflow</a></li>\n<li>:book: <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&amp;%20grammar/ch4.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Types &amp; Grammar —— github</a></li>\n</ul>\n<h3 id=\"视频-3\"><a href=\"#视频-3\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/video/5675\" target=\"_blank\" rel=\"noopener\">javascript 隐式转换 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27767009.html\" target=\"_blank\" rel=\"noopener\">Javascript 基础加强-类型转换 —— 黑马程序员</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<div id=\"5--vs--typeof-vs-instanceof\"></div>\n\n<h2 id=\"5-vs-typeof-vs-instanceof\"><a href=\"#5-vs-typeof-vs-instanceof\" class=\"headerlink\" title=\"5. == vs ===, typeof vs instanceof\"></a>5. == vs ===, typeof vs instanceof</h2><h3 id=\"文章-4\"><a href=\"#文章-4\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"noopener\">JavaScript 中的相等性判断 —— MDN</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/584918612f301e005716add6\" target=\"_blank\" rel=\"noopener\">js 中 == 和 === 的区别 —— 掘金</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/w97531/article/details/82255225\" target=\"_blank\" rel=\"noopener\">== vs === in Javascript —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/mevicky/article/details/50353881\" target=\"_blank\" rel=\"noopener\">深入理解 javascript 之 typeof 和 instanceof —— CSDN</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html\" target=\"_blank\" rel=\"noopener\">JavaScript 的 typeof 的用途 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58358606570c35005e4142bd\" target=\"_blank\" rel=\"noopener\">一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b0b9b9051882515773ae714\" target=\"_blank\" rel=\"noopener\">浅谈 instanceof 和 typeof 的实现原理 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000000730982\" target=\"_blank\" rel=\"noopener\">typeof 和 instanceOf 的区别</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"6-this-call-apply-和-bind\"><a href=\"#6-this-call-apply-和-bind\" class=\"headerlink\" title=\"6. this, call, apply 和 bind\"></a>6. this, call, apply 和 bind</h2><h3 id=\"文章-5\"><a href=\"#文章-5\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">Javascript 的 this 用法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/6b4333e78bf5\" target=\"_blank\" rel=\"noopener\">学会 JS 的 this 这一篇就够了，根本不用记 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b9f176b6fb9a05d3827d03f\" target=\"_blank\" rel=\"noopener\">[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59bfe84351882531b730bac2\" target=\"_blank\" rel=\"noopener\">this、apply、call、bind —— 掘金</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/tingyu-blog/p/6212392.html\" target=\"_blank\" rel=\"noopener\">使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园</a></li>\n<li>:book: <a href=\"https://github.com/Abiel1024/blog/issues/16\" target=\"_blank\" rel=\"noopener\">call、apply 和 bind 的原生实现 —— github</a></li>\n</ul>\n<h3 id=\"视频-4\"><a href=\"#视频-4\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.iqiyi.com/w_19rr1augsd.html\" target=\"_blank\" rel=\"noopener\">JavaScript 关于 this 关键字解释 —— 爱奇艺</a></li>\n<li>:tv: <a href=\"http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed\" target=\"_blank\" rel=\"noopener\">JS 关于作用域闭包和 this 的综合面试题 —— 百度视频</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s\" target=\"_blank\" rel=\"noopener\">js 面向对象闭包数组 12.函数中的 this —— 乐视视频</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s\" target=\"_blank\" rel=\"noopener\">1.3.10-this 指向及 this 应用 —— 乐视视频</a></li>\n<li>:tv: <a href=\"https://study.163.com/course/introduction/590005.htm\" target=\"_blank\" rel=\"noopener\">珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"7-函数作用域-块级作用域和词法作用域\"><a href=\"#7-函数作用域-块级作用域和词法作用域\" class=\"headerlink\" title=\"7. 函数作用域, 块级作用域和词法作用域\"></a>7. 函数作用域, 块级作用域和词法作用域</h2><h3 id=\"文章-6\"><a href=\"#文章-6\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000\" target=\"_blank\" rel=\"noopener\">变量作用域与解构赋值 —— 廖雪峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习 Javascript 闭包（Closure） —— 阮一峰</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006671020\" target=\"_blank\" rel=\"noopener\">JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/58e70077b123db15eb88dc7e\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之词法作用域和动态作用域 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5afb0ae56fb9a07aa2138425\" target=\"_blank\" rel=\"noopener\">深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金</a></li>\n<li>:book: <a href=\"https://stackoverflow.com/questions/1047454/what-is-lexical-scope\" target=\"_blank\" rel=\"noopener\">What is lexical scope? —— stackoverflow</a></li>\n<li>:book: <a href=\"https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/ch2.md\" target=\"_blank\" rel=\"noopener\">You Don’t Know JS: Scope &amp; Closures —— Kyle Simpson</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"8-闭包\"><a href=\"#8-闭包\" class=\"headerlink\" title=\"8. 闭包\"></a>8. 闭包</h2><h3 id=\"文章-7\"><a href=\"#文章-7\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">闭包 —— MDN</a></li>\n<li>:book: <a href=\"http://www.w3school.com.cn/js/pro_js_functions_closures.asp\" target=\"_blank\" rel=\"noopener\">ECMAScript 闭包（closure）—— w3school</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">学习 Javascript 闭包（Closure） —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000\" target=\"_blank\" rel=\"noopener\">闭包 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/796e903754f1\" target=\"_blank\" rel=\"noopener\">一次性搞懂 JavaScript 闭包 —— 简书</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006875662\" target=\"_blank\" rel=\"noopener\">JavaScript 闭包 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5800eb7da22b9d005b36156e\" target=\"_blank\" rel=\"noopener\">js 匿名自执行函数中闭包的高级使用 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/59df405251882551bf7e58c6\" target=\"_blank\" rel=\"noopener\">高效使用 JavaScript 闭包 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li>\n</ul>\n<h3 id=\"视频-5\"><a href=\"#视频-5\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.iqiyi.com/w_19rr1amael.html\" target=\"_blank\" rel=\"noopener\">JavaScript 闭包和闭包面试题 —— 爱奇艺</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27478410.html\" target=\"_blank\" rel=\"noopener\">js 面向对象闭包数组 11.闭包 —— 乐视</a></li>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/30505852.html\" target=\"_blank\" rel=\"noopener\">白贺翔_函数(闭包) —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"9-map-reduce-filter-等高阶函数\"><a href=\"#9-map-reduce-filter-等高阶函数\" class=\"headerlink\" title=\"9. map, reduce, filter 等高阶函数\"></a>9. map, reduce, filter 等高阶函数</h2><h3 id=\"文章-8\"><a href=\"#文章-8\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000\" target=\"_blank\" rel=\"noopener\">高阶函数 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.zhangxinxu.com/wordpress/2013/04/es5%e6%96%b0%e5%a2%9e%e6%95%b0%e7%bb%84%e6%96%b9%e6%b3%95/\" target=\"_blank\" rel=\"noopener\">ES5 中新增的 Array 方法详细说明 —— 张鑫旭</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5835808067f3560065ed4ab2\" target=\"_blank\" rel=\"noopener\">一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000012127329\" target=\"_blank\" rel=\"noopener\">Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/15\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程（三） —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"10-表达式和语句\"><a href=\"#10-表达式和语句\" class=\"headerlink\" title=\"10. 表达式和语句\"></a>10. 表达式和语句</h2><h3 id=\"文章-9\"><a href=\"#文章-9\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/xianshenglu/p/8386918.html\" target=\"_blank\" rel=\"noopener\">js 表达式与语句 —— 博客园</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000004102804\" target=\"_blank\" rel=\"noopener\">JS 表达式和语句的区别 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/mett_smith/article/details/78761247\" target=\"_blank\" rel=\"noopener\">JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004565693\" target=\"_blank\" rel=\"noopener\">重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://2ality.com/2012/09/expressions-vs-statements.html\" target=\"_blank\" rel=\"noopener\">Expressions versus statements in JavaScript —— Dr. Axel</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"11-变量提升\"><a href=\"#11-变量提升\" class=\"headerlink\" title=\"11. 变量提升\"></a>11. 变量提升</h2><h3 id=\"文章-10\"><a href=\"#文章-10\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.runoob.com/js/js-hoisting.html\" target=\"_blank\" rel=\"noopener\">JavaScript 变量提升 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59905bea6fb9a03c34192c51\" target=\"_blank\" rel=\"noopener\">ES6 变量作用域与提升：变量的生命周期详解 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004345355#articleHeader5\" target=\"_blank\" rel=\"noopener\">[翻译] JavaScript Scoping and Hoisting —— SegmentFault</a></li>\n<li>:book: <a href=\"http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html\" target=\"_blank\" rel=\"noopener\">JavaScript Scoping and Hoisting —— Ben Cherry</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"12-Promise\"><a href=\"#12-Promise\" class=\"headerlink\" title=\"12. Promise\"></a>12. Promise</h2><h3 id=\"文章-11\"><a href=\"#文章-11\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\" target=\"_blank\" rel=\"noopener\">使用 promises —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">Promise —— MDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000\" target=\"_blank\" rel=\"noopener\">Promise — 廖雪峰</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/rubylouvre/p/3495286.html\" target=\"_blank\" rel=\"noopener\">JavaScript Promise：去而复返 —— 司徒正美</a></li>\n<li>:book: <a href=\"https://developers.google.com/web/fundamentals/primers/promises#_1\" target=\"_blank\" rel=\"noopener\">(上面的原文)JavaScript Promise：简介 —— Web Fundamentals</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000011813934\" target=\"_blank\" rel=\"noopener\">1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/56499ae160b2d1404c4f8834\" target=\"_blank\" rel=\"noopener\">JavaScript Promise 迷你书（中文版）</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yunfeifei/p/4453690.html\" target=\"_blank\" rel=\"noopener\">JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园</a></li>\n</ul>\n<h3 id=\"视频-6\"><a href=\"#视频-6\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/949\" target=\"_blank\" rel=\"noopener\">Promise 入门 —— 慕课网</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"13-立即执行函数-模块化-命名空间\"><a href=\"#13-立即执行函数-模块化-命名空间\" class=\"headerlink\" title=\"13. 立即执行函数, 模块化, 命名空间\"></a>13. 立即执行函数, 模块化, 命名空间</h2><h3 id=\"文章-12\"><a href=\"#文章-12\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"noopener\">Javascript 模块化编程（一）：模块的写法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/4dbf4a4c8ebb\" target=\"_blank\" rel=\"noopener\">javascript 模块化编程-详解立即执行函数表达式 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/57fee360a22b9d005b1d9ae3\" target=\"_blank\" rel=\"noopener\">Javascript 的匿名函数与自执行 —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000006966358\" target=\"_blank\" rel=\"noopener\">前端模块化——技术选型 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015991869#articleHeader8\" target=\"_blank\" rel=\"noopener\">谈谈 Js 前端模块化规范 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://web.jobbole.com/87534/\" target=\"_blank\" rel=\"noopener\">函数声明与函数表达式的区别 —— 伯乐在线</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"14-递归\"><a href=\"#14-递归\" class=\"headerlink\" title=\"14. 递归\"></a>14. 递归</h2><h3 id=\"文章-13\"><a href=\"#文章-13\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000003942347\" target=\"_blank\" rel=\"noopener\">求解释 js 递归 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5948c0d8fe88c2006a939e2a\" target=\"_blank\" rel=\"noopener\">JavaScript 中的递归 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c1d91d6fb9a00a53275f79\" target=\"_blank\" rel=\"noopener\">递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c87fb46fb9a00a437b1a2e\" target=\"_blank\" rel=\"noopener\">递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5acdd7486fb9a028ca53547c\" target=\"_blank\" rel=\"noopener\">尾调用和尾递归 —— 掘金</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/qianqianstd/article/details/75807462\" target=\"_blank\" rel=\"noopener\">几个经典递归问题用 js 实现 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/x_i_xw/article/details/72026868\" target=\"_blank\" rel=\"noopener\">递归函数的几个例子 —— CSDN</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"15-算法\"><a href=\"#15-算法\" class=\"headerlink\" title=\"15. 算法\"></a>15. 算法</h2><h3 id=\"文章-14\"><a href=\"#文章-14\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/post/57dcd394a22b9d00610c5ec8\" target=\"_blank\" rel=\"noopener\">十大经典排序算法总结（JavaScript 描述） —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/594dfe795188250d725a220a#comment\" target=\"_blank\" rel=\"noopener\">在 JavaScript 中学习数据结构与算法 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58c9d5fb1b69e6006b686bce\" target=\"_blank\" rel=\"noopener\">JS 中可能用得到的全部的排序算法 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/1b4068ccd505\" target=\"_blank\" rel=\"noopener\">JS 家的排序算法 —— 简书</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000008593715\" target=\"_blank\" rel=\"noopener\">前端常见算法的 JS 实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/\" target=\"_blank\" rel=\"noopener\">前端面试中的常见的算法问题 ——蒲小花的博客</a></li>\n</ul>\n<h3 id=\"视频-7\"><a href=\"#视频-7\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/888\" target=\"_blank\" rel=\"noopener\">Javascript 实现二叉树算法 —— 慕课网</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"16-数据结构\"><a href=\"#16-数据结构\" class=\"headerlink\" title=\"16. 数据结构\"></a>16. 数据结构</h2><h3 id=\"文章-15\"><a href=\"#文章-15\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.jianshu.com/p/5e0e8d183102\" target=\"_blank\" rel=\"noopener\">来我们浅谈一下 js 的数据结构 —— 简书</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/nb/16835496\" target=\"_blank\" rel=\"noopener\">JavaScript 中的算法与数据结构 —— 简书</a></li>\n<li>:book: <a href=\"http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html\" target=\"_blank\" rel=\"noopener\">学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/586effe0da2f600053d85a9a\" target=\"_blank\" rel=\"noopener\">js 中基础数据结构数组去重问题 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-8\"><a href=\"#视频-8\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: :tv: <a href=\"http://www.le.com/ptv/vplay/27606964.html\" target=\"_blank\" rel=\"noopener\">JavaScript 数据结构-运算符 —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"17-消息队列和事件循环\"><a href=\"#17-消息队列和事件循环\" class=\"headerlink\" title=\"17. 消息队列和事件循环\"></a>17. 消息队列和事件循环</h2><h3 id=\"文章-16\"><a href=\"#文章-16\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">并发模型与事件循环 —— MDN</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/dong-xu/p/7000163.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 事件循环 —— 博客园</a></li>\n<li>:book: <a href=\"https://zhuanlan.zhihu.com/p/26229293\" target=\"_blank\" rel=\"noopener\">深入浅出 Javascript 事件循环机制 —— 知乎</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000014940904#articleHeader7\" target=\"_blank\" rel=\"noopener\">JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004322358\" target=\"_blank\" rel=\"noopener\">JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a6547d0f265da3e283a1df7\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"18-setTimeout-setInterval-和-requestAnimationFrame\"><a href=\"#18-setTimeout-setInterval-和-requestAnimationFrame\" class=\"headerlink\" title=\"18. setTimeout, setInterval 和 requestAnimationFrame\"></a>18. setTimeout, setInterval 和 requestAnimationFrame</h2><h3 id=\"文章-17\"><a href=\"#文章-17\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.runoob.com/jsref/met-win-settimeout.html\" target=\"_blank\" rel=\"noopener\">Window setTimeout() 方法 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"http://www.runoob.com/jsref/met-win-setinterval.html\" target=\"_blank\" rel=\"noopener\">Window setInterval() 方法 —— 菜鸟教程</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5aa4c47af265da239866e236\" target=\"_blank\" rel=\"noopener\">关于 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a77f8ce5188257a6d635d76\" target=\"_blank\" rel=\"noopener\">你不知道的 Javascript：有趣的 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5861ebf01b69e6006ce61d38\" target=\"_blank\" rel=\"noopener\">原来你是这样的 setTimeout —— 掘金</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000005989491\" target=\"_blank\" rel=\"noopener\">setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault</a></li>\n<li>book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">window.requestAnimationFrame —— MDN</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/onepixel/p/7078617.html\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame 知多少？ —— 博客园</a></li>\n<li>:book: <a href=\"https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%e5%8a%a8%e7%94%bb%e7%ae%97%e6%b3%95/\" target=\"_blank\" rel=\"noopener\">CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000014661035\" target=\"_blank\" rel=\"noopener\">「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000000386368\" target=\"_blank\" rel=\"noopener\">翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000013909430\" target=\"_blank\" rel=\"noopener\">阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault</a></li>\n</ul>\n<h3 id=\"视频-9\"><a href=\"#视频-9\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html\" target=\"_blank\" rel=\"noopener\">setTimeout 和 setInterval —— 优酷</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"19-继承-多态和代码复用\"><a href=\"#19-继承-多态和代码复用\" class=\"headerlink\" title=\"19. 继承, 多态和代码复用\"></a>19. 继承, 多态和代码复用</h2><h3 id=\"文章-18\"><a href=\"#文章-18\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/Leo_wl/p/5734794.html\" target=\"_blank\" rel=\"noopener\">JS 面向对象编程之：封装、继承、多态 —— 博客园</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/5cb692658704\" target=\"_blank\" rel=\"noopener\">Javascript 的继承与多态 —— 简书</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59396c96fe88c2006afc2707\" target=\"_blank\" rel=\"noopener\">js:面向对象编程，带你认识封装、继承和多态 —— 掘金</a></li>\n<li>:book: <a href=\"https://zhuanlan.zhihu.com/p/34693209\" target=\"_blank\" rel=\"noopener\">JavaScript 中的“多继承” —— 掘金</a></li>\n<li>:book: <a href=\"https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown\" target=\"_blank\" rel=\"noopener\">代码复用模式 —— github</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"20-按位操作符-类数组对象和类型化数组\"><a href=\"#20-按位操作符-类数组对象和类型化数组\" class=\"headerlink\" title=\"20. 按位操作符, 类数组对象和类型化数组\"></a>20. 按位操作符, 类数组对象和类型化数组</h2><h3 id=\"文章-19\"><a href=\"#文章-19\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"noopener\">按位操作符 —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays\" target=\"_blank\" rel=\"noopener\">类数组对象 —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" target=\"_blank\" rel=\"noopener\">类型化数组 —— MDN</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/gradolabs/p/4762134.html\" target=\"_blank\" rel=\"noopener\">JavaScript ArrayBuffer 浅析 —— 博客园</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"21-DOM-树和渲染过程\"><a href=\"#21-DOM-树和渲染过程\" class=\"headerlink\" title=\"21. DOM 树和渲染过程\"></a>21. DOM 树和渲染过程</h2><h3 id=\"文章-20\"><a href=\"#文章-20\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree\" target=\"_blank\" rel=\"noopener\">如何创建一个 DOM 树 —— MDN</a></li>\n<li>:book: <a href=\"http://www.w3school.com.cn/htmldom/dom_nodes.asp\" target=\"_blank\" rel=\"noopener\">HTML DOM 节点 —— W3school</a></li>\n<li>:book: <a href=\"http://javascript.ruanyifeng.com/dom/node.html\" target=\"_blank\" rel=\"noopener\">DOM 概述 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/583cbbfa61ff4b006ccc41fe\" target=\"_blank\" rel=\"noopener\">《JavaScript 闯关记》之 DOM（上）—— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/583cbc4961ff4b006ccc44fb\" target=\"_blank\" rel=\"noopener\">《JavaScript 闯关记》之 DOM（下）—— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/58314efd8ac2470061bb30fd\" target=\"_blank\" rel=\"noopener\">掌握 DOM 操作 —— 掘金</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000\" target=\"_blank\" rel=\"noopener\">操作 DOM —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c60691518825396f4f71a1\" target=\"_blank\" rel=\"noopener\">原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-10\"><a href=\"#视频-10\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://www.imooc.com/learn/488\" target=\"_blank\" rel=\"noopener\">DOM 探索之基础详解篇 —— 慕课网</a></li>\n<li>:tv: <a href=\"https://www.imooc.com/learn/138\" target=\"_blank\" rel=\"noopener\">DOM 事件探秘 —— 慕课网</a></li>\n<li>:tv: <a href=\"https://www.imooc.com/learn/530\" target=\"_blank\" rel=\"noopener\">jQuery 基础(二)DOM 篇 —— 慕课网</a></li>\n<li>:tv: <a href=\"http://www.iqiyi.com/w_19rr19s08l.html\" target=\"_blank\" rel=\"noopener\">JS 操作 DOM 对象属性和方法 —— 爱奇艺</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"22-new-与构造函数-instanceof-与实例\"><a href=\"#22-new-与构造函数-instanceof-与实例\" class=\"headerlink\" title=\"22. new 与构造函数, instanceof 与实例\"></a>22. new 与构造函数, instanceof 与实例</h2><h3 id=\"文章-21\"><a href=\"#文章-21\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://javascript.ruanyifeng.com/oop/basic.html\" target=\"_blank\" rel=\"noopener\">构造函数与 new 命令 —— 阮一峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/SpicyBoiledFish/article/details/71123162\" target=\"_blank\" rel=\"noopener\">完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN</a></li>\n<li>:book: <a href=\"http://www.php.cn/js-tutorial-376246.html\" target=\"_blank\" rel=\"noopener\">JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/yin_991/article/details/80954453\" target=\"_blank\" rel=\"noopener\">构造函数、实例、原型、原型链之间的关系 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/cecilia620/article/details/71158048\" target=\"_blank\" rel=\"noopener\">深入理解 JS—instanceof 和原型链 —— CSDN</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/15ac7393bc1f\" target=\"_blank\" rel=\"noopener\">前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书</a></li>\n<li>:book: <a href=\"https://www.jianshu.com/p/60ffc4831bff\" target=\"_blank\" rel=\"noopener\">js 用 new 实例化对象与直接调用的 this 的区别 —— 简书</a></li>\n<li>:book: <a href=\"http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html\" target=\"_blank\" rel=\"noopener\">JavaScript 并非所有的东西都是对象 —— justjavac</a></li>\n<li>:book: <a href=\"https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/\" target=\"_blank\" rel=\"noopener\">JavaScript instanceof 运算符深入剖析 —— IBM</a></li>\n</ul>\n<h3 id=\"视频-11\"><a href=\"#视频-11\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27766889.html\" target=\"_blank\" rel=\"noopener\">改良版的构造函数 —— 乐视</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"23-原型继承与原型链\"><a href=\"#23-原型继承与原型链\" class=\"headerlink\" title=\"23. 原型继承与原型链\"></a>23. 原型继承与原型链</h2><h3 id=\"文章-22\"><a href=\"#文章-22\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">继承与原型链 —— MDN</a></li>\n<li>:book: <a href=\"https://github.com/bigdots/blog/issues/1\" target=\"_blank\" rel=\"noopener\">构造函数、原型与原型链 —— github</a></li>\n<li>:book: <a href=\"https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype\" target=\"_blank\" rel=\"noopener\">原型及原型链 —— github(1269 Star)</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000004282206\" target=\"_blank\" rel=\"noopener\">理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault</a></li>\n<li>:book: <a href=\"http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html\" target=\"_blank\" rel=\"noopener\">JavaScript：继承和原型链(译) —— justjavac</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/shuiyi/p/5305435.html\" target=\"_blank\" rel=\"noopener\">三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/the__apollo/article/details/76774698\" target=\"_blank\" rel=\"noopener\">一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/xiaotao_css/article/details/72782416\" target=\"_blank\" rel=\"noopener\">JS 高级–原型链(一看就懂，但 18 岁以下请绕道) —— CSDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000\" target=\"_blank\" rel=\"noopener\">原型继承 —— 廖雪峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58f94c9bb123db411953691b\" target=\"_blank\" rel=\"noopener\">JS 原型链与继承别再被问倒了 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5885db221b69e600592253e7\" target=\"_blank\" rel=\"noopener\">征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金</a></li>\n<li>:book: <a href=\"https://github.com/mqyqingfeng/Blog/issues/2\" target=\"_blank\" rel=\"noopener\">JavaScript 深入之从原型到原型链 —— 冴羽</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/wangfupeng1988/p/3977924.html\" target=\"_blank\" rel=\"noopener\">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li>\n</ul>\n<h3 id=\"视频-12\"><a href=\"#视频-12\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://www.le.com/ptv/vplay/27552753.html\" target=\"_blank\" rel=\"noopener\">JS 高级-07-原型链继承 —— 乐视</a></li>\n<li>:tv: <a href=\"https://v.qq.com/x/page/b0511nwa7d3.html\" target=\"_blank\" rel=\"noopener\">JS 原型对象和原型链简介 —— 腾讯视频</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"24-Object-create-和-Object-assign\"><a href=\"#24-Object-create-和-Object-assign\" class=\"headerlink\" title=\"24. Object.create 和 Object.assign\"></a>24. Object.create 和 Object.assign</h2><h3 id=\"文章-23\"><a href=\"#文章-23\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\">Object.create —— MDN</a></li>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" target=\"_blank\" rel=\"noopener\">Object.assign —— MDN</a></li>\n<li>:book: <a href=\"https://www.imooc.com/article/17591\" target=\"_blank\" rel=\"noopener\">Object.create vs Object.assign —— 慕课网手记</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/DeepLies/article/details/52915143\" target=\"_blank\" rel=\"noopener\">JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN</a></li>\n<li>:book: <a href=\"http://www.onlyfordream.cn/2018/03/19/es6%E4%B8%ADobject-create%E5%92%8Cobject-assign/\" target=\"_blank\" rel=\"noopener\">es6 中 object.create()和 object.assign() —— 风信子博客</a></li>\n<li>:book: <a href=\"https://github.com/saikojosh/Object-Assign-Deep\" target=\"_blank\" rel=\"noopener\">Object-Assign-Deep —— github</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"25-工厂函数和类\"><a href=\"#25-工厂函数和类\" class=\"headerlink\" title=\"25. 工厂函数和类\"></a>25. 工厂函数和类</h2><h3 id=\"文章-24\"><a href=\"#文章-24\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener\">类 —— MDN</a></li>\n<li>:book: <a href=\"https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000\" target=\"_blank\" rel=\"noopener\">类和实例 —— 廖雪峰</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html\" target=\"_blank\" rel=\"noopener\">Javascript 定义类（class）的三种方法 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59c8c8756fb9a00a681ae5bd\" target=\"_blank\" rel=\"noopener\">【译】ES6 的工厂函数 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/587992c961ff4b0065edf1ff\" target=\"_blank\" rel=\"noopener\">JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"26-设计模式\"><a href=\"#26-设计模式\" class=\"headerlink\" title=\"26. 设计模式\"></a>26. 设计模式</h2><h3 id=\"文章-25\"><a href=\"#文章-25\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/post/59df4f74f265da430f311909\" target=\"_blank\" rel=\"noopener\">JavaScript 设计模式 —— 掘金</a></li>\n<li>:book: <a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/\" target=\"_blank\" rel=\"noopener\">学用 JavaScript 设计模式 —— 极客学院</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010914032\" target=\"_blank\" rel=\"noopener\">[面试专题]JS 设计模式 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://github.com/lxj/javascript.patterns\" target=\"_blank\" rel=\"noopener\">JavaScript Patterns 中译本 —— github</a></li>\n</ul>\n<h3 id=\"视频-13\"><a href=\"#视频-13\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html\" target=\"_blank\" rel=\"noopener\">HTML5 课程大纲 2-11JS 设计模式</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"27-Memoization\"><a href=\"#27-Memoization\" class=\"headerlink\" title=\"27. Memoization\"></a>27. Memoization</h2><h3 id=\"文章-26\"><a href=\"#文章-26\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html\" target=\"_blank\" rel=\"noopener\">JavaScript Memoization —— 司徒正美</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/yingshuizy/p/4517102.html\" target=\"_blank\" rel=\"noopener\">memoization 提升递归效率 —— 博客园</a></li>\n<li>:book: <a href=\"http://developer.51cto.com/art/201010/231513.htm\" target=\"_blank\" rel=\"noopener\">如何提升 JavaScript 的递归效率 —— 51CTO</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000016703106\" target=\"_blank\" rel=\"noopener\">JavaScript 高级技巧 Memoization —— SegmentFaut</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"28-纯函数-函数副作用和状态变化\"><a href=\"#28-纯函数-函数副作用和状态变化\" class=\"headerlink\" title=\"28. 纯函数, 函数副作用和状态变化\"></a>28. 纯函数, 函数副作用和状态变化</h2><h3 id=\"文章-27\"><a href=\"#文章-27\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://huziketang.mangojuice.top/books/react/lesson32\" target=\"_blank\" rel=\"noopener\">纯函数(Pure Function) —— React.js 小书</a></li>\n<li>:book: <a href=\"https://ninghao.net/blog/4634\" target=\"_blank\" rel=\"noopener\">JavaScript Functional Programming：纯函数 —— 宁皓网</a></li>\n<li>:book: <a href=\"https://www.jb51.net/article/28079.htm\" target=\"_blank\" rel=\"noopener\">js 函数的副作用分析 —— 脚本之家</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com\" target=\"_blank\" rel=\"noopener\">如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金</a></li>\n<li>:book: <a href=\"http://www.cnblogs.com/zhangycun/p/9403335.html\" target=\"_blank\" rel=\"noopener\">原生 JavaScript 实现 state 状态管理系统 —— 博客园</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/10\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程 —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"29-耗性能操作和时间复杂度\"><a href=\"#29-耗性能操作和时间复杂度\" class=\"headerlink\" title=\"29. 耗性能操作和时间复杂度\"></a>29. 耗性能操作和时间复杂度</h2><h3 id=\"文章-28\"><a href=\"#文章-28\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://juejin.im/entry/593f56528d6d810058a355f4\" target=\"_blank\" rel=\"noopener\">时间复杂度 O(log n) 意味着什么？ —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/entry/5a49f7d36fb9a0450a67b269\" target=\"_blank\" rel=\"noopener\">算法的时间复杂度和空间复杂度 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/58d15f1044d90400691834d4\" target=\"_blank\" rel=\"noopener\">算法（一）时间复杂度 —— 掘金</a></li>\n<li>:book: <a href=\"http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html\" target=\"_blank\" rel=\"noopener\">Big O Search Algorithms in JavaScript —— Bradley Braithwaite</a></li>\n<li>:book: <a href=\"https://www.jenniferbland.com/time-complexity-analysis-in-javascript/\" target=\"_blank\" rel=\"noopener\">Time Complexity Analysis in JavaScript — Jennifer Bland</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"30-JavaScript-引擎\"><a href=\"#30-JavaScript-引擎\" class=\"headerlink\" title=\"30. JavaScript 引擎\"></a>30. JavaScript 引擎</h2><h3 id=\"文章-29\"><a href=\"#文章-29\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://baike.baidu.com/item/javascript引擎/5356108\" target=\"_blank\" rel=\"noopener\">javascript 引擎 —— 百度百科</a></li>\n<li>:book: <a href=\"https://baike.baidu.com/item/V8/6178125\" target=\"_blank\" rel=\"noopener\">V8(JavaScript 引擎) —— 百度百科</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a6309f76fb9a01cab2858b1\" target=\"_blank\" rel=\"noopener\">图解搞懂 JavaScript 引擎 Event Loop —— 掘金</a>3</li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010819020\" target=\"_blank\" rel=\"noopener\">V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000012806637\" target=\"_blank\" rel=\"noopener\">10 分钟理解 JS 引擎的执行机制 —— SegmentFaut</a></li>\n<li>:book: <a href=\"https://www.cnblogs.com/weirdoQi/p/6609811.html\" target=\"_blank\" rel=\"noopener\">V8 javascript 引擎 —— 博客园</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"31-二进制-十六进制-十进制-科学记数法\"><a href=\"#31-二进制-十六进制-十进制-科学记数法\" class=\"headerlink\" title=\"31. 二进制, 十六进制, 十进制, 科学记数法\"></a>31. 二进制, 十六进制, 十进制, 科学记数法</h2><h3 id=\"文章-30\"><a href=\"#文章-30\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"http://www.cnblogs.com/gaizai/p/4233780.html\" target=\"_blank\" rel=\"noopener\">二、八、十、十六进制转换(图解篇) —— 博客园</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5b93dadaf265da0a857a58a3\" target=\"_blank\" rel=\"noopener\">JavaScript 读写二进制数据 —— 掘金</a></li>\n</ul>\n<h3 id=\"视频-14\"><a href=\"#视频-14\" class=\"headerlink\" title=\"视频\"></a>视频</h3><ul>\n<li>:tv: <a href=\"http://baishi.baidu.com/watch/7873060963471478456.html\" target=\"_blank\" rel=\"noopener\">二进制、十进制、十六进制互相转化很难吗？ —— 百度视频</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"32-偏函数-柯里化-Compose-和-Pipe\"><a href=\"#32-偏函数-柯里化-Compose-和-Pipe\" class=\"headerlink\" title=\"32. 偏函数, 柯里化, Compose 和 Pipe\"></a>32. 偏函数, 柯里化, Compose 和 Pipe</h2><h3 id=\"文章-31\"><a href=\"#文章-31\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://blog.csdn.net/qq_42129063/article/details/81874314\" target=\"_blank\" rel=\"noopener\">Javascript 函数式编程之偏函数 —— CSDN</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000010686144\" target=\"_blank\" rel=\"noopener\">JavaScript 专题之偏函数 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/q/1010000008626058\" target=\"_blank\" rel=\"noopener\">柯里化和偏函数有什么区别？ —— SegmentFault</a></li>\n<li>:book: <a href=\"https://blog.csdn.net/neweastsun/article/details/75947785\" target=\"_blank\" rel=\"noopener\">Javascript 偏函数与柯里化 —— CSDN</a></li>\n<li>:book: <a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html\" target=\"_blank\" rel=\"noopener\">柯里化(curry) —— JS 函数式编程指南</a></li>\n<li>:book: <a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html\" target=\"_blank\" rel=\"noopener\">代码组合(compose) —— JS 函数式编程指南</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000008394749\" target=\"_blank\" rel=\"noopener\">关于 javascript 函数式编程中 compose 的实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000011447164\" target=\"_blank\" rel=\"noopener\">实现 compose 的五种思路 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://segmentfault.com/a/1190000015102804\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault</a></li>\n<li>:book: <a href=\"https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment\" target=\"_blank\" rel=\"noopener\">JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金</a></li>\n<li>:book: <a href=\"https://github.com/BuptStEve/blog/issues/11\" target=\"_blank\" rel=\"noopener\">JavaScript 函数式编程（二） —— @BuptStEve</a></li>\n</ul>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n<h2 id=\"33-代码整洁之道\"><a href=\"#33-代码整洁之道\" class=\"headerlink\" title=\"33. 代码整洁之道\"></a>33. 代码整洁之道</h2><h3 id=\"文章-32\"><a href=\"#文章-32\" class=\"headerlink\" title=\"文章\"></a>文章</h3><ul>\n<li>:book: <a href=\"https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html\" target=\"_blank\" rel=\"noopener\">[译] JavaScript 代码整洁之道 —— 边城</a></li>\n<li>:book: <a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">Javascript 编程风格 —— 阮一峰</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9\" target=\"_blank\" rel=\"noopener\">重构 - 代码整洁之道 —— 掘金</a></li>\n<li>:book: <a href=\"https://juejin.im/post/5a7d71836fb9a063435ecf51\" target=\"_blank\" rel=\"noopener\">让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金</a></li>\n<li>:book: <a href=\"http://blog.jobbole.com/23617/\" target=\"_blank\" rel=\"noopener\">Web 前端：11 个让你代码整洁的原则 —— 伯乐在线</a></li>\n<li>:book: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">Clean Code concepts adapted for JavaScript —— ryanmcdermott</a></li>\n</ul>\n<p><br></p>\n<p><strong><a href=\"#目录\">:arrow_up: 返回目录</a></strong></p>\n<hr>\n"},{"title":"【css-tricks译文】动画demo解释 防抖、节流、rAF","date":"2020-12-29T16:00:00.000Z","description":"这三种技术用于优化事件处理函数，都很有用，且各有区别，互相补充。","toc":1,"top":0,"status":"Done","img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201230185155.png","_content":"\n原文链接：[防抖与节流的区别](https://css-tricks.com/debouncing-throttling-explained-examples/)\n\n译者注：为了文章更易理解，对原文略有改动\n\n---\n\n**防抖**与**节流**是两种相似（但不同）的技术，用于控制一定时间内函数的执行次数。\n\n当我们为`DOM`事件添加事件处理函数时，防抖或节流函数十分有用。为什么呢？因为我们并不能控制`DOM`事件被触发的频率，而防抖和节流在事件和事件处理函数之间，为我们添加了一个控制层。\n\n例如`scroll`事件，看这个demo：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll events counter\" src=\"https://codepen.io/dcorb/embed/PZOZgB?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/PZOZgB'>Scroll events counter</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n\n当使用触控板，滚轮，或者滚动条滚动时，每秒钟可以轻易地触发30个事件。但是在我的测试中，在手机中缓慢滑动屏幕，每秒可以触发多达100个事件。你能确保你的事件处理函数在这种执行频率下正常工作吗？\n\n2011年，Twitter网站上出现了一个问题：当你在向下滚动Twitter feed时，网页变得缓慢且无响应。John Resig发表了[一篇关于这个问题的博客](http://ejohn.org/blog/learning-from-twitter)，文章中解释了将消耗昂贵的函数直接附加到`scroll`事件上是多么的糟糕。\n\nJohn建议的解决方案（当时是五年前）是在`onScroll`事件之外，每隔250ms运行一个循环。这样处理程序就不会与事件耦合。通过这个简单的技术，我们可以避免破坏用户体验。\n\n现如今，有一些更复杂一些的处理事件的方法。让我给大家介绍一下`Debounce`、`Throttle`和`requestAnimationFrame`，以及相应的demo。\n\n## **Debounce 防抖**\n\n`Debounce` 防抖技术允许我们将多次连续的执行\"分组\"到一次单一的执行中。\n\n![https://i0.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce.png](https://i0.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce.png)\n\n想象一下这样的场景，你在电梯里，电梯门开始关闭，突然有另一个人想上电梯，电梯则不会运行，门会再次打开。然后又有一个人要上电梯，电梯再次延迟了它的运行（移动楼层），但优化了它的资源。\n\n可以在下面的示例中，尝试在顶部的“Trigger area”中点击或移动：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Trailing\" src=\"https://codepen.io/dcorb/embed/KVxGqN?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/KVxGqN'>Debounce. Trailing</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n在上面的示例中可以看到，`debounced`事件是如何代替一组连续快速触发事件的。但如果事件的触发有很大的时间间隔，则不会发生`debouncing`。（可以这样理解，如果一直有人要上电梯，电梯就不会运行，直到等待一定时间内无人上电梯，电梯就会开始运行，在上述的示例中，这个*等待时间*被设定为四个刻度，也就是400ms）\n\n## l**eading / immediate 参数**\n\n在上述的示例中，`debouncing`事件需要*等待*，直到事件在一定时间内停止触发，才会执行函数。这种场景与等电梯的场景吻合。\n\n如果有另一种场景，需要在事件触发时，就立即执行函数，在快速连续触发的过程中，直到有一个暂停(满足*等待时间*)，才会再次执行函数。\n\n这种需求，可以通过`leading`参数来实现：（在underscore.js中，这个参数的名称叫 `immediate` ）\n\n![https://i2.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce-leading.png](https://i2.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce-leading.png)\n\n“`leading`”防抖的demo：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Leading\" src=\"https://codepen.io/dcorb/embed/GZWqNV?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/GZWqNV'>Debounce. Leading</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n## **Debounce 实现**\n\n我第一次看到debounce的Javascript实现是2009年，在[John Hann的这篇文章](http://unscriptable.com/2009/03/20/debouncing-javascript-methods/)中（他也是这个词的发明者）。\n\n不久之后，Ben Alman创建了[一个jQuery插件](http://benalman.com/projects/jquery-throttle-debounce-plugin/)（不再维护），一年之后，Jeremy Ashkenas将其[添加到了underscore.js]()中。后来，它又被添加到Lodash中，成为undererscore的替代方案。\n\n这3种实现内部有些不同，但它们的接口都差不多。\n\n曾经有一段时间，在我于2013年发现`_.debounce`函数中的[一个bug]()之后，underscore采用了Lodash的`debounce` / `throttle`实现。从那时起，两种实现都有了长足的发展。\n\nLodash在其`_.debounce`和`_.throttle`函数中 [增加了](https://lodash.com/docs#debounce) 更多的功能。原来的`immediate` 标志被替换为`leading` 和`trailing` 选项。你可以选择启用一个，或者两个。默认情况下，只有`trailing` 被启用。（leading可以理解为，在一组连续触发事件的起始，就调用函数；而trailing，则是在一组连续触发事件的末尾，经过*等待时间*后，执行函数）\n\n还有一个新的`maxWait`选项（目前只在Lodash中使用）在本文中没有涉及，但它可能非常有用。\n\n实际上，在Lodash的源码种，`throttle`节流函数是用通过`_.debounce`和`maxWait`选项来定义的。\n\n## **Debounce 实例**\n\n### **Resize 实例**\n\n当调整(桌面端)浏览器窗口的大小时，可能会触发许多的`resize`事件。\n\n可以在下面的demo中看到：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce Resize Event Example\" src=\"https://codepen.io/dcorb/embed/XXPjpd?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/XXPjpd'>Debounce Resize Event Example</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n如你所见，上面的例子中，启用了默认的`trailing`选项，因为我们只关心用户停止resize后的最终值。\n\n### 带有AJAX请求的自动填充输入框的输入事件\n\n有一些场景例如等待用户停止输入后再验证其输入，反馈验证信息。这种场景下 `_.debounce`可以实现：只有当用户停止输入时才发送请求。\n\n此时，`leading` 标志没有意义，因为我们需要等待至最后的输入。\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debouncing keystrokes Example\" src=\"https://codepen.io/dcorb/embed/mVGVOL?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/mVGVOL'>Debouncing keystrokes Example</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n## 如何使用**debounce 和 throttle 以及 常见陷阱**\n\n你可以自己写`debounce`/`throttle`函数，或者从一些随机的博客文章中复制它，但我的建议是直接使用 `underscore` 或 `Lodash`库。\n\n如果你只需要`_.debounce`和`_.throttle`函数，你可以使用Lodash自定义构建器来输出一个自定义的2KB minified库。下面时构建命令：\n\n```bash\nnpm i -g lodash-cli\nlodash include = debounce, throttle\n```\n\n也就是说，大多数人都是通过webpack/browserify/rollup工具，使用模块化形式的`lodash/throttle`和`lodash/debounce`或`lodash.throttle`和`lodash.debounce`包。\n\n一个常见的陷阱是，多次调用`_.debounce` 函数：\n\n```\n// WRONG\n$(window).on('scroll', function() {\n   _.debounce(doSomething, 300); \n});\n\n// RIGHT\n$(window).on('scroll', _.debounce(doSomething, 200));\n```\n\n在lodash 和 underscore.js中，为debounced饭都处理过的函数创建一个变量，可以调用私有方法 `debounced_version.cancel()`\n\n```\nvar debounced_version = _.debounce(doSomething, 200);\n$(window).on('scroll', debounced_version);\n\n// If you need it\ndebounced_version.cancel();\n```\n\n## **Throttle 节流**\n\n通过使用 `_.throttle`, 可以限制函数在 X 毫秒内，最多只能执行一次。\n\n与`debouncing`的主要区别在于，节流保证了函数的定期执行，至少每X毫秒一次。\n\n## **Throttling 实例**\n\n### **无限滚动**\n\n举一个很常见的例子，用户正在向下滚动你的无限滚动页面。你需要检查用户离底部有多远。如果用户在底部附近，我们应该通过Ajax请求更多的内容，并将其添加到页面中。\n\n在这种场景下，`_.debounce`就不适用了，它只有在用户停止滚动时才会触发......而我们需要在用户到达底部之前开始获取内容。而`_.throttle`可以保证我们不断地检查用户离底部有多远。\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Infinite scrolling throttled\" src=\"https://codepen.io/dcorb/embed/eJLMxa?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/eJLMxa'>Infinite scrolling throttled</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n## **requestAnimationFrame (rAF)**\n\n`requestAnimationFrame` 是限制函数执行速度的另一种方式。\n\n它相当于`_.throttle(dosomething, 16)`，但保真度要高很多，因为它是浏览器原生的API，拥有更好的准确性。\n\n可以考虑使用`rAF` API，作为节流函数的替代品，以下是它的优缺点：\n\n### 优点：\n\n- 目标为60fps(即每秒60帧)，但是由浏览器内部机制决定如何安排渲染的最佳时间。\n- 更简单和更标准的API，未来不会改变，更好维护。\n\n### 缺点：\n\n- rAFs的启用/取消是我们的责任，不像`debounce`或`throttle`，是内部管理的。\n- 如果浏览器标签页未激活，它就不会被执行。（对于滚动、鼠标或键盘事件来说，这并不重要）。\n- 虽然所有的现代浏览器都提供了RAF，但在IE9、Opera Mini和旧的Android中仍然不支持。仍然需要[polyfill](https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/) 。\n\n根据经验来讲，如果我的JavaScript函数是 \"绘画 \"，或者会直接变更动画相关属性，我会使用`requestAnimationFrame`，以及在一切涉及重新计算元素位置的地方使用它。\n\n如果要进行Ajax请求，或者决定是否添加/删除一个class（可能会触发CSS动画），我会考虑`_.debounce`或`_.throttle`，因为可以设置更低的执行速率（例如200ms，而不是16ms）。\n\n### **rAF 实例**\n\n这个demo灵感来自于 [Paul Lewis的文章](https://www.html5rocks.com/en/tutorials/speed/animations/), 文章做他详细解释了demo中的原理和逻辑。\n\n我把`rAF`和  `16ms 的_.throttle` 放在一起进行了比较，结果是它们的性能相似。但是在更复杂的情况下，rAF可能性能会更高。\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll comparison requestAnimationFrame vs throttle\" src=\"https://codepen.io/dcorb/embed/pgOKKw?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/pgOKKw'>Scroll comparison requestAnimationFrame vs throttle</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n我在headroom.js库里见到过`rAF`技术更高级的实例，其中的 [逻辑被解耦](https://github.com/WickyNilliams/headroom.js/blob/3282c23bc69b14f21bfbaf66704fa37b58e3241d/src/Debouncer.js) 并且被包装在了对象中。\n\n## 总结\n\n`debounce`防抖, `throttle` 节流和 `requestAnimationFrame` 可以用来优化事件处理函数，三种技术都很有用，且各有区别，互相补充：\n\n- **debounce防抖:** 将快速连续的多次事件触发分组，归为一次执行。\n- **throttle节流:** 确保每隔X 毫秒就有一次稳定的执行，例如每200ms检查一次用户滚动位置以触发一个CSS动画。\n- **requestAnimationFrame:** 节流函数的16ms替代选择。更适用于在页面上重新计算/渲染元素的函数，能得到更平滑的动画。但是注意: IE9 不支持。","source":"_posts/debounce_raf.md","raw":"---\ntitle: 【css-tricks译文】动画demo解释 防抖、节流、rAF\ncategories:\n    - 10技术 | 前端性能\ntags:\ndate: 2020-12-30\ndescription: 这三种技术用于优化事件处理函数，都很有用，且各有区别，互相补充。\ntoc: 1\ntop: 0\nstatus: Done\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201230185155.png\n---\n\n原文链接：[防抖与节流的区别](https://css-tricks.com/debouncing-throttling-explained-examples/)\n\n译者注：为了文章更易理解，对原文略有改动\n\n---\n\n**防抖**与**节流**是两种相似（但不同）的技术，用于控制一定时间内函数的执行次数。\n\n当我们为`DOM`事件添加事件处理函数时，防抖或节流函数十分有用。为什么呢？因为我们并不能控制`DOM`事件被触发的频率，而防抖和节流在事件和事件处理函数之间，为我们添加了一个控制层。\n\n例如`scroll`事件，看这个demo：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll events counter\" src=\"https://codepen.io/dcorb/embed/PZOZgB?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/PZOZgB'>Scroll events counter</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n\n当使用触控板，滚轮，或者滚动条滚动时，每秒钟可以轻易地触发30个事件。但是在我的测试中，在手机中缓慢滑动屏幕，每秒可以触发多达100个事件。你能确保你的事件处理函数在这种执行频率下正常工作吗？\n\n2011年，Twitter网站上出现了一个问题：当你在向下滚动Twitter feed时，网页变得缓慢且无响应。John Resig发表了[一篇关于这个问题的博客](http://ejohn.org/blog/learning-from-twitter)，文章中解释了将消耗昂贵的函数直接附加到`scroll`事件上是多么的糟糕。\n\nJohn建议的解决方案（当时是五年前）是在`onScroll`事件之外，每隔250ms运行一个循环。这样处理程序就不会与事件耦合。通过这个简单的技术，我们可以避免破坏用户体验。\n\n现如今，有一些更复杂一些的处理事件的方法。让我给大家介绍一下`Debounce`、`Throttle`和`requestAnimationFrame`，以及相应的demo。\n\n## **Debounce 防抖**\n\n`Debounce` 防抖技术允许我们将多次连续的执行\"分组\"到一次单一的执行中。\n\n![https://i0.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce.png](https://i0.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce.png)\n\n想象一下这样的场景，你在电梯里，电梯门开始关闭，突然有另一个人想上电梯，电梯则不会运行，门会再次打开。然后又有一个人要上电梯，电梯再次延迟了它的运行（移动楼层），但优化了它的资源。\n\n可以在下面的示例中，尝试在顶部的“Trigger area”中点击或移动：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Trailing\" src=\"https://codepen.io/dcorb/embed/KVxGqN?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/KVxGqN'>Debounce. Trailing</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n在上面的示例中可以看到，`debounced`事件是如何代替一组连续快速触发事件的。但如果事件的触发有很大的时间间隔，则不会发生`debouncing`。（可以这样理解，如果一直有人要上电梯，电梯就不会运行，直到等待一定时间内无人上电梯，电梯就会开始运行，在上述的示例中，这个*等待时间*被设定为四个刻度，也就是400ms）\n\n## l**eading / immediate 参数**\n\n在上述的示例中，`debouncing`事件需要*等待*，直到事件在一定时间内停止触发，才会执行函数。这种场景与等电梯的场景吻合。\n\n如果有另一种场景，需要在事件触发时，就立即执行函数，在快速连续触发的过程中，直到有一个暂停(满足*等待时间*)，才会再次执行函数。\n\n这种需求，可以通过`leading`参数来实现：（在underscore.js中，这个参数的名称叫 `immediate` ）\n\n![https://i2.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce-leading.png](https://i2.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce-leading.png)\n\n“`leading`”防抖的demo：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Leading\" src=\"https://codepen.io/dcorb/embed/GZWqNV?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/GZWqNV'>Debounce. Leading</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n## **Debounce 实现**\n\n我第一次看到debounce的Javascript实现是2009年，在[John Hann的这篇文章](http://unscriptable.com/2009/03/20/debouncing-javascript-methods/)中（他也是这个词的发明者）。\n\n不久之后，Ben Alman创建了[一个jQuery插件](http://benalman.com/projects/jquery-throttle-debounce-plugin/)（不再维护），一年之后，Jeremy Ashkenas将其[添加到了underscore.js]()中。后来，它又被添加到Lodash中，成为undererscore的替代方案。\n\n这3种实现内部有些不同，但它们的接口都差不多。\n\n曾经有一段时间，在我于2013年发现`_.debounce`函数中的[一个bug]()之后，underscore采用了Lodash的`debounce` / `throttle`实现。从那时起，两种实现都有了长足的发展。\n\nLodash在其`_.debounce`和`_.throttle`函数中 [增加了](https://lodash.com/docs#debounce) 更多的功能。原来的`immediate` 标志被替换为`leading` 和`trailing` 选项。你可以选择启用一个，或者两个。默认情况下，只有`trailing` 被启用。（leading可以理解为，在一组连续触发事件的起始，就调用函数；而trailing，则是在一组连续触发事件的末尾，经过*等待时间*后，执行函数）\n\n还有一个新的`maxWait`选项（目前只在Lodash中使用）在本文中没有涉及，但它可能非常有用。\n\n实际上，在Lodash的源码种，`throttle`节流函数是用通过`_.debounce`和`maxWait`选项来定义的。\n\n## **Debounce 实例**\n\n### **Resize 实例**\n\n当调整(桌面端)浏览器窗口的大小时，可能会触发许多的`resize`事件。\n\n可以在下面的demo中看到：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce Resize Event Example\" src=\"https://codepen.io/dcorb/embed/XXPjpd?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/XXPjpd'>Debounce Resize Event Example</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n如你所见，上面的例子中，启用了默认的`trailing`选项，因为我们只关心用户停止resize后的最终值。\n\n### 带有AJAX请求的自动填充输入框的输入事件\n\n有一些场景例如等待用户停止输入后再验证其输入，反馈验证信息。这种场景下 `_.debounce`可以实现：只有当用户停止输入时才发送请求。\n\n此时，`leading` 标志没有意义，因为我们需要等待至最后的输入。\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debouncing keystrokes Example\" src=\"https://codepen.io/dcorb/embed/mVGVOL?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/mVGVOL'>Debouncing keystrokes Example</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n## 如何使用**debounce 和 throttle 以及 常见陷阱**\n\n你可以自己写`debounce`/`throttle`函数，或者从一些随机的博客文章中复制它，但我的建议是直接使用 `underscore` 或 `Lodash`库。\n\n如果你只需要`_.debounce`和`_.throttle`函数，你可以使用Lodash自定义构建器来输出一个自定义的2KB minified库。下面时构建命令：\n\n```bash\nnpm i -g lodash-cli\nlodash include = debounce, throttle\n```\n\n也就是说，大多数人都是通过webpack/browserify/rollup工具，使用模块化形式的`lodash/throttle`和`lodash/debounce`或`lodash.throttle`和`lodash.debounce`包。\n\n一个常见的陷阱是，多次调用`_.debounce` 函数：\n\n```\n// WRONG\n$(window).on('scroll', function() {\n   _.debounce(doSomething, 300); \n});\n\n// RIGHT\n$(window).on('scroll', _.debounce(doSomething, 200));\n```\n\n在lodash 和 underscore.js中，为debounced饭都处理过的函数创建一个变量，可以调用私有方法 `debounced_version.cancel()`\n\n```\nvar debounced_version = _.debounce(doSomething, 200);\n$(window).on('scroll', debounced_version);\n\n// If you need it\ndebounced_version.cancel();\n```\n\n## **Throttle 节流**\n\n通过使用 `_.throttle`, 可以限制函数在 X 毫秒内，最多只能执行一次。\n\n与`debouncing`的主要区别在于，节流保证了函数的定期执行，至少每X毫秒一次。\n\n## **Throttling 实例**\n\n### **无限滚动**\n\n举一个很常见的例子，用户正在向下滚动你的无限滚动页面。你需要检查用户离底部有多远。如果用户在底部附近，我们应该通过Ajax请求更多的内容，并将其添加到页面中。\n\n在这种场景下，`_.debounce`就不适用了，它只有在用户停止滚动时才会触发......而我们需要在用户到达底部之前开始获取内容。而`_.throttle`可以保证我们不断地检查用户离底部有多远。\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Infinite scrolling throttled\" src=\"https://codepen.io/dcorb/embed/eJLMxa?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/eJLMxa'>Infinite scrolling throttled</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n## **requestAnimationFrame (rAF)**\n\n`requestAnimationFrame` 是限制函数执行速度的另一种方式。\n\n它相当于`_.throttle(dosomething, 16)`，但保真度要高很多，因为它是浏览器原生的API，拥有更好的准确性。\n\n可以考虑使用`rAF` API，作为节流函数的替代品，以下是它的优缺点：\n\n### 优点：\n\n- 目标为60fps(即每秒60帧)，但是由浏览器内部机制决定如何安排渲染的最佳时间。\n- 更简单和更标准的API，未来不会改变，更好维护。\n\n### 缺点：\n\n- rAFs的启用/取消是我们的责任，不像`debounce`或`throttle`，是内部管理的。\n- 如果浏览器标签页未激活，它就不会被执行。（对于滚动、鼠标或键盘事件来说，这并不重要）。\n- 虽然所有的现代浏览器都提供了RAF，但在IE9、Opera Mini和旧的Android中仍然不支持。仍然需要[polyfill](https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/) 。\n\n根据经验来讲，如果我的JavaScript函数是 \"绘画 \"，或者会直接变更动画相关属性，我会使用`requestAnimationFrame`，以及在一切涉及重新计算元素位置的地方使用它。\n\n如果要进行Ajax请求，或者决定是否添加/删除一个class（可能会触发CSS动画），我会考虑`_.debounce`或`_.throttle`，因为可以设置更低的执行速率（例如200ms，而不是16ms）。\n\n### **rAF 实例**\n\n这个demo灵感来自于 [Paul Lewis的文章](https://www.html5rocks.com/en/tutorials/speed/animations/), 文章做他详细解释了demo中的原理和逻辑。\n\n我把`rAF`和  `16ms 的_.throttle` 放在一起进行了比较，结果是它们的性能相似。但是在更复杂的情况下，rAF可能性能会更高。\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll comparison requestAnimationFrame vs throttle\" src=\"https://codepen.io/dcorb/embed/pgOKKw?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/pgOKKw'>Scroll comparison requestAnimationFrame vs throttle</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n我在headroom.js库里见到过`rAF`技术更高级的实例，其中的 [逻辑被解耦](https://github.com/WickyNilliams/headroom.js/blob/3282c23bc69b14f21bfbaf66704fa37b58e3241d/src/Debouncer.js) 并且被包装在了对象中。\n\n## 总结\n\n`debounce`防抖, `throttle` 节流和 `requestAnimationFrame` 可以用来优化事件处理函数，三种技术都很有用，且各有区别，互相补充：\n\n- **debounce防抖:** 将快速连续的多次事件触发分组，归为一次执行。\n- **throttle节流:** 确保每隔X 毫秒就有一次稳定的执行，例如每200ms检查一次用户滚动位置以触发一个CSS动画。\n- **requestAnimationFrame:** 节流函数的16ms替代选择。更适用于在页面上重新计算/渲染元素的函数，能得到更平滑的动画。但是注意: IE9 不支持。","slug":"debounce_raf","published":1,"updated":"2021-01-22T10:00:05.033Z","_id":"ckjbb32ab0000ggy67apv3ljt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>原文链接：<a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">防抖与节流的区别</a></p>\n<p>译者注：为了文章更易理解，对原文略有改动</p>\n<hr>\n<p><strong>防抖</strong>与<strong>节流</strong>是两种相似（但不同）的技术，用于控制一定时间内函数的执行次数。</p>\n<p>当我们为<code>DOM</code>事件添加事件处理函数时，防抖或节流函数十分有用。为什么呢？因为我们并不能控制<code>DOM</code>事件被触发的频率，而防抖和节流在事件和事件处理函数之间，为我们添加了一个控制层。</p>\n<p>例如<code>scroll</code>事件，看这个demo：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll events counter\" src=\"https://codepen.io/dcorb/embed/PZOZgB?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/PZOZgB\" target=\"_blank\" rel=\"noopener\">Scroll events counter</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n\n<p>当使用触控板，滚轮，或者滚动条滚动时，每秒钟可以轻易地触发30个事件。但是在我的测试中，在手机中缓慢滑动屏幕，每秒可以触发多达100个事件。你能确保你的事件处理函数在这种执行频率下正常工作吗？</p>\n<p>2011年，Twitter网站上出现了一个问题：当你在向下滚动Twitter feed时，网页变得缓慢且无响应。John Resig发表了<a href=\"http://ejohn.org/blog/learning-from-twitter\" target=\"_blank\" rel=\"noopener\">一篇关于这个问题的博客</a>，文章中解释了将消耗昂贵的函数直接附加到<code>scroll</code>事件上是多么的糟糕。</p>\n<p>John建议的解决方案（当时是五年前）是在<code>onScroll</code>事件之外，每隔250ms运行一个循环。这样处理程序就不会与事件耦合。通过这个简单的技术，我们可以避免破坏用户体验。</p>\n<p>现如今，有一些更复杂一些的处理事件的方法。让我给大家介绍一下<code>Debounce</code>、<code>Throttle</code>和<code>requestAnimationFrame</code>，以及相应的demo。</p>\n<h2 id=\"Debounce-防抖\"><a href=\"#Debounce-防抖\" class=\"headerlink\" title=\"Debounce 防抖\"></a><strong>Debounce 防抖</strong></h2><p><code>Debounce</code> 防抖技术允许我们将多次连续的执行”分组”到一次单一的执行中。</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce.png\" alt=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce.png\"></p>\n<p>想象一下这样的场景，你在电梯里，电梯门开始关闭，突然有另一个人想上电梯，电梯则不会运行，门会再次打开。然后又有一个人要上电梯，电梯再次延迟了它的运行（移动楼层），但优化了它的资源。</p>\n<p>可以在下面的示例中，尝试在顶部的“Trigger area”中点击或移动：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Trailing\" src=\"https://codepen.io/dcorb/embed/KVxGqN?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/KVxGqN\" target=\"_blank\" rel=\"noopener\">Debounce. Trailing</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<p>在上面的示例中可以看到，<code>debounced</code>事件是如何代替一组连续快速触发事件的。但如果事件的触发有很大的时间间隔，则不会发生<code>debouncing</code>。（可以这样理解，如果一直有人要上电梯，电梯就不会运行，直到等待一定时间内无人上电梯，电梯就会开始运行，在上述的示例中，这个<em>等待时间</em>被设定为四个刻度，也就是400ms）</p>\n<h2 id=\"leading-immediate-参数\"><a href=\"#leading-immediate-参数\" class=\"headerlink\" title=\"leading / immediate 参数\"></a>l<strong>eading / immediate 参数</strong></h2><p>在上述的示例中，<code>debouncing</code>事件需要<em>等待</em>，直到事件在一定时间内停止触发，才会执行函数。这种场景与等电梯的场景吻合。</p>\n<p>如果有另一种场景，需要在事件触发时，就立即执行函数，在快速连续触发的过程中，直到有一个暂停(满足<em>等待时间</em>)，才会再次执行函数。</p>\n<p>这种需求，可以通过<code>leading</code>参数来实现：（在underscore.js中，这个参数的名称叫 <code>immediate</code> ）</p>\n<p><img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce-leading.png\" alt=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce-leading.png\"></p>\n<p>“<code>leading</code>”防抖的demo：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Leading\" src=\"https://codepen.io/dcorb/embed/GZWqNV?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/GZWqNV\" target=\"_blank\" rel=\"noopener\">Debounce. Leading</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<h2 id=\"Debounce-实现\"><a href=\"#Debounce-实现\" class=\"headerlink\" title=\"Debounce 实现\"></a><strong>Debounce 实现</strong></h2><p>我第一次看到debounce的Javascript实现是2009年，在<a href=\"http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\" target=\"_blank\" rel=\"noopener\">John Hann的这篇文章</a>中（他也是这个词的发明者）。</p>\n<p>不久之后，Ben Alman创建了<a href=\"http://benalman.com/projects/jquery-throttle-debounce-plugin/\" target=\"_blank\" rel=\"noopener\">一个jQuery插件</a>（不再维护），一年之后，Jeremy Ashkenas将其<a href>添加到了underscore.js</a>中。后来，它又被添加到Lodash中，成为undererscore的替代方案。</p>\n<p>这3种实现内部有些不同，但它们的接口都差不多。</p>\n<p>曾经有一段时间，在我于2013年发现<code>_.debounce</code>函数中的<a href>一个bug</a>之后，underscore采用了Lodash的<code>debounce</code> / <code>throttle</code>实现。从那时起，两种实现都有了长足的发展。</p>\n<p>Lodash在其<code>_.debounce</code>和<code>_.throttle</code>函数中 <a href=\"https://lodash.com/docs#debounce\" target=\"_blank\" rel=\"noopener\">增加了</a> 更多的功能。原来的<code>immediate</code> 标志被替换为<code>leading</code> 和<code>trailing</code> 选项。你可以选择启用一个，或者两个。默认情况下，只有<code>trailing</code> 被启用。（leading可以理解为，在一组连续触发事件的起始，就调用函数；而trailing，则是在一组连续触发事件的末尾，经过<em>等待时间</em>后，执行函数）</p>\n<p>还有一个新的<code>maxWait</code>选项（目前只在Lodash中使用）在本文中没有涉及，但它可能非常有用。</p>\n<p>实际上，在Lodash的源码种，<code>throttle</code>节流函数是用通过<code>_.debounce</code>和<code>maxWait</code>选项来定义的。</p>\n<h2 id=\"Debounce-实例\"><a href=\"#Debounce-实例\" class=\"headerlink\" title=\"Debounce 实例\"></a><strong>Debounce 实例</strong></h2><h3 id=\"Resize-实例\"><a href=\"#Resize-实例\" class=\"headerlink\" title=\"Resize 实例\"></a><strong>Resize 实例</strong></h3><p>当调整(桌面端)浏览器窗口的大小时，可能会触发许多的<code>resize</code>事件。</p>\n<p>可以在下面的demo中看到：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce Resize Event Example\" src=\"https://codepen.io/dcorb/embed/XXPjpd?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/XXPjpd\" target=\"_blank\" rel=\"noopener\">Debounce Resize Event Example</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<p>如你所见，上面的例子中，启用了默认的<code>trailing</code>选项，因为我们只关心用户停止resize后的最终值。</p>\n<h3 id=\"带有AJAX请求的自动填充输入框的输入事件\"><a href=\"#带有AJAX请求的自动填充输入框的输入事件\" class=\"headerlink\" title=\"带有AJAX请求的自动填充输入框的输入事件\"></a>带有AJAX请求的自动填充输入框的输入事件</h3><p>有一些场景例如等待用户停止输入后再验证其输入，反馈验证信息。这种场景下 <code>_.debounce</code>可以实现：只有当用户停止输入时才发送请求。</p>\n<p>此时，<code>leading</code> 标志没有意义，因为我们需要等待至最后的输入。</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debouncing keystrokes Example\" src=\"https://codepen.io/dcorb/embed/mVGVOL?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/mVGVOL\" target=\"_blank\" rel=\"noopener\">Debouncing keystrokes Example</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<h2 id=\"如何使用debounce-和-throttle-以及-常见陷阱\"><a href=\"#如何使用debounce-和-throttle-以及-常见陷阱\" class=\"headerlink\" title=\"如何使用debounce 和 throttle 以及 常见陷阱\"></a>如何使用<strong>debounce 和 throttle 以及 常见陷阱</strong></h2><p>你可以自己写<code>debounce</code>/<code>throttle</code>函数，或者从一些随机的博客文章中复制它，但我的建议是直接使用 <code>underscore</code> 或 <code>Lodash</code>库。</p>\n<p>如果你只需要<code>_.debounce</code>和<code>_.throttle</code>函数，你可以使用Lodash自定义构建器来输出一个自定义的2KB minified库。下面时构建命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g lodash-cli</span><br><span class=\"line\">lodash include = debounce, throttle</span><br></pre></td></tr></table></figure>\n<p>也就是说，大多数人都是通过webpack/browserify/rollup工具，使用模块化形式的<code>lodash/throttle</code>和<code>lodash/debounce</code>或<code>lodash.throttle</code>和<code>lodash.debounce</code>包。</p>\n<p>一个常见的陷阱是，多次调用<code>_.debounce</code> 函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// WRONG</span><br><span class=\"line\">$(window).on(&apos;scroll&apos;, function() &#123;</span><br><span class=\"line\">   _.debounce(doSomething, 300); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// RIGHT</span><br><span class=\"line\">$(window).on(&apos;scroll&apos;, _.debounce(doSomething, 200));</span><br></pre></td></tr></table></figure>\n<p>在lodash 和 underscore.js中，为debounced饭都处理过的函数创建一个变量，可以调用私有方法 <code>debounced_version.cancel()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var debounced_version = _.debounce(doSomething, 200);</span><br><span class=\"line\">$(window).on(&apos;scroll&apos;, debounced_version);</span><br><span class=\"line\"></span><br><span class=\"line\">// If you need it</span><br><span class=\"line\">debounced_version.cancel();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Throttle-节流\"><a href=\"#Throttle-节流\" class=\"headerlink\" title=\"Throttle 节流\"></a><strong>Throttle 节流</strong></h2><p>通过使用 <code>_.throttle</code>, 可以限制函数在 X 毫秒内，最多只能执行一次。</p>\n<p>与<code>debouncing</code>的主要区别在于，节流保证了函数的定期执行，至少每X毫秒一次。</p>\n<h2 id=\"Throttling-实例\"><a href=\"#Throttling-实例\" class=\"headerlink\" title=\"Throttling 实例\"></a><strong>Throttling 实例</strong></h2><h3 id=\"无限滚动\"><a href=\"#无限滚动\" class=\"headerlink\" title=\"无限滚动\"></a><strong>无限滚动</strong></h3><p>举一个很常见的例子，用户正在向下滚动你的无限滚动页面。你需要检查用户离底部有多远。如果用户在底部附近，我们应该通过Ajax请求更多的内容，并将其添加到页面中。</p>\n<p>在这种场景下，<code>_.debounce</code>就不适用了，它只有在用户停止滚动时才会触发……而我们需要在用户到达底部之前开始获取内容。而<code>_.throttle</code>可以保证我们不断地检查用户离底部有多远。</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Infinite scrolling throttled\" src=\"https://codepen.io/dcorb/embed/eJLMxa?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/eJLMxa\" target=\"_blank\" rel=\"noopener\">Infinite scrolling throttled</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<h2 id=\"requestAnimationFrame-rAF\"><a href=\"#requestAnimationFrame-rAF\" class=\"headerlink\" title=\"requestAnimationFrame (rAF)\"></a><strong>requestAnimationFrame (rAF)</strong></h2><p><code>requestAnimationFrame</code> 是限制函数执行速度的另一种方式。</p>\n<p>它相当于<code>_.throttle(dosomething, 16)</code>，但保真度要高很多，因为它是浏览器原生的API，拥有更好的准确性。</p>\n<p>可以考虑使用<code>rAF</code> API，作为节流函数的替代品，以下是它的优缺点：</p>\n<h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ul>\n<li>目标为60fps(即每秒60帧)，但是由浏览器内部机制决定如何安排渲染的最佳时间。</li>\n<li>更简单和更标准的API，未来不会改变，更好维护。</li>\n</ul>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ul>\n<li>rAFs的启用/取消是我们的责任，不像<code>debounce</code>或<code>throttle</code>，是内部管理的。</li>\n<li>如果浏览器标签页未激活，它就不会被执行。（对于滚动、鼠标或键盘事件来说，这并不重要）。</li>\n<li>虽然所有的现代浏览器都提供了RAF，但在IE9、Opera Mini和旧的Android中仍然不支持。仍然需要<a href=\"https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\" target=\"_blank\" rel=\"noopener\">polyfill</a> 。</li>\n</ul>\n<p>根据经验来讲，如果我的JavaScript函数是 “绘画 “，或者会直接变更动画相关属性，我会使用<code>requestAnimationFrame</code>，以及在一切涉及重新计算元素位置的地方使用它。</p>\n<p>如果要进行Ajax请求，或者决定是否添加/删除一个class（可能会触发CSS动画），我会考虑<code>_.debounce</code>或<code>_.throttle</code>，因为可以设置更低的执行速率（例如200ms，而不是16ms）。</p>\n<h3 id=\"rAF-实例\"><a href=\"#rAF-实例\" class=\"headerlink\" title=\"rAF 实例\"></a><strong>rAF 实例</strong></h3><p>这个demo灵感来自于 <a href=\"https://www.html5rocks.com/en/tutorials/speed/animations/\" target=\"_blank\" rel=\"noopener\">Paul Lewis的文章</a>, 文章做他详细解释了demo中的原理和逻辑。</p>\n<p>我把<code>rAF</code>和  <code>16ms 的_.throttle</code> 放在一起进行了比较，结果是它们的性能相似。但是在更复杂的情况下，rAF可能性能会更高。</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll comparison requestAnimationFrame vs throttle\" src=\"https://codepen.io/dcorb/embed/pgOKKw?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/pgOKKw\" target=\"_blank\" rel=\"noopener\">Scroll comparison requestAnimationFrame vs throttle</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<p>我在headroom.js库里见到过<code>rAF</code>技术更高级的实例，其中的 <a href=\"https://github.com/WickyNilliams/headroom.js/blob/3282c23bc69b14f21bfbaf66704fa37b58e3241d/src/Debouncer.js\" target=\"_blank\" rel=\"noopener\">逻辑被解耦</a> 并且被包装在了对象中。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>debounce</code>防抖, <code>throttle</code> 节流和 <code>requestAnimationFrame</code> 可以用来优化事件处理函数，三种技术都很有用，且各有区别，互相补充：</p>\n<ul>\n<li><strong>debounce防抖:</strong> 将快速连续的多次事件触发分组，归为一次执行。</li>\n<li><strong>throttle节流:</strong> 确保每隔X 毫秒就有一次稳定的执行，例如每200ms检查一次用户滚动位置以触发一个CSS动画。</li>\n<li><strong>requestAnimationFrame:</strong> 节流函数的16ms替代选择。更适用于在页面上重新计算/渲染元素的函数，能得到更平滑的动画。但是注意: IE9 不支持。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" rel=\"noopener\">防抖与节流的区别</a></p>\n<p>译者注：为了文章更易理解，对原文略有改动</p>\n<hr>\n<p><strong>防抖</strong>与<strong>节流</strong>是两种相似（但不同）的技术，用于控制一定时间内函数的执行次数。</p>\n<p>当我们为<code>DOM</code>事件添加事件处理函数时，防抖或节流函数十分有用。为什么呢？因为我们并不能控制<code>DOM</code>事件被触发的频率，而防抖和节流在事件和事件处理函数之间，为我们添加了一个控制层。</p>\n<p>例如<code>scroll</code>事件，看这个demo：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll events counter\" src=\"https://codepen.io/dcorb/embed/PZOZgB?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/PZOZgB\" target=\"_blank\" rel=\"noopener\">Scroll events counter</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n\n<p>当使用触控板，滚轮，或者滚动条滚动时，每秒钟可以轻易地触发30个事件。但是在我的测试中，在手机中缓慢滑动屏幕，每秒可以触发多达100个事件。你能确保你的事件处理函数在这种执行频率下正常工作吗？</p>\n<p>2011年，Twitter网站上出现了一个问题：当你在向下滚动Twitter feed时，网页变得缓慢且无响应。John Resig发表了<a href=\"http://ejohn.org/blog/learning-from-twitter\" target=\"_blank\" rel=\"noopener\">一篇关于这个问题的博客</a>，文章中解释了将消耗昂贵的函数直接附加到<code>scroll</code>事件上是多么的糟糕。</p>\n<p>John建议的解决方案（当时是五年前）是在<code>onScroll</code>事件之外，每隔250ms运行一个循环。这样处理程序就不会与事件耦合。通过这个简单的技术，我们可以避免破坏用户体验。</p>\n<p>现如今，有一些更复杂一些的处理事件的方法。让我给大家介绍一下<code>Debounce</code>、<code>Throttle</code>和<code>requestAnimationFrame</code>，以及相应的demo。</p>\n<h2 id=\"Debounce-防抖\"><a href=\"#Debounce-防抖\" class=\"headerlink\" title=\"Debounce 防抖\"></a><strong>Debounce 防抖</strong></h2><p><code>Debounce</code> 防抖技术允许我们将多次连续的执行”分组”到一次单一的执行中。</p>\n<p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce.png\" alt=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce.png\"></p>\n<p>想象一下这样的场景，你在电梯里，电梯门开始关闭，突然有另一个人想上电梯，电梯则不会运行，门会再次打开。然后又有一个人要上电梯，电梯再次延迟了它的运行（移动楼层），但优化了它的资源。</p>\n<p>可以在下面的示例中，尝试在顶部的“Trigger area”中点击或移动：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Trailing\" src=\"https://codepen.io/dcorb/embed/KVxGqN?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/KVxGqN\" target=\"_blank\" rel=\"noopener\">Debounce. Trailing</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<p>在上面的示例中可以看到，<code>debounced</code>事件是如何代替一组连续快速触发事件的。但如果事件的触发有很大的时间间隔，则不会发生<code>debouncing</code>。（可以这样理解，如果一直有人要上电梯，电梯就不会运行，直到等待一定时间内无人上电梯，电梯就会开始运行，在上述的示例中，这个<em>等待时间</em>被设定为四个刻度，也就是400ms）</p>\n<h2 id=\"leading-immediate-参数\"><a href=\"#leading-immediate-参数\" class=\"headerlink\" title=\"leading / immediate 参数\"></a>l<strong>eading / immediate 参数</strong></h2><p>在上述的示例中，<code>debouncing</code>事件需要<em>等待</em>，直到事件在一定时间内停止触发，才会执行函数。这种场景与等电梯的场景吻合。</p>\n<p>如果有另一种场景，需要在事件触发时，就立即执行函数，在快速连续触发的过程中，直到有一个暂停(满足<em>等待时间</em>)，才会再次执行函数。</p>\n<p>这种需求，可以通过<code>leading</code>参数来实现：（在underscore.js中，这个参数的名称叫 <code>immediate</code> ）</p>\n<p><img src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce-leading.png\" alt=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2016/04/debounce-leading.png\"></p>\n<p>“<code>leading</code>”防抖的demo：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Leading\" src=\"https://codepen.io/dcorb/embed/GZWqNV?height=265&theme-id=dark&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/GZWqNV\" target=\"_blank\" rel=\"noopener\">Debounce. Leading</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<h2 id=\"Debounce-实现\"><a href=\"#Debounce-实现\" class=\"headerlink\" title=\"Debounce 实现\"></a><strong>Debounce 实现</strong></h2><p>我第一次看到debounce的Javascript实现是2009年，在<a href=\"http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\" target=\"_blank\" rel=\"noopener\">John Hann的这篇文章</a>中（他也是这个词的发明者）。</p>\n<p>不久之后，Ben Alman创建了<a href=\"http://benalman.com/projects/jquery-throttle-debounce-plugin/\" target=\"_blank\" rel=\"noopener\">一个jQuery插件</a>（不再维护），一年之后，Jeremy Ashkenas将其<a href>添加到了underscore.js</a>中。后来，它又被添加到Lodash中，成为undererscore的替代方案。</p>\n<p>这3种实现内部有些不同，但它们的接口都差不多。</p>\n<p>曾经有一段时间，在我于2013年发现<code>_.debounce</code>函数中的<a href>一个bug</a>之后，underscore采用了Lodash的<code>debounce</code> / <code>throttle</code>实现。从那时起，两种实现都有了长足的发展。</p>\n<p>Lodash在其<code>_.debounce</code>和<code>_.throttle</code>函数中 <a href=\"https://lodash.com/docs#debounce\" target=\"_blank\" rel=\"noopener\">增加了</a> 更多的功能。原来的<code>immediate</code> 标志被替换为<code>leading</code> 和<code>trailing</code> 选项。你可以选择启用一个，或者两个。默认情况下，只有<code>trailing</code> 被启用。（leading可以理解为，在一组连续触发事件的起始，就调用函数；而trailing，则是在一组连续触发事件的末尾，经过<em>等待时间</em>后，执行函数）</p>\n<p>还有一个新的<code>maxWait</code>选项（目前只在Lodash中使用）在本文中没有涉及，但它可能非常有用。</p>\n<p>实际上，在Lodash的源码种，<code>throttle</code>节流函数是用通过<code>_.debounce</code>和<code>maxWait</code>选项来定义的。</p>\n<h2 id=\"Debounce-实例\"><a href=\"#Debounce-实例\" class=\"headerlink\" title=\"Debounce 实例\"></a><strong>Debounce 实例</strong></h2><h3 id=\"Resize-实例\"><a href=\"#Resize-实例\" class=\"headerlink\" title=\"Resize 实例\"></a><strong>Resize 实例</strong></h3><p>当调整(桌面端)浏览器窗口的大小时，可能会触发许多的<code>resize</code>事件。</p>\n<p>可以在下面的demo中看到：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce Resize Event Example\" src=\"https://codepen.io/dcorb/embed/XXPjpd?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/XXPjpd\" target=\"_blank\" rel=\"noopener\">Debounce Resize Event Example</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<p>如你所见，上面的例子中，启用了默认的<code>trailing</code>选项，因为我们只关心用户停止resize后的最终值。</p>\n<h3 id=\"带有AJAX请求的自动填充输入框的输入事件\"><a href=\"#带有AJAX请求的自动填充输入框的输入事件\" class=\"headerlink\" title=\"带有AJAX请求的自动填充输入框的输入事件\"></a>带有AJAX请求的自动填充输入框的输入事件</h3><p>有一些场景例如等待用户停止输入后再验证其输入，反馈验证信息。这种场景下 <code>_.debounce</code>可以实现：只有当用户停止输入时才发送请求。</p>\n<p>此时，<code>leading</code> 标志没有意义，因为我们需要等待至最后的输入。</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debouncing keystrokes Example\" src=\"https://codepen.io/dcorb/embed/mVGVOL?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/mVGVOL\" target=\"_blank\" rel=\"noopener\">Debouncing keystrokes Example</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<h2 id=\"如何使用debounce-和-throttle-以及-常见陷阱\"><a href=\"#如何使用debounce-和-throttle-以及-常见陷阱\" class=\"headerlink\" title=\"如何使用debounce 和 throttle 以及 常见陷阱\"></a>如何使用<strong>debounce 和 throttle 以及 常见陷阱</strong></h2><p>你可以自己写<code>debounce</code>/<code>throttle</code>函数，或者从一些随机的博客文章中复制它，但我的建议是直接使用 <code>underscore</code> 或 <code>Lodash</code>库。</p>\n<p>如果你只需要<code>_.debounce</code>和<code>_.throttle</code>函数，你可以使用Lodash自定义构建器来输出一个自定义的2KB minified库。下面时构建命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g lodash-cli</span><br><span class=\"line\">lodash include = debounce, throttle</span><br></pre></td></tr></table></figure>\n<p>也就是说，大多数人都是通过webpack/browserify/rollup工具，使用模块化形式的<code>lodash/throttle</code>和<code>lodash/debounce</code>或<code>lodash.throttle</code>和<code>lodash.debounce</code>包。</p>\n<p>一个常见的陷阱是，多次调用<code>_.debounce</code> 函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// WRONG</span><br><span class=\"line\">$(window).on(&apos;scroll&apos;, function() &#123;</span><br><span class=\"line\">   _.debounce(doSomething, 300); </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// RIGHT</span><br><span class=\"line\">$(window).on(&apos;scroll&apos;, _.debounce(doSomething, 200));</span><br></pre></td></tr></table></figure>\n<p>在lodash 和 underscore.js中，为debounced饭都处理过的函数创建一个变量，可以调用私有方法 <code>debounced_version.cancel()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var debounced_version = _.debounce(doSomething, 200);</span><br><span class=\"line\">$(window).on(&apos;scroll&apos;, debounced_version);</span><br><span class=\"line\"></span><br><span class=\"line\">// If you need it</span><br><span class=\"line\">debounced_version.cancel();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Throttle-节流\"><a href=\"#Throttle-节流\" class=\"headerlink\" title=\"Throttle 节流\"></a><strong>Throttle 节流</strong></h2><p>通过使用 <code>_.throttle</code>, 可以限制函数在 X 毫秒内，最多只能执行一次。</p>\n<p>与<code>debouncing</code>的主要区别在于，节流保证了函数的定期执行，至少每X毫秒一次。</p>\n<h2 id=\"Throttling-实例\"><a href=\"#Throttling-实例\" class=\"headerlink\" title=\"Throttling 实例\"></a><strong>Throttling 实例</strong></h2><h3 id=\"无限滚动\"><a href=\"#无限滚动\" class=\"headerlink\" title=\"无限滚动\"></a><strong>无限滚动</strong></h3><p>举一个很常见的例子，用户正在向下滚动你的无限滚动页面。你需要检查用户离底部有多远。如果用户在底部附近，我们应该通过Ajax请求更多的内容，并将其添加到页面中。</p>\n<p>在这种场景下，<code>_.debounce</code>就不适用了，它只有在用户停止滚动时才会触发……而我们需要在用户到达底部之前开始获取内容。而<code>_.throttle</code>可以保证我们不断地检查用户离底部有多远。</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Infinite scrolling throttled\" src=\"https://codepen.io/dcorb/embed/eJLMxa?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/eJLMxa\" target=\"_blank\" rel=\"noopener\">Infinite scrolling throttled</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<h2 id=\"requestAnimationFrame-rAF\"><a href=\"#requestAnimationFrame-rAF\" class=\"headerlink\" title=\"requestAnimationFrame (rAF)\"></a><strong>requestAnimationFrame (rAF)</strong></h2><p><code>requestAnimationFrame</code> 是限制函数执行速度的另一种方式。</p>\n<p>它相当于<code>_.throttle(dosomething, 16)</code>，但保真度要高很多，因为它是浏览器原生的API，拥有更好的准确性。</p>\n<p>可以考虑使用<code>rAF</code> API，作为节流函数的替代品，以下是它的优缺点：</p>\n<h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ul>\n<li>目标为60fps(即每秒60帧)，但是由浏览器内部机制决定如何安排渲染的最佳时间。</li>\n<li>更简单和更标准的API，未来不会改变，更好维护。</li>\n</ul>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ul>\n<li>rAFs的启用/取消是我们的责任，不像<code>debounce</code>或<code>throttle</code>，是内部管理的。</li>\n<li>如果浏览器标签页未激活，它就不会被执行。（对于滚动、鼠标或键盘事件来说，这并不重要）。</li>\n<li>虽然所有的现代浏览器都提供了RAF，但在IE9、Opera Mini和旧的Android中仍然不支持。仍然需要<a href=\"https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\" target=\"_blank\" rel=\"noopener\">polyfill</a> 。</li>\n</ul>\n<p>根据经验来讲，如果我的JavaScript函数是 “绘画 “，或者会直接变更动画相关属性，我会使用<code>requestAnimationFrame</code>，以及在一切涉及重新计算元素位置的地方使用它。</p>\n<p>如果要进行Ajax请求，或者决定是否添加/删除一个class（可能会触发CSS动画），我会考虑<code>_.debounce</code>或<code>_.throttle</code>，因为可以设置更低的执行速率（例如200ms，而不是16ms）。</p>\n<h3 id=\"rAF-实例\"><a href=\"#rAF-实例\" class=\"headerlink\" title=\"rAF 实例\"></a><strong>rAF 实例</strong></h3><p>这个demo灵感来自于 <a href=\"https://www.html5rocks.com/en/tutorials/speed/animations/\" target=\"_blank\" rel=\"noopener\">Paul Lewis的文章</a>, 文章做他详细解释了demo中的原理和逻辑。</p>\n<p>我把<code>rAF</code>和  <code>16ms 的_.throttle</code> 放在一起进行了比较，结果是它们的性能相似。但是在更复杂的情况下，rAF可能性能会更高。</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Scroll comparison requestAnimationFrame vs throttle\" src=\"https://codepen.io/dcorb/embed/pgOKKw?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"><br>  See the Pen <a href=\"https://codepen.io/dcorb/pen/pgOKKw\" target=\"_blank\" rel=\"noopener\">Scroll comparison requestAnimationFrame vs throttle</a> by Corbacho<br>  (<a href=\"https://codepen.io/dcorb\" target=\"_blank\" rel=\"noopener\">@dcorb</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<p>我在headroom.js库里见到过<code>rAF</code>技术更高级的实例，其中的 <a href=\"https://github.com/WickyNilliams/headroom.js/blob/3282c23bc69b14f21bfbaf66704fa37b58e3241d/src/Debouncer.js\" target=\"_blank\" rel=\"noopener\">逻辑被解耦</a> 并且被包装在了对象中。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>debounce</code>防抖, <code>throttle</code> 节流和 <code>requestAnimationFrame</code> 可以用来优化事件处理函数，三种技术都很有用，且各有区别，互相补充：</p>\n<ul>\n<li><strong>debounce防抖:</strong> 将快速连续的多次事件触发分组，归为一次执行。</li>\n<li><strong>throttle节流:</strong> 确保每隔X 毫秒就有一次稳定的执行，例如每200ms检查一次用户滚动位置以触发一个CSS动画。</li>\n<li><strong>requestAnimationFrame:</strong> 节流函数的16ms替代选择。更适用于在页面上重新计算/渲染元素的函数，能得到更平滑的动画。但是注意: IE9 不支持。</li>\n</ul>\n"},{"title":"《当我谈跑步时我谈些什么》：痛苦难以避免，而磨难可以选择","date":"2020-11-29T16:00:00.000Z","description":"村上春树的跑步与人生哲理","status":"Done","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201230194212.png","_content":"\n## 引言\n\n即使我是一个不怎么爱看文艺类书籍的理工科出身程序猿，也听过**村上春树**的大名。\n\n他是日本著名的作家、小说家，代表作有《挪威的森林》、《1Q84》。\n\n我的书单上从没有出现过**村上春树**的书，直到有一天逛书店，看到了这本《当我谈跑步时我谈些什么》。\n\n那段时间刚好开始晨跑，每天早上起床5公里，大约坚持了一个多月，十分倦怠，所以希望看看这本书，**为意志力充充电**。\n\n\n## 作者的跑步人生\n\n作者年近30时，才转行做一名职业作家。\n\n开始专职于写作之后，他发现自己每天需要高强度的脑力工作，一坐就是一整天，一天下来要吸掉60多支烟。\n\n要维持体力，又要将体重保持得“恰到好处”，村上春树选择跑步，作为解决健康问题的方法，并发展成了终生爱好。\n\n每天一小时的长跑，几乎每年都参加一场马拉松，即使没拿到过名次和奖励，但依然跑了30年。\n\n> 跑步时，人最残酷的对手是自己，其他选手都不是真正的敌人；\n> \n> 真正的敌人就是你自己，就是你用智慧和勇气掌控自己情绪的能力。\n\n> 戴好流线型头盔，架上体育专用太阳眼镜\n> \n> 水壶里灌满了水，设定好计时器\n> \n> 一意猛骑\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210125155333.png)\n\n书中作者对跑步、以及参加铁人三项的细微感触、日日坚持跑步的所见所闻、所惑所思，十分打动人心。\n\n很遗憾的是这本书还没看完的时候，我由于膝盖疼痛没能继续坚持晨跑。\n\n但是我依然看完了这本书，因为这本书不仅仅讲了作者的跑步历程和意义。\n\n令我收获良多的，还有贯穿全书的**人生哲学**。\n\n## 坚持与磨砺\n\n![目下3米，便是我当下的世界](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210201093452.png)\n\n> 无论奔跑速度降了多少，我都不走，这是原则，违背了自己顶下的原则，哪怕只有一次，以后就将违背更多原则\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210125114249.png)\n\n这是**村上春树**诠释的马拉松精神，更是一种对待人生的态度。\n\n无论多么微小的举动，长久坚持，就一定会有其影响力。\n\n> 痛苦难以避免，而磨难可以选择\n> \n> Pain is inevitable, Suffering is optional\n\n坚持跑步的理由不过一丝半点，中断跑步的理由却足够装满一辆大型载重卡车。我们只能将那“一丝半点的理由”一个个慎之又慎地不断打磨。见缝插针，得空儿就孜孜不倦地打磨它们。\n\n> 刻意经历这痛苦\n> \n> 起码曾经努力的事实会留存下来\n> \n> 即使这是虚妄的没结果的行为，也不是愚蠢的行为\n\n**曾经努力**就不会给日后的自己，留下后悔的机会。\n\n## 输赢与自卑\n\n> 在长跑中，如果说有什么必须战胜的对手，那就是过去的自己\n\n> 欧内斯特•海明威好像也说过类似的话：持之以恒，不乱节奏，对于长期作业实在至为重要。\n> \n> 一旦节奏得以设定，其余的问题便可以迎刃而解。\n> \n> 诚然，我并非毫无争强好胜之心。不过不知何故，跟别人一决雌雄，我自小就不甚在乎胜负成败。这一性格在长大成人后也大致未变。\n> \n> 无论何事，赢了别人也罢输给别人也罢，都不太计较，倒是更为关心能否达到为自己设定的标准。\n\n**村上春树**参加多次马拉松也未获得过名次或奖励，诺奖也陪跑多年，但是不曾气馁，仍然全意追求自己想要的人生，掌握并坚持自己的节奏。\n\n> 世人皆有其唯一性，必定与他人相异，不必与人比较\n> \n> 年少时，无力客观的把握自己的定位\n> \n> 极易因微不足道的事而沾沾自喜\n> \n> 也极易产生自卑感。\n> \n> 随着年龄的增长，经历了形形色色的失误\n> \n> 该拾起来的拾起来，该抛弃的抛弃掉\n> \n> 然后才能形成这样的认知：\n> \n> 缺点如果以一去数，必将没完没了\n> \n> 可是优点肯定也有\n> \n> 我们只能凭借手头现有的东西去面对世界\n\n这是他对**自卑**的态度，语言真切，结论也很直观：\n\n**自卑、与他人比较是虚妄的，只需要利用好现有的条件，做最好的自己。**\n\n\n## 保持自己的节奏\n\n\n> 我是那种喜欢独处的人。更确切地说，我是那种不觉得孤独是痛苦的人。我发现每天花一两个小时独自跑步，不跟任何人说话，还有四五个小时独自坐在办公桌前，既不困难，也不无聊。我从小就有这种倾向，当时如果有选择的话，我更喜欢自己看书或专心听音乐，而不是和别人在一起。我总是能想出自己要做的事情。\n\n> 希望一人独处的念头，始终不变地存于心中。\n> \n> 所以一天跑一小时，来确保只属于自己的沉默的时间，\n> \n> 对我的精神健康来说，成了具有重要意义的功课。\n> \n> 至少在跑步时不需要和任何人交流，不必听任何人说话，只需眺望周围的风光，凝视自己即可。\n> \n> 这是任何东西都无法替代的宝贵时刻。\n\n从小我的性格，就十分依赖别人，和朋友玩就久久不想分开，不喜欢一个人睡觉，没有人陪伴就会觉得孤独。\n\n这种抵触一个人独处的情绪，直到成年才慢慢消除。\n\n因为越长大，才越能体味到作者对“独处”的感触。\n\n- 长大了才知道，人生的路，出生到死亡，没有人能真正陪伴你全程\n- 长大了才知道，热闹的人群给你带来的也许是温暖，但不是成长\n- 长大了才知道，孤独其实并不是坏事\n- 长大了才知道，这世界上没有任何人能真正的与你**感同身受**\n- 长大了才知道，你所有的行为都要自己承担后果，你要为自己兜底\n\n而当我学会独处，并开始享受独处，我才意识到自己真正的成熟了。\n\n> 不管全世界所有人怎么说，我都认为自己的感受才是正确的。\n> \n> 无论别人怎么看，我绝不打乱自己的节奏。\n> \n> 喜欢的事自然可以坚持，不喜欢怎么也长久不了。\n\n人在失去自我方面浪费的时间越多，形成自己的特点的机会越少，大多数人最后都活成了麻雀群里的一个点。\n\n学会独处，更多的发现和探索自己，才能找到真正喜欢的事情，才能独一无二的特别的你。\n\n## 结语\n\n无论少年还是暮年，\n\n希望你心中始终有一面鲜明的旗帜，指示着你自己的坚持；\n\n希望你心中始终有一扇嘀嗒的时钟，稳定着你自己的节奏。","source":"_posts/running_life.md","raw":"---\ntitle: 《当我谈跑步时我谈些什么》：痛苦难以避免，而磨难可以选择\ncategories:\n    - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2020-11-30\ndescription: 村上春树的跑步与人生哲理\nstatus: Done\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20201230194212.png\n---\n\n## 引言\n\n即使我是一个不怎么爱看文艺类书籍的理工科出身程序猿，也听过**村上春树**的大名。\n\n他是日本著名的作家、小说家，代表作有《挪威的森林》、《1Q84》。\n\n我的书单上从没有出现过**村上春树**的书，直到有一天逛书店，看到了这本《当我谈跑步时我谈些什么》。\n\n那段时间刚好开始晨跑，每天早上起床5公里，大约坚持了一个多月，十分倦怠，所以希望看看这本书，**为意志力充充电**。\n\n\n## 作者的跑步人生\n\n作者年近30时，才转行做一名职业作家。\n\n开始专职于写作之后，他发现自己每天需要高强度的脑力工作，一坐就是一整天，一天下来要吸掉60多支烟。\n\n要维持体力，又要将体重保持得“恰到好处”，村上春树选择跑步，作为解决健康问题的方法，并发展成了终生爱好。\n\n每天一小时的长跑，几乎每年都参加一场马拉松，即使没拿到过名次和奖励，但依然跑了30年。\n\n> 跑步时，人最残酷的对手是自己，其他选手都不是真正的敌人；\n> \n> 真正的敌人就是你自己，就是你用智慧和勇气掌控自己情绪的能力。\n\n> 戴好流线型头盔，架上体育专用太阳眼镜\n> \n> 水壶里灌满了水，设定好计时器\n> \n> 一意猛骑\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210125155333.png)\n\n书中作者对跑步、以及参加铁人三项的细微感触、日日坚持跑步的所见所闻、所惑所思，十分打动人心。\n\n很遗憾的是这本书还没看完的时候，我由于膝盖疼痛没能继续坚持晨跑。\n\n但是我依然看完了这本书，因为这本书不仅仅讲了作者的跑步历程和意义。\n\n令我收获良多的，还有贯穿全书的**人生哲学**。\n\n## 坚持与磨砺\n\n![目下3米，便是我当下的世界](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210201093452.png)\n\n> 无论奔跑速度降了多少，我都不走，这是原则，违背了自己顶下的原则，哪怕只有一次，以后就将违背更多原则\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210125114249.png)\n\n这是**村上春树**诠释的马拉松精神，更是一种对待人生的态度。\n\n无论多么微小的举动，长久坚持，就一定会有其影响力。\n\n> 痛苦难以避免，而磨难可以选择\n> \n> Pain is inevitable, Suffering is optional\n\n坚持跑步的理由不过一丝半点，中断跑步的理由却足够装满一辆大型载重卡车。我们只能将那“一丝半点的理由”一个个慎之又慎地不断打磨。见缝插针，得空儿就孜孜不倦地打磨它们。\n\n> 刻意经历这痛苦\n> \n> 起码曾经努力的事实会留存下来\n> \n> 即使这是虚妄的没结果的行为，也不是愚蠢的行为\n\n**曾经努力**就不会给日后的自己，留下后悔的机会。\n\n## 输赢与自卑\n\n> 在长跑中，如果说有什么必须战胜的对手，那就是过去的自己\n\n> 欧内斯特•海明威好像也说过类似的话：持之以恒，不乱节奏，对于长期作业实在至为重要。\n> \n> 一旦节奏得以设定，其余的问题便可以迎刃而解。\n> \n> 诚然，我并非毫无争强好胜之心。不过不知何故，跟别人一决雌雄，我自小就不甚在乎胜负成败。这一性格在长大成人后也大致未变。\n> \n> 无论何事，赢了别人也罢输给别人也罢，都不太计较，倒是更为关心能否达到为自己设定的标准。\n\n**村上春树**参加多次马拉松也未获得过名次或奖励，诺奖也陪跑多年，但是不曾气馁，仍然全意追求自己想要的人生，掌握并坚持自己的节奏。\n\n> 世人皆有其唯一性，必定与他人相异，不必与人比较\n> \n> 年少时，无力客观的把握自己的定位\n> \n> 极易因微不足道的事而沾沾自喜\n> \n> 也极易产生自卑感。\n> \n> 随着年龄的增长，经历了形形色色的失误\n> \n> 该拾起来的拾起来，该抛弃的抛弃掉\n> \n> 然后才能形成这样的认知：\n> \n> 缺点如果以一去数，必将没完没了\n> \n> 可是优点肯定也有\n> \n> 我们只能凭借手头现有的东西去面对世界\n\n这是他对**自卑**的态度，语言真切，结论也很直观：\n\n**自卑、与他人比较是虚妄的，只需要利用好现有的条件，做最好的自己。**\n\n\n## 保持自己的节奏\n\n\n> 我是那种喜欢独处的人。更确切地说，我是那种不觉得孤独是痛苦的人。我发现每天花一两个小时独自跑步，不跟任何人说话，还有四五个小时独自坐在办公桌前，既不困难，也不无聊。我从小就有这种倾向，当时如果有选择的话，我更喜欢自己看书或专心听音乐，而不是和别人在一起。我总是能想出自己要做的事情。\n\n> 希望一人独处的念头，始终不变地存于心中。\n> \n> 所以一天跑一小时，来确保只属于自己的沉默的时间，\n> \n> 对我的精神健康来说，成了具有重要意义的功课。\n> \n> 至少在跑步时不需要和任何人交流，不必听任何人说话，只需眺望周围的风光，凝视自己即可。\n> \n> 这是任何东西都无法替代的宝贵时刻。\n\n从小我的性格，就十分依赖别人，和朋友玩就久久不想分开，不喜欢一个人睡觉，没有人陪伴就会觉得孤独。\n\n这种抵触一个人独处的情绪，直到成年才慢慢消除。\n\n因为越长大，才越能体味到作者对“独处”的感触。\n\n- 长大了才知道，人生的路，出生到死亡，没有人能真正陪伴你全程\n- 长大了才知道，热闹的人群给你带来的也许是温暖，但不是成长\n- 长大了才知道，孤独其实并不是坏事\n- 长大了才知道，这世界上没有任何人能真正的与你**感同身受**\n- 长大了才知道，你所有的行为都要自己承担后果，你要为自己兜底\n\n而当我学会独处，并开始享受独处，我才意识到自己真正的成熟了。\n\n> 不管全世界所有人怎么说，我都认为自己的感受才是正确的。\n> \n> 无论别人怎么看，我绝不打乱自己的节奏。\n> \n> 喜欢的事自然可以坚持，不喜欢怎么也长久不了。\n\n人在失去自我方面浪费的时间越多，形成自己的特点的机会越少，大多数人最后都活成了麻雀群里的一个点。\n\n学会独处，更多的发现和探索自己，才能找到真正喜欢的事情，才能独一无二的特别的你。\n\n## 结语\n\n无论少年还是暮年，\n\n希望你心中始终有一面鲜明的旗帜，指示着你自己的坚持；\n\n希望你心中始终有一扇嘀嗒的时钟，稳定着你自己的节奏。","slug":"running_life","published":1,"updated":"2021-04-21T06:53:37.262Z","_id":"ckjbdg4yy00006wy6pf5xk8vu","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>即使我是一个不怎么爱看文艺类书籍的理工科出身程序猿，也听过<strong>村上春树</strong>的大名。</p>\n<p>他是日本著名的作家、小说家，代表作有《挪威的森林》、《1Q84》。</p>\n<p>我的书单上从没有出现过<strong>村上春树</strong>的书，直到有一天逛书店，看到了这本《当我谈跑步时我谈些什么》。</p>\n<p>那段时间刚好开始晨跑，每天早上起床5公里，大约坚持了一个多月，十分倦怠，所以希望看看这本书，<strong>为意志力充充电</strong>。</p>\n<h2 id=\"作者的跑步人生\"><a href=\"#作者的跑步人生\" class=\"headerlink\" title=\"作者的跑步人生\"></a>作者的跑步人生</h2><p>作者年近30时，才转行做一名职业作家。</p>\n<p>开始专职于写作之后，他发现自己每天需要高强度的脑力工作，一坐就是一整天，一天下来要吸掉60多支烟。</p>\n<p>要维持体力，又要将体重保持得“恰到好处”，村上春树选择跑步，作为解决健康问题的方法，并发展成了终生爱好。</p>\n<p>每天一小时的长跑，几乎每年都参加一场马拉松，即使没拿到过名次和奖励，但依然跑了30年。</p>\n<blockquote>\n<p>跑步时，人最残酷的对手是自己，其他选手都不是真正的敌人；</p>\n<p>真正的敌人就是你自己，就是你用智慧和勇气掌控自己情绪的能力。</p>\n</blockquote>\n<blockquote>\n<p>戴好流线型头盔，架上体育专用太阳眼镜</p>\n<p>水壶里灌满了水，设定好计时器</p>\n<p>一意猛骑</p>\n</blockquote>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210125155333.png\" alt></p>\n<p>书中作者对跑步、以及参加铁人三项的细微感触、日日坚持跑步的所见所闻、所惑所思，十分打动人心。</p>\n<p>很遗憾的是这本书还没看完的时候，我由于膝盖疼痛没能继续坚持晨跑。</p>\n<p>但是我依然看完了这本书，因为这本书不仅仅讲了作者的跑步历程和意义。</p>\n<p>令我收获良多的，还有贯穿全书的<strong>人生哲学</strong>。</p>\n<h2 id=\"坚持与磨砺\"><a href=\"#坚持与磨砺\" class=\"headerlink\" title=\"坚持与磨砺\"></a>坚持与磨砺</h2><p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210201093452.png\" alt=\"目下3米，便是我当下的世界\"></p>\n<blockquote>\n<p>无论奔跑速度降了多少，我都不走，这是原则，违背了自己顶下的原则，哪怕只有一次，以后就将违背更多原则</p>\n</blockquote>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210125114249.png\" alt></p>\n<p>这是<strong>村上春树</strong>诠释的马拉松精神，更是一种对待人生的态度。</p>\n<p>无论多么微小的举动，长久坚持，就一定会有其影响力。</p>\n<blockquote>\n<p>痛苦难以避免，而磨难可以选择</p>\n<p>Pain is inevitable, Suffering is optional</p>\n</blockquote>\n<p>坚持跑步的理由不过一丝半点，中断跑步的理由却足够装满一辆大型载重卡车。我们只能将那“一丝半点的理由”一个个慎之又慎地不断打磨。见缝插针，得空儿就孜孜不倦地打磨它们。</p>\n<blockquote>\n<p>刻意经历这痛苦</p>\n<p>起码曾经努力的事实会留存下来</p>\n<p>即使这是虚妄的没结果的行为，也不是愚蠢的行为</p>\n</blockquote>\n<p><strong>曾经努力</strong>就不会给日后的自己，留下后悔的机会。</p>\n<h2 id=\"输赢与自卑\"><a href=\"#输赢与自卑\" class=\"headerlink\" title=\"输赢与自卑\"></a>输赢与自卑</h2><blockquote>\n<p>在长跑中，如果说有什么必须战胜的对手，那就是过去的自己</p>\n</blockquote>\n<blockquote>\n<p>欧内斯特•海明威好像也说过类似的话：持之以恒，不乱节奏，对于长期作业实在至为重要。</p>\n<p>一旦节奏得以设定，其余的问题便可以迎刃而解。</p>\n<p>诚然，我并非毫无争强好胜之心。不过不知何故，跟别人一决雌雄，我自小就不甚在乎胜负成败。这一性格在长大成人后也大致未变。</p>\n<p>无论何事，赢了别人也罢输给别人也罢，都不太计较，倒是更为关心能否达到为自己设定的标准。</p>\n</blockquote>\n<p><strong>村上春树</strong>参加多次马拉松也未获得过名次或奖励，诺奖也陪跑多年，但是不曾气馁，仍然全意追求自己想要的人生，掌握并坚持自己的节奏。</p>\n<blockquote>\n<p>世人皆有其唯一性，必定与他人相异，不必与人比较</p>\n<p>年少时，无力客观的把握自己的定位</p>\n<p>极易因微不足道的事而沾沾自喜</p>\n<p>也极易产生自卑感。</p>\n<p>随着年龄的增长，经历了形形色色的失误</p>\n<p>该拾起来的拾起来，该抛弃的抛弃掉</p>\n<p>然后才能形成这样的认知：</p>\n<p>缺点如果以一去数，必将没完没了</p>\n<p>可是优点肯定也有</p>\n<p>我们只能凭借手头现有的东西去面对世界</p>\n</blockquote>\n<p>这是他对<strong>自卑</strong>的态度，语言真切，结论也很直观：</p>\n<p><strong>自卑、与他人比较是虚妄的，只需要利用好现有的条件，做最好的自己。</strong></p>\n<h2 id=\"保持自己的节奏\"><a href=\"#保持自己的节奏\" class=\"headerlink\" title=\"保持自己的节奏\"></a>保持自己的节奏</h2><blockquote>\n<p>我是那种喜欢独处的人。更确切地说，我是那种不觉得孤独是痛苦的人。我发现每天花一两个小时独自跑步，不跟任何人说话，还有四五个小时独自坐在办公桌前，既不困难，也不无聊。我从小就有这种倾向，当时如果有选择的话，我更喜欢自己看书或专心听音乐，而不是和别人在一起。我总是能想出自己要做的事情。</p>\n</blockquote>\n<blockquote>\n<p>希望一人独处的念头，始终不变地存于心中。</p>\n<p>所以一天跑一小时，来确保只属于自己的沉默的时间，</p>\n<p>对我的精神健康来说，成了具有重要意义的功课。</p>\n<p>至少在跑步时不需要和任何人交流，不必听任何人说话，只需眺望周围的风光，凝视自己即可。</p>\n<p>这是任何东西都无法替代的宝贵时刻。</p>\n</blockquote>\n<p>从小我的性格，就十分依赖别人，和朋友玩就久久不想分开，不喜欢一个人睡觉，没有人陪伴就会觉得孤独。</p>\n<p>这种抵触一个人独处的情绪，直到成年才慢慢消除。</p>\n<p>因为越长大，才越能体味到作者对“独处”的感触。</p>\n<ul>\n<li>长大了才知道，人生的路，出生到死亡，没有人能真正陪伴你全程</li>\n<li>长大了才知道，热闹的人群给你带来的也许是温暖，但不是成长</li>\n<li>长大了才知道，孤独其实并不是坏事</li>\n<li>长大了才知道，这世界上没有任何人能真正的与你<strong>感同身受</strong></li>\n<li>长大了才知道，你所有的行为都要自己承担后果，你要为自己兜底</li>\n</ul>\n<p>而当我学会独处，并开始享受独处，我才意识到自己真正的成熟了。</p>\n<blockquote>\n<p>不管全世界所有人怎么说，我都认为自己的感受才是正确的。</p>\n<p>无论别人怎么看，我绝不打乱自己的节奏。</p>\n<p>喜欢的事自然可以坚持，不喜欢怎么也长久不了。</p>\n</blockquote>\n<p>人在失去自我方面浪费的时间越多，形成自己的特点的机会越少，大多数人最后都活成了麻雀群里的一个点。</p>\n<p>学会独处，更多的发现和探索自己，才能找到真正喜欢的事情，才能独一无二的特别的你。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>无论少年还是暮年，</p>\n<p>希望你心中始终有一面鲜明的旗帜，指示着你自己的坚持；</p>\n<p>希望你心中始终有一扇嘀嗒的时钟，稳定着你自己的节奏。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>即使我是一个不怎么爱看文艺类书籍的理工科出身程序猿，也听过<strong>村上春树</strong>的大名。</p>\n<p>他是日本著名的作家、小说家，代表作有《挪威的森林》、《1Q84》。</p>\n<p>我的书单上从没有出现过<strong>村上春树</strong>的书，直到有一天逛书店，看到了这本《当我谈跑步时我谈些什么》。</p>\n<p>那段时间刚好开始晨跑，每天早上起床5公里，大约坚持了一个多月，十分倦怠，所以希望看看这本书，<strong>为意志力充充电</strong>。</p>\n<h2 id=\"作者的跑步人生\"><a href=\"#作者的跑步人生\" class=\"headerlink\" title=\"作者的跑步人生\"></a>作者的跑步人生</h2><p>作者年近30时，才转行做一名职业作家。</p>\n<p>开始专职于写作之后，他发现自己每天需要高强度的脑力工作，一坐就是一整天，一天下来要吸掉60多支烟。</p>\n<p>要维持体力，又要将体重保持得“恰到好处”，村上春树选择跑步，作为解决健康问题的方法，并发展成了终生爱好。</p>\n<p>每天一小时的长跑，几乎每年都参加一场马拉松，即使没拿到过名次和奖励，但依然跑了30年。</p>\n<blockquote>\n<p>跑步时，人最残酷的对手是自己，其他选手都不是真正的敌人；</p>\n<p>真正的敌人就是你自己，就是你用智慧和勇气掌控自己情绪的能力。</p>\n</blockquote>\n<blockquote>\n<p>戴好流线型头盔，架上体育专用太阳眼镜</p>\n<p>水壶里灌满了水，设定好计时器</p>\n<p>一意猛骑</p>\n</blockquote>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210125155333.png\" alt></p>\n<p>书中作者对跑步、以及参加铁人三项的细微感触、日日坚持跑步的所见所闻、所惑所思，十分打动人心。</p>\n<p>很遗憾的是这本书还没看完的时候，我由于膝盖疼痛没能继续坚持晨跑。</p>\n<p>但是我依然看完了这本书，因为这本书不仅仅讲了作者的跑步历程和意义。</p>\n<p>令我收获良多的，还有贯穿全书的<strong>人生哲学</strong>。</p>\n<h2 id=\"坚持与磨砺\"><a href=\"#坚持与磨砺\" class=\"headerlink\" title=\"坚持与磨砺\"></a>坚持与磨砺</h2><p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210201093452.png\" alt=\"目下3米，便是我当下的世界\"></p>\n<blockquote>\n<p>无论奔跑速度降了多少，我都不走，这是原则，违背了自己顶下的原则，哪怕只有一次，以后就将违背更多原则</p>\n</blockquote>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210125114249.png\" alt></p>\n<p>这是<strong>村上春树</strong>诠释的马拉松精神，更是一种对待人生的态度。</p>\n<p>无论多么微小的举动，长久坚持，就一定会有其影响力。</p>\n<blockquote>\n<p>痛苦难以避免，而磨难可以选择</p>\n<p>Pain is inevitable, Suffering is optional</p>\n</blockquote>\n<p>坚持跑步的理由不过一丝半点，中断跑步的理由却足够装满一辆大型载重卡车。我们只能将那“一丝半点的理由”一个个慎之又慎地不断打磨。见缝插针，得空儿就孜孜不倦地打磨它们。</p>\n<blockquote>\n<p>刻意经历这痛苦</p>\n<p>起码曾经努力的事实会留存下来</p>\n<p>即使这是虚妄的没结果的行为，也不是愚蠢的行为</p>\n</blockquote>\n<p><strong>曾经努力</strong>就不会给日后的自己，留下后悔的机会。</p>\n<h2 id=\"输赢与自卑\"><a href=\"#输赢与自卑\" class=\"headerlink\" title=\"输赢与自卑\"></a>输赢与自卑</h2><blockquote>\n<p>在长跑中，如果说有什么必须战胜的对手，那就是过去的自己</p>\n</blockquote>\n<blockquote>\n<p>欧内斯特•海明威好像也说过类似的话：持之以恒，不乱节奏，对于长期作业实在至为重要。</p>\n<p>一旦节奏得以设定，其余的问题便可以迎刃而解。</p>\n<p>诚然，我并非毫无争强好胜之心。不过不知何故，跟别人一决雌雄，我自小就不甚在乎胜负成败。这一性格在长大成人后也大致未变。</p>\n<p>无论何事，赢了别人也罢输给别人也罢，都不太计较，倒是更为关心能否达到为自己设定的标准。</p>\n</blockquote>\n<p><strong>村上春树</strong>参加多次马拉松也未获得过名次或奖励，诺奖也陪跑多年，但是不曾气馁，仍然全意追求自己想要的人生，掌握并坚持自己的节奏。</p>\n<blockquote>\n<p>世人皆有其唯一性，必定与他人相异，不必与人比较</p>\n<p>年少时，无力客观的把握自己的定位</p>\n<p>极易因微不足道的事而沾沾自喜</p>\n<p>也极易产生自卑感。</p>\n<p>随着年龄的增长，经历了形形色色的失误</p>\n<p>该拾起来的拾起来，该抛弃的抛弃掉</p>\n<p>然后才能形成这样的认知：</p>\n<p>缺点如果以一去数，必将没完没了</p>\n<p>可是优点肯定也有</p>\n<p>我们只能凭借手头现有的东西去面对世界</p>\n</blockquote>\n<p>这是他对<strong>自卑</strong>的态度，语言真切，结论也很直观：</p>\n<p><strong>自卑、与他人比较是虚妄的，只需要利用好现有的条件，做最好的自己。</strong></p>\n<h2 id=\"保持自己的节奏\"><a href=\"#保持自己的节奏\" class=\"headerlink\" title=\"保持自己的节奏\"></a>保持自己的节奏</h2><blockquote>\n<p>我是那种喜欢独处的人。更确切地说，我是那种不觉得孤独是痛苦的人。我发现每天花一两个小时独自跑步，不跟任何人说话，还有四五个小时独自坐在办公桌前，既不困难，也不无聊。我从小就有这种倾向，当时如果有选择的话，我更喜欢自己看书或专心听音乐，而不是和别人在一起。我总是能想出自己要做的事情。</p>\n</blockquote>\n<blockquote>\n<p>希望一人独处的念头，始终不变地存于心中。</p>\n<p>所以一天跑一小时，来确保只属于自己的沉默的时间，</p>\n<p>对我的精神健康来说，成了具有重要意义的功课。</p>\n<p>至少在跑步时不需要和任何人交流，不必听任何人说话，只需眺望周围的风光，凝视自己即可。</p>\n<p>这是任何东西都无法替代的宝贵时刻。</p>\n</blockquote>\n<p>从小我的性格，就十分依赖别人，和朋友玩就久久不想分开，不喜欢一个人睡觉，没有人陪伴就会觉得孤独。</p>\n<p>这种抵触一个人独处的情绪，直到成年才慢慢消除。</p>\n<p>因为越长大，才越能体味到作者对“独处”的感触。</p>\n<ul>\n<li>长大了才知道，人生的路，出生到死亡，没有人能真正陪伴你全程</li>\n<li>长大了才知道，热闹的人群给你带来的也许是温暖，但不是成长</li>\n<li>长大了才知道，孤独其实并不是坏事</li>\n<li>长大了才知道，这世界上没有任何人能真正的与你<strong>感同身受</strong></li>\n<li>长大了才知道，你所有的行为都要自己承担后果，你要为自己兜底</li>\n</ul>\n<p>而当我学会独处，并开始享受独处，我才意识到自己真正的成熟了。</p>\n<blockquote>\n<p>不管全世界所有人怎么说，我都认为自己的感受才是正确的。</p>\n<p>无论别人怎么看，我绝不打乱自己的节奏。</p>\n<p>喜欢的事自然可以坚持，不喜欢怎么也长久不了。</p>\n</blockquote>\n<p>人在失去自我方面浪费的时间越多，形成自己的特点的机会越少，大多数人最后都活成了麻雀群里的一个点。</p>\n<p>学会独处，更多的发现和探索自己，才能找到真正喜欢的事情，才能独一无二的特别的你。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>无论少年还是暮年，</p>\n<p>希望你心中始终有一面鲜明的旗帜，指示着你自己的坚持；</p>\n<p>希望你心中始终有一扇嘀嗒的时钟，稳定着你自己的节奏。</p>\n"},{"title":"《自卑与超越》：一本对自我的答疑书","date":"2020-10-29T16:00:00.000Z","description":"我为什么是我","status":"Work in Progress","toc":1,"top":0,"_content":"\n## 书与作者简介\n\n- 作者：[奥地利]阿尔弗雷德·阿德勒\n  - 医学博士\n  - 从医：眼科、全科、精神科\n  - 探索人格、心理与身体，得到了当时心理学大师弗洛伊德的赏识，加入了弗的心理分析学会\n  - 与弗在产生分歧，退出了弗的心理分析学会，转而自立门派，研究“个体心理学”\n  - 因“个体心理学”研究、一系列著作出版，而声名远播\n- 书：心理学必读经典书籍《What Life Should Mean To You》\n  - 从个体心理学的观点出发，阐明人生道路和人生意义\n  - 是一本通俗性读物，但包含着极深的哲理，和丰富的学术创见\n  - 全书涉及了人生的方方面面：人活着的意义、心灵&肉体关系、自卑感&优越感、早起记忆和梦的意义、原生家庭和学校对人的影响、青春期、犯罪、职业、人&同伴&社交、爱情&婚姻......\n  - 中文书名的由来：这本书着重讲了自卑感的形成，自卑感对人的影响，如何超越自卑感，如何将自卑感转为对优越地位的追求以取得成就\n\n## 带着问题看文章\n\n很对人从孩童时期、到青春期、到中年，都在不断地苦苦思索人生的意义。\n\n很对人活一世，即使到临死前，也没能够了解自我。\n\n不知道这一生在追寻什么，最终得到了什么。\n\n因此，可以把这本书当作一本对自我的答疑书来看。\n\n当对人生的方方面面产生困惑时，可以翻阅本书，跟着阿德勒的个体心理学，探寻自己内心的最深处，摸索答案。\n\n---\n\n\n## 生活的意义到底是什么\n\n职业、交际和两性\n\n> 1、我与地球：我们生活在地球上，依靠地球所提供的资源生存，除此之外别无选择。\n\n2、我与他人/种族：任何人都是人类族系的一员，每个人必然要与他人发生关系。\n\n3、我和她：这一问题涉及爱情和婚姻。人类有两种性别，男和女。任何人的一生都无法避开爱情和婚姻这一问题。\n\n> 1、在地球的有限资源限制下，为了永存，我们应该如何工作？\n\n2、为了与人合作，共同发展，我们应该获得怎样的定位和身份？\n\n3、面对“人有男女”和“人类延续依赖于爱与婚姻”这一事实，我们应该如何调整自我？\n\n所以，个体心理学认为人类的所有问题都可以归于职业、交际和两性这三个问题。\n\n比如，一个人完全没有爱情，生活遭遇挫折，在工作上也表现得平平庸庸，并且不善交际，朋友很少，他觉得与同伴交往是非常痛苦的事情。那么生活对于他来说就是痛苦而危险的事。\n\n而如果一个人交友广泛，人脉很广，事业有成，拥有甜蜜的爱情和幸福的生活。那么我们可以断定，他的生活是丰富的，是充满创造性的。\n\n所以，作者认为，生命的意义在于乐于关注他人，渴望成为社会大家庭一员，梦想着为人类和社会贡献自己的力量。\n\n著名国学大师季羡林在望九之年写过一篇文章，叫《人生的意义与价值》，在文章的最后，他是这么说的：\n\n如果人生真有意义与价值的话，其意义与价值就在于对人类发展的承上启下，承前启后的责任感。\n古往今来，但凡人们认为具有“生命意义”的人或事，都离不开对他人和社会的贡献。那些赋予人生以个人意义的人，他们的人生就此走过，没有留下一丝痕迹。\n\n因此作者说：\n\n个人意义没有任何价值，真正的生命意义存在于个体与他人的交互作用中。每个人都希望自己变得重要、有价值，但如若不能搞懂个人的成就建立在对他人做出贡献的基础之上，那就太容易走上歧途。\n至此我们就能理解前面的话了，在努力追求优越感的过程中，只有那些为了他人的利益而前进的人和为了社会的发展而奋斗的人，才是能够超越生活，从而顺利获得优越感的人。\n\n以他人利益为重，那我们自己的利益怎么办？要回答这个问题，我们需要理解个体与社会的关系。\n\n## 早期记忆/童年 对一个人的影响有多大\n\n> 一个人的价值观，世界观都和经历有关，所有的经历造就了现在的你，你的所有需求，你的所有期望，都是曾经你经历的没有得到，所以你现在渴望得到。\n> 没有了解一个人的童年,是不会了解他的现在的。\n\n## 自卑感&优越感\n\n> 我们每个人都有不同程度的自卑感，因为我们都想让自己更优秀，让自己过更好的生活。自卑感的存在并不是一件坏事，因为它激励了人不断追求卓越，克服自身的障碍，在有限的生命空间内发挥出最大的价值。\n\n## 家庭\n\n> 婚姻是一种合作关系，所以两个人都不应该试图驾驭对方。\n\n自卑情结\n\n## 反思\n","source":"_posts/meaning_of_life.md","raw":"---\ntitle: 《自卑与超越》：一本对自我的答疑书\ncategories:\n  - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2020-10-30\ndescription: 我为什么是我\nstatus: Work in Progress\ntoc: 1\ntop: 0\n---\n\n## 书与作者简介\n\n- 作者：[奥地利]阿尔弗雷德·阿德勒\n  - 医学博士\n  - 从医：眼科、全科、精神科\n  - 探索人格、心理与身体，得到了当时心理学大师弗洛伊德的赏识，加入了弗的心理分析学会\n  - 与弗在产生分歧，退出了弗的心理分析学会，转而自立门派，研究“个体心理学”\n  - 因“个体心理学”研究、一系列著作出版，而声名远播\n- 书：心理学必读经典书籍《What Life Should Mean To You》\n  - 从个体心理学的观点出发，阐明人生道路和人生意义\n  - 是一本通俗性读物，但包含着极深的哲理，和丰富的学术创见\n  - 全书涉及了人生的方方面面：人活着的意义、心灵&肉体关系、自卑感&优越感、早起记忆和梦的意义、原生家庭和学校对人的影响、青春期、犯罪、职业、人&同伴&社交、爱情&婚姻......\n  - 中文书名的由来：这本书着重讲了自卑感的形成，自卑感对人的影响，如何超越自卑感，如何将自卑感转为对优越地位的追求以取得成就\n\n## 带着问题看文章\n\n很对人从孩童时期、到青春期、到中年，都在不断地苦苦思索人生的意义。\n\n很对人活一世，即使到临死前，也没能够了解自我。\n\n不知道这一生在追寻什么，最终得到了什么。\n\n因此，可以把这本书当作一本对自我的答疑书来看。\n\n当对人生的方方面面产生困惑时，可以翻阅本书，跟着阿德勒的个体心理学，探寻自己内心的最深处，摸索答案。\n\n---\n\n\n## 生活的意义到底是什么\n\n职业、交际和两性\n\n> 1、我与地球：我们生活在地球上，依靠地球所提供的资源生存，除此之外别无选择。\n\n2、我与他人/种族：任何人都是人类族系的一员，每个人必然要与他人发生关系。\n\n3、我和她：这一问题涉及爱情和婚姻。人类有两种性别，男和女。任何人的一生都无法避开爱情和婚姻这一问题。\n\n> 1、在地球的有限资源限制下，为了永存，我们应该如何工作？\n\n2、为了与人合作，共同发展，我们应该获得怎样的定位和身份？\n\n3、面对“人有男女”和“人类延续依赖于爱与婚姻”这一事实，我们应该如何调整自我？\n\n所以，个体心理学认为人类的所有问题都可以归于职业、交际和两性这三个问题。\n\n比如，一个人完全没有爱情，生活遭遇挫折，在工作上也表现得平平庸庸，并且不善交际，朋友很少，他觉得与同伴交往是非常痛苦的事情。那么生活对于他来说就是痛苦而危险的事。\n\n而如果一个人交友广泛，人脉很广，事业有成，拥有甜蜜的爱情和幸福的生活。那么我们可以断定，他的生活是丰富的，是充满创造性的。\n\n所以，作者认为，生命的意义在于乐于关注他人，渴望成为社会大家庭一员，梦想着为人类和社会贡献自己的力量。\n\n著名国学大师季羡林在望九之年写过一篇文章，叫《人生的意义与价值》，在文章的最后，他是这么说的：\n\n如果人生真有意义与价值的话，其意义与价值就在于对人类发展的承上启下，承前启后的责任感。\n古往今来，但凡人们认为具有“生命意义”的人或事，都离不开对他人和社会的贡献。那些赋予人生以个人意义的人，他们的人生就此走过，没有留下一丝痕迹。\n\n因此作者说：\n\n个人意义没有任何价值，真正的生命意义存在于个体与他人的交互作用中。每个人都希望自己变得重要、有价值，但如若不能搞懂个人的成就建立在对他人做出贡献的基础之上，那就太容易走上歧途。\n至此我们就能理解前面的话了，在努力追求优越感的过程中，只有那些为了他人的利益而前进的人和为了社会的发展而奋斗的人，才是能够超越生活，从而顺利获得优越感的人。\n\n以他人利益为重，那我们自己的利益怎么办？要回答这个问题，我们需要理解个体与社会的关系。\n\n## 早期记忆/童年 对一个人的影响有多大\n\n> 一个人的价值观，世界观都和经历有关，所有的经历造就了现在的你，你的所有需求，你的所有期望，都是曾经你经历的没有得到，所以你现在渴望得到。\n> 没有了解一个人的童年,是不会了解他的现在的。\n\n## 自卑感&优越感\n\n> 我们每个人都有不同程度的自卑感，因为我们都想让自己更优秀，让自己过更好的生活。自卑感的存在并不是一件坏事，因为它激励了人不断追求卓越，克服自身的障碍，在有限的生命空间内发挥出最大的价值。\n\n## 家庭\n\n> 婚姻是一种合作关系，所以两个人都不应该试图驾驭对方。\n\n自卑情结\n\n## 反思\n","slug":"meaning_of_life","published":1,"updated":"2021-04-21T06:53:37.262Z","_id":"ckjbdh6af00006sy66vr96vc9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"书与作者简介\"><a href=\"#书与作者简介\" class=\"headerlink\" title=\"书与作者简介\"></a>书与作者简介</h2><ul>\n<li>作者：[奥地利]阿尔弗雷德·阿德勒<ul>\n<li>医学博士</li>\n<li>从医：眼科、全科、精神科</li>\n<li>探索人格、心理与身体，得到了当时心理学大师弗洛伊德的赏识，加入了弗的心理分析学会</li>\n<li>与弗在产生分歧，退出了弗的心理分析学会，转而自立门派，研究“个体心理学”</li>\n<li>因“个体心理学”研究、一系列著作出版，而声名远播</li>\n</ul>\n</li>\n<li>书：心理学必读经典书籍《What Life Should Mean To You》<ul>\n<li>从个体心理学的观点出发，阐明人生道路和人生意义</li>\n<li>是一本通俗性读物，但包含着极深的哲理，和丰富的学术创见</li>\n<li>全书涉及了人生的方方面面：人活着的意义、心灵&amp;肉体关系、自卑感&amp;优越感、早起记忆和梦的意义、原生家庭和学校对人的影响、青春期、犯罪、职业、人&amp;同伴&amp;社交、爱情&amp;婚姻……</li>\n<li>中文书名的由来：这本书着重讲了自卑感的形成，自卑感对人的影响，如何超越自卑感，如何将自卑感转为对优越地位的追求以取得成就</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"带着问题看文章\"><a href=\"#带着问题看文章\" class=\"headerlink\" title=\"带着问题看文章\"></a>带着问题看文章</h2><p>很对人从孩童时期、到青春期、到中年，都在不断地苦苦思索人生的意义。</p>\n<p>很对人活一世，即使到临死前，也没能够了解自我。</p>\n<p>不知道这一生在追寻什么，最终得到了什么。</p>\n<p>因此，可以把这本书当作一本对自我的答疑书来看。</p>\n<p>当对人生的方方面面产生困惑时，可以翻阅本书，跟着阿德勒的个体心理学，探寻自己内心的最深处，摸索答案。</p>\n<hr>\n<h2 id=\"生活的意义到底是什么\"><a href=\"#生活的意义到底是什么\" class=\"headerlink\" title=\"生活的意义到底是什么\"></a>生活的意义到底是什么</h2><p>职业、交际和两性</p>\n<blockquote>\n<p>1、我与地球：我们生活在地球上，依靠地球所提供的资源生存，除此之外别无选择。</p>\n</blockquote>\n<p>2、我与他人/种族：任何人都是人类族系的一员，每个人必然要与他人发生关系。</p>\n<p>3、我和她：这一问题涉及爱情和婚姻。人类有两种性别，男和女。任何人的一生都无法避开爱情和婚姻这一问题。</p>\n<blockquote>\n<p>1、在地球的有限资源限制下，为了永存，我们应该如何工作？</p>\n</blockquote>\n<p>2、为了与人合作，共同发展，我们应该获得怎样的定位和身份？</p>\n<p>3、面对“人有男女”和“人类延续依赖于爱与婚姻”这一事实，我们应该如何调整自我？</p>\n<p>所以，个体心理学认为人类的所有问题都可以归于职业、交际和两性这三个问题。</p>\n<p>比如，一个人完全没有爱情，生活遭遇挫折，在工作上也表现得平平庸庸，并且不善交际，朋友很少，他觉得与同伴交往是非常痛苦的事情。那么生活对于他来说就是痛苦而危险的事。</p>\n<p>而如果一个人交友广泛，人脉很广，事业有成，拥有甜蜜的爱情和幸福的生活。那么我们可以断定，他的生活是丰富的，是充满创造性的。</p>\n<p>所以，作者认为，生命的意义在于乐于关注他人，渴望成为社会大家庭一员，梦想着为人类和社会贡献自己的力量。</p>\n<p>著名国学大师季羡林在望九之年写过一篇文章，叫《人生的意义与价值》，在文章的最后，他是这么说的：</p>\n<p>如果人生真有意义与价值的话，其意义与价值就在于对人类发展的承上启下，承前启后的责任感。<br>古往今来，但凡人们认为具有“生命意义”的人或事，都离不开对他人和社会的贡献。那些赋予人生以个人意义的人，他们的人生就此走过，没有留下一丝痕迹。</p>\n<p>因此作者说：</p>\n<p>个人意义没有任何价值，真正的生命意义存在于个体与他人的交互作用中。每个人都希望自己变得重要、有价值，但如若不能搞懂个人的成就建立在对他人做出贡献的基础之上，那就太容易走上歧途。<br>至此我们就能理解前面的话了，在努力追求优越感的过程中，只有那些为了他人的利益而前进的人和为了社会的发展而奋斗的人，才是能够超越生活，从而顺利获得优越感的人。</p>\n<p>以他人利益为重，那我们自己的利益怎么办？要回答这个问题，我们需要理解个体与社会的关系。</p>\n<h2 id=\"早期记忆-童年-对一个人的影响有多大\"><a href=\"#早期记忆-童年-对一个人的影响有多大\" class=\"headerlink\" title=\"早期记忆/童年 对一个人的影响有多大\"></a>早期记忆/童年 对一个人的影响有多大</h2><blockquote>\n<p>一个人的价值观，世界观都和经历有关，所有的经历造就了现在的你，你的所有需求，你的所有期望，都是曾经你经历的没有得到，所以你现在渴望得到。<br>没有了解一个人的童年,是不会了解他的现在的。</p>\n</blockquote>\n<h2 id=\"自卑感-amp-优越感\"><a href=\"#自卑感-amp-优越感\" class=\"headerlink\" title=\"自卑感&amp;优越感\"></a>自卑感&amp;优越感</h2><blockquote>\n<p>我们每个人都有不同程度的自卑感，因为我们都想让自己更优秀，让自己过更好的生活。自卑感的存在并不是一件坏事，因为它激励了人不断追求卓越，克服自身的障碍，在有限的生命空间内发挥出最大的价值。</p>\n</blockquote>\n<h2 id=\"家庭\"><a href=\"#家庭\" class=\"headerlink\" title=\"家庭\"></a>家庭</h2><blockquote>\n<p>婚姻是一种合作关系，所以两个人都不应该试图驾驭对方。</p>\n</blockquote>\n<p>自卑情结</p>\n<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"书与作者简介\"><a href=\"#书与作者简介\" class=\"headerlink\" title=\"书与作者简介\"></a>书与作者简介</h2><ul>\n<li>作者：[奥地利]阿尔弗雷德·阿德勒<ul>\n<li>医学博士</li>\n<li>从医：眼科、全科、精神科</li>\n<li>探索人格、心理与身体，得到了当时心理学大师弗洛伊德的赏识，加入了弗的心理分析学会</li>\n<li>与弗在产生分歧，退出了弗的心理分析学会，转而自立门派，研究“个体心理学”</li>\n<li>因“个体心理学”研究、一系列著作出版，而声名远播</li>\n</ul>\n</li>\n<li>书：心理学必读经典书籍《What Life Should Mean To You》<ul>\n<li>从个体心理学的观点出发，阐明人生道路和人生意义</li>\n<li>是一本通俗性读物，但包含着极深的哲理，和丰富的学术创见</li>\n<li>全书涉及了人生的方方面面：人活着的意义、心灵&amp;肉体关系、自卑感&amp;优越感、早起记忆和梦的意义、原生家庭和学校对人的影响、青春期、犯罪、职业、人&amp;同伴&amp;社交、爱情&amp;婚姻……</li>\n<li>中文书名的由来：这本书着重讲了自卑感的形成，自卑感对人的影响，如何超越自卑感，如何将自卑感转为对优越地位的追求以取得成就</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"带着问题看文章\"><a href=\"#带着问题看文章\" class=\"headerlink\" title=\"带着问题看文章\"></a>带着问题看文章</h2><p>很对人从孩童时期、到青春期、到中年，都在不断地苦苦思索人生的意义。</p>\n<p>很对人活一世，即使到临死前，也没能够了解自我。</p>\n<p>不知道这一生在追寻什么，最终得到了什么。</p>\n<p>因此，可以把这本书当作一本对自我的答疑书来看。</p>\n<p>当对人生的方方面面产生困惑时，可以翻阅本书，跟着阿德勒的个体心理学，探寻自己内心的最深处，摸索答案。</p>\n<hr>\n<h2 id=\"生活的意义到底是什么\"><a href=\"#生活的意义到底是什么\" class=\"headerlink\" title=\"生活的意义到底是什么\"></a>生活的意义到底是什么</h2><p>职业、交际和两性</p>\n<blockquote>\n<p>1、我与地球：我们生活在地球上，依靠地球所提供的资源生存，除此之外别无选择。</p>\n</blockquote>\n<p>2、我与他人/种族：任何人都是人类族系的一员，每个人必然要与他人发生关系。</p>\n<p>3、我和她：这一问题涉及爱情和婚姻。人类有两种性别，男和女。任何人的一生都无法避开爱情和婚姻这一问题。</p>\n<blockquote>\n<p>1、在地球的有限资源限制下，为了永存，我们应该如何工作？</p>\n</blockquote>\n<p>2、为了与人合作，共同发展，我们应该获得怎样的定位和身份？</p>\n<p>3、面对“人有男女”和“人类延续依赖于爱与婚姻”这一事实，我们应该如何调整自我？</p>\n<p>所以，个体心理学认为人类的所有问题都可以归于职业、交际和两性这三个问题。</p>\n<p>比如，一个人完全没有爱情，生活遭遇挫折，在工作上也表现得平平庸庸，并且不善交际，朋友很少，他觉得与同伴交往是非常痛苦的事情。那么生活对于他来说就是痛苦而危险的事。</p>\n<p>而如果一个人交友广泛，人脉很广，事业有成，拥有甜蜜的爱情和幸福的生活。那么我们可以断定，他的生活是丰富的，是充满创造性的。</p>\n<p>所以，作者认为，生命的意义在于乐于关注他人，渴望成为社会大家庭一员，梦想着为人类和社会贡献自己的力量。</p>\n<p>著名国学大师季羡林在望九之年写过一篇文章，叫《人生的意义与价值》，在文章的最后，他是这么说的：</p>\n<p>如果人生真有意义与价值的话，其意义与价值就在于对人类发展的承上启下，承前启后的责任感。<br>古往今来，但凡人们认为具有“生命意义”的人或事，都离不开对他人和社会的贡献。那些赋予人生以个人意义的人，他们的人生就此走过，没有留下一丝痕迹。</p>\n<p>因此作者说：</p>\n<p>个人意义没有任何价值，真正的生命意义存在于个体与他人的交互作用中。每个人都希望自己变得重要、有价值，但如若不能搞懂个人的成就建立在对他人做出贡献的基础之上，那就太容易走上歧途。<br>至此我们就能理解前面的话了，在努力追求优越感的过程中，只有那些为了他人的利益而前进的人和为了社会的发展而奋斗的人，才是能够超越生活，从而顺利获得优越感的人。</p>\n<p>以他人利益为重，那我们自己的利益怎么办？要回答这个问题，我们需要理解个体与社会的关系。</p>\n<h2 id=\"早期记忆-童年-对一个人的影响有多大\"><a href=\"#早期记忆-童年-对一个人的影响有多大\" class=\"headerlink\" title=\"早期记忆/童年 对一个人的影响有多大\"></a>早期记忆/童年 对一个人的影响有多大</h2><blockquote>\n<p>一个人的价值观，世界观都和经历有关，所有的经历造就了现在的你，你的所有需求，你的所有期望，都是曾经你经历的没有得到，所以你现在渴望得到。<br>没有了解一个人的童年,是不会了解他的现在的。</p>\n</blockquote>\n<h2 id=\"自卑感-amp-优越感\"><a href=\"#自卑感-amp-优越感\" class=\"headerlink\" title=\"自卑感&amp;优越感\"></a>自卑感&amp;优越感</h2><blockquote>\n<p>我们每个人都有不同程度的自卑感，因为我们都想让自己更优秀，让自己过更好的生活。自卑感的存在并不是一件坏事，因为它激励了人不断追求卓越，克服自身的障碍，在有限的生命空间内发挥出最大的价值。</p>\n</blockquote>\n<h2 id=\"家庭\"><a href=\"#家庭\" class=\"headerlink\" title=\"家庭\"></a>家庭</h2><blockquote>\n<p>婚姻是一种合作关系，所以两个人都不应该试图驾驭对方。</p>\n</blockquote>\n<p>自卑情结</p>\n<h2 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h2>"},{"title":"2021年，给自己来点鸡血","comments":1,"date":"2020-12-31T16:00:00.000Z","description":"及时止废","toc":0,"status":"Done","img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210122174027.png","_content":"\n## 为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\"><i class=\"fa fa-link\"></i>原文</a>\n\n> **爆炸性压力才能带来爆炸性进步**\n>\n> 每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：\n>\n> 演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。\n>\n> 这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。\n>\n> 不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。\n>\n> 祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。\n>\n> 前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。\n>\n> 再烂的牌也得打下去，这就是人生\n>\n\n## 成熟的一些标志\n\n> 能克制欲望，不追求即时反馈，延迟享受。\n>\n> 保持一致性，无论在人群中还是独处时，知行合一，不卑不亢，不矫揉造作，不哗众取宠。心中始终有底线、有原则、有追求。时刻反省自己：what在做什么、why为什么这样做、how如何做的更好\n\n—— 尼古拉斯·鱼\n\n## 别让任何人打乱你的人生节奏\n\n> 每个人的人生都不同\n>\n> \"Not everything that counts can be counted，and not everything that's counted truly counts\"\n>\n> \"并不是每件算出来的事，都有意义；也不是每件有意义的事，都能被算出来\" ——爱因斯坦\n\n[@https://www.bilibili.com/video/BV1WW411F7Hx](https://www.bilibili.com/video/BV1WW411F7Hx)\n\n## 如何追求快乐\n\n> 有很多快乐是放纵的快乐，是降低了人性尊严的快乐，而越能体现人性尊严的快乐，越是一种高级的快乐。\n>\n> 追求高级的快乐并不意味着放弃低级的快乐，但是如果你的眼目永远只关注地下，你永远不知道向上看有多么的快乐。\n\n——罗翔\n\n[@https://www.bilibili.com/video/BV1AE411T7p7](https://www.bilibili.com/video/BV1AE411T7p7)\n\n> I don't need dollar bills to have fun\n\n——【Cheap Thrills】 Sia\n\n## 关于坚持\n\n> 坚持这两个字，远比你想象中的要难的多，但也比你想象中的有效的多。\n>\n> 'You do make a difference!'\n\n[@https://www.bilibili.com/video/BV1XJ411d7Xx](https://www.bilibili.com/video/BV1XJ411d7Xx)\n\n> 两年，是很容易虚度过去的时长，也是足够改变自己的时长。\n\n[@https://www.bilibili.com/video/BV1NE41197sr](https://www.bilibili.com/video/BV1NE41197sr)\n\n## 就是不想努力怎么办\n\n> 我就想做一个安于现状的人\n> \n> 就想利用上班赚钱过好自己的小日子\n> \n> 就想平凡的过完一生\n> \n> 我就是不想拼命奋斗，拼命努力，拼命内卷\n> \n> 不可以吗？\n\n当然可以，每个人的追求不同，淡泊名利，平静一生，真正能做到的话，是一种很高的人生境界。\n\n但是你做出这种决定，就要考虑其带来的结果\n\n> 你能做到真正的“淡泊名利”吗？\n> \n> 当别人用光鲜亮丽的服装、车子、房子包装和提升自己的生活品质时，你能做到不羡慕吗\n>\n> 当别人在马尔代夫浮潜、在阿尔卑斯滑雪、在土耳其滑翔、在富士山脚泡温泉喝清酒，你能做到不羡慕吗\n> \n> 你身边的人生活品质都比你高得时候，你会不会后悔\n> \n> 你的普通收入扣除房子首付、房贷、车子、奶粉钱之后你还足够安稳吗\n> \n> 如果不买房，你可以做到一生租房，并容忍一生到老不断的搬家吗\n> \n> 你的普通收入能让你匹配上你心仪的另一半吗\n> \n> 你的现状能维持你一生的稳定平凡吗？你能对抗人生所有的风险吗\n> \n> 你可以为自己的一生、父母后半生、孩子前半生的大大小小的健康问题买单吗\n> \n> 如果你有了孩子，你作为爸爸/妈妈，能给孩子最好的教育吗\n> \n\n如果你深刻的考虑了这些问题，得到的答案都是肯定的，那么安于现状，不拼命努力，也没什么不好\n\n每个人的人生都不同，人生的路也没有对错之分，只是路上的酸甜苦辣，你需要独自承担\n\n## 比本文更硬核的鸡血\n\n[为什么要趁年轻多学习 - 知乎](https://www.zhihu.com/question/354919014)\n[乔布斯 斯坦福大学演讲 - bilibili](https://www.bilibili.com/video/BV1Ts411s74h)\n[前端er要向qian看 - BOSS直聘](https://www.zhipin.com/c100010000/y_8/?query=%E5%89%8D%E7%AB%AF&ka=sel-salary-8)\n[别让任何人打乱你的人生节奏 - bilibili](https://www.bilibili.com/video/BV1WW411F7Hx)\n[如何对抗平庸的生活 - 罗翔](https://www.bilibili.com/video/BV1AE411T7p7)\n[做人一定要坚持 - bilibili](https://www.bilibili.com/video/BV1XJ411d7Xx)\n[改变自己，只需要两年时间 - TED](https://www.bilibili.com/video/BV1NE41197sr)\n[真正的自律 - Will Smith](https://www.bilibili.com/video/BV1Db411w74B)\n[自信心不足? - bilibili](https://www.bilibili.com/video/BV1b7411s7sL)\n\n---\n\n2021，自律 + 坚持，一路向前\n","source":"_posts/2021_hello.md","raw":"---\ntitle: 2021年，给自己来点鸡血 # 文章标题\ncategories:\n    - 01关于 # 一级分类\ntags:\ncomments: true #开启评论\ndate: 2021-01-01\ndescription: 及时止废\ntoc: 0\nstatus: Done\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210122174027.png\n---\n\n## 为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\"><i class=\"fa fa-link\"></i>原文</a>\n\n> **爆炸性压力才能带来爆炸性进步**\n>\n> 每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：\n>\n> 演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。\n>\n> 这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。\n>\n> 不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。\n>\n> 祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。\n>\n> 前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。\n>\n> 再烂的牌也得打下去，这就是人生\n>\n\n## 成熟的一些标志\n\n> 能克制欲望，不追求即时反馈，延迟享受。\n>\n> 保持一致性，无论在人群中还是独处时，知行合一，不卑不亢，不矫揉造作，不哗众取宠。心中始终有底线、有原则、有追求。时刻反省自己：what在做什么、why为什么这样做、how如何做的更好\n\n—— 尼古拉斯·鱼\n\n## 别让任何人打乱你的人生节奏\n\n> 每个人的人生都不同\n>\n> \"Not everything that counts can be counted，and not everything that's counted truly counts\"\n>\n> \"并不是每件算出来的事，都有意义；也不是每件有意义的事，都能被算出来\" ——爱因斯坦\n\n[@https://www.bilibili.com/video/BV1WW411F7Hx](https://www.bilibili.com/video/BV1WW411F7Hx)\n\n## 如何追求快乐\n\n> 有很多快乐是放纵的快乐，是降低了人性尊严的快乐，而越能体现人性尊严的快乐，越是一种高级的快乐。\n>\n> 追求高级的快乐并不意味着放弃低级的快乐，但是如果你的眼目永远只关注地下，你永远不知道向上看有多么的快乐。\n\n——罗翔\n\n[@https://www.bilibili.com/video/BV1AE411T7p7](https://www.bilibili.com/video/BV1AE411T7p7)\n\n> I don't need dollar bills to have fun\n\n——【Cheap Thrills】 Sia\n\n## 关于坚持\n\n> 坚持这两个字，远比你想象中的要难的多，但也比你想象中的有效的多。\n>\n> 'You do make a difference!'\n\n[@https://www.bilibili.com/video/BV1XJ411d7Xx](https://www.bilibili.com/video/BV1XJ411d7Xx)\n\n> 两年，是很容易虚度过去的时长，也是足够改变自己的时长。\n\n[@https://www.bilibili.com/video/BV1NE41197sr](https://www.bilibili.com/video/BV1NE41197sr)\n\n## 就是不想努力怎么办\n\n> 我就想做一个安于现状的人\n> \n> 就想利用上班赚钱过好自己的小日子\n> \n> 就想平凡的过完一生\n> \n> 我就是不想拼命奋斗，拼命努力，拼命内卷\n> \n> 不可以吗？\n\n当然可以，每个人的追求不同，淡泊名利，平静一生，真正能做到的话，是一种很高的人生境界。\n\n但是你做出这种决定，就要考虑其带来的结果\n\n> 你能做到真正的“淡泊名利”吗？\n> \n> 当别人用光鲜亮丽的服装、车子、房子包装和提升自己的生活品质时，你能做到不羡慕吗\n>\n> 当别人在马尔代夫浮潜、在阿尔卑斯滑雪、在土耳其滑翔、在富士山脚泡温泉喝清酒，你能做到不羡慕吗\n> \n> 你身边的人生活品质都比你高得时候，你会不会后悔\n> \n> 你的普通收入扣除房子首付、房贷、车子、奶粉钱之后你还足够安稳吗\n> \n> 如果不买房，你可以做到一生租房，并容忍一生到老不断的搬家吗\n> \n> 你的普通收入能让你匹配上你心仪的另一半吗\n> \n> 你的现状能维持你一生的稳定平凡吗？你能对抗人生所有的风险吗\n> \n> 你可以为自己的一生、父母后半生、孩子前半生的大大小小的健康问题买单吗\n> \n> 如果你有了孩子，你作为爸爸/妈妈，能给孩子最好的教育吗\n> \n\n如果你深刻的考虑了这些问题，得到的答案都是肯定的，那么安于现状，不拼命努力，也没什么不好\n\n每个人的人生都不同，人生的路也没有对错之分，只是路上的酸甜苦辣，你需要独自承担\n\n## 比本文更硬核的鸡血\n\n[为什么要趁年轻多学习 - 知乎](https://www.zhihu.com/question/354919014)\n[乔布斯 斯坦福大学演讲 - bilibili](https://www.bilibili.com/video/BV1Ts411s74h)\n[前端er要向qian看 - BOSS直聘](https://www.zhipin.com/c100010000/y_8/?query=%E5%89%8D%E7%AB%AF&ka=sel-salary-8)\n[别让任何人打乱你的人生节奏 - bilibili](https://www.bilibili.com/video/BV1WW411F7Hx)\n[如何对抗平庸的生活 - 罗翔](https://www.bilibili.com/video/BV1AE411T7p7)\n[做人一定要坚持 - bilibili](https://www.bilibili.com/video/BV1XJ411d7Xx)\n[改变自己，只需要两年时间 - TED](https://www.bilibili.com/video/BV1NE41197sr)\n[真正的自律 - Will Smith](https://www.bilibili.com/video/BV1Db411w74B)\n[自信心不足? - bilibili](https://www.bilibili.com/video/BV1b7411s7sL)\n\n---\n\n2021，自律 + 坚持，一路向前\n","slug":"2021_hello","published":1,"updated":"2021-01-22T09:40:34.457Z","_id":"ckk7wfjrl0000ncy6lpofswdj","layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要趁年轻多学习原文\"><a href=\"#为什么要趁年轻多学习原文\" class=\"headerlink\" title=\"为什么要趁年轻多学习原文\"></a>为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-link\"></i>原文</a></h2><blockquote>\n<p><strong>爆炸性压力才能带来爆炸性进步</strong></p>\n<p>每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：</p>\n<p>演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。</p>\n<p>这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。</p>\n<p>不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。</p>\n<p>祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。</p>\n<p>前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。</p>\n<p>再烂的牌也得打下去，这就是人生</p>\n</blockquote>\n<h2 id=\"成熟的一些标志\"><a href=\"#成熟的一些标志\" class=\"headerlink\" title=\"成熟的一些标志\"></a>成熟的一些标志</h2><blockquote>\n<p>能克制欲望，不追求即时反馈，延迟享受。</p>\n<p>保持一致性，无论在人群中还是独处时，知行合一，不卑不亢，不矫揉造作，不哗众取宠。心中始终有底线、有原则、有追求。时刻反省自己：what在做什么、why为什么这样做、how如何做的更好</p>\n</blockquote>\n<p>—— 尼古拉斯·鱼</p>\n<h2 id=\"别让任何人打乱你的人生节奏\"><a href=\"#别让任何人打乱你的人生节奏\" class=\"headerlink\" title=\"别让任何人打乱你的人生节奏\"></a>别让任何人打乱你的人生节奏</h2><blockquote>\n<p>每个人的人生都不同</p>\n<p>“Not everything that counts can be counted，and not everything that’s counted truly counts”</p>\n<p>“并不是每件算出来的事，都有意义；也不是每件有意义的事，都能被算出来” ——爱因斯坦</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1WW411F7Hx\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1WW411F7Hx</a></p>\n<h2 id=\"如何追求快乐\"><a href=\"#如何追求快乐\" class=\"headerlink\" title=\"如何追求快乐\"></a>如何追求快乐</h2><blockquote>\n<p>有很多快乐是放纵的快乐，是降低了人性尊严的快乐，而越能体现人性尊严的快乐，越是一种高级的快乐。</p>\n<p>追求高级的快乐并不意味着放弃低级的快乐，但是如果你的眼目永远只关注地下，你永远不知道向上看有多么的快乐。</p>\n</blockquote>\n<p>——罗翔</p>\n<p><a href=\"https://www.bilibili.com/video/BV1AE411T7p7\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1AE411T7p7</a></p>\n<blockquote>\n<p>I don’t need dollar bills to have fun</p>\n</blockquote>\n<p>——【Cheap Thrills】 Sia</p>\n<h2 id=\"关于坚持\"><a href=\"#关于坚持\" class=\"headerlink\" title=\"关于坚持\"></a>关于坚持</h2><blockquote>\n<p>坚持这两个字，远比你想象中的要难的多，但也比你想象中的有效的多。</p>\n<p>‘You do make a difference!’</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1XJ411d7Xx\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1XJ411d7Xx</a></p>\n<blockquote>\n<p>两年，是很容易虚度过去的时长，也是足够改变自己的时长。</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1NE41197sr\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1NE41197sr</a></p>\n<h2 id=\"就是不想努力怎么办\"><a href=\"#就是不想努力怎么办\" class=\"headerlink\" title=\"就是不想努力怎么办\"></a>就是不想努力怎么办</h2><blockquote>\n<p>我就想做一个安于现状的人</p>\n<p>就想利用上班赚钱过好自己的小日子</p>\n<p>就想平凡的过完一生</p>\n<p>我就是不想拼命奋斗，拼命努力，拼命内卷</p>\n<p>不可以吗？</p>\n</blockquote>\n<p>当然可以，每个人的追求不同，淡泊名利，平静一生，真正能做到的话，是一种很高的人生境界。</p>\n<p>但是你做出这种决定，就要考虑其带来的结果</p>\n<blockquote>\n<p>你能做到真正的“淡泊名利”吗？</p>\n<p>当别人用光鲜亮丽的服装、车子、房子包装和提升自己的生活品质时，你能做到不羡慕吗</p>\n<p>当别人在马尔代夫浮潜、在阿尔卑斯滑雪、在土耳其滑翔、在富士山脚泡温泉喝清酒，你能做到不羡慕吗</p>\n<p>你身边的人生活品质都比你高得时候，你会不会后悔</p>\n<p>你的普通收入扣除房子首付、房贷、车子、奶粉钱之后你还足够安稳吗</p>\n<p>如果不买房，你可以做到一生租房，并容忍一生到老不断的搬家吗</p>\n<p>你的普通收入能让你匹配上你心仪的另一半吗</p>\n<p>你的现状能维持你一生的稳定平凡吗？你能对抗人生所有的风险吗</p>\n<p>你可以为自己的一生、父母后半生、孩子前半生的大大小小的健康问题买单吗</p>\n<p>如果你有了孩子，你作为爸爸/妈妈，能给孩子最好的教育吗</p>\n</blockquote>\n<p>如果你深刻的考虑了这些问题，得到的答案都是肯定的，那么安于现状，不拼命努力，也没什么不好</p>\n<p>每个人的人生都不同，人生的路也没有对错之分，只是路上的酸甜苦辣，你需要独自承担</p>\n<h2 id=\"比本文更硬核的鸡血\"><a href=\"#比本文更硬核的鸡血\" class=\"headerlink\" title=\"比本文更硬核的鸡血\"></a>比本文更硬核的鸡血</h2><p><a href=\"https://www.zhihu.com/question/354919014\" target=\"_blank\" rel=\"noopener\">为什么要趁年轻多学习 - 知乎</a><br><a href=\"https://www.bilibili.com/video/BV1Ts411s74h\" target=\"_blank\" rel=\"noopener\">乔布斯 斯坦福大学演讲 - bilibili</a><br><a href=\"https://www.zhipin.com/c100010000/y_8/?query=%E5%89%8D%E7%AB%AF&amp;ka=sel-salary-8\" target=\"_blank\" rel=\"noopener\">前端er要向qian看 - BOSS直聘</a><br><a href=\"https://www.bilibili.com/video/BV1WW411F7Hx\" target=\"_blank\" rel=\"noopener\">别让任何人打乱你的人生节奏 - bilibili</a><br><a href=\"https://www.bilibili.com/video/BV1AE411T7p7\" target=\"_blank\" rel=\"noopener\">如何对抗平庸的生活 - 罗翔</a><br><a href=\"https://www.bilibili.com/video/BV1XJ411d7Xx\" target=\"_blank\" rel=\"noopener\">做人一定要坚持 - bilibili</a><br><a href=\"https://www.bilibili.com/video/BV1NE41197sr\" target=\"_blank\" rel=\"noopener\">改变自己，只需要两年时间 - TED</a><br><a href=\"https://www.bilibili.com/video/BV1Db411w74B\" target=\"_blank\" rel=\"noopener\">真正的自律 - Will Smith</a><br><a href=\"https://www.bilibili.com/video/BV1b7411s7sL\" target=\"_blank\" rel=\"noopener\">自信心不足? - bilibili</a></p>\n<hr>\n<p>2021，自律 + 坚持，一路向前</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要趁年轻多学习原文\"><a href=\"#为什么要趁年轻多学习原文\" class=\"headerlink\" title=\"为什么要趁年轻多学习原文\"></a>为什么要趁年轻多学习<a href=\"https://www.zhihu.com/question/354919014/answer/906152325\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-link\"></i>原文</a></h2><blockquote>\n<p><strong>爆炸性压力才能带来爆炸性进步</strong></p>\n<p>每次我状态低迷的时候，我都会看看这个视频，视频18分钟，如果你懒得看，我简述一下：</p>\n<p>演讲者是许峰源先生，他出身一个非常贫穷的家庭，整个家庭，靠的是父亲踩着三轮车出去卖豆腐微薄的收入支撑着。</p>\n<p>这不是一个烂仔逆袭的故事，因为从小看到了生活艰苦的一面，许峰源一直很努力想考上台大法律系，因为成为律师才有高收入，才能改变家庭的现状。</p>\n<p>不幸的是，在他上大学的时候，父亲却查出了舌癌晚期，只剩一年左右的时间，为了让父亲在临终前看到自己的孩子成才，许峰源用了极短的时间通过了司法考试，成为了一名律师，让父亲看到了自己的律师证，才安然去世。</p>\n<p>祸不单行，很快许峰源的母亲也查出了患有肺腺癌，一种扩散很迅猛的癌症，为了让母亲有一个安享晚年的环境，许峰源在23岁的时候，毅然辞职创业，白天在律师事务所打拼，晚上做培训，最终让母亲住上了好房子，接受更好的治疗，然后平静地送走了母亲。</p>\n<p>前半生，许峰源先生为之奋斗的两个对象都走了，迷茫了一阵子之后，他依然没有放弃努力，而是选择了实现自我，成为了一名作家。</p>\n<p>再烂的牌也得打下去，这就是人生</p>\n</blockquote>\n<h2 id=\"成熟的一些标志\"><a href=\"#成熟的一些标志\" class=\"headerlink\" title=\"成熟的一些标志\"></a>成熟的一些标志</h2><blockquote>\n<p>能克制欲望，不追求即时反馈，延迟享受。</p>\n<p>保持一致性，无论在人群中还是独处时，知行合一，不卑不亢，不矫揉造作，不哗众取宠。心中始终有底线、有原则、有追求。时刻反省自己：what在做什么、why为什么这样做、how如何做的更好</p>\n</blockquote>\n<p>—— 尼古拉斯·鱼</p>\n<h2 id=\"别让任何人打乱你的人生节奏\"><a href=\"#别让任何人打乱你的人生节奏\" class=\"headerlink\" title=\"别让任何人打乱你的人生节奏\"></a>别让任何人打乱你的人生节奏</h2><blockquote>\n<p>每个人的人生都不同</p>\n<p>“Not everything that counts can be counted，and not everything that’s counted truly counts”</p>\n<p>“并不是每件算出来的事，都有意义；也不是每件有意义的事，都能被算出来” ——爱因斯坦</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1WW411F7Hx\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1WW411F7Hx</a></p>\n<h2 id=\"如何追求快乐\"><a href=\"#如何追求快乐\" class=\"headerlink\" title=\"如何追求快乐\"></a>如何追求快乐</h2><blockquote>\n<p>有很多快乐是放纵的快乐，是降低了人性尊严的快乐，而越能体现人性尊严的快乐，越是一种高级的快乐。</p>\n<p>追求高级的快乐并不意味着放弃低级的快乐，但是如果你的眼目永远只关注地下，你永远不知道向上看有多么的快乐。</p>\n</blockquote>\n<p>——罗翔</p>\n<p><a href=\"https://www.bilibili.com/video/BV1AE411T7p7\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1AE411T7p7</a></p>\n<blockquote>\n<p>I don’t need dollar bills to have fun</p>\n</blockquote>\n<p>——【Cheap Thrills】 Sia</p>\n<h2 id=\"关于坚持\"><a href=\"#关于坚持\" class=\"headerlink\" title=\"关于坚持\"></a>关于坚持</h2><blockquote>\n<p>坚持这两个字，远比你想象中的要难的多，但也比你想象中的有效的多。</p>\n<p>‘You do make a difference!’</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1XJ411d7Xx\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1XJ411d7Xx</a></p>\n<blockquote>\n<p>两年，是很容易虚度过去的时长，也是足够改变自己的时长。</p>\n</blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1NE41197sr\" target=\"_blank\" rel=\"noopener\">@https://www.bilibili.com/video/BV1NE41197sr</a></p>\n<h2 id=\"就是不想努力怎么办\"><a href=\"#就是不想努力怎么办\" class=\"headerlink\" title=\"就是不想努力怎么办\"></a>就是不想努力怎么办</h2><blockquote>\n<p>我就想做一个安于现状的人</p>\n<p>就想利用上班赚钱过好自己的小日子</p>\n<p>就想平凡的过完一生</p>\n<p>我就是不想拼命奋斗，拼命努力，拼命内卷</p>\n<p>不可以吗？</p>\n</blockquote>\n<p>当然可以，每个人的追求不同，淡泊名利，平静一生，真正能做到的话，是一种很高的人生境界。</p>\n<p>但是你做出这种决定，就要考虑其带来的结果</p>\n<blockquote>\n<p>你能做到真正的“淡泊名利”吗？</p>\n<p>当别人用光鲜亮丽的服装、车子、房子包装和提升自己的生活品质时，你能做到不羡慕吗</p>\n<p>当别人在马尔代夫浮潜、在阿尔卑斯滑雪、在土耳其滑翔、在富士山脚泡温泉喝清酒，你能做到不羡慕吗</p>\n<p>你身边的人生活品质都比你高得时候，你会不会后悔</p>\n<p>你的普通收入扣除房子首付、房贷、车子、奶粉钱之后你还足够安稳吗</p>\n<p>如果不买房，你可以做到一生租房，并容忍一生到老不断的搬家吗</p>\n<p>你的普通收入能让你匹配上你心仪的另一半吗</p>\n<p>你的现状能维持你一生的稳定平凡吗？你能对抗人生所有的风险吗</p>\n<p>你可以为自己的一生、父母后半生、孩子前半生的大大小小的健康问题买单吗</p>\n<p>如果你有了孩子，你作为爸爸/妈妈，能给孩子最好的教育吗</p>\n</blockquote>\n<p>如果你深刻的考虑了这些问题，得到的答案都是肯定的，那么安于现状，不拼命努力，也没什么不好</p>\n<p>每个人的人生都不同，人生的路也没有对错之分，只是路上的酸甜苦辣，你需要独自承担</p>\n<h2 id=\"比本文更硬核的鸡血\"><a href=\"#比本文更硬核的鸡血\" class=\"headerlink\" title=\"比本文更硬核的鸡血\"></a>比本文更硬核的鸡血</h2><p><a href=\"https://www.zhihu.com/question/354919014\" target=\"_blank\" rel=\"noopener\">为什么要趁年轻多学习 - 知乎</a><br><a href=\"https://www.bilibili.com/video/BV1Ts411s74h\" target=\"_blank\" rel=\"noopener\">乔布斯 斯坦福大学演讲 - bilibili</a><br><a href=\"https://www.zhipin.com/c100010000/y_8/?query=%E5%89%8D%E7%AB%AF&amp;ka=sel-salary-8\" target=\"_blank\" rel=\"noopener\">前端er要向qian看 - BOSS直聘</a><br><a href=\"https://www.bilibili.com/video/BV1WW411F7Hx\" target=\"_blank\" rel=\"noopener\">别让任何人打乱你的人生节奏 - bilibili</a><br><a href=\"https://www.bilibili.com/video/BV1AE411T7p7\" target=\"_blank\" rel=\"noopener\">如何对抗平庸的生活 - 罗翔</a><br><a href=\"https://www.bilibili.com/video/BV1XJ411d7Xx\" target=\"_blank\" rel=\"noopener\">做人一定要坚持 - bilibili</a><br><a href=\"https://www.bilibili.com/video/BV1NE41197sr\" target=\"_blank\" rel=\"noopener\">改变自己，只需要两年时间 - TED</a><br><a href=\"https://www.bilibili.com/video/BV1Db411w74B\" target=\"_blank\" rel=\"noopener\">真正的自律 - Will Smith</a><br><a href=\"https://www.bilibili.com/video/BV1b7411s7sL\" target=\"_blank\" rel=\"noopener\">自信心不足? - bilibili</a></p>\n<hr>\n<p>2021，自律 + 坚持，一路向前</p>\n"},{"title":"GTD时间管理","date":"2021-01-26T16:00:00.000Z","description":"Get Things Done，简单高效的应对信息洪流","toc":1,"top":0,"status":"Done","img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210127181250.png","_content":"\n## 优点\n\n- 更好的应对**信息洪流**，不被其打乱**节奏**，减少信息焦虑，减压\n\n遇见一个信息就处理一个，很容易打乱节奏，先收集再定期处理，类似计算机进程调度\n\n- 和任务管理协同执行，定期处理信息、更新任务，可以使任务更灵活稳定，成长**效率**更高\n\n例如每周7天，前6天专心执行当下的任务，不理会新的信息，只需要将其丢入inbox；\n\n第7天专心整理inbox，对任务做相应的调节（毕竟大脑是个单线程机器\n\n- 利于对信息抽丝剥茧，更高效的将**信息**筛选转化为自己的**认知**\n\n举个例子🌰，你养了一个鱼塘，每天都去钓鱼，无论肥瘦只要上钩你都照单全收，最后鱼篓不一定挺得住不说，鱼的质量也不高；\n但是你养上一周一个月，再去挑大鱼，又省力，质量又高 😉\n\n## 简化的GTD流程\n\n![GTD流程图](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210127180326.png)\n\n### 1 执行 **& 收集期**\n\n- 在各种设备、将各种来源的新信息，统一收集到inbox收集箱\n- 专心的执行当下的任务，不受信息困扰\n\ninbox的形式千千万，用的开心就好\n\n可以使用专业的app，例如：OmniFocus、Doit IM\n\n也可以使用更易得的工具，例如：只有自己的微信QQ群、邮箱\n\n我个人比较偏向QQ群，1是手机电脑qq常在线，2是比微信方便同步，3支持文字 图片 链接 文件，覆盖大部分场景\n\n### 2 **处理期**\n\n- 定期整理：规定定期的时间，例如每周末/每月底，处理inbox\n- 理解转化：筛选有价值的信息，理解并记忆，输出自己的东西，归纳融合到自己的知识体系中\n- 计划：根据信息的更新，确定/调整下一周期的待办事项\n\n## 更多资源\n\n- [一年多的GTD和自我管理之路文章](https://www.mifengtd.cn/articles/reflections-on-gtd-after-a-year.html)\n\n---\n\n顺嘴提一下，本篇文章也是作者通过GTD方法得来的：听微信群友提到GTD，就把关键词转到了inbox，月末的时候整理inbox，检索GTD信息，有了自己的理解，输出成了本篇文章。\n\n希望对你有帮助，成长愉快:)","source":"_posts/gtd.md","raw":"---\ntitle: GTD时间管理\ncategories:\n    - 03成长 | 自我管理\ntags:\ndate: 2021-01-27\ndescription: Get Things Done，简单高效的应对信息洪流\ntoc: 1\ntop: 0\nstatus: Done\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210127181250.png\n---\n\n## 优点\n\n- 更好的应对**信息洪流**，不被其打乱**节奏**，减少信息焦虑，减压\n\n遇见一个信息就处理一个，很容易打乱节奏，先收集再定期处理，类似计算机进程调度\n\n- 和任务管理协同执行，定期处理信息、更新任务，可以使任务更灵活稳定，成长**效率**更高\n\n例如每周7天，前6天专心执行当下的任务，不理会新的信息，只需要将其丢入inbox；\n\n第7天专心整理inbox，对任务做相应的调节（毕竟大脑是个单线程机器\n\n- 利于对信息抽丝剥茧，更高效的将**信息**筛选转化为自己的**认知**\n\n举个例子🌰，你养了一个鱼塘，每天都去钓鱼，无论肥瘦只要上钩你都照单全收，最后鱼篓不一定挺得住不说，鱼的质量也不高；\n但是你养上一周一个月，再去挑大鱼，又省力，质量又高 😉\n\n## 简化的GTD流程\n\n![GTD流程图](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210127180326.png)\n\n### 1 执行 **& 收集期**\n\n- 在各种设备、将各种来源的新信息，统一收集到inbox收集箱\n- 专心的执行当下的任务，不受信息困扰\n\ninbox的形式千千万，用的开心就好\n\n可以使用专业的app，例如：OmniFocus、Doit IM\n\n也可以使用更易得的工具，例如：只有自己的微信QQ群、邮箱\n\n我个人比较偏向QQ群，1是手机电脑qq常在线，2是比微信方便同步，3支持文字 图片 链接 文件，覆盖大部分场景\n\n### 2 **处理期**\n\n- 定期整理：规定定期的时间，例如每周末/每月底，处理inbox\n- 理解转化：筛选有价值的信息，理解并记忆，输出自己的东西，归纳融合到自己的知识体系中\n- 计划：根据信息的更新，确定/调整下一周期的待办事项\n\n## 更多资源\n\n- [一年多的GTD和自我管理之路文章](https://www.mifengtd.cn/articles/reflections-on-gtd-after-a-year.html)\n\n---\n\n顺嘴提一下，本篇文章也是作者通过GTD方法得来的：听微信群友提到GTD，就把关键词转到了inbox，月末的时候整理inbox，检索GTD信息，有了自己的理解，输出成了本篇文章。\n\n希望对你有帮助，成长愉快:)","slug":"gtd","published":1,"updated":"2021-01-27T10:24:56.758Z","_id":"ckkf7l95r0000rwy6lui7ryrg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>更好的应对<strong>信息洪流</strong>，不被其打乱<strong>节奏</strong>，减少信息焦虑，减压</li>\n</ul>\n<p>遇见一个信息就处理一个，很容易打乱节奏，先收集再定期处理，类似计算机进程调度</p>\n<ul>\n<li>和任务管理协同执行，定期处理信息、更新任务，可以使任务更灵活稳定，成长<strong>效率</strong>更高</li>\n</ul>\n<p>例如每周7天，前6天专心执行当下的任务，不理会新的信息，只需要将其丢入inbox；</p>\n<p>第7天专心整理inbox，对任务做相应的调节（毕竟大脑是个单线程机器</p>\n<ul>\n<li>利于对信息抽丝剥茧，更高效的将<strong>信息</strong>筛选转化为自己的<strong>认知</strong></li>\n</ul>\n<p>举个例子🌰，你养了一个鱼塘，每天都去钓鱼，无论肥瘦只要上钩你都照单全收，最后鱼篓不一定挺得住不说，鱼的质量也不高；<br>但是你养上一周一个月，再去挑大鱼，又省力，质量又高 😉</p>\n<h2 id=\"简化的GTD流程\"><a href=\"#简化的GTD流程\" class=\"headerlink\" title=\"简化的GTD流程\"></a>简化的GTD流程</h2><p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210127180326.png\" alt=\"GTD流程图\"></p>\n<h3 id=\"1-执行-amp-收集期\"><a href=\"#1-执行-amp-收集期\" class=\"headerlink\" title=\"1 执行 &amp; 收集期\"></a>1 执行 <strong>&amp; 收集期</strong></h3><ul>\n<li>在各种设备、将各种来源的新信息，统一收集到inbox收集箱</li>\n<li>专心的执行当下的任务，不受信息困扰</li>\n</ul>\n<p>inbox的形式千千万，用的开心就好</p>\n<p>可以使用专业的app，例如：OmniFocus、Doit IM</p>\n<p>也可以使用更易得的工具，例如：只有自己的微信QQ群、邮箱</p>\n<p>我个人比较偏向QQ群，1是手机电脑qq常在线，2是比微信方便同步，3支持文字 图片 链接 文件，覆盖大部分场景</p>\n<h3 id=\"2-处理期\"><a href=\"#2-处理期\" class=\"headerlink\" title=\"2 处理期\"></a>2 <strong>处理期</strong></h3><ul>\n<li>定期整理：规定定期的时间，例如每周末/每月底，处理inbox</li>\n<li>理解转化：筛选有价值的信息，理解并记忆，输出自己的东西，归纳融合到自己的知识体系中</li>\n<li>计划：根据信息的更新，确定/调整下一周期的待办事项</li>\n</ul>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><ul>\n<li><a href=\"https://www.mifengtd.cn/articles/reflections-on-gtd-after-a-year.html\" target=\"_blank\" rel=\"noopener\">一年多的GTD和自我管理之路文章</a></li>\n</ul>\n<hr>\n<p>顺嘴提一下，本篇文章也是作者通过GTD方法得来的：听微信群友提到GTD，就把关键词转到了inbox，月末的时候整理inbox，检索GTD信息，有了自己的理解，输出成了本篇文章。</p>\n<p>希望对你有帮助，成长愉快:)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>更好的应对<strong>信息洪流</strong>，不被其打乱<strong>节奏</strong>，减少信息焦虑，减压</li>\n</ul>\n<p>遇见一个信息就处理一个，很容易打乱节奏，先收集再定期处理，类似计算机进程调度</p>\n<ul>\n<li>和任务管理协同执行，定期处理信息、更新任务，可以使任务更灵活稳定，成长<strong>效率</strong>更高</li>\n</ul>\n<p>例如每周7天，前6天专心执行当下的任务，不理会新的信息，只需要将其丢入inbox；</p>\n<p>第7天专心整理inbox，对任务做相应的调节（毕竟大脑是个单线程机器</p>\n<ul>\n<li>利于对信息抽丝剥茧，更高效的将<strong>信息</strong>筛选转化为自己的<strong>认知</strong></li>\n</ul>\n<p>举个例子🌰，你养了一个鱼塘，每天都去钓鱼，无论肥瘦只要上钩你都照单全收，最后鱼篓不一定挺得住不说，鱼的质量也不高；<br>但是你养上一周一个月，再去挑大鱼，又省力，质量又高 😉</p>\n<h2 id=\"简化的GTD流程\"><a href=\"#简化的GTD流程\" class=\"headerlink\" title=\"简化的GTD流程\"></a>简化的GTD流程</h2><p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210127180326.png\" alt=\"GTD流程图\"></p>\n<h3 id=\"1-执行-amp-收集期\"><a href=\"#1-执行-amp-收集期\" class=\"headerlink\" title=\"1 执行 &amp; 收集期\"></a>1 执行 <strong>&amp; 收集期</strong></h3><ul>\n<li>在各种设备、将各种来源的新信息，统一收集到inbox收集箱</li>\n<li>专心的执行当下的任务，不受信息困扰</li>\n</ul>\n<p>inbox的形式千千万，用的开心就好</p>\n<p>可以使用专业的app，例如：OmniFocus、Doit IM</p>\n<p>也可以使用更易得的工具，例如：只有自己的微信QQ群、邮箱</p>\n<p>我个人比较偏向QQ群，1是手机电脑qq常在线，2是比微信方便同步，3支持文字 图片 链接 文件，覆盖大部分场景</p>\n<h3 id=\"2-处理期\"><a href=\"#2-处理期\" class=\"headerlink\" title=\"2 处理期\"></a>2 <strong>处理期</strong></h3><ul>\n<li>定期整理：规定定期的时间，例如每周末/每月底，处理inbox</li>\n<li>理解转化：筛选有价值的信息，理解并记忆，输出自己的东西，归纳融合到自己的知识体系中</li>\n<li>计划：根据信息的更新，确定/调整下一周期的待办事项</li>\n</ul>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><ul>\n<li><a href=\"https://www.mifengtd.cn/articles/reflections-on-gtd-after-a-year.html\" target=\"_blank\" rel=\"noopener\">一年多的GTD和自我管理之路文章</a></li>\n</ul>\n<hr>\n<p>顺嘴提一下，本篇文章也是作者通过GTD方法得来的：听微信群友提到GTD，就把关键词转到了inbox，月末的时候整理inbox，检索GTD信息，有了自己的理解，输出成了本篇文章。</p>\n<p>希望对你有帮助，成长愉快:)</p>\n"},{"title":"2020年我的公众号总结","date":"2020-12-31T16:00:00.000Z","description":"学习知识、输出、收到反馈和见解从而优化知识，才是知识习得的闭环","toc":1,"top":0,"status":"Done","img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128143729.png","_content":"## 为什么要做公众号\n\n- 一个人的认知面是有限的，把你的认知分享给别人，可以听到别人的声音\n- 分享、和别人交流的过程，是对知识的**复盘** ，从《论语》的“温故而知新”，到`费曼学习法`，都印证了知识输出的作用\n\n## 2020年发布了文章`21`篇，其中原创文章`19`篇\n\n1. [学会如何学习 - 成为更好的终身学习者](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284638&idx=1&sn=6ea323851fc34d4f9ca8452af807facc&chksm=88bc4794bfcbce826814bcef9cea94a59f0b2f08b14f37d9dbacc165f46b72770f62c160fd12&token=1741639265&lang=zh_CN#rd)【原创】\n2. [Vue 3.0 “One Piece” 正式版发布](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284614&idx=1&sn=31995c86ff10ba7b93e53cf3e73889df&chksm=88bc478cbfcbce9ad5826ae4613b5aaf8d94c83f15ef3ecba8368795bdd2876d54884be9c8aa&token=1741639265&lang=zh_CN#rd)\n3. [鸿蒙OS中的 JS开发框架与源码](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284611&idx=1&sn=137b4eaf157df4485c75f1d8aa4fb6c9&chksm=88bc4789bfcbce9fe0c975382c4fa6760443851ebae64c6afffb5fccfbf45778b8c0fab1e0fc&token=1741639265&lang=zh_CN#rd)\n4. [作为前端技术人，体验刚开源的鸿蒙OS](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284607&idx=1&sn=1e43857e21cd02840af43b6d63f5eaff&chksm=88bc47f5bfcbcee350c7a8bc8f4bbd95695551388e32fa447eb10097370dbe4e18a09b4e0daf&token=1741639265&lang=zh_CN#rd)【原创】\n5. [Vue3响应式原理](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284586&idx=1&sn=ff9d65749a04ca3dc4093a8d4133f9db&chksm=88bc47e0bfcbcef68129a26b027edb9f4c0a263a22e17fb8c15d9165c815566f4a55fa9930eb&token=1741639265&lang=zh_CN#rd)【原创】\n6. [《非暴力沟通》：有些话真的可以好好说](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284539&idx=1&sn=b1cfadf54f366a8b436a5fce58e33f90&chksm=88bc4431bfcbcd27f0980b94400d128dca023bb2d7d33e33835154a8149660b442fd7f1dc7f0&token=1741639265&lang=zh_CN#rd)【原创】\n7. [《富爸爸穷爸爸》：为什么你很穷](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284370&idx=1&sn=149f7b71ed1b3a88d436671c3693871f&chksm=88bc4498bfcbcd8ee826f9aed62eb428ee9917b307829264a7c332ed1e323d30d8d24cf71526&token=1741639265&lang=zh_CN#rd)【原创】\n8. [结合Event Loop谈谈对Vue中nextTick的理解](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284359&idx=1&sn=621e2e5ac246c780b107f7c978ac4658&chksm=88bc448dbfcbcd9b5c6e1991cd0705c3001c00877678c33cc6198e1955f21869c0dcbbd0a6e2&token=1741639265&lang=zh_CN#rd)【原创】\n9. [试图解释清楚【JavaScript Event Loop】](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284349&idx=1&sn=6026250224efa71c198efda7cf2e48aa&chksm=88bc44f7bfcbcde1398924d3f403714547e8295af94be00e02728ad09ede07d2081bfb9c50c7&token=1741639265&lang=zh_CN#rd)【原创】\n10. [Devtools 老师傅养成[7] - Memory 内存](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284228&idx=1&sn=d0ca8b3476ad8ba891dba9c5468ee1fb&chksm=88bc450ebfcbcc18339aa4272997ec85dca736553c40c6af67e47a2faa5e954047b13f8558cb&token=1741639265&lang=zh_CN#rd)【原创】\n11. [Devtools 老师傅养成[6] - Performance 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284189&idx=1&sn=6bf640e28cf02097b73e5885d750cde8&chksm=88bc4557bfcbcc41e792cf7b11b7c19b610cd3eb5f35808066489889286319161f6466776a68&token=1741639265&lang=zh_CN#rd)【原创】\n12. [Devtools 老师傅养成[5] - Network 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284112&idx=1&sn=e5d273170f7236e9ab5f81d50010f423&chksm=88bc459abfcbcc8ca77ec31a20ef2c85a476c07405c23f807d0f8b94f9dd6c5697eeb92fc409&token=1741639265&lang=zh_CN#rd)【原创】\n13. [Devtools 老师傅养成[4] - Sources 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284053&idx=1&sn=445e825eb9953cba30e1b522473f0ddc&chksm=88bc45dfbfcbccc98df8c93dfd10a2bc5ec7f78f8ae9866dcd019c69c6b0f74310220cf78b06&token=1741639265&lang=zh_CN#rd)【原创】\n14. [Devtools 老师傅养成[3] - Console 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284020&idx=1&sn=93087d5a03cc5d293a9fd8df3752252f&chksm=88bc7a3ebfcbf328aaa40fc2c2f6820ee2ea379b21d8a0f046ca7e8c8040d57d1f8b00919225&token=1741639265&lang=zh_CN#rd)【原创】\n15. [Devtools 老师傅养成[2] - Elements 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283991&idx=2&sn=bc26537538c17ff5a4c5f4feebe889fb&chksm=88bc7a1dbfcbf30b82d976e29108656fba4cd68bfac1812b97e0361d359453a1bdb3a397e442&token=1741639265&lang=zh_CN#rd)【原创】\n16. [Devtools 老师傅养成[1] - Chrome Devtools介绍](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283949&idx=1&sn=d07cdf86ad43cc42fc0fe3ef3a9341d3&chksm=88bc7a67bfcbf3713bef40f6a0f93550264caff09942def1296ea39c3c49c0fd983fada7fff7&token=1741639265&lang=zh_CN#rd)【原创】\n17. [书籍推荐《4点起床》舒适而高效的作息方式](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283933&idx=1&sn=ab1808e3de1133aa909724290197618a&chksm=88bc7a57bfcbf34124d91b497539f9d0fdd6d5e120e0983e40d36f751e97ca9bdd8ad129a132&token=1741639265&lang=zh_CN#rd)【原创】\n18. [行为决策学入门书籍推荐《别做正常的傻瓜》](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283893&idx=1&sn=2243b34263cf7cde0382bf57cf0dc4d2&chksm=88bc7abfbfcbf3a9d6cfe032c3f88cd80843f1acbaf40d26991a2a785286f7412ab5f380503b&token=1741639265&lang=zh_CN#rd)【原创】\n19. [授人以渔 | 数万名Javascript开发者的信息来源](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283877&idx=1&sn=f901582c33040f64e3a0bfd2030f32a2&chksm=88bc7aafbfcbf3b93eafb23d927102347851fb1824e86a42ac032513df7aae1819ffb641fef8&token=1741639265&lang=zh_CN#rd)【原创】\n20. [如何学习源码 | 如何高效学习一个新知识](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283843&idx=1&sn=c31d2d093fe1a7886141763f6b5bc934&chksm=88bc7a89bfcbf39fb899733e9603a4114989ef07987f1e652d73c70508b542fa0fac2143117f&token=1741639265&lang=zh_CN#rd)【原创】\n21. [Notion为什么能让我放弃手账](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283824&idx=1&sn=c130d90f2c9b7089705652ec9b5a3480&chksm=88bc7afabfcbf3ec8cb70e5da5714eba72034dc096433504716711899100dace84bd78834784&token=1741639265&lang=zh_CN#rd)【原创】\n\n## 有`6`篇文章开启了赞赏，收到支持`148.4￥`\n\n![2020 support](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128104059.png)\n\n## `2020-09-04`起开启了微信流量主，收入`32￥`\n\n![2020 ad](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128104006.png)\n\n## 还要继续做下去吗？\n\n公众号发布的原创文章，大多是从我的博客中精选出来的\n\n相比于博客，公众号能给读者提供更紧密的连接，更即时的反馈\n\n相应的，通过公众号，我也能收获到读者的思想和见解\n\n让我的输出完成了闭环，这是我做公众号最大的收获\n\n我一直相信，有价值的社交是双向的\n\n很感激这一年中伙伴们给予的支持、鼓励、陪伴、交流、指点\n\n2021我会继续努力，让我的文章持续给读者带去一些价值和收获","source":"_posts/2020_wechat_inout.md","raw":"---\ntitle: 2020年我的公众号总结\ncategories:\n    - 01关于\ntags:\ndate: 2021-01-01\ndescription: 学习知识、输出、收到反馈和见解从而优化知识，才是知识习得的闭环\ntoc: 1\ntop: 0\nstatus: Done\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128143729.png\n---\n## 为什么要做公众号\n\n- 一个人的认知面是有限的，把你的认知分享给别人，可以听到别人的声音\n- 分享、和别人交流的过程，是对知识的**复盘** ，从《论语》的“温故而知新”，到`费曼学习法`，都印证了知识输出的作用\n\n## 2020年发布了文章`21`篇，其中原创文章`19`篇\n\n1. [学会如何学习 - 成为更好的终身学习者](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284638&idx=1&sn=6ea323851fc34d4f9ca8452af807facc&chksm=88bc4794bfcbce826814bcef9cea94a59f0b2f08b14f37d9dbacc165f46b72770f62c160fd12&token=1741639265&lang=zh_CN#rd)【原创】\n2. [Vue 3.0 “One Piece” 正式版发布](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284614&idx=1&sn=31995c86ff10ba7b93e53cf3e73889df&chksm=88bc478cbfcbce9ad5826ae4613b5aaf8d94c83f15ef3ecba8368795bdd2876d54884be9c8aa&token=1741639265&lang=zh_CN#rd)\n3. [鸿蒙OS中的 JS开发框架与源码](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284611&idx=1&sn=137b4eaf157df4485c75f1d8aa4fb6c9&chksm=88bc4789bfcbce9fe0c975382c4fa6760443851ebae64c6afffb5fccfbf45778b8c0fab1e0fc&token=1741639265&lang=zh_CN#rd)\n4. [作为前端技术人，体验刚开源的鸿蒙OS](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284607&idx=1&sn=1e43857e21cd02840af43b6d63f5eaff&chksm=88bc47f5bfcbcee350c7a8bc8f4bbd95695551388e32fa447eb10097370dbe4e18a09b4e0daf&token=1741639265&lang=zh_CN#rd)【原创】\n5. [Vue3响应式原理](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284586&idx=1&sn=ff9d65749a04ca3dc4093a8d4133f9db&chksm=88bc47e0bfcbcef68129a26b027edb9f4c0a263a22e17fb8c15d9165c815566f4a55fa9930eb&token=1741639265&lang=zh_CN#rd)【原创】\n6. [《非暴力沟通》：有些话真的可以好好说](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284539&idx=1&sn=b1cfadf54f366a8b436a5fce58e33f90&chksm=88bc4431bfcbcd27f0980b94400d128dca023bb2d7d33e33835154a8149660b442fd7f1dc7f0&token=1741639265&lang=zh_CN#rd)【原创】\n7. [《富爸爸穷爸爸》：为什么你很穷](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284370&idx=1&sn=149f7b71ed1b3a88d436671c3693871f&chksm=88bc4498bfcbcd8ee826f9aed62eb428ee9917b307829264a7c332ed1e323d30d8d24cf71526&token=1741639265&lang=zh_CN#rd)【原创】\n8. [结合Event Loop谈谈对Vue中nextTick的理解](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284359&idx=1&sn=621e2e5ac246c780b107f7c978ac4658&chksm=88bc448dbfcbcd9b5c6e1991cd0705c3001c00877678c33cc6198e1955f21869c0dcbbd0a6e2&token=1741639265&lang=zh_CN#rd)【原创】\n9. [试图解释清楚【JavaScript Event Loop】](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284349&idx=1&sn=6026250224efa71c198efda7cf2e48aa&chksm=88bc44f7bfcbcde1398924d3f403714547e8295af94be00e02728ad09ede07d2081bfb9c50c7&token=1741639265&lang=zh_CN#rd)【原创】\n10. [Devtools 老师傅养成[7] - Memory 内存](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284228&idx=1&sn=d0ca8b3476ad8ba891dba9c5468ee1fb&chksm=88bc450ebfcbcc18339aa4272997ec85dca736553c40c6af67e47a2faa5e954047b13f8558cb&token=1741639265&lang=zh_CN#rd)【原创】\n11. [Devtools 老师傅养成[6] - Performance 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284189&idx=1&sn=6bf640e28cf02097b73e5885d750cde8&chksm=88bc4557bfcbcc41e792cf7b11b7c19b610cd3eb5f35808066489889286319161f6466776a68&token=1741639265&lang=zh_CN#rd)【原创】\n12. [Devtools 老师傅养成[5] - Network 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284112&idx=1&sn=e5d273170f7236e9ab5f81d50010f423&chksm=88bc459abfcbcc8ca77ec31a20ef2c85a476c07405c23f807d0f8b94f9dd6c5697eeb92fc409&token=1741639265&lang=zh_CN#rd)【原创】\n13. [Devtools 老师傅养成[4] - Sources 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284053&idx=1&sn=445e825eb9953cba30e1b522473f0ddc&chksm=88bc45dfbfcbccc98df8c93dfd10a2bc5ec7f78f8ae9866dcd019c69c6b0f74310220cf78b06&token=1741639265&lang=zh_CN#rd)【原创】\n14. [Devtools 老师傅养成[3] - Console 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650284020&idx=1&sn=93087d5a03cc5d293a9fd8df3752252f&chksm=88bc7a3ebfcbf328aaa40fc2c2f6820ee2ea379b21d8a0f046ca7e8c8040d57d1f8b00919225&token=1741639265&lang=zh_CN#rd)【原创】\n15. [Devtools 老师傅养成[2] - Elements 面板](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283991&idx=2&sn=bc26537538c17ff5a4c5f4feebe889fb&chksm=88bc7a1dbfcbf30b82d976e29108656fba4cd68bfac1812b97e0361d359453a1bdb3a397e442&token=1741639265&lang=zh_CN#rd)【原创】\n16. [Devtools 老师傅养成[1] - Chrome Devtools介绍](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283949&idx=1&sn=d07cdf86ad43cc42fc0fe3ef3a9341d3&chksm=88bc7a67bfcbf3713bef40f6a0f93550264caff09942def1296ea39c3c49c0fd983fada7fff7&token=1741639265&lang=zh_CN#rd)【原创】\n17. [书籍推荐《4点起床》舒适而高效的作息方式](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283933&idx=1&sn=ab1808e3de1133aa909724290197618a&chksm=88bc7a57bfcbf34124d91b497539f9d0fdd6d5e120e0983e40d36f751e97ca9bdd8ad129a132&token=1741639265&lang=zh_CN#rd)【原创】\n18. [行为决策学入门书籍推荐《别做正常的傻瓜》](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283893&idx=1&sn=2243b34263cf7cde0382bf57cf0dc4d2&chksm=88bc7abfbfcbf3a9d6cfe032c3f88cd80843f1acbaf40d26991a2a785286f7412ab5f380503b&token=1741639265&lang=zh_CN#rd)【原创】\n19. [授人以渔 | 数万名Javascript开发者的信息来源](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283877&idx=1&sn=f901582c33040f64e3a0bfd2030f32a2&chksm=88bc7aafbfcbf3b93eafb23d927102347851fb1824e86a42ac032513df7aae1819ffb641fef8&token=1741639265&lang=zh_CN#rd)【原创】\n20. [如何学习源码 | 如何高效学习一个新知识](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283843&idx=1&sn=c31d2d093fe1a7886141763f6b5bc934&chksm=88bc7a89bfcbf39fb899733e9603a4114989ef07987f1e652d73c70508b542fa0fac2143117f&token=1741639265&lang=zh_CN#rd)【原创】\n21. [Notion为什么能让我放弃手账](https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&mid=2650283824&idx=1&sn=c130d90f2c9b7089705652ec9b5a3480&chksm=88bc7afabfcbf3ec8cb70e5da5714eba72034dc096433504716711899100dace84bd78834784&token=1741639265&lang=zh_CN#rd)【原创】\n\n## 有`6`篇文章开启了赞赏，收到支持`148.4￥`\n\n![2020 support](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128104059.png)\n\n## `2020-09-04`起开启了微信流量主，收入`32￥`\n\n![2020 ad](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128104006.png)\n\n## 还要继续做下去吗？\n\n公众号发布的原创文章，大多是从我的博客中精选出来的\n\n相比于博客，公众号能给读者提供更紧密的连接，更即时的反馈\n\n相应的，通过公众号，我也能收获到读者的思想和见解\n\n让我的输出完成了闭环，这是我做公众号最大的收获\n\n我一直相信，有价值的社交是双向的\n\n很感激这一年中伙伴们给予的支持、鼓励、陪伴、交流、指点\n\n2021我会继续努力，让我的文章持续给读者带去一些价值和收获","slug":"2020_wechat_inout","published":1,"updated":"2021-01-28T06:50:07.041Z","_id":"ckkgab2s300004gy67qvaiyis","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要做公众号\"><a href=\"#为什么要做公众号\" class=\"headerlink\" title=\"为什么要做公众号\"></a>为什么要做公众号</h2><ul>\n<li>一个人的认知面是有限的，把你的认知分享给别人，可以听到别人的声音</li>\n<li>分享、和别人交流的过程，是对知识的<strong>复盘</strong> ，从《论语》的“温故而知新”，到<code>费曼学习法</code>，都印证了知识输出的作用</li>\n</ul>\n<h2 id=\"2020年发布了文章21篇，其中原创文章19篇\"><a href=\"#2020年发布了文章21篇，其中原创文章19篇\" class=\"headerlink\" title=\"2020年发布了文章21篇，其中原创文章19篇\"></a>2020年发布了文章<code>21</code>篇，其中原创文章<code>19</code>篇</h2><ol>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284638&amp;idx=1&amp;sn=6ea323851fc34d4f9ca8452af807facc&amp;chksm=88bc4794bfcbce826814bcef9cea94a59f0b2f08b14f37d9dbacc165f46b72770f62c160fd12&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">学会如何学习 - 成为更好的终身学习者</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284614&amp;idx=1&amp;sn=31995c86ff10ba7b93e53cf3e73889df&amp;chksm=88bc478cbfcbce9ad5826ae4613b5aaf8d94c83f15ef3ecba8368795bdd2876d54884be9c8aa&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Vue 3.0 “One Piece” 正式版发布</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284611&amp;idx=1&amp;sn=137b4eaf157df4485c75f1d8aa4fb6c9&amp;chksm=88bc4789bfcbce9fe0c975382c4fa6760443851ebae64c6afffb5fccfbf45778b8c0fab1e0fc&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">鸿蒙OS中的 JS开发框架与源码</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284607&amp;idx=1&amp;sn=1e43857e21cd02840af43b6d63f5eaff&amp;chksm=88bc47f5bfcbcee350c7a8bc8f4bbd95695551388e32fa447eb10097370dbe4e18a09b4e0daf&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">作为前端技术人，体验刚开源的鸿蒙OS</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284586&amp;idx=1&amp;sn=ff9d65749a04ca3dc4093a8d4133f9db&amp;chksm=88bc47e0bfcbcef68129a26b027edb9f4c0a263a22e17fb8c15d9165c815566f4a55fa9930eb&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Vue3响应式原理</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284539&amp;idx=1&amp;sn=b1cfadf54f366a8b436a5fce58e33f90&amp;chksm=88bc4431bfcbcd27f0980b94400d128dca023bb2d7d33e33835154a8149660b442fd7f1dc7f0&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">《非暴力沟通》：有些话真的可以好好说</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284370&amp;idx=1&amp;sn=149f7b71ed1b3a88d436671c3693871f&amp;chksm=88bc4498bfcbcd8ee826f9aed62eb428ee9917b307829264a7c332ed1e323d30d8d24cf71526&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">《富爸爸穷爸爸》：为什么你很穷</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284359&amp;idx=1&amp;sn=621e2e5ac246c780b107f7c978ac4658&amp;chksm=88bc448dbfcbcd9b5c6e1991cd0705c3001c00877678c33cc6198e1955f21869c0dcbbd0a6e2&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">结合Event Loop谈谈对Vue中nextTick的理解</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284349&amp;idx=1&amp;sn=6026250224efa71c198efda7cf2e48aa&amp;chksm=88bc44f7bfcbcde1398924d3f403714547e8295af94be00e02728ad09ede07d2081bfb9c50c7&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">试图解释清楚【JavaScript Event Loop】</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284228&amp;idx=1&amp;sn=d0ca8b3476ad8ba891dba9c5468ee1fb&amp;chksm=88bc450ebfcbcc18339aa4272997ec85dca736553c40c6af67e47a2faa5e954047b13f8558cb&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[7] - Memory 内存</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284189&amp;idx=1&amp;sn=6bf640e28cf02097b73e5885d750cde8&amp;chksm=88bc4557bfcbcc41e792cf7b11b7c19b610cd3eb5f35808066489889286319161f6466776a68&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[6] - Performance 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284112&amp;idx=1&amp;sn=e5d273170f7236e9ab5f81d50010f423&amp;chksm=88bc459abfcbcc8ca77ec31a20ef2c85a476c07405c23f807d0f8b94f9dd6c5697eeb92fc409&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[5] - Network 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284053&amp;idx=1&amp;sn=445e825eb9953cba30e1b522473f0ddc&amp;chksm=88bc45dfbfcbccc98df8c93dfd10a2bc5ec7f78f8ae9866dcd019c69c6b0f74310220cf78b06&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[4] - Sources 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284020&amp;idx=1&amp;sn=93087d5a03cc5d293a9fd8df3752252f&amp;chksm=88bc7a3ebfcbf328aaa40fc2c2f6820ee2ea379b21d8a0f046ca7e8c8040d57d1f8b00919225&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[3] - Console 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283991&amp;idx=2&amp;sn=bc26537538c17ff5a4c5f4feebe889fb&amp;chksm=88bc7a1dbfcbf30b82d976e29108656fba4cd68bfac1812b97e0361d359453a1bdb3a397e442&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[2] - Elements 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283949&amp;idx=1&amp;sn=d07cdf86ad43cc42fc0fe3ef3a9341d3&amp;chksm=88bc7a67bfcbf3713bef40f6a0f93550264caff09942def1296ea39c3c49c0fd983fada7fff7&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[1] - Chrome Devtools介绍</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283933&amp;idx=1&amp;sn=ab1808e3de1133aa909724290197618a&amp;chksm=88bc7a57bfcbf34124d91b497539f9d0fdd6d5e120e0983e40d36f751e97ca9bdd8ad129a132&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">书籍推荐《4点起床》舒适而高效的作息方式</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283893&amp;idx=1&amp;sn=2243b34263cf7cde0382bf57cf0dc4d2&amp;chksm=88bc7abfbfcbf3a9d6cfe032c3f88cd80843f1acbaf40d26991a2a785286f7412ab5f380503b&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">行为决策学入门书籍推荐《别做正常的傻瓜》</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283877&amp;idx=1&amp;sn=f901582c33040f64e3a0bfd2030f32a2&amp;chksm=88bc7aafbfcbf3b93eafb23d927102347851fb1824e86a42ac032513df7aae1819ffb641fef8&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">授人以渔 | 数万名Javascript开发者的信息来源</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283843&amp;idx=1&amp;sn=c31d2d093fe1a7886141763f6b5bc934&amp;chksm=88bc7a89bfcbf39fb899733e9603a4114989ef07987f1e652d73c70508b542fa0fac2143117f&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">如何学习源码 | 如何高效学习一个新知识</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283824&amp;idx=1&amp;sn=c130d90f2c9b7089705652ec9b5a3480&amp;chksm=88bc7afabfcbf3ec8cb70e5da5714eba72034dc096433504716711899100dace84bd78834784&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Notion为什么能让我放弃手账</a>【原创】</li>\n</ol>\n<h2 id=\"有6篇文章开启了赞赏，收到支持148-4￥\"><a href=\"#有6篇文章开启了赞赏，收到支持148-4￥\" class=\"headerlink\" title=\"有6篇文章开启了赞赏，收到支持148.4￥\"></a>有<code>6</code>篇文章开启了赞赏，收到支持<code>148.4￥</code></h2><p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128104059.png\" alt=\"2020 support\"></p>\n<h2 id=\"2020-09-04起开启了微信流量主，收入32￥\"><a href=\"#2020-09-04起开启了微信流量主，收入32￥\" class=\"headerlink\" title=\"2020-09-04起开启了微信流量主，收入32￥\"></a><code>2020-09-04</code>起开启了微信流量主，收入<code>32￥</code></h2><p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128104006.png\" alt=\"2020 ad\"></p>\n<h2 id=\"还要继续做下去吗？\"><a href=\"#还要继续做下去吗？\" class=\"headerlink\" title=\"还要继续做下去吗？\"></a>还要继续做下去吗？</h2><p>公众号发布的原创文章，大多是从我的博客中精选出来的</p>\n<p>相比于博客，公众号能给读者提供更紧密的连接，更即时的反馈</p>\n<p>相应的，通过公众号，我也能收获到读者的思想和见解</p>\n<p>让我的输出完成了闭环，这是我做公众号最大的收获</p>\n<p>我一直相信，有价值的社交是双向的</p>\n<p>很感激这一年中伙伴们给予的支持、鼓励、陪伴、交流、指点</p>\n<p>2021我会继续努力，让我的文章持续给读者带去一些价值和收获</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要做公众号\"><a href=\"#为什么要做公众号\" class=\"headerlink\" title=\"为什么要做公众号\"></a>为什么要做公众号</h2><ul>\n<li>一个人的认知面是有限的，把你的认知分享给别人，可以听到别人的声音</li>\n<li>分享、和别人交流的过程，是对知识的<strong>复盘</strong> ，从《论语》的“温故而知新”，到<code>费曼学习法</code>，都印证了知识输出的作用</li>\n</ul>\n<h2 id=\"2020年发布了文章21篇，其中原创文章19篇\"><a href=\"#2020年发布了文章21篇，其中原创文章19篇\" class=\"headerlink\" title=\"2020年发布了文章21篇，其中原创文章19篇\"></a>2020年发布了文章<code>21</code>篇，其中原创文章<code>19</code>篇</h2><ol>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284638&amp;idx=1&amp;sn=6ea323851fc34d4f9ca8452af807facc&amp;chksm=88bc4794bfcbce826814bcef9cea94a59f0b2f08b14f37d9dbacc165f46b72770f62c160fd12&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">学会如何学习 - 成为更好的终身学习者</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284614&amp;idx=1&amp;sn=31995c86ff10ba7b93e53cf3e73889df&amp;chksm=88bc478cbfcbce9ad5826ae4613b5aaf8d94c83f15ef3ecba8368795bdd2876d54884be9c8aa&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Vue 3.0 “One Piece” 正式版发布</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284611&amp;idx=1&amp;sn=137b4eaf157df4485c75f1d8aa4fb6c9&amp;chksm=88bc4789bfcbce9fe0c975382c4fa6760443851ebae64c6afffb5fccfbf45778b8c0fab1e0fc&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">鸿蒙OS中的 JS开发框架与源码</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284607&amp;idx=1&amp;sn=1e43857e21cd02840af43b6d63f5eaff&amp;chksm=88bc47f5bfcbcee350c7a8bc8f4bbd95695551388e32fa447eb10097370dbe4e18a09b4e0daf&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">作为前端技术人，体验刚开源的鸿蒙OS</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284586&amp;idx=1&amp;sn=ff9d65749a04ca3dc4093a8d4133f9db&amp;chksm=88bc47e0bfcbcef68129a26b027edb9f4c0a263a22e17fb8c15d9165c815566f4a55fa9930eb&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Vue3响应式原理</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284539&amp;idx=1&amp;sn=b1cfadf54f366a8b436a5fce58e33f90&amp;chksm=88bc4431bfcbcd27f0980b94400d128dca023bb2d7d33e33835154a8149660b442fd7f1dc7f0&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">《非暴力沟通》：有些话真的可以好好说</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284370&amp;idx=1&amp;sn=149f7b71ed1b3a88d436671c3693871f&amp;chksm=88bc4498bfcbcd8ee826f9aed62eb428ee9917b307829264a7c332ed1e323d30d8d24cf71526&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">《富爸爸穷爸爸》：为什么你很穷</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284359&amp;idx=1&amp;sn=621e2e5ac246c780b107f7c978ac4658&amp;chksm=88bc448dbfcbcd9b5c6e1991cd0705c3001c00877678c33cc6198e1955f21869c0dcbbd0a6e2&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">结合Event Loop谈谈对Vue中nextTick的理解</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284349&amp;idx=1&amp;sn=6026250224efa71c198efda7cf2e48aa&amp;chksm=88bc44f7bfcbcde1398924d3f403714547e8295af94be00e02728ad09ede07d2081bfb9c50c7&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">试图解释清楚【JavaScript Event Loop】</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284228&amp;idx=1&amp;sn=d0ca8b3476ad8ba891dba9c5468ee1fb&amp;chksm=88bc450ebfcbcc18339aa4272997ec85dca736553c40c6af67e47a2faa5e954047b13f8558cb&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[7] - Memory 内存</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284189&amp;idx=1&amp;sn=6bf640e28cf02097b73e5885d750cde8&amp;chksm=88bc4557bfcbcc41e792cf7b11b7c19b610cd3eb5f35808066489889286319161f6466776a68&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[6] - Performance 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284112&amp;idx=1&amp;sn=e5d273170f7236e9ab5f81d50010f423&amp;chksm=88bc459abfcbcc8ca77ec31a20ef2c85a476c07405c23f807d0f8b94f9dd6c5697eeb92fc409&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[5] - Network 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284053&amp;idx=1&amp;sn=445e825eb9953cba30e1b522473f0ddc&amp;chksm=88bc45dfbfcbccc98df8c93dfd10a2bc5ec7f78f8ae9866dcd019c69c6b0f74310220cf78b06&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[4] - Sources 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650284020&amp;idx=1&amp;sn=93087d5a03cc5d293a9fd8df3752252f&amp;chksm=88bc7a3ebfcbf328aaa40fc2c2f6820ee2ea379b21d8a0f046ca7e8c8040d57d1f8b00919225&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[3] - Console 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283991&amp;idx=2&amp;sn=bc26537538c17ff5a4c5f4feebe889fb&amp;chksm=88bc7a1dbfcbf30b82d976e29108656fba4cd68bfac1812b97e0361d359453a1bdb3a397e442&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[2] - Elements 面板</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283949&amp;idx=1&amp;sn=d07cdf86ad43cc42fc0fe3ef3a9341d3&amp;chksm=88bc7a67bfcbf3713bef40f6a0f93550264caff09942def1296ea39c3c49c0fd983fada7fff7&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Devtools 老师傅养成[1] - Chrome Devtools介绍</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283933&amp;idx=1&amp;sn=ab1808e3de1133aa909724290197618a&amp;chksm=88bc7a57bfcbf34124d91b497539f9d0fdd6d5e120e0983e40d36f751e97ca9bdd8ad129a132&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">书籍推荐《4点起床》舒适而高效的作息方式</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283893&amp;idx=1&amp;sn=2243b34263cf7cde0382bf57cf0dc4d2&amp;chksm=88bc7abfbfcbf3a9d6cfe032c3f88cd80843f1acbaf40d26991a2a785286f7412ab5f380503b&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">行为决策学入门书籍推荐《别做正常的傻瓜》</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283877&amp;idx=1&amp;sn=f901582c33040f64e3a0bfd2030f32a2&amp;chksm=88bc7aafbfcbf3b93eafb23d927102347851fb1824e86a42ac032513df7aae1819ffb641fef8&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">授人以渔 | 数万名Javascript开发者的信息来源</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283843&amp;idx=1&amp;sn=c31d2d093fe1a7886141763f6b5bc934&amp;chksm=88bc7a89bfcbf39fb899733e9603a4114989ef07987f1e652d73c70508b542fa0fac2143117f&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">如何学习源码 | 如何高效学习一个新知识</a>【原创】</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NjM5MjM1Nw==&amp;mid=2650283824&amp;idx=1&amp;sn=c130d90f2c9b7089705652ec9b5a3480&amp;chksm=88bc7afabfcbf3ec8cb70e5da5714eba72034dc096433504716711899100dace84bd78834784&amp;token=1741639265&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">Notion为什么能让我放弃手账</a>【原创】</li>\n</ol>\n<h2 id=\"有6篇文章开启了赞赏，收到支持148-4￥\"><a href=\"#有6篇文章开启了赞赏，收到支持148-4￥\" class=\"headerlink\" title=\"有6篇文章开启了赞赏，收到支持148.4￥\"></a>有<code>6</code>篇文章开启了赞赏，收到支持<code>148.4￥</code></h2><p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128104059.png\" alt=\"2020 support\"></p>\n<h2 id=\"2020-09-04起开启了微信流量主，收入32￥\"><a href=\"#2020-09-04起开启了微信流量主，收入32￥\" class=\"headerlink\" title=\"2020-09-04起开启了微信流量主，收入32￥\"></a><code>2020-09-04</code>起开启了微信流量主，收入<code>32￥</code></h2><p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210128104006.png\" alt=\"2020 ad\"></p>\n<h2 id=\"还要继续做下去吗？\"><a href=\"#还要继续做下去吗？\" class=\"headerlink\" title=\"还要继续做下去吗？\"></a>还要继续做下去吗？</h2><p>公众号发布的原创文章，大多是从我的博客中精选出来的</p>\n<p>相比于博客，公众号能给读者提供更紧密的连接，更即时的反馈</p>\n<p>相应的，通过公众号，我也能收获到读者的思想和见解</p>\n<p>让我的输出完成了闭环，这是我做公众号最大的收获</p>\n<p>我一直相信，有价值的社交是双向的</p>\n<p>很感激这一年中伙伴们给予的支持、鼓励、陪伴、交流、指点</p>\n<p>2021我会继续努力，让我的文章持续给读者带去一些价值和收获</p>\n"},{"title":"《忍不住的新努力》：胡适的人生哲学","date":"2021-01-30T16:00:00.000Z","description":"保持质疑，保持兴趣，保持对“努力”的自信","toc":1,"top":0,"status":"Done","_content":"\n## 引言\n\n《忍不住的新努力》是文化大师**胡适**的随笔集，收集了他34篇经典文章。\n\n以前对胡适的了解，仅限于历史书中“新文化运动的倡导者”这样一个标签。\n\n读完这本书，才感受到一个更有温度的胡适：\n\n他的文字透露着他温和、乐观、自由、沉稳的性情和态度，他留学美国师从哲学家，做过北大的教授，参与或创办过《新青年》等等刊物，获得过诺贝尔文学奖提名。\n\n但他的建树不仅限于文学：\n\n他宣扬个性解放、思想自由、向当时代的学生科普宇宙观、时间观，他追求科学、实践和真理。\n\n在我们这一代人中，**鲁迅**先生很受欢迎，他比胡适大10岁，也算是同时代的人，他的文字犀利激烈、令人振聋发聩。\n\n但是读完这本书后，我发现自己更喜欢胡适，温和沉稳但坚定、有态度、务实。\n\n因为是随笔集，所以内容很宽泛，读完之后，我总结了其中几个令我有收获的主题：\n\n- 生活的意义\n- 读书/问学的方法\n\n## 生活的意义\n\n生活的意义、人生的意义，是一个很广很抽象的哲学话题，不同的人有不同的理解。\n\n这本书中的有几点能反映作者的人生哲学：\n\n### 有意思的生活\n\n如何过有意思的生活：一个人做的事应该件件事回的出一个“为什么”，说得出为什么，就是有意思的生活\n\n### 迷茫？青年困惑？不满社会？\n\n不满于社会，又无能为力，无所作为，怎么办？这是很多青年人的困惑。\n\n作者的答案，就是“独善其身”，先努力学习充实自己，然后能兼善天下。\n\n大多数的失望，皆起于**奢望>能力**。\n\n因此，无论是内因还是外因导致的苦闷，都要先从自己做起。\n\n### 人生的意义到底是什么？\n\n人生的意义是各人自己造出来的\n\n人生的意义在于自己对待人生的态度\n\n人生的意义在于自己赋予其的意义\n\n“高尚、清贵、污浊、有用、无用”......都在于你自己的追求\n\n\n## 对学习的理解\n\n### 学习驱动力\n\n我之前专门写过一篇学习方法，但是没讨论过为什么要学习。\n\n活学活用，学习的意义在于知道自己“为什么”学习，也就是找到最原始的学习驱动力：\n\n1. 保持**质疑**的态度。问题是一切知识的来源。\n2. 保持**兴趣**。找到令自己感兴趣的事物，兴趣是驱动力。\n3. 保持对**努力**的信心。功不唐捐，努力就一定不会后悔。\n\n### 求知的原则\n\n1. 怀疑。始终保持怀疑的态度去看待他人、自己的认知，不盲从，构建自己的知识体系。\n2. 务实。切实的做，而不是一味的打口号，立flag。\n3. 讲证据。依靠证据去质疑别人、质疑自己现有的认知，依靠证据支撑自己的认知。\n4. 追求真理。宇宙无穷，真理无穷。以追求真理为求学态度，以追求真理为乐趣所在。\n\n### 学习的目标\n\n学习的目标可以分为两点，就是提升**智、识**：\n\n- 识：拥有知识\n- 智：拥有运用、发挥知识的能力\n\n### 学习的方法\n\n- 精\n\n1. 眼到，要理解字面意思\n\n2. 口到，熟读\n\n3. 心到，思考，横向比较思考，纵向追根究底，不断质疑“为什么”，和已有知识建立连接，融入自己的知识体系\n\n4. 手到，抄录、提炼、总结心得，知识只有在经过自己的思考提炼，形成自己的“输出”后，才真正成为自己的知识\n\n- 博\n\n构建金字塔型的知识体系，能广大、有专精\n","source":"_posts/shizhi.md","raw":"---\ntitle: 《忍不住的新努力》：胡适的人生哲学\ncategories:\n  - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2021-01-31\ndescription: 保持质疑，保持兴趣，保持对“努力”的自信\ntoc: 1\ntop: 0\nstatus: Done\n---\n\n## 引言\n\n《忍不住的新努力》是文化大师**胡适**的随笔集，收集了他34篇经典文章。\n\n以前对胡适的了解，仅限于历史书中“新文化运动的倡导者”这样一个标签。\n\n读完这本书，才感受到一个更有温度的胡适：\n\n他的文字透露着他温和、乐观、自由、沉稳的性情和态度，他留学美国师从哲学家，做过北大的教授，参与或创办过《新青年》等等刊物，获得过诺贝尔文学奖提名。\n\n但他的建树不仅限于文学：\n\n他宣扬个性解放、思想自由、向当时代的学生科普宇宙观、时间观，他追求科学、实践和真理。\n\n在我们这一代人中，**鲁迅**先生很受欢迎，他比胡适大10岁，也算是同时代的人，他的文字犀利激烈、令人振聋发聩。\n\n但是读完这本书后，我发现自己更喜欢胡适，温和沉稳但坚定、有态度、务实。\n\n因为是随笔集，所以内容很宽泛，读完之后，我总结了其中几个令我有收获的主题：\n\n- 生活的意义\n- 读书/问学的方法\n\n## 生活的意义\n\n生活的意义、人生的意义，是一个很广很抽象的哲学话题，不同的人有不同的理解。\n\n这本书中的有几点能反映作者的人生哲学：\n\n### 有意思的生活\n\n如何过有意思的生活：一个人做的事应该件件事回的出一个“为什么”，说得出为什么，就是有意思的生活\n\n### 迷茫？青年困惑？不满社会？\n\n不满于社会，又无能为力，无所作为，怎么办？这是很多青年人的困惑。\n\n作者的答案，就是“独善其身”，先努力学习充实自己，然后能兼善天下。\n\n大多数的失望，皆起于**奢望>能力**。\n\n因此，无论是内因还是外因导致的苦闷，都要先从自己做起。\n\n### 人生的意义到底是什么？\n\n人生的意义是各人自己造出来的\n\n人生的意义在于自己对待人生的态度\n\n人生的意义在于自己赋予其的意义\n\n“高尚、清贵、污浊、有用、无用”......都在于你自己的追求\n\n\n## 对学习的理解\n\n### 学习驱动力\n\n我之前专门写过一篇学习方法，但是没讨论过为什么要学习。\n\n活学活用，学习的意义在于知道自己“为什么”学习，也就是找到最原始的学习驱动力：\n\n1. 保持**质疑**的态度。问题是一切知识的来源。\n2. 保持**兴趣**。找到令自己感兴趣的事物，兴趣是驱动力。\n3. 保持对**努力**的信心。功不唐捐，努力就一定不会后悔。\n\n### 求知的原则\n\n1. 怀疑。始终保持怀疑的态度去看待他人、自己的认知，不盲从，构建自己的知识体系。\n2. 务实。切实的做，而不是一味的打口号，立flag。\n3. 讲证据。依靠证据去质疑别人、质疑自己现有的认知，依靠证据支撑自己的认知。\n4. 追求真理。宇宙无穷，真理无穷。以追求真理为求学态度，以追求真理为乐趣所在。\n\n### 学习的目标\n\n学习的目标可以分为两点，就是提升**智、识**：\n\n- 识：拥有知识\n- 智：拥有运用、发挥知识的能力\n\n### 学习的方法\n\n- 精\n\n1. 眼到，要理解字面意思\n\n2. 口到，熟读\n\n3. 心到，思考，横向比较思考，纵向追根究底，不断质疑“为什么”，和已有知识建立连接，融入自己的知识体系\n\n4. 手到，抄录、提炼、总结心得，知识只有在经过自己的思考提炼，形成自己的“输出”后，才真正成为自己的知识\n\n- 博\n\n构建金字塔型的知识体系，能广大、有专精\n","slug":"shizhi","published":1,"updated":"2021-04-21T06:53:37.287Z","_id":"ckkjlpcdh0000qgy6a3ksx9g5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>《忍不住的新努力》是文化大师<strong>胡适</strong>的随笔集，收集了他34篇经典文章。</p>\n<p>以前对胡适的了解，仅限于历史书中“新文化运动的倡导者”这样一个标签。</p>\n<p>读完这本书，才感受到一个更有温度的胡适：</p>\n<p>他的文字透露着他温和、乐观、自由、沉稳的性情和态度，他留学美国师从哲学家，做过北大的教授，参与或创办过《新青年》等等刊物，获得过诺贝尔文学奖提名。</p>\n<p>但他的建树不仅限于文学：</p>\n<p>他宣扬个性解放、思想自由、向当时代的学生科普宇宙观、时间观，他追求科学、实践和真理。</p>\n<p>在我们这一代人中，<strong>鲁迅</strong>先生很受欢迎，他比胡适大10岁，也算是同时代的人，他的文字犀利激烈、令人振聋发聩。</p>\n<p>但是读完这本书后，我发现自己更喜欢胡适，温和沉稳但坚定、有态度、务实。</p>\n<p>因为是随笔集，所以内容很宽泛，读完之后，我总结了其中几个令我有收获的主题：</p>\n<ul>\n<li>生活的意义</li>\n<li>读书/问学的方法</li>\n</ul>\n<h2 id=\"生活的意义\"><a href=\"#生活的意义\" class=\"headerlink\" title=\"生活的意义\"></a>生活的意义</h2><p>生活的意义、人生的意义，是一个很广很抽象的哲学话题，不同的人有不同的理解。</p>\n<p>这本书中的有几点能反映作者的人生哲学：</p>\n<h3 id=\"有意思的生活\"><a href=\"#有意思的生活\" class=\"headerlink\" title=\"有意思的生活\"></a>有意思的生活</h3><p>如何过有意思的生活：一个人做的事应该件件事回的出一个“为什么”，说得出为什么，就是有意思的生活</p>\n<h3 id=\"迷茫？青年困惑？不满社会？\"><a href=\"#迷茫？青年困惑？不满社会？\" class=\"headerlink\" title=\"迷茫？青年困惑？不满社会？\"></a>迷茫？青年困惑？不满社会？</h3><p>不满于社会，又无能为力，无所作为，怎么办？这是很多青年人的困惑。</p>\n<p>作者的答案，就是“独善其身”，先努力学习充实自己，然后能兼善天下。</p>\n<p>大多数的失望，皆起于<strong>奢望&gt;能力</strong>。</p>\n<p>因此，无论是内因还是外因导致的苦闷，都要先从自己做起。</p>\n<h3 id=\"人生的意义到底是什么？\"><a href=\"#人生的意义到底是什么？\" class=\"headerlink\" title=\"人生的意义到底是什么？\"></a>人生的意义到底是什么？</h3><p>人生的意义是各人自己造出来的</p>\n<p>人生的意义在于自己对待人生的态度</p>\n<p>人生的意义在于自己赋予其的意义</p>\n<p>“高尚、清贵、污浊、有用、无用”……都在于你自己的追求</p>\n<h2 id=\"对学习的理解\"><a href=\"#对学习的理解\" class=\"headerlink\" title=\"对学习的理解\"></a>对学习的理解</h2><h3 id=\"学习驱动力\"><a href=\"#学习驱动力\" class=\"headerlink\" title=\"学习驱动力\"></a>学习驱动力</h3><p>我之前专门写过一篇学习方法，但是没讨论过为什么要学习。</p>\n<p>活学活用，学习的意义在于知道自己“为什么”学习，也就是找到最原始的学习驱动力：</p>\n<ol>\n<li>保持<strong>质疑</strong>的态度。问题是一切知识的来源。</li>\n<li>保持<strong>兴趣</strong>。找到令自己感兴趣的事物，兴趣是驱动力。</li>\n<li>保持对<strong>努力</strong>的信心。功不唐捐，努力就一定不会后悔。</li>\n</ol>\n<h3 id=\"求知的原则\"><a href=\"#求知的原则\" class=\"headerlink\" title=\"求知的原则\"></a>求知的原则</h3><ol>\n<li>怀疑。始终保持怀疑的态度去看待他人、自己的认知，不盲从，构建自己的知识体系。</li>\n<li>务实。切实的做，而不是一味的打口号，立flag。</li>\n<li>讲证据。依靠证据去质疑别人、质疑自己现有的认知，依靠证据支撑自己的认知。</li>\n<li>追求真理。宇宙无穷，真理无穷。以追求真理为求学态度，以追求真理为乐趣所在。</li>\n</ol>\n<h3 id=\"学习的目标\"><a href=\"#学习的目标\" class=\"headerlink\" title=\"学习的目标\"></a>学习的目标</h3><p>学习的目标可以分为两点，就是提升<strong>智、识</strong>：</p>\n<ul>\n<li>识：拥有知识</li>\n<li>智：拥有运用、发挥知识的能力</li>\n</ul>\n<h3 id=\"学习的方法\"><a href=\"#学习的方法\" class=\"headerlink\" title=\"学习的方法\"></a>学习的方法</h3><ul>\n<li>精</li>\n</ul>\n<ol>\n<li><p>眼到，要理解字面意思</p>\n</li>\n<li><p>口到，熟读</p>\n</li>\n<li><p>心到，思考，横向比较思考，纵向追根究底，不断质疑“为什么”，和已有知识建立连接，融入自己的知识体系</p>\n</li>\n<li><p>手到，抄录、提炼、总结心得，知识只有在经过自己的思考提炼，形成自己的“输出”后，才真正成为自己的知识</p>\n</li>\n</ol>\n<ul>\n<li>博</li>\n</ul>\n<p>构建金字塔型的知识体系，能广大、有专精</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>《忍不住的新努力》是文化大师<strong>胡适</strong>的随笔集，收集了他34篇经典文章。</p>\n<p>以前对胡适的了解，仅限于历史书中“新文化运动的倡导者”这样一个标签。</p>\n<p>读完这本书，才感受到一个更有温度的胡适：</p>\n<p>他的文字透露着他温和、乐观、自由、沉稳的性情和态度，他留学美国师从哲学家，做过北大的教授，参与或创办过《新青年》等等刊物，获得过诺贝尔文学奖提名。</p>\n<p>但他的建树不仅限于文学：</p>\n<p>他宣扬个性解放、思想自由、向当时代的学生科普宇宙观、时间观，他追求科学、实践和真理。</p>\n<p>在我们这一代人中，<strong>鲁迅</strong>先生很受欢迎，他比胡适大10岁，也算是同时代的人，他的文字犀利激烈、令人振聋发聩。</p>\n<p>但是读完这本书后，我发现自己更喜欢胡适，温和沉稳但坚定、有态度、务实。</p>\n<p>因为是随笔集，所以内容很宽泛，读完之后，我总结了其中几个令我有收获的主题：</p>\n<ul>\n<li>生活的意义</li>\n<li>读书/问学的方法</li>\n</ul>\n<h2 id=\"生活的意义\"><a href=\"#生活的意义\" class=\"headerlink\" title=\"生活的意义\"></a>生活的意义</h2><p>生活的意义、人生的意义，是一个很广很抽象的哲学话题，不同的人有不同的理解。</p>\n<p>这本书中的有几点能反映作者的人生哲学：</p>\n<h3 id=\"有意思的生活\"><a href=\"#有意思的生活\" class=\"headerlink\" title=\"有意思的生活\"></a>有意思的生活</h3><p>如何过有意思的生活：一个人做的事应该件件事回的出一个“为什么”，说得出为什么，就是有意思的生活</p>\n<h3 id=\"迷茫？青年困惑？不满社会？\"><a href=\"#迷茫？青年困惑？不满社会？\" class=\"headerlink\" title=\"迷茫？青年困惑？不满社会？\"></a>迷茫？青年困惑？不满社会？</h3><p>不满于社会，又无能为力，无所作为，怎么办？这是很多青年人的困惑。</p>\n<p>作者的答案，就是“独善其身”，先努力学习充实自己，然后能兼善天下。</p>\n<p>大多数的失望，皆起于<strong>奢望&gt;能力</strong>。</p>\n<p>因此，无论是内因还是外因导致的苦闷，都要先从自己做起。</p>\n<h3 id=\"人生的意义到底是什么？\"><a href=\"#人生的意义到底是什么？\" class=\"headerlink\" title=\"人生的意义到底是什么？\"></a>人生的意义到底是什么？</h3><p>人生的意义是各人自己造出来的</p>\n<p>人生的意义在于自己对待人生的态度</p>\n<p>人生的意义在于自己赋予其的意义</p>\n<p>“高尚、清贵、污浊、有用、无用”……都在于你自己的追求</p>\n<h2 id=\"对学习的理解\"><a href=\"#对学习的理解\" class=\"headerlink\" title=\"对学习的理解\"></a>对学习的理解</h2><h3 id=\"学习驱动力\"><a href=\"#学习驱动力\" class=\"headerlink\" title=\"学习驱动力\"></a>学习驱动力</h3><p>我之前专门写过一篇学习方法，但是没讨论过为什么要学习。</p>\n<p>活学活用，学习的意义在于知道自己“为什么”学习，也就是找到最原始的学习驱动力：</p>\n<ol>\n<li>保持<strong>质疑</strong>的态度。问题是一切知识的来源。</li>\n<li>保持<strong>兴趣</strong>。找到令自己感兴趣的事物，兴趣是驱动力。</li>\n<li>保持对<strong>努力</strong>的信心。功不唐捐，努力就一定不会后悔。</li>\n</ol>\n<h3 id=\"求知的原则\"><a href=\"#求知的原则\" class=\"headerlink\" title=\"求知的原则\"></a>求知的原则</h3><ol>\n<li>怀疑。始终保持怀疑的态度去看待他人、自己的认知，不盲从，构建自己的知识体系。</li>\n<li>务实。切实的做，而不是一味的打口号，立flag。</li>\n<li>讲证据。依靠证据去质疑别人、质疑自己现有的认知，依靠证据支撑自己的认知。</li>\n<li>追求真理。宇宙无穷，真理无穷。以追求真理为求学态度，以追求真理为乐趣所在。</li>\n</ol>\n<h3 id=\"学习的目标\"><a href=\"#学习的目标\" class=\"headerlink\" title=\"学习的目标\"></a>学习的目标</h3><p>学习的目标可以分为两点，就是提升<strong>智、识</strong>：</p>\n<ul>\n<li>识：拥有知识</li>\n<li>智：拥有运用、发挥知识的能力</li>\n</ul>\n<h3 id=\"学习的方法\"><a href=\"#学习的方法\" class=\"headerlink\" title=\"学习的方法\"></a>学习的方法</h3><ul>\n<li>精</li>\n</ul>\n<ol>\n<li><p>眼到，要理解字面意思</p>\n</li>\n<li><p>口到，熟读</p>\n</li>\n<li><p>心到，思考，横向比较思考，纵向追根究底，不断质疑“为什么”，和已有知识建立连接，融入自己的知识体系</p>\n</li>\n<li><p>手到，抄录、提炼、总结心得，知识只有在经过自己的思考提炼，形成自己的“输出”后，才真正成为自己的知识</p>\n</li>\n</ol>\n<ul>\n<li>博</li>\n</ul>\n<p>构建金字塔型的知识体系，能广大、有专精</p>\n"},{"title":"【月刊#1】2021.02","date":"2021-01-31T16:00:00.000Z","description":"推荐文章、优质信息源、学习资源、流量积累、看看机会","status":"Done","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210309112730.png","_content":"\n## 我的本月文章\n\n- [2021年，给自己来点鸡血](https://mp.weixin.qq.com/s/uW_xScBAv9qxkrZrly7I1g)\n- [《当我谈跑步时我谈些什么》：痛苦难以避免，而磨难可以选择](https://mp.weixin.qq.com/s/KhsxwPND0fpqMdTVnDKjXg)\n- [【GTD时间管理】高效低耗的应对信息洪流](https://mp.weixin.qq.com/s/SxhnoEq-CBJwA4h4RIRUMw)\n- [我做了一年公众号有多少收入？](https://mp.weixin.qq.com/s/hOqQqqazwUokOY79BGMLXQ)\n\n---\n\n## 推荐文章\n\n- [构建个人知识体系](https://mp.weixin.qq.com/s/aUj1yHHgvDtseDkyHnrKSg)\n\n> 知识习得的闭环：信息 → 学习内化 → 输出 → 应用 → 信息\n\n- [早起和赚钱，这2件事的逻辑其实一样](https://mp.weixin.qq.com/s/nbeU4ZZRKMa4MOfDK6CVeg)\n\n> 用培养技能的逻辑，做到早起\n\n---\n\n## 优质信息源\n\n- [构建我的被动收入](https://www.bmpi.dev/) - 马大伟\n\n> 终身学习(认知杠杆) → 全栈技术(时间杠) → 投资理财(财务杠杆) → 被动收入(人生杠杆)\n\n- [美团技术博客](https://tech.meituan.com/)\n\n> 更新稳定，积累多，技术领域宽泛\n\n---\n\n## 学习资源\n\n- [美团技术沙龙——85个演讲，70+小时视频](https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651750037&idx=1&sn=a9d4f3c00bba2e2b1313b422914bfb22&chksm=bd12a7d88a652ecebb576c750d3c90ac6a42d6b84b23e0d11f9d03028673d26786b732e05122&scene=21#wechat_redirect)\n- [技术人必读书单-美团](https://mp.weixin.qq.com/s/cOK7ETevEl2ODO_eqFdMzA)\n- [技术团队书单-美团](https://tech.meituan.com/2020/04/23/read-book-2020-04-23.html)\n    - **通用能力类：6本**\n\n        [原则](https://book.douban.com/subject/27608239/) 8.3\n\n        [系统之美](https://book.douban.com/subject/11528220/) 8.2\n\n        [潜力量](https://book.douban.com/subject/26665995/) 8.7\n\n        [乔布斯的魔力演讲](https://book.douban.com/subject/26469514/) 7.8\n\n        [远见 : 如何规划职业生涯3大阶段](https://book.douban.com/subject/27609489/) 7.7\n\n        [事实 : 用数据思考，避免情绪化决策](https://book.douban.com/subject/33385402/) 8.0\n\n    - **经济管理类：6本**\n\n        [孙子兵法](https://book.douban.com/subject/1949420/) 9.4\n\n        [格鲁夫给经理人的第一课](https://book.douban.com/subject/27178870/) 9.1\n\n        [刷新](https://book.douban.com/subject/27614523/) 7.5\n\n        [关键时刻MOT](https://book.douban.com/subject/26844697/) 8.2\n\n        [领导梯队](https://book.douban.com/subject/26863476/) 8.1\n\n        [经济学通识课](https://book.douban.com/subject/27104764/) 8.3\n\n    - **哲学历史类：8本**\n\n        [光荣与梦想](https://book.douban.com/subject/26314954/) 8.7\n\n        [民国大人物](https://book.douban.com/subject/26384991/) 6.5\n\n        [极简欧洲史](https://book.douban.com/subject/5366248/) 8.2\n\n        [世界观](https://book.douban.com/subject/30379527/) 8.9\n\n        [当下的力量](https://book.douban.com/subject/26815948/) 8.0\n\n        [枪炮、病菌与钢铁：人类社会的命运](https://book.douban.com/subject/26743265/) 8.8\n\n        [传习录](https://book.douban.com/subject/3007268/) 9.3\n\n        [西方心理学史](https://book.douban.com/subject/26306470/) 6.7\n\n    - **人物传记类：3本**\n\n        [邓小平时代](https://book.douban.com/subject/20424526/) 9.2\n\n        [我的世界观](https://book.douban.com/subject/30320887/) 8.9\n\n        [曾国藩传](https://book.douban.com/subject/30481422/) 6.8\n\n---\n\n## 流量积累\n\n- [独立博客 流量可视化案例](https://datastudio.google.com/reporting/6c3c6d3d-cd2f-4f8c-85e6-c06d672c445b/page/MnJzB)\n\n- [零成本搭建现代博客之订阅推送篇](https://www.bmpi.dev/dev/guide-to-setup-blog-site-with-zero-cost-3/)\n\n独立博客流量的即时性\n\n---\n\n## 看看机会\n\n- 【JD】莉莉丝（年终抽奖真香\n    - 莉莉丝游戏 - 平台组\n\n    ```jsx\n    公司名：莉莉丝游戏\n    部门名称：平台组\n    工作城市：上海\n    经验要求：2年以上\n    招聘岗位：前端工程师（P6、P6+）\n    职位描述：\n    1、负责公司官网，社区，平台开发和维护；\n    2、负责游戏管理系统的开发；\n    3、参与平台产品的架构优化，性能优化。\n    职位要求：\n    1、精通html5、css3、javascript、ajax等web开发技术，掌握至少一种前端框架，如react，angular，vue。熟悉ECMAscript6/7语法；\n    2、熟悉不同版本浏览器的兼容性、能够对不同尺寸设备进行适配；\n    3、至少一门后端开发语言，如nodejs，php，java等。掌握数据库和缓存系统，如mysql，memcached，redis等 ；\n    4、有一定的架构设计理念，熟悉常用设计模式；\n    5、有良好的ui交互实现能力、能熟练使用photoshop进行切图；\n    6、计算机或相关专业本科及以上学历；\n    内推联系人（微信）：Jaked_M\n    内推联系人（邮箱）：liuchao@lilith.com\n    ```\n\n    - 莉莉丝游戏 - Avatar项目组\n\n    ```jsx\n    公司名：莉莉丝游戏\n    部门名称：Avatar项目组\n    工作城市：上海\n    经验要求：3年以上\n    招聘岗位：RN工程师（P6 ~ P7）\n    职位描述\n    1、负责社区核心产品的设计、开发、维护工作\n    2、负责App基础组件和架构设计，编写高质量代码\n    3、和产品经理配合，深度参与产品需求讨论，功能定义，优化产品体验\n    4、研究移动平台新技术，持续优化App性能，对齐业内一流产品水平\n    任职要求\n    1、大学本科或以上学历，3年以上工作经验\n    2、iOS/Android端开发经验（高级android开发优先），具备一定双端开发能力者优先\n    3、深入理解Android端界面绘制原理/iOS端内存管理机制\n    4、熟悉网络通信机制和常用协议，有网络连接优化经验者优先\n    5、熟悉移动端性能调优方法\n    6、熟悉设计模式的相关知识\n    7、有即时通信产品开发经验者优先\n    8、熟悉React Native框架/JS语言者优先\n    9、了解swift/kotlin语言者优先\n    内推联系人（微信）：Jaked_M\n    内推联系人（邮箱）：liuchao@lilith.com\n    ```\n\n    - 莉莉丝游戏 - 测试开发部\n\n    ```jsx\n    公司名：莉莉丝游戏\n    部门名称：测试开发部\n    工作城市：上海\n    经验要求：3年以上\n    招聘岗位：前端开发工程师\n    职位描述\n    1、参与莉莉丝游戏内部测试平台的研发并独立负责前端开发工作\n    2、与设计师同事合作，对UI图进行高度还原和页面交互的实现\n    任职要求\n    1、大学本科或以上学历，3年以上工作经验\n    2、熟练运用JavaScript语言与HTML5、CSS3等技术\n    3、熟悉模块化，熟练运用主流的Web端JS库和开发框架，例如：Vue、Webpack、React等\n    4、有node开发经验优先\n    内推联系人（微信）：Jaked_M\n    内推联系人（邮箱）：liuchao@lilith.com\n    ```\n\n    - 莉莉丝游戏 - 产品发行中心\n\n    ```jsx\n    公司名：莉莉丝游戏\n    部门名称：产品发行中心\n    工作城市：上海\n    经验要求：2年以上\n    招聘岗位：前端开发工程师 （P5+）\n    职位描述\n    1、负责游戏官网、H5活动页、小程序等相关网站的前端开发与维护工作；\n    2、与设计师、后端同学紧密合作，负责产出高质量的产品前端层；\n    3、协助中台系统开发。\n    任职要求\n    1、大学本科或以上学历，2年以上工作经验\n    2、精通HTML5、CSS3、JavaScript等Web开发技术，具备扎实的前端基础；\n    3、对页面的架构和布局、多端的适配兼容、网站性能的优化、模块/组件等有深入的理解；\n    4、至少熟悉并上线使用过一种主流的前端开发框架，比如：vue、react；\n    5、热爱前端、较强的责任感、良好的团队协作能力。\n    内推联系人（微信）：Jaked_M\n    ```","source":"_posts/monthly_1_2021_01.md","raw":"---\ntitle: 【月刊#1】2021.02\ncategories:\n    - 00月刊\ntags:\ndate: 2021-02-01\ndescription: 推荐文章、优质信息源、学习资源、流量积累、看看机会\nstatus: Done\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210309112730.png\n---\n\n## 我的本月文章\n\n- [2021年，给自己来点鸡血](https://mp.weixin.qq.com/s/uW_xScBAv9qxkrZrly7I1g)\n- [《当我谈跑步时我谈些什么》：痛苦难以避免，而磨难可以选择](https://mp.weixin.qq.com/s/KhsxwPND0fpqMdTVnDKjXg)\n- [【GTD时间管理】高效低耗的应对信息洪流](https://mp.weixin.qq.com/s/SxhnoEq-CBJwA4h4RIRUMw)\n- [我做了一年公众号有多少收入？](https://mp.weixin.qq.com/s/hOqQqqazwUokOY79BGMLXQ)\n\n---\n\n## 推荐文章\n\n- [构建个人知识体系](https://mp.weixin.qq.com/s/aUj1yHHgvDtseDkyHnrKSg)\n\n> 知识习得的闭环：信息 → 学习内化 → 输出 → 应用 → 信息\n\n- [早起和赚钱，这2件事的逻辑其实一样](https://mp.weixin.qq.com/s/nbeU4ZZRKMa4MOfDK6CVeg)\n\n> 用培养技能的逻辑，做到早起\n\n---\n\n## 优质信息源\n\n- [构建我的被动收入](https://www.bmpi.dev/) - 马大伟\n\n> 终身学习(认知杠杆) → 全栈技术(时间杠) → 投资理财(财务杠杆) → 被动收入(人生杠杆)\n\n- [美团技术博客](https://tech.meituan.com/)\n\n> 更新稳定，积累多，技术领域宽泛\n\n---\n\n## 学习资源\n\n- [美团技术沙龙——85个演讲，70+小时视频](https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651750037&idx=1&sn=a9d4f3c00bba2e2b1313b422914bfb22&chksm=bd12a7d88a652ecebb576c750d3c90ac6a42d6b84b23e0d11f9d03028673d26786b732e05122&scene=21#wechat_redirect)\n- [技术人必读书单-美团](https://mp.weixin.qq.com/s/cOK7ETevEl2ODO_eqFdMzA)\n- [技术团队书单-美团](https://tech.meituan.com/2020/04/23/read-book-2020-04-23.html)\n    - **通用能力类：6本**\n\n        [原则](https://book.douban.com/subject/27608239/) 8.3\n\n        [系统之美](https://book.douban.com/subject/11528220/) 8.2\n\n        [潜力量](https://book.douban.com/subject/26665995/) 8.7\n\n        [乔布斯的魔力演讲](https://book.douban.com/subject/26469514/) 7.8\n\n        [远见 : 如何规划职业生涯3大阶段](https://book.douban.com/subject/27609489/) 7.7\n\n        [事实 : 用数据思考，避免情绪化决策](https://book.douban.com/subject/33385402/) 8.0\n\n    - **经济管理类：6本**\n\n        [孙子兵法](https://book.douban.com/subject/1949420/) 9.4\n\n        [格鲁夫给经理人的第一课](https://book.douban.com/subject/27178870/) 9.1\n\n        [刷新](https://book.douban.com/subject/27614523/) 7.5\n\n        [关键时刻MOT](https://book.douban.com/subject/26844697/) 8.2\n\n        [领导梯队](https://book.douban.com/subject/26863476/) 8.1\n\n        [经济学通识课](https://book.douban.com/subject/27104764/) 8.3\n\n    - **哲学历史类：8本**\n\n        [光荣与梦想](https://book.douban.com/subject/26314954/) 8.7\n\n        [民国大人物](https://book.douban.com/subject/26384991/) 6.5\n\n        [极简欧洲史](https://book.douban.com/subject/5366248/) 8.2\n\n        [世界观](https://book.douban.com/subject/30379527/) 8.9\n\n        [当下的力量](https://book.douban.com/subject/26815948/) 8.0\n\n        [枪炮、病菌与钢铁：人类社会的命运](https://book.douban.com/subject/26743265/) 8.8\n\n        [传习录](https://book.douban.com/subject/3007268/) 9.3\n\n        [西方心理学史](https://book.douban.com/subject/26306470/) 6.7\n\n    - **人物传记类：3本**\n\n        [邓小平时代](https://book.douban.com/subject/20424526/) 9.2\n\n        [我的世界观](https://book.douban.com/subject/30320887/) 8.9\n\n        [曾国藩传](https://book.douban.com/subject/30481422/) 6.8\n\n---\n\n## 流量积累\n\n- [独立博客 流量可视化案例](https://datastudio.google.com/reporting/6c3c6d3d-cd2f-4f8c-85e6-c06d672c445b/page/MnJzB)\n\n- [零成本搭建现代博客之订阅推送篇](https://www.bmpi.dev/dev/guide-to-setup-blog-site-with-zero-cost-3/)\n\n独立博客流量的即时性\n\n---\n\n## 看看机会\n\n- 【JD】莉莉丝（年终抽奖真香\n    - 莉莉丝游戏 - 平台组\n\n    ```jsx\n    公司名：莉莉丝游戏\n    部门名称：平台组\n    工作城市：上海\n    经验要求：2年以上\n    招聘岗位：前端工程师（P6、P6+）\n    职位描述：\n    1、负责公司官网，社区，平台开发和维护；\n    2、负责游戏管理系统的开发；\n    3、参与平台产品的架构优化，性能优化。\n    职位要求：\n    1、精通html5、css3、javascript、ajax等web开发技术，掌握至少一种前端框架，如react，angular，vue。熟悉ECMAscript6/7语法；\n    2、熟悉不同版本浏览器的兼容性、能够对不同尺寸设备进行适配；\n    3、至少一门后端开发语言，如nodejs，php，java等。掌握数据库和缓存系统，如mysql，memcached，redis等 ；\n    4、有一定的架构设计理念，熟悉常用设计模式；\n    5、有良好的ui交互实现能力、能熟练使用photoshop进行切图；\n    6、计算机或相关专业本科及以上学历；\n    内推联系人（微信）：Jaked_M\n    内推联系人（邮箱）：liuchao@lilith.com\n    ```\n\n    - 莉莉丝游戏 - Avatar项目组\n\n    ```jsx\n    公司名：莉莉丝游戏\n    部门名称：Avatar项目组\n    工作城市：上海\n    经验要求：3年以上\n    招聘岗位：RN工程师（P6 ~ P7）\n    职位描述\n    1、负责社区核心产品的设计、开发、维护工作\n    2、负责App基础组件和架构设计，编写高质量代码\n    3、和产品经理配合，深度参与产品需求讨论，功能定义，优化产品体验\n    4、研究移动平台新技术，持续优化App性能，对齐业内一流产品水平\n    任职要求\n    1、大学本科或以上学历，3年以上工作经验\n    2、iOS/Android端开发经验（高级android开发优先），具备一定双端开发能力者优先\n    3、深入理解Android端界面绘制原理/iOS端内存管理机制\n    4、熟悉网络通信机制和常用协议，有网络连接优化经验者优先\n    5、熟悉移动端性能调优方法\n    6、熟悉设计模式的相关知识\n    7、有即时通信产品开发经验者优先\n    8、熟悉React Native框架/JS语言者优先\n    9、了解swift/kotlin语言者优先\n    内推联系人（微信）：Jaked_M\n    内推联系人（邮箱）：liuchao@lilith.com\n    ```\n\n    - 莉莉丝游戏 - 测试开发部\n\n    ```jsx\n    公司名：莉莉丝游戏\n    部门名称：测试开发部\n    工作城市：上海\n    经验要求：3年以上\n    招聘岗位：前端开发工程师\n    职位描述\n    1、参与莉莉丝游戏内部测试平台的研发并独立负责前端开发工作\n    2、与设计师同事合作，对UI图进行高度还原和页面交互的实现\n    任职要求\n    1、大学本科或以上学历，3年以上工作经验\n    2、熟练运用JavaScript语言与HTML5、CSS3等技术\n    3、熟悉模块化，熟练运用主流的Web端JS库和开发框架，例如：Vue、Webpack、React等\n    4、有node开发经验优先\n    内推联系人（微信）：Jaked_M\n    内推联系人（邮箱）：liuchao@lilith.com\n    ```\n\n    - 莉莉丝游戏 - 产品发行中心\n\n    ```jsx\n    公司名：莉莉丝游戏\n    部门名称：产品发行中心\n    工作城市：上海\n    经验要求：2年以上\n    招聘岗位：前端开发工程师 （P5+）\n    职位描述\n    1、负责游戏官网、H5活动页、小程序等相关网站的前端开发与维护工作；\n    2、与设计师、后端同学紧密合作，负责产出高质量的产品前端层；\n    3、协助中台系统开发。\n    任职要求\n    1、大学本科或以上学历，2年以上工作经验\n    2、精通HTML5、CSS3、JavaScript等Web开发技术，具备扎实的前端基础；\n    3、对页面的架构和布局、多端的适配兼容、网站性能的优化、模块/组件等有深入的理解；\n    4、至少熟悉并上线使用过一种主流的前端开发框架，比如：vue、react；\n    5、热爱前端、较强的责任感、良好的团队协作能力。\n    内推联系人（微信）：Jaked_M\n    ```","slug":"monthly_1_2021_01","published":1,"updated":"2021-03-09T03:27:50.443Z","_id":"ckkmfqfnq0000x0y6fwpj74y1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"我的本月文章\"><a href=\"#我的本月文章\" class=\"headerlink\" title=\"我的本月文章\"></a>我的本月文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/uW_xScBAv9qxkrZrly7I1g\" target=\"_blank\" rel=\"noopener\">2021年，给自己来点鸡血</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/KhsxwPND0fpqMdTVnDKjXg\" target=\"_blank\" rel=\"noopener\">《当我谈跑步时我谈些什么》：痛苦难以避免，而磨难可以选择</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/SxhnoEq-CBJwA4h4RIRUMw\" target=\"_blank\" rel=\"noopener\">【GTD时间管理】高效低耗的应对信息洪流</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/hOqQqqazwUokOY79BGMLXQ\" target=\"_blank\" rel=\"noopener\">我做了一年公众号有多少收入？</a></li>\n</ul>\n<hr>\n<h2 id=\"推荐文章\"><a href=\"#推荐文章\" class=\"headerlink\" title=\"推荐文章\"></a>推荐文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/aUj1yHHgvDtseDkyHnrKSg\" target=\"_blank\" rel=\"noopener\">构建个人知识体系</a></li>\n</ul>\n<blockquote>\n<p>知识习得的闭环：信息 → 学习内化 → 输出 → 应用 → 信息</p>\n</blockquote>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/nbeU4ZZRKMa4MOfDK6CVeg\" target=\"_blank\" rel=\"noopener\">早起和赚钱，这2件事的逻辑其实一样</a></li>\n</ul>\n<blockquote>\n<p>用培养技能的逻辑，做到早起</p>\n</blockquote>\n<hr>\n<h2 id=\"优质信息源\"><a href=\"#优质信息源\" class=\"headerlink\" title=\"优质信息源\"></a>优质信息源</h2><ul>\n<li><a href=\"https://www.bmpi.dev/\" target=\"_blank\" rel=\"noopener\">构建我的被动收入</a> - 马大伟</li>\n</ul>\n<blockquote>\n<p>终身学习(认知杠杆) → 全栈技术(时间杠) → 投资理财(财务杠杆) → 被动收入(人生杠杆)</p>\n</blockquote>\n<ul>\n<li><a href=\"https://tech.meituan.com/\" target=\"_blank\" rel=\"noopener\">美团技术博客</a></li>\n</ul>\n<blockquote>\n<p>更新稳定，积累多，技术领域宽泛</p>\n</blockquote>\n<hr>\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;mid=2651750037&amp;idx=1&amp;sn=a9d4f3c00bba2e2b1313b422914bfb22&amp;chksm=bd12a7d88a652ecebb576c750d3c90ac6a42d6b84b23e0d11f9d03028673d26786b732e05122&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">美团技术沙龙——85个演讲，70+小时视频</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/cOK7ETevEl2ODO_eqFdMzA\" target=\"_blank\" rel=\"noopener\">技术人必读书单-美团</a></li>\n<li><p><a href=\"https://tech.meituan.com/2020/04/23/read-book-2020-04-23.html\" target=\"_blank\" rel=\"noopener\">技术团队书单-美团</a></p>\n<ul>\n<li><p><strong>通用能力类：6本</strong></p>\n<p>  <a href=\"https://book.douban.com/subject/27608239/\" target=\"_blank\" rel=\"noopener\">原则</a> 8.3</p>\n<p>  <a href=\"https://book.douban.com/subject/11528220/\" target=\"_blank\" rel=\"noopener\">系统之美</a> 8.2</p>\n<p>  <a href=\"https://book.douban.com/subject/26665995/\" target=\"_blank\" rel=\"noopener\">潜力量</a> 8.7</p>\n<p>  <a href=\"https://book.douban.com/subject/26469514/\" target=\"_blank\" rel=\"noopener\">乔布斯的魔力演讲</a> 7.8</p>\n<p>  <a href=\"https://book.douban.com/subject/27609489/\" target=\"_blank\" rel=\"noopener\">远见 : 如何规划职业生涯3大阶段</a> 7.7</p>\n<p>  <a href=\"https://book.douban.com/subject/33385402/\" target=\"_blank\" rel=\"noopener\">事实 : 用数据思考，避免情绪化决策</a> 8.0</p>\n</li>\n<li><p><strong>经济管理类：6本</strong></p>\n<p>  <a href=\"https://book.douban.com/subject/1949420/\" target=\"_blank\" rel=\"noopener\">孙子兵法</a> 9.4</p>\n<p>  <a href=\"https://book.douban.com/subject/27178870/\" target=\"_blank\" rel=\"noopener\">格鲁夫给经理人的第一课</a> 9.1</p>\n<p>  <a href=\"https://book.douban.com/subject/27614523/\" target=\"_blank\" rel=\"noopener\">刷新</a> 7.5</p>\n<p>  <a href=\"https://book.douban.com/subject/26844697/\" target=\"_blank\" rel=\"noopener\">关键时刻MOT</a> 8.2</p>\n<p>  <a href=\"https://book.douban.com/subject/26863476/\" target=\"_blank\" rel=\"noopener\">领导梯队</a> 8.1</p>\n<p>  <a href=\"https://book.douban.com/subject/27104764/\" target=\"_blank\" rel=\"noopener\">经济学通识课</a> 8.3</p>\n</li>\n<li><p><strong>哲学历史类：8本</strong></p>\n<p>  <a href=\"https://book.douban.com/subject/26314954/\" target=\"_blank\" rel=\"noopener\">光荣与梦想</a> 8.7</p>\n<p>  <a href=\"https://book.douban.com/subject/26384991/\" target=\"_blank\" rel=\"noopener\">民国大人物</a> 6.5</p>\n<p>  <a href=\"https://book.douban.com/subject/5366248/\" target=\"_blank\" rel=\"noopener\">极简欧洲史</a> 8.2</p>\n<p>  <a href=\"https://book.douban.com/subject/30379527/\" target=\"_blank\" rel=\"noopener\">世界观</a> 8.9</p>\n<p>  <a href=\"https://book.douban.com/subject/26815948/\" target=\"_blank\" rel=\"noopener\">当下的力量</a> 8.0</p>\n<p>  <a href=\"https://book.douban.com/subject/26743265/\" target=\"_blank\" rel=\"noopener\">枪炮、病菌与钢铁：人类社会的命运</a> 8.8</p>\n<p>  <a href=\"https://book.douban.com/subject/3007268/\" target=\"_blank\" rel=\"noopener\">传习录</a> 9.3</p>\n<p>  <a href=\"https://book.douban.com/subject/26306470/\" target=\"_blank\" rel=\"noopener\">西方心理学史</a> 6.7</p>\n</li>\n<li><p><strong>人物传记类：3本</strong></p>\n<p>  <a href=\"https://book.douban.com/subject/20424526/\" target=\"_blank\" rel=\"noopener\">邓小平时代</a> 9.2</p>\n<p>  <a href=\"https://book.douban.com/subject/30320887/\" target=\"_blank\" rel=\"noopener\">我的世界观</a> 8.9</p>\n<p>  <a href=\"https://book.douban.com/subject/30481422/\" target=\"_blank\" rel=\"noopener\">曾国藩传</a> 6.8</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"流量积累\"><a href=\"#流量积累\" class=\"headerlink\" title=\"流量积累\"></a>流量积累</h2><ul>\n<li><p><a href=\"https://datastudio.google.com/reporting/6c3c6d3d-cd2f-4f8c-85e6-c06d672c445b/page/MnJzB\" target=\"_blank\" rel=\"noopener\">独立博客 流量可视化案例</a></p>\n</li>\n<li><p><a href=\"https://www.bmpi.dev/dev/guide-to-setup-blog-site-with-zero-cost-3/\" target=\"_blank\" rel=\"noopener\">零成本搭建现代博客之订阅推送篇</a></p>\n</li>\n</ul>\n<p>独立博客流量的即时性</p>\n<hr>\n<h2 id=\"看看机会\"><a href=\"#看看机会\" class=\"headerlink\" title=\"看看机会\"></a>看看机会</h2><ul>\n<li><p>【JD】莉莉丝（年终抽奖真香</p>\n<ul>\n<li><p>莉莉丝游戏 - 平台组</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">公司名：莉莉丝游戏</span><br><span class=\"line\">部门名称：平台组</span><br><span class=\"line\">工作城市：上海</span><br><span class=\"line\">经验要求：<span class=\"number\">2</span>年以上</span><br><span class=\"line\">招聘岗位：前端工程师（P6、P6+）</span><br><span class=\"line\">职位描述：</span><br><span class=\"line\"><span class=\"number\">1</span>、负责公司官网，社区，平台开发和维护；</span><br><span class=\"line\"><span class=\"number\">2</span>、负责游戏管理系统的开发；</span><br><span class=\"line\"><span class=\"number\">3</span>、参与平台产品的架构优化，性能优化。</span><br><span class=\"line\">职位要求：</span><br><span class=\"line\"><span class=\"number\">1</span>、精通html5、css3、javascript、ajax等web开发技术，掌握至少一种前端框架，如react，angular，vue。熟悉ECMAscript6/<span class=\"number\">7</span>语法；</span><br><span class=\"line\"><span class=\"number\">2</span>、熟悉不同版本浏览器的兼容性、能够对不同尺寸设备进行适配；</span><br><span class=\"line\"><span class=\"number\">3</span>、至少一门后端开发语言，如nodejs，php，java等。掌握数据库和缓存系统，如mysql，memcached，redis等 ；</span><br><span class=\"line\"><span class=\"number\">4</span>、有一定的架构设计理念，熟悉常用设计模式；</span><br><span class=\"line\"><span class=\"number\">5</span>、有良好的ui交互实现能力、能熟练使用photoshop进行切图；</span><br><span class=\"line\"><span class=\"number\">6</span>、计算机或相关专业本科及以上学历；</span><br><span class=\"line\">内推联系人（微信）：Jaked_M</span><br><span class=\"line\">内推联系人（邮箱）：liuchao@lilith.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>莉莉丝游戏 - Avatar项目组</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">公司名：莉莉丝游戏</span><br><span class=\"line\">部门名称：Avatar项目组</span><br><span class=\"line\">工作城市：上海</span><br><span class=\"line\">经验要求：<span class=\"number\">3</span>年以上</span><br><span class=\"line\">招聘岗位：RN工程师（P6 ~ P7）</span><br><span class=\"line\">职位描述</span><br><span class=\"line\"><span class=\"number\">1</span>、负责社区核心产品的设计、开发、维护工作</span><br><span class=\"line\"><span class=\"number\">2</span>、负责App基础组件和架构设计，编写高质量代码</span><br><span class=\"line\"><span class=\"number\">3</span>、和产品经理配合，深度参与产品需求讨论，功能定义，优化产品体验</span><br><span class=\"line\"><span class=\"number\">4</span>、研究移动平台新技术，持续优化App性能，对齐业内一流产品水平</span><br><span class=\"line\">任职要求</span><br><span class=\"line\"><span class=\"number\">1</span>、大学本科或以上学历，<span class=\"number\">3</span>年以上工作经验</span><br><span class=\"line\"><span class=\"number\">2</span>、iOS/Android端开发经验（高级android开发优先），具备一定双端开发能力者优先</span><br><span class=\"line\"><span class=\"number\">3</span>、深入理解Android端界面绘制原理/iOS端内存管理机制</span><br><span class=\"line\"><span class=\"number\">4</span>、熟悉网络通信机制和常用协议，有网络连接优化经验者优先</span><br><span class=\"line\"><span class=\"number\">5</span>、熟悉移动端性能调优方法</span><br><span class=\"line\"><span class=\"number\">6</span>、熟悉设计模式的相关知识</span><br><span class=\"line\"><span class=\"number\">7</span>、有即时通信产品开发经验者优先</span><br><span class=\"line\"><span class=\"number\">8</span>、熟悉React Native框架/JS语言者优先</span><br><span class=\"line\"><span class=\"number\">9</span>、了解swift/kotlin语言者优先</span><br><span class=\"line\">内推联系人（微信）：Jaked_M</span><br><span class=\"line\">内推联系人（邮箱）：liuchao@lilith.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>莉莉丝游戏 - 测试开发部</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">公司名：莉莉丝游戏</span><br><span class=\"line\">部门名称：测试开发部</span><br><span class=\"line\">工作城市：上海</span><br><span class=\"line\">经验要求：<span class=\"number\">3</span>年以上</span><br><span class=\"line\">招聘岗位：前端开发工程师</span><br><span class=\"line\">职位描述</span><br><span class=\"line\"><span class=\"number\">1</span>、参与莉莉丝游戏内部测试平台的研发并独立负责前端开发工作</span><br><span class=\"line\"><span class=\"number\">2</span>、与设计师同事合作，对UI图进行高度还原和页面交互的实现</span><br><span class=\"line\">任职要求</span><br><span class=\"line\"><span class=\"number\">1</span>、大学本科或以上学历，<span class=\"number\">3</span>年以上工作经验</span><br><span class=\"line\"><span class=\"number\">2</span>、熟练运用JavaScript语言与HTML5、CSS3等技术</span><br><span class=\"line\"><span class=\"number\">3</span>、熟悉模块化，熟练运用主流的Web端JS库和开发框架，例如：Vue、Webpack、React等</span><br><span class=\"line\"><span class=\"number\">4</span>、有node开发经验优先</span><br><span class=\"line\">内推联系人（微信）：Jaked_M</span><br><span class=\"line\">内推联系人（邮箱）：liuchao@lilith.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>莉莉丝游戏 - 产品发行中心</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">公司名：莉莉丝游戏</span><br><span class=\"line\">部门名称：产品发行中心</span><br><span class=\"line\">工作城市：上海</span><br><span class=\"line\">经验要求：<span class=\"number\">2</span>年以上</span><br><span class=\"line\">招聘岗位：前端开发工程师 （P5+）</span><br><span class=\"line\">职位描述</span><br><span class=\"line\"><span class=\"number\">1</span>、负责游戏官网、H5活动页、小程序等相关网站的前端开发与维护工作；</span><br><span class=\"line\"><span class=\"number\">2</span>、与设计师、后端同学紧密合作，负责产出高质量的产品前端层；</span><br><span class=\"line\"><span class=\"number\">3</span>、协助中台系统开发。</span><br><span class=\"line\">任职要求</span><br><span class=\"line\"><span class=\"number\">1</span>、大学本科或以上学历，<span class=\"number\">2</span>年以上工作经验</span><br><span class=\"line\"><span class=\"number\">2</span>、精通HTML5、CSS3、JavaScript等Web开发技术，具备扎实的前端基础；</span><br><span class=\"line\"><span class=\"number\">3</span>、对页面的架构和布局、多端的适配兼容、网站性能的优化、模块/组件等有深入的理解；</span><br><span class=\"line\"><span class=\"number\">4</span>、至少熟悉并上线使用过一种主流的前端开发框架，比如：vue、react；</span><br><span class=\"line\"><span class=\"number\">5</span>、热爱前端、较强的责任感、良好的团队协作能力。</span><br><span class=\"line\">内推联系人（微信）：Jaked_M</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"我的本月文章\"><a href=\"#我的本月文章\" class=\"headerlink\" title=\"我的本月文章\"></a>我的本月文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/uW_xScBAv9qxkrZrly7I1g\" target=\"_blank\" rel=\"noopener\">2021年，给自己来点鸡血</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/KhsxwPND0fpqMdTVnDKjXg\" target=\"_blank\" rel=\"noopener\">《当我谈跑步时我谈些什么》：痛苦难以避免，而磨难可以选择</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/SxhnoEq-CBJwA4h4RIRUMw\" target=\"_blank\" rel=\"noopener\">【GTD时间管理】高效低耗的应对信息洪流</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/hOqQqqazwUokOY79BGMLXQ\" target=\"_blank\" rel=\"noopener\">我做了一年公众号有多少收入？</a></li>\n</ul>\n<hr>\n<h2 id=\"推荐文章\"><a href=\"#推荐文章\" class=\"headerlink\" title=\"推荐文章\"></a>推荐文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/aUj1yHHgvDtseDkyHnrKSg\" target=\"_blank\" rel=\"noopener\">构建个人知识体系</a></li>\n</ul>\n<blockquote>\n<p>知识习得的闭环：信息 → 学习内化 → 输出 → 应用 → 信息</p>\n</blockquote>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/nbeU4ZZRKMa4MOfDK6CVeg\" target=\"_blank\" rel=\"noopener\">早起和赚钱，这2件事的逻辑其实一样</a></li>\n</ul>\n<blockquote>\n<p>用培养技能的逻辑，做到早起</p>\n</blockquote>\n<hr>\n<h2 id=\"优质信息源\"><a href=\"#优质信息源\" class=\"headerlink\" title=\"优质信息源\"></a>优质信息源</h2><ul>\n<li><a href=\"https://www.bmpi.dev/\" target=\"_blank\" rel=\"noopener\">构建我的被动收入</a> - 马大伟</li>\n</ul>\n<blockquote>\n<p>终身学习(认知杠杆) → 全栈技术(时间杠) → 投资理财(财务杠杆) → 被动收入(人生杠杆)</p>\n</blockquote>\n<ul>\n<li><a href=\"https://tech.meituan.com/\" target=\"_blank\" rel=\"noopener\">美团技术博客</a></li>\n</ul>\n<blockquote>\n<p>更新稳定，积累多，技术领域宽泛</p>\n</blockquote>\n<hr>\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;mid=2651750037&amp;idx=1&amp;sn=a9d4f3c00bba2e2b1313b422914bfb22&amp;chksm=bd12a7d88a652ecebb576c750d3c90ac6a42d6b84b23e0d11f9d03028673d26786b732e05122&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">美团技术沙龙——85个演讲，70+小时视频</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/cOK7ETevEl2ODO_eqFdMzA\" target=\"_blank\" rel=\"noopener\">技术人必读书单-美团</a></li>\n<li><p><a href=\"https://tech.meituan.com/2020/04/23/read-book-2020-04-23.html\" target=\"_blank\" rel=\"noopener\">技术团队书单-美团</a></p>\n<ul>\n<li><p><strong>通用能力类：6本</strong></p>\n<p>  <a href=\"https://book.douban.com/subject/27608239/\" target=\"_blank\" rel=\"noopener\">原则</a> 8.3</p>\n<p>  <a href=\"https://book.douban.com/subject/11528220/\" target=\"_blank\" rel=\"noopener\">系统之美</a> 8.2</p>\n<p>  <a href=\"https://book.douban.com/subject/26665995/\" target=\"_blank\" rel=\"noopener\">潜力量</a> 8.7</p>\n<p>  <a href=\"https://book.douban.com/subject/26469514/\" target=\"_blank\" rel=\"noopener\">乔布斯的魔力演讲</a> 7.8</p>\n<p>  <a href=\"https://book.douban.com/subject/27609489/\" target=\"_blank\" rel=\"noopener\">远见 : 如何规划职业生涯3大阶段</a> 7.7</p>\n<p>  <a href=\"https://book.douban.com/subject/33385402/\" target=\"_blank\" rel=\"noopener\">事实 : 用数据思考，避免情绪化决策</a> 8.0</p>\n</li>\n<li><p><strong>经济管理类：6本</strong></p>\n<p>  <a href=\"https://book.douban.com/subject/1949420/\" target=\"_blank\" rel=\"noopener\">孙子兵法</a> 9.4</p>\n<p>  <a href=\"https://book.douban.com/subject/27178870/\" target=\"_blank\" rel=\"noopener\">格鲁夫给经理人的第一课</a> 9.1</p>\n<p>  <a href=\"https://book.douban.com/subject/27614523/\" target=\"_blank\" rel=\"noopener\">刷新</a> 7.5</p>\n<p>  <a href=\"https://book.douban.com/subject/26844697/\" target=\"_blank\" rel=\"noopener\">关键时刻MOT</a> 8.2</p>\n<p>  <a href=\"https://book.douban.com/subject/26863476/\" target=\"_blank\" rel=\"noopener\">领导梯队</a> 8.1</p>\n<p>  <a href=\"https://book.douban.com/subject/27104764/\" target=\"_blank\" rel=\"noopener\">经济学通识课</a> 8.3</p>\n</li>\n<li><p><strong>哲学历史类：8本</strong></p>\n<p>  <a href=\"https://book.douban.com/subject/26314954/\" target=\"_blank\" rel=\"noopener\">光荣与梦想</a> 8.7</p>\n<p>  <a href=\"https://book.douban.com/subject/26384991/\" target=\"_blank\" rel=\"noopener\">民国大人物</a> 6.5</p>\n<p>  <a href=\"https://book.douban.com/subject/5366248/\" target=\"_blank\" rel=\"noopener\">极简欧洲史</a> 8.2</p>\n<p>  <a href=\"https://book.douban.com/subject/30379527/\" target=\"_blank\" rel=\"noopener\">世界观</a> 8.9</p>\n<p>  <a href=\"https://book.douban.com/subject/26815948/\" target=\"_blank\" rel=\"noopener\">当下的力量</a> 8.0</p>\n<p>  <a href=\"https://book.douban.com/subject/26743265/\" target=\"_blank\" rel=\"noopener\">枪炮、病菌与钢铁：人类社会的命运</a> 8.8</p>\n<p>  <a href=\"https://book.douban.com/subject/3007268/\" target=\"_blank\" rel=\"noopener\">传习录</a> 9.3</p>\n<p>  <a href=\"https://book.douban.com/subject/26306470/\" target=\"_blank\" rel=\"noopener\">西方心理学史</a> 6.7</p>\n</li>\n<li><p><strong>人物传记类：3本</strong></p>\n<p>  <a href=\"https://book.douban.com/subject/20424526/\" target=\"_blank\" rel=\"noopener\">邓小平时代</a> 9.2</p>\n<p>  <a href=\"https://book.douban.com/subject/30320887/\" target=\"_blank\" rel=\"noopener\">我的世界观</a> 8.9</p>\n<p>  <a href=\"https://book.douban.com/subject/30481422/\" target=\"_blank\" rel=\"noopener\">曾国藩传</a> 6.8</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"流量积累\"><a href=\"#流量积累\" class=\"headerlink\" title=\"流量积累\"></a>流量积累</h2><ul>\n<li><p><a href=\"https://datastudio.google.com/reporting/6c3c6d3d-cd2f-4f8c-85e6-c06d672c445b/page/MnJzB\" target=\"_blank\" rel=\"noopener\">独立博客 流量可视化案例</a></p>\n</li>\n<li><p><a href=\"https://www.bmpi.dev/dev/guide-to-setup-blog-site-with-zero-cost-3/\" target=\"_blank\" rel=\"noopener\">零成本搭建现代博客之订阅推送篇</a></p>\n</li>\n</ul>\n<p>独立博客流量的即时性</p>\n<hr>\n<h2 id=\"看看机会\"><a href=\"#看看机会\" class=\"headerlink\" title=\"看看机会\"></a>看看机会</h2><ul>\n<li><p>【JD】莉莉丝（年终抽奖真香</p>\n<ul>\n<li><p>莉莉丝游戏 - 平台组</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">公司名：莉莉丝游戏</span><br><span class=\"line\">部门名称：平台组</span><br><span class=\"line\">工作城市：上海</span><br><span class=\"line\">经验要求：<span class=\"number\">2</span>年以上</span><br><span class=\"line\">招聘岗位：前端工程师（P6、P6+）</span><br><span class=\"line\">职位描述：</span><br><span class=\"line\"><span class=\"number\">1</span>、负责公司官网，社区，平台开发和维护；</span><br><span class=\"line\"><span class=\"number\">2</span>、负责游戏管理系统的开发；</span><br><span class=\"line\"><span class=\"number\">3</span>、参与平台产品的架构优化，性能优化。</span><br><span class=\"line\">职位要求：</span><br><span class=\"line\"><span class=\"number\">1</span>、精通html5、css3、javascript、ajax等web开发技术，掌握至少一种前端框架，如react，angular，vue。熟悉ECMAscript6/<span class=\"number\">7</span>语法；</span><br><span class=\"line\"><span class=\"number\">2</span>、熟悉不同版本浏览器的兼容性、能够对不同尺寸设备进行适配；</span><br><span class=\"line\"><span class=\"number\">3</span>、至少一门后端开发语言，如nodejs，php，java等。掌握数据库和缓存系统，如mysql，memcached，redis等 ；</span><br><span class=\"line\"><span class=\"number\">4</span>、有一定的架构设计理念，熟悉常用设计模式；</span><br><span class=\"line\"><span class=\"number\">5</span>、有良好的ui交互实现能力、能熟练使用photoshop进行切图；</span><br><span class=\"line\"><span class=\"number\">6</span>、计算机或相关专业本科及以上学历；</span><br><span class=\"line\">内推联系人（微信）：Jaked_M</span><br><span class=\"line\">内推联系人（邮箱）：liuchao@lilith.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>莉莉丝游戏 - Avatar项目组</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">公司名：莉莉丝游戏</span><br><span class=\"line\">部门名称：Avatar项目组</span><br><span class=\"line\">工作城市：上海</span><br><span class=\"line\">经验要求：<span class=\"number\">3</span>年以上</span><br><span class=\"line\">招聘岗位：RN工程师（P6 ~ P7）</span><br><span class=\"line\">职位描述</span><br><span class=\"line\"><span class=\"number\">1</span>、负责社区核心产品的设计、开发、维护工作</span><br><span class=\"line\"><span class=\"number\">2</span>、负责App基础组件和架构设计，编写高质量代码</span><br><span class=\"line\"><span class=\"number\">3</span>、和产品经理配合，深度参与产品需求讨论，功能定义，优化产品体验</span><br><span class=\"line\"><span class=\"number\">4</span>、研究移动平台新技术，持续优化App性能，对齐业内一流产品水平</span><br><span class=\"line\">任职要求</span><br><span class=\"line\"><span class=\"number\">1</span>、大学本科或以上学历，<span class=\"number\">3</span>年以上工作经验</span><br><span class=\"line\"><span class=\"number\">2</span>、iOS/Android端开发经验（高级android开发优先），具备一定双端开发能力者优先</span><br><span class=\"line\"><span class=\"number\">3</span>、深入理解Android端界面绘制原理/iOS端内存管理机制</span><br><span class=\"line\"><span class=\"number\">4</span>、熟悉网络通信机制和常用协议，有网络连接优化经验者优先</span><br><span class=\"line\"><span class=\"number\">5</span>、熟悉移动端性能调优方法</span><br><span class=\"line\"><span class=\"number\">6</span>、熟悉设计模式的相关知识</span><br><span class=\"line\"><span class=\"number\">7</span>、有即时通信产品开发经验者优先</span><br><span class=\"line\"><span class=\"number\">8</span>、熟悉React Native框架/JS语言者优先</span><br><span class=\"line\"><span class=\"number\">9</span>、了解swift/kotlin语言者优先</span><br><span class=\"line\">内推联系人（微信）：Jaked_M</span><br><span class=\"line\">内推联系人（邮箱）：liuchao@lilith.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>莉莉丝游戏 - 测试开发部</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">公司名：莉莉丝游戏</span><br><span class=\"line\">部门名称：测试开发部</span><br><span class=\"line\">工作城市：上海</span><br><span class=\"line\">经验要求：<span class=\"number\">3</span>年以上</span><br><span class=\"line\">招聘岗位：前端开发工程师</span><br><span class=\"line\">职位描述</span><br><span class=\"line\"><span class=\"number\">1</span>、参与莉莉丝游戏内部测试平台的研发并独立负责前端开发工作</span><br><span class=\"line\"><span class=\"number\">2</span>、与设计师同事合作，对UI图进行高度还原和页面交互的实现</span><br><span class=\"line\">任职要求</span><br><span class=\"line\"><span class=\"number\">1</span>、大学本科或以上学历，<span class=\"number\">3</span>年以上工作经验</span><br><span class=\"line\"><span class=\"number\">2</span>、熟练运用JavaScript语言与HTML5、CSS3等技术</span><br><span class=\"line\"><span class=\"number\">3</span>、熟悉模块化，熟练运用主流的Web端JS库和开发框架，例如：Vue、Webpack、React等</span><br><span class=\"line\"><span class=\"number\">4</span>、有node开发经验优先</span><br><span class=\"line\">内推联系人（微信）：Jaked_M</span><br><span class=\"line\">内推联系人（邮箱）：liuchao@lilith.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>莉莉丝游戏 - 产品发行中心</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">公司名：莉莉丝游戏</span><br><span class=\"line\">部门名称：产品发行中心</span><br><span class=\"line\">工作城市：上海</span><br><span class=\"line\">经验要求：<span class=\"number\">2</span>年以上</span><br><span class=\"line\">招聘岗位：前端开发工程师 （P5+）</span><br><span class=\"line\">职位描述</span><br><span class=\"line\"><span class=\"number\">1</span>、负责游戏官网、H5活动页、小程序等相关网站的前端开发与维护工作；</span><br><span class=\"line\"><span class=\"number\">2</span>、与设计师、后端同学紧密合作，负责产出高质量的产品前端层；</span><br><span class=\"line\"><span class=\"number\">3</span>、协助中台系统开发。</span><br><span class=\"line\">任职要求</span><br><span class=\"line\"><span class=\"number\">1</span>、大学本科或以上学历，<span class=\"number\">2</span>年以上工作经验</span><br><span class=\"line\"><span class=\"number\">2</span>、精通HTML5、CSS3、JavaScript等Web开发技术，具备扎实的前端基础；</span><br><span class=\"line\"><span class=\"number\">3</span>、对页面的架构和布局、多端的适配兼容、网站性能的优化、模块/组件等有深入的理解；</span><br><span class=\"line\"><span class=\"number\">4</span>、至少熟悉并上线使用过一种主流的前端开发框架，比如：vue、react；</span><br><span class=\"line\"><span class=\"number\">5</span>、热爱前端、较强的责任感、良好的团队协作能力。</span><br><span class=\"line\">内推联系人（微信）：Jaked_M</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"【月刊#2】2021.03","date":"2021-02-28T16:00:00.000Z","description":"2020年总结收集、学习资源、Notion相关资源、工作、书单、话题","status":"Done","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210309112740.png","_content":"## 2020年总结收集\n\n- [若川的2020年度总结，水波不兴](https://mp.weixin.qq.com/s/QmLPNJgFcJXCSwo0aq4-Xg) （川佬的第七个年总结\n- [前端劝退师：晃荡一年，我那错乱无力的2020 | 年度总结](https://mp.weixin.qq.com/s/qktcTaH1ghKVsUjEh3j42w) （晃荡又不失风骚的职业旅程\n- [惊天码盗：2020年度总结（增长的朋友）](https://mp.weixin.qq.com/s/f2Dm1_GVoIuQRrJIFTPgtg) （偏重于学习/工作/职业成长\n- [一位阿里前端er的年总结](https://mp.weixin.qq.com/s/FzO00k3JAuOvfmY8J0izAg) （生活、工作、兴趣、理财，主题丰满\n\n## 学习资源\n\n- 英文演讲/影子跟读【Never Give Up】尼克·胡哲  [音频](http://music.163.com/song?id=30512348&userid=109088284)  [中英文稿](https://scarsu.oss-cn-shanghai.aliyuncs.com/file_share/2021-02-01%E3%80%90never%20give%20up%E3%80%91.docx)\n- [神经网络入门教程 - freecodecamp](https://www.freecodecamp.org/news/convolutional-neural-network-tutorial-for-beginners/)\n- [docker教程 - freecodecamp](https://www.freecodecamp.org/news/the-docker-handbook)\n- [如何快速进入学习状态 - bilibili](https://www.bilibili.com/video/BV1QX4y157mJ?p=1&share_medium=android&share_plat=android&share_source=COPY&share_tag=s_i&timestamp=1614612909&unique_k=oE4GG5)\n\n## Notion相关资源\n\n- Notion 自动化：Notion API key + [Automate.io](https://automate.io/integration/notion)\n- Mac [alfred Notion搜索快捷操作](https://github.com/wrjlewis/notion-search-alfred-workflow)\n- [Notion子弹笔记](https://www.douban.com/note/769517273/)\n\n## 工作\n\n- [工作中提高效率的方法](https://www.zhihu.com/question/440237998/answer/1720449267?utm_source=wechat_session&utm_medium=social&utm_oi=28923681308672&utm_content=group3_Answer&utm_campaign=shareopn)\n- [前端软技能，反制职场PUA](https://juejin.cn/post/6926787585423933448#heading-0)\n- 敏捷项目管理：[notion 看板](https://www.notion.so/product#use_case_tasks)，[飞书多维表格](https://bitable.feishu.cn/templates?view_name=project)\n\n## 书单\n\n- [女权书单](https://m.weibo.cn/1911799583/4592668862066856)\n- [30+大男孩的世界好奇书单](https://m.smzdm.com/rank/6452/)\n- [学科入门书单/短板补充书单](https://m.smzdm.com/rank/6500/)\n\n## 话题\n\n- 【自律=压抑欲望？】 所谓自律，就是主动要求自己以积极的态度承受痛苦——[《少有人走的路》](https://weread.qq.com/web/reader/1d2322d0720cbe751d2d787k45c322601945c48cce2e120)\n- 【“人设”的作用】是快速让对方知道能从你身上获得哪一类内容。\n- 【投资】[一表看完散户大战华尔街全过程（持续更新）](https://bitable.feishu.cn/apppmH1tnO5OPZvBiOjl3fu3tBB?table=tblvGUyT13QJ3qDm&view=vewuNfwLSj)\n- 【职业故事】[两位独立开发者](https://twitter.com/waylybaye/status/1356513036303962112)","source":"_posts/monthly_2_2021_02.md","raw":"---\ntitle: 【月刊#2】2021.03\ncategories:\n    - 00月刊\ntags:\ndate: 2021-03-01\ndescription: 2020年总结收集、学习资源、Notion相关资源、工作、书单、话题\nstatus: Done\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210309112740.png\n---\n## 2020年总结收集\n\n- [若川的2020年度总结，水波不兴](https://mp.weixin.qq.com/s/QmLPNJgFcJXCSwo0aq4-Xg) （川佬的第七个年总结\n- [前端劝退师：晃荡一年，我那错乱无力的2020 | 年度总结](https://mp.weixin.qq.com/s/qktcTaH1ghKVsUjEh3j42w) （晃荡又不失风骚的职业旅程\n- [惊天码盗：2020年度总结（增长的朋友）](https://mp.weixin.qq.com/s/f2Dm1_GVoIuQRrJIFTPgtg) （偏重于学习/工作/职业成长\n- [一位阿里前端er的年总结](https://mp.weixin.qq.com/s/FzO00k3JAuOvfmY8J0izAg) （生活、工作、兴趣、理财，主题丰满\n\n## 学习资源\n\n- 英文演讲/影子跟读【Never Give Up】尼克·胡哲  [音频](http://music.163.com/song?id=30512348&userid=109088284)  [中英文稿](https://scarsu.oss-cn-shanghai.aliyuncs.com/file_share/2021-02-01%E3%80%90never%20give%20up%E3%80%91.docx)\n- [神经网络入门教程 - freecodecamp](https://www.freecodecamp.org/news/convolutional-neural-network-tutorial-for-beginners/)\n- [docker教程 - freecodecamp](https://www.freecodecamp.org/news/the-docker-handbook)\n- [如何快速进入学习状态 - bilibili](https://www.bilibili.com/video/BV1QX4y157mJ?p=1&share_medium=android&share_plat=android&share_source=COPY&share_tag=s_i&timestamp=1614612909&unique_k=oE4GG5)\n\n## Notion相关资源\n\n- Notion 自动化：Notion API key + [Automate.io](https://automate.io/integration/notion)\n- Mac [alfred Notion搜索快捷操作](https://github.com/wrjlewis/notion-search-alfred-workflow)\n- [Notion子弹笔记](https://www.douban.com/note/769517273/)\n\n## 工作\n\n- [工作中提高效率的方法](https://www.zhihu.com/question/440237998/answer/1720449267?utm_source=wechat_session&utm_medium=social&utm_oi=28923681308672&utm_content=group3_Answer&utm_campaign=shareopn)\n- [前端软技能，反制职场PUA](https://juejin.cn/post/6926787585423933448#heading-0)\n- 敏捷项目管理：[notion 看板](https://www.notion.so/product#use_case_tasks)，[飞书多维表格](https://bitable.feishu.cn/templates?view_name=project)\n\n## 书单\n\n- [女权书单](https://m.weibo.cn/1911799583/4592668862066856)\n- [30+大男孩的世界好奇书单](https://m.smzdm.com/rank/6452/)\n- [学科入门书单/短板补充书单](https://m.smzdm.com/rank/6500/)\n\n## 话题\n\n- 【自律=压抑欲望？】 所谓自律，就是主动要求自己以积极的态度承受痛苦——[《少有人走的路》](https://weread.qq.com/web/reader/1d2322d0720cbe751d2d787k45c322601945c48cce2e120)\n- 【“人设”的作用】是快速让对方知道能从你身上获得哪一类内容。\n- 【投资】[一表看完散户大战华尔街全过程（持续更新）](https://bitable.feishu.cn/apppmH1tnO5OPZvBiOjl3fu3tBB?table=tblvGUyT13QJ3qDm&view=vewuNfwLSj)\n- 【职业故事】[两位独立开发者](https://twitter.com/waylybaye/status/1356513036303962112)","slug":"monthly_2_2021_02","published":1,"updated":"2021-03-09T03:27:58.999Z","_id":"ckm1fzj0h0000z8y6tel4kgno","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"2020年总结收集\"><a href=\"#2020年总结收集\" class=\"headerlink\" title=\"2020年总结收集\"></a>2020年总结收集</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/QmLPNJgFcJXCSwo0aq4-Xg\" target=\"_blank\" rel=\"noopener\">若川的2020年度总结，水波不兴</a> （川佬的第七个年总结</li>\n<li><a href=\"https://mp.weixin.qq.com/s/qktcTaH1ghKVsUjEh3j42w\" target=\"_blank\" rel=\"noopener\">前端劝退师：晃荡一年，我那错乱无力的2020 | 年度总结</a> （晃荡又不失风骚的职业旅程</li>\n<li><a href=\"https://mp.weixin.qq.com/s/f2Dm1_GVoIuQRrJIFTPgtg\" target=\"_blank\" rel=\"noopener\">惊天码盗：2020年度总结（增长的朋友）</a> （偏重于学习/工作/职业成长</li>\n<li><a href=\"https://mp.weixin.qq.com/s/FzO00k3JAuOvfmY8J0izAg\" target=\"_blank\" rel=\"noopener\">一位阿里前端er的年总结</a> （生活、工作、兴趣、理财，主题丰满</li>\n</ul>\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><ul>\n<li>英文演讲/影子跟读【Never Give Up】尼克·胡哲  <a href=\"http://music.163.com/song?id=30512348&amp;userid=109088284\" target=\"_blank\" rel=\"noopener\">音频</a>  <a href=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/file_share/2021-02-01%E3%80%90never%20give%20up%E3%80%91.docx\" target=\"_blank\" rel=\"noopener\">中英文稿</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/convolutional-neural-network-tutorial-for-beginners/\" target=\"_blank\" rel=\"noopener\">神经网络入门教程 - freecodecamp</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/the-docker-handbook\" target=\"_blank\" rel=\"noopener\">docker教程 - freecodecamp</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1QX4y157mJ?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1614612909&amp;unique_k=oE4GG5\" target=\"_blank\" rel=\"noopener\">如何快速进入学习状态 - bilibili</a></li>\n</ul>\n<h2 id=\"Notion相关资源\"><a href=\"#Notion相关资源\" class=\"headerlink\" title=\"Notion相关资源\"></a>Notion相关资源</h2><ul>\n<li>Notion 自动化：Notion API key + <a href=\"https://automate.io/integration/notion\" target=\"_blank\" rel=\"noopener\">Automate.io</a></li>\n<li>Mac <a href=\"https://github.com/wrjlewis/notion-search-alfred-workflow\" target=\"_blank\" rel=\"noopener\">alfred Notion搜索快捷操作</a></li>\n<li><a href=\"https://www.douban.com/note/769517273/\" target=\"_blank\" rel=\"noopener\">Notion子弹笔记</a></li>\n</ul>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><ul>\n<li><a href=\"https://www.zhihu.com/question/440237998/answer/1720449267?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=28923681308672&amp;utm_content=group3_Answer&amp;utm_campaign=shareopn\" target=\"_blank\" rel=\"noopener\">工作中提高效率的方法</a></li>\n<li><a href=\"https://juejin.cn/post/6926787585423933448#heading-0\" target=\"_blank\" rel=\"noopener\">前端软技能，反制职场PUA</a></li>\n<li>敏捷项目管理：<a href=\"https://www.notion.so/product#use_case_tasks\" target=\"_blank\" rel=\"noopener\">notion 看板</a>，<a href=\"https://bitable.feishu.cn/templates?view_name=project\" target=\"_blank\" rel=\"noopener\">飞书多维表格</a></li>\n</ul>\n<h2 id=\"书单\"><a href=\"#书单\" class=\"headerlink\" title=\"书单\"></a>书单</h2><ul>\n<li><a href=\"https://m.weibo.cn/1911799583/4592668862066856\" target=\"_blank\" rel=\"noopener\">女权书单</a></li>\n<li><a href=\"https://m.smzdm.com/rank/6452/\" target=\"_blank\" rel=\"noopener\">30+大男孩的世界好奇书单</a></li>\n<li><a href=\"https://m.smzdm.com/rank/6500/\" target=\"_blank\" rel=\"noopener\">学科入门书单/短板补充书单</a></li>\n</ul>\n<h2 id=\"话题\"><a href=\"#话题\" class=\"headerlink\" title=\"话题\"></a>话题</h2><ul>\n<li>【自律=压抑欲望？】 所谓自律，就是主动要求自己以积极的态度承受痛苦——<a href=\"https://weread.qq.com/web/reader/1d2322d0720cbe751d2d787k45c322601945c48cce2e120\" target=\"_blank\" rel=\"noopener\">《少有人走的路》</a></li>\n<li>【“人设”的作用】是快速让对方知道能从你身上获得哪一类内容。</li>\n<li>【投资】<a href=\"https://bitable.feishu.cn/apppmH1tnO5OPZvBiOjl3fu3tBB?table=tblvGUyT13QJ3qDm&amp;view=vewuNfwLSj\" target=\"_blank\" rel=\"noopener\">一表看完散户大战华尔街全过程（持续更新）</a></li>\n<li>【职业故事】<a href=\"https://twitter.com/waylybaye/status/1356513036303962112\" target=\"_blank\" rel=\"noopener\">两位独立开发者</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2020年总结收集\"><a href=\"#2020年总结收集\" class=\"headerlink\" title=\"2020年总结收集\"></a>2020年总结收集</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/QmLPNJgFcJXCSwo0aq4-Xg\" target=\"_blank\" rel=\"noopener\">若川的2020年度总结，水波不兴</a> （川佬的第七个年总结</li>\n<li><a href=\"https://mp.weixin.qq.com/s/qktcTaH1ghKVsUjEh3j42w\" target=\"_blank\" rel=\"noopener\">前端劝退师：晃荡一年，我那错乱无力的2020 | 年度总结</a> （晃荡又不失风骚的职业旅程</li>\n<li><a href=\"https://mp.weixin.qq.com/s/f2Dm1_GVoIuQRrJIFTPgtg\" target=\"_blank\" rel=\"noopener\">惊天码盗：2020年度总结（增长的朋友）</a> （偏重于学习/工作/职业成长</li>\n<li><a href=\"https://mp.weixin.qq.com/s/FzO00k3JAuOvfmY8J0izAg\" target=\"_blank\" rel=\"noopener\">一位阿里前端er的年总结</a> （生活、工作、兴趣、理财，主题丰满</li>\n</ul>\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><ul>\n<li>英文演讲/影子跟读【Never Give Up】尼克·胡哲  <a href=\"http://music.163.com/song?id=30512348&amp;userid=109088284\" target=\"_blank\" rel=\"noopener\">音频</a>  <a href=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/file_share/2021-02-01%E3%80%90never%20give%20up%E3%80%91.docx\" target=\"_blank\" rel=\"noopener\">中英文稿</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/convolutional-neural-network-tutorial-for-beginners/\" target=\"_blank\" rel=\"noopener\">神经网络入门教程 - freecodecamp</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/the-docker-handbook\" target=\"_blank\" rel=\"noopener\">docker教程 - freecodecamp</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1QX4y157mJ?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1614612909&amp;unique_k=oE4GG5\" target=\"_blank\" rel=\"noopener\">如何快速进入学习状态 - bilibili</a></li>\n</ul>\n<h2 id=\"Notion相关资源\"><a href=\"#Notion相关资源\" class=\"headerlink\" title=\"Notion相关资源\"></a>Notion相关资源</h2><ul>\n<li>Notion 自动化：Notion API key + <a href=\"https://automate.io/integration/notion\" target=\"_blank\" rel=\"noopener\">Automate.io</a></li>\n<li>Mac <a href=\"https://github.com/wrjlewis/notion-search-alfred-workflow\" target=\"_blank\" rel=\"noopener\">alfred Notion搜索快捷操作</a></li>\n<li><a href=\"https://www.douban.com/note/769517273/\" target=\"_blank\" rel=\"noopener\">Notion子弹笔记</a></li>\n</ul>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><ul>\n<li><a href=\"https://www.zhihu.com/question/440237998/answer/1720449267?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=28923681308672&amp;utm_content=group3_Answer&amp;utm_campaign=shareopn\" target=\"_blank\" rel=\"noopener\">工作中提高效率的方法</a></li>\n<li><a href=\"https://juejin.cn/post/6926787585423933448#heading-0\" target=\"_blank\" rel=\"noopener\">前端软技能，反制职场PUA</a></li>\n<li>敏捷项目管理：<a href=\"https://www.notion.so/product#use_case_tasks\" target=\"_blank\" rel=\"noopener\">notion 看板</a>，<a href=\"https://bitable.feishu.cn/templates?view_name=project\" target=\"_blank\" rel=\"noopener\">飞书多维表格</a></li>\n</ul>\n<h2 id=\"书单\"><a href=\"#书单\" class=\"headerlink\" title=\"书单\"></a>书单</h2><ul>\n<li><a href=\"https://m.weibo.cn/1911799583/4592668862066856\" target=\"_blank\" rel=\"noopener\">女权书单</a></li>\n<li><a href=\"https://m.smzdm.com/rank/6452/\" target=\"_blank\" rel=\"noopener\">30+大男孩的世界好奇书单</a></li>\n<li><a href=\"https://m.smzdm.com/rank/6500/\" target=\"_blank\" rel=\"noopener\">学科入门书单/短板补充书单</a></li>\n</ul>\n<h2 id=\"话题\"><a href=\"#话题\" class=\"headerlink\" title=\"话题\"></a>话题</h2><ul>\n<li>【自律=压抑欲望？】 所谓自律，就是主动要求自己以积极的态度承受痛苦——<a href=\"https://weread.qq.com/web/reader/1d2322d0720cbe751d2d787k45c322601945c48cce2e120\" target=\"_blank\" rel=\"noopener\">《少有人走的路》</a></li>\n<li>【“人设”的作用】是快速让对方知道能从你身上获得哪一类内容。</li>\n<li>【投资】<a href=\"https://bitable.feishu.cn/apppmH1tnO5OPZvBiOjl3fu3tBB?table=tblvGUyT13QJ3qDm&amp;view=vewuNfwLSj\" target=\"_blank\" rel=\"noopener\">一表看完散户大战华尔街全过程（持续更新）</a></li>\n<li>【职业故事】<a href=\"https://twitter.com/waylybaye/status/1356513036303962112\" target=\"_blank\" rel=\"noopener\">两位独立开发者</a></li>\n</ul>\n"},{"title":"如何无痛写文章 - 《麦肯锡教我的写作武器》","date":"2021-03-27T16:00:00.000Z","description":"写作能力是这个时代许多行业的基本功","toc":1,"top":0,"status":"Done","img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324160422.png","_content":"\n## 引言 - 写文章为什么令我痛苦\n\n作为一个理科生，要问我学生生涯最讨厌的是什么，我无疑会回答**写作文**。\n\n无论是小学的流水账日记，\n\n还是高考的800字作文，\n\n甚至是现在工作上的文档/报告，\n\n都曾为我的脱发症增添几分贡献🤧。\n\n自从维护博客/写公众号以来，我常常反思，**写文章为什么令我痛苦**\n\n我写文章，一是为了将我自己对某些事物的思考/总结记录下来，供自己回顾；二是为了分享给你，听听你不同的见解。\n\n总归是有一些东西在脑子里，想表达出来，却缺乏章法🤯。\n\n因此在朋友给我推荐这本书的时候，就没有犹豫加入书单了✅。\n\n## 《麦肯锡教我的写作武器》是怎样的书\n\n这本书可以说是一本**商务文案写作指南**\n\n虽说是商务文案，但是也同样适合日常写作和技术文章。\n\n因为这本书**从信息筛选、遣词造句，到整体结构的设计**这些方面，介绍了写文章的通用技巧和思维。\n\n下面的正文，会从上述的三个方面，总结书中的内容。\n\n## 信息筛选\n\n### 信息是组成文章的“零件”\n\n写作本质上就是信息的整合。\n\n能明确表现主语与谓语的关系的句子，都是信息。\n\n“这瓶农夫山泉的容量是500ml”可以作为一条信息；\n\n“农夫山泉”、“500ml”这种单独的对象，都不是信息；\n\n### 信息分三类\n\n- **记述信息**：描述事物的情况和现象本身，常常包含现象、数据、经验、实例（平铺直叙）\n\n例子🌰：本篇文章总结了《麦肯锡教我的写作武器》这本书的主要内容。\n\n- **评价信息**：表达某一情况或现象的好坏（有形容词）\n\n例子🌰：《麦肯锡教我的写作武器》这本书很值得读。\n\n- **规范信息**：要求事物应有的状态以及人该采取的行动（有动词）\n\n例子🌰：你应该读一读《麦肯锡教我的写作武器》。\n\n**区分清楚信息类型非常重要**，以书中的一处对话为例🌰：\n\n> 主管：山田，X公司最近的业绩如何？\n> \n> 山田：是……X公司最近一季的销售额为220亿日元，营业利益为5亿日元。自由现金流量（Free Cash Flow）为87亿日元。昨天股票的收盘价为每股358日元。\n> \n> 主管：喔，所以呢……\n> \n> 山田：啊！是……好像还有特别损失的部分，再扣除税之后，利益为2亿日元。利息支出大概是1千万日元左右。\n> \n> 主管：所以呢？\n> \n> 山田：啊！还有……该公司利息收入为200万日元。销售成本是……\n> \n> 主管：我是问你“他们的业绩怎么样？好还是不好？”\n> \n> 山田：喔！是……似乎回升了不少。\n> \n> 主管：好啦，有上升就是了，我知道了……\n\n从上面的对话可以看出来，主管想要了解的是**评价信息**，并进行了四次提问才得到想要的回答，而山田小呆呆前三次都回答的是**记述信息**。\n\n所以为了避免像他一样给上司留下“鸡同鸭讲、对牛弹琴”的不良印象❌，\n\n同样为了避免给文章读者造成混淆❌\n\n在传达信息前，我们应该明确，究竟要传达哪一类信息。\n\n### 活用三种类型的信息\n\n记述信息 + 评价标准：有“评价信息”的效果，却比直接评价更委婉。🌰例如小明的妈妈说：你这次考了40分，60分是及格分。\n\n评价某种行为的信息：有“规范信息”的效果，却比规范信息更委婉。🌰例如小明的妈妈接着说：下次再考40分就过分了。\n\n如果你表达了某一类信息，例如记述信息，别人仍然说“听不懂”时,可以接着说出评价信息、规范信息。🌰例如小明对妈妈说：这台电脑RAM有32G。+运行内存很大，电脑运行十分流畅。+妈妈你应该买给我学习。\n\n### 文章的主题不是信息\n\n一般来说，文章的主题不应该是一条信息，🌰例如“我分享了一篇关于《麦肯锡教我的写作武器》的文章”不适合作为文章的主题。\n\n文章的主题应该告诉别人你文章内**信息的范围**，🌰例如“《麦肯锡教我的写作武器》读后感觉”可以作为文章主题。\n\n此外，用“时间”替主题定调，可以增加吸引力,🌰例如\"三分钟了解《麦肯锡教我的写作武器》\"。\n\n## 遣词造句\n\n信息的筛选很重要，如何将信息合适的表达出来也很重要，\n\n想让信息提升说服力，可以从遣词造句下手。\n\n### 1. 善用主语\n\n明确表达一条信息，核心在于，高度明确的**主语与谓语的关系**。\n\n在日常生活口语中，我们常常习惯于省略主语，但是这个习惯带入到文章中，容易造成误解、加重阅读负担。\n\n此外，也可以通过主语影响别人思考，🌰例如：“门要关了”，“列车员要关门了”这两句话，后一句的主语时活生生的人，会引发听者更多思考。\n\n### 2. 明确逻辑，善用连接词\n\n文字的逻辑性是否强，思维是否流畅，很大程度上取决于**连接词**。\n\n连接词用好，可以降低阅读负担，让文章一气呵成。\n\n🌰举个例子，如果删去下面这段话中加粗的连接词，会给人一种“这段话每个句子我都认识，但就是不知道想表达什么”的感觉：\n\n> 美国总统明年一月开始进入第二任的任期，**关于执政**(解说)，国民年金以及税制的根本改革是优先课题。**首先**(分点1)，国民年金将导入确定提拔型的“个人结算”，**以**(目的)防止高龄化带来的年金财政的缺口。**其次**(分点2)，简化繁杂的所得税制，**同时**(追加)继续保持减税路线，**为的是**(目的)长期的经济成长。**当然**(让步)，要努力减少过去最严重的“双重赤字”，也就是财政赤字和贸易赤字。**不过**(转折)，在通往实现的道路上，困难重重。\n\n常见的逻辑连接词及分类可以参考下图：\n\n![高杉逻辑连接词表](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324101814.png)\n\n### 3. 用词“具体”\n\n滥用抽象的表达，是不负责任的表现。\n\n“……的活性化”、“……的多样化”、“重新评估”、“推动”、“调整”这类词汇仅仅可以用于表达一个方向性，如果用多了，会显得文章空泛、圆滑闪躲。\n\n### 4. 合理分段\n\n一个分段最好传达单一的信息。\n\n分段的数量也有小tips，最少3个，5、7这样的质数也比较合适，因为3是稳定结构的最小数量，7是科学证明人类一次能记住的最大数量，而质数更容易被记忆。\n\n## 文章结构\n\n前两段，分别讲了如何筛选合适的信息、如何遣词造句以更好的传达信息，\n\n除了表达独立的信息，整体文章的设计也很重要。\n\n### 金字塔结构\n\n金字塔结构是写大多数文章的常用结构，分为多个层级\n\n1. 主要信息\n2. 关键信息\n3. 次要信息\n\n![金字塔结构](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324122454.png)\n\n和思维导图一样，金字塔结构可以一路扩展下去，这样的结构，逻辑性强，条理清晰。\n\n### 由上而下⬇️设计结构（分解\n\n当你拥有一个写作目标时，例如高考的命题作文，就可以由上而下设计文章结构。\n\n先选定一个主要信息，然后再分解成个别的关键信息。\n\n分解的方法有理由法和详述法，考虑“为了让上层信息更有说服力，要用哪些下层信息比较能够支持论点”，来设计信息。\n\n### 由下而上⬆️设计结构（抽象、摘要\n\n当你拥有一些零散信息和思维时，可以由下而上设计文章结构。\n\n由下而上法就是要将位于下层的信息群往上精炼，成为上层的信息。\n\n具体来说，需要先将零散信息分组，再通过结论法和摘要法，得到上层信息。\n\n通常我写读书笔记就是采用这种方法：看书时，标记出有收获的字句、段落，输出笔记时，聚合所有的标记、分类、向上提炼，三步套路之后，写读书笔记就能得心应手。\n\n![由下而上](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324123212.png)\n\n### MECE：不重复不遗漏\n\n除了主题的数量、金字塔结构，还有一个在构成关键主题时很重要的概念，那就是主题之间是否为MECE。\n\nMECE的全称是“Mutually Exclusive Collectively Exhaustive”，直译之意为“相互排他性、集合网罗性”，也有人翻译成“不重复、不遗漏”。\n\n将关键主题设定在三、五、七个，目的在于分类能够清楚，**没有重复冗余**，同时又能**足够完整**地网罗重要条目，没有遗漏。\n\n## 结语\n\n掌握了信息筛选、遣词造句、结构设计，足够写出一篇逻辑清晰的文章，\n\n- 如何将脑子里的种种思维，以更有逻辑的形式，形成文章\n- 如何提高文章说服力\n- 如何流畅写作，提高写作效率\n\n这些写作最核心的问题，也能找到答案。","source":"_posts/writing_tech.md","raw":"---\ntitle: 如何无痛写文章 - 《麦肯锡教我的写作武器》\ncategories:\n  - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2021-03-28\ndescription: 写作能力是这个时代许多行业的基本功\ntoc: 1\ntop: 0\nstatus: Done\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324160422.png\n---\n\n## 引言 - 写文章为什么令我痛苦\n\n作为一个理科生，要问我学生生涯最讨厌的是什么，我无疑会回答**写作文**。\n\n无论是小学的流水账日记，\n\n还是高考的800字作文，\n\n甚至是现在工作上的文档/报告，\n\n都曾为我的脱发症增添几分贡献🤧。\n\n自从维护博客/写公众号以来，我常常反思，**写文章为什么令我痛苦**\n\n我写文章，一是为了将我自己对某些事物的思考/总结记录下来，供自己回顾；二是为了分享给你，听听你不同的见解。\n\n总归是有一些东西在脑子里，想表达出来，却缺乏章法🤯。\n\n因此在朋友给我推荐这本书的时候，就没有犹豫加入书单了✅。\n\n## 《麦肯锡教我的写作武器》是怎样的书\n\n这本书可以说是一本**商务文案写作指南**\n\n虽说是商务文案，但是也同样适合日常写作和技术文章。\n\n因为这本书**从信息筛选、遣词造句，到整体结构的设计**这些方面，介绍了写文章的通用技巧和思维。\n\n下面的正文，会从上述的三个方面，总结书中的内容。\n\n## 信息筛选\n\n### 信息是组成文章的“零件”\n\n写作本质上就是信息的整合。\n\n能明确表现主语与谓语的关系的句子，都是信息。\n\n“这瓶农夫山泉的容量是500ml”可以作为一条信息；\n\n“农夫山泉”、“500ml”这种单独的对象，都不是信息；\n\n### 信息分三类\n\n- **记述信息**：描述事物的情况和现象本身，常常包含现象、数据、经验、实例（平铺直叙）\n\n例子🌰：本篇文章总结了《麦肯锡教我的写作武器》这本书的主要内容。\n\n- **评价信息**：表达某一情况或现象的好坏（有形容词）\n\n例子🌰：《麦肯锡教我的写作武器》这本书很值得读。\n\n- **规范信息**：要求事物应有的状态以及人该采取的行动（有动词）\n\n例子🌰：你应该读一读《麦肯锡教我的写作武器》。\n\n**区分清楚信息类型非常重要**，以书中的一处对话为例🌰：\n\n> 主管：山田，X公司最近的业绩如何？\n> \n> 山田：是……X公司最近一季的销售额为220亿日元，营业利益为5亿日元。自由现金流量（Free Cash Flow）为87亿日元。昨天股票的收盘价为每股358日元。\n> \n> 主管：喔，所以呢……\n> \n> 山田：啊！是……好像还有特别损失的部分，再扣除税之后，利益为2亿日元。利息支出大概是1千万日元左右。\n> \n> 主管：所以呢？\n> \n> 山田：啊！还有……该公司利息收入为200万日元。销售成本是……\n> \n> 主管：我是问你“他们的业绩怎么样？好还是不好？”\n> \n> 山田：喔！是……似乎回升了不少。\n> \n> 主管：好啦，有上升就是了，我知道了……\n\n从上面的对话可以看出来，主管想要了解的是**评价信息**，并进行了四次提问才得到想要的回答，而山田小呆呆前三次都回答的是**记述信息**。\n\n所以为了避免像他一样给上司留下“鸡同鸭讲、对牛弹琴”的不良印象❌，\n\n同样为了避免给文章读者造成混淆❌\n\n在传达信息前，我们应该明确，究竟要传达哪一类信息。\n\n### 活用三种类型的信息\n\n记述信息 + 评价标准：有“评价信息”的效果，却比直接评价更委婉。🌰例如小明的妈妈说：你这次考了40分，60分是及格分。\n\n评价某种行为的信息：有“规范信息”的效果，却比规范信息更委婉。🌰例如小明的妈妈接着说：下次再考40分就过分了。\n\n如果你表达了某一类信息，例如记述信息，别人仍然说“听不懂”时,可以接着说出评价信息、规范信息。🌰例如小明对妈妈说：这台电脑RAM有32G。+运行内存很大，电脑运行十分流畅。+妈妈你应该买给我学习。\n\n### 文章的主题不是信息\n\n一般来说，文章的主题不应该是一条信息，🌰例如“我分享了一篇关于《麦肯锡教我的写作武器》的文章”不适合作为文章的主题。\n\n文章的主题应该告诉别人你文章内**信息的范围**，🌰例如“《麦肯锡教我的写作武器》读后感觉”可以作为文章主题。\n\n此外，用“时间”替主题定调，可以增加吸引力,🌰例如\"三分钟了解《麦肯锡教我的写作武器》\"。\n\n## 遣词造句\n\n信息的筛选很重要，如何将信息合适的表达出来也很重要，\n\n想让信息提升说服力，可以从遣词造句下手。\n\n### 1. 善用主语\n\n明确表达一条信息，核心在于，高度明确的**主语与谓语的关系**。\n\n在日常生活口语中，我们常常习惯于省略主语，但是这个习惯带入到文章中，容易造成误解、加重阅读负担。\n\n此外，也可以通过主语影响别人思考，🌰例如：“门要关了”，“列车员要关门了”这两句话，后一句的主语时活生生的人，会引发听者更多思考。\n\n### 2. 明确逻辑，善用连接词\n\n文字的逻辑性是否强，思维是否流畅，很大程度上取决于**连接词**。\n\n连接词用好，可以降低阅读负担，让文章一气呵成。\n\n🌰举个例子，如果删去下面这段话中加粗的连接词，会给人一种“这段话每个句子我都认识，但就是不知道想表达什么”的感觉：\n\n> 美国总统明年一月开始进入第二任的任期，**关于执政**(解说)，国民年金以及税制的根本改革是优先课题。**首先**(分点1)，国民年金将导入确定提拔型的“个人结算”，**以**(目的)防止高龄化带来的年金财政的缺口。**其次**(分点2)，简化繁杂的所得税制，**同时**(追加)继续保持减税路线，**为的是**(目的)长期的经济成长。**当然**(让步)，要努力减少过去最严重的“双重赤字”，也就是财政赤字和贸易赤字。**不过**(转折)，在通往实现的道路上，困难重重。\n\n常见的逻辑连接词及分类可以参考下图：\n\n![高杉逻辑连接词表](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324101814.png)\n\n### 3. 用词“具体”\n\n滥用抽象的表达，是不负责任的表现。\n\n“……的活性化”、“……的多样化”、“重新评估”、“推动”、“调整”这类词汇仅仅可以用于表达一个方向性，如果用多了，会显得文章空泛、圆滑闪躲。\n\n### 4. 合理分段\n\n一个分段最好传达单一的信息。\n\n分段的数量也有小tips，最少3个，5、7这样的质数也比较合适，因为3是稳定结构的最小数量，7是科学证明人类一次能记住的最大数量，而质数更容易被记忆。\n\n## 文章结构\n\n前两段，分别讲了如何筛选合适的信息、如何遣词造句以更好的传达信息，\n\n除了表达独立的信息，整体文章的设计也很重要。\n\n### 金字塔结构\n\n金字塔结构是写大多数文章的常用结构，分为多个层级\n\n1. 主要信息\n2. 关键信息\n3. 次要信息\n\n![金字塔结构](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324122454.png)\n\n和思维导图一样，金字塔结构可以一路扩展下去，这样的结构，逻辑性强，条理清晰。\n\n### 由上而下⬇️设计结构（分解\n\n当你拥有一个写作目标时，例如高考的命题作文，就可以由上而下设计文章结构。\n\n先选定一个主要信息，然后再分解成个别的关键信息。\n\n分解的方法有理由法和详述法，考虑“为了让上层信息更有说服力，要用哪些下层信息比较能够支持论点”，来设计信息。\n\n### 由下而上⬆️设计结构（抽象、摘要\n\n当你拥有一些零散信息和思维时，可以由下而上设计文章结构。\n\n由下而上法就是要将位于下层的信息群往上精炼，成为上层的信息。\n\n具体来说，需要先将零散信息分组，再通过结论法和摘要法，得到上层信息。\n\n通常我写读书笔记就是采用这种方法：看书时，标记出有收获的字句、段落，输出笔记时，聚合所有的标记、分类、向上提炼，三步套路之后，写读书笔记就能得心应手。\n\n![由下而上](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324123212.png)\n\n### MECE：不重复不遗漏\n\n除了主题的数量、金字塔结构，还有一个在构成关键主题时很重要的概念，那就是主题之间是否为MECE。\n\nMECE的全称是“Mutually Exclusive Collectively Exhaustive”，直译之意为“相互排他性、集合网罗性”，也有人翻译成“不重复、不遗漏”。\n\n将关键主题设定在三、五、七个，目的在于分类能够清楚，**没有重复冗余**，同时又能**足够完整**地网罗重要条目，没有遗漏。\n\n## 结语\n\n掌握了信息筛选、遣词造句、结构设计，足够写出一篇逻辑清晰的文章，\n\n- 如何将脑子里的种种思维，以更有逻辑的形式，形成文章\n- 如何提高文章说服力\n- 如何流畅写作，提高写作效率\n\n这些写作最核心的问题，也能找到答案。","slug":"writing_tech","published":1,"updated":"2021-06-05T02:16:07.430Z","_id":"ckmlugz7q0000n8y6j30g8ugz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"引言-写文章为什么令我痛苦\"><a href=\"#引言-写文章为什么令我痛苦\" class=\"headerlink\" title=\"引言 - 写文章为什么令我痛苦\"></a>引言 - 写文章为什么令我痛苦</h2><p>作为一个理科生，要问我学生生涯最讨厌的是什么，我无疑会回答<strong>写作文</strong>。</p>\n<p>无论是小学的流水账日记，</p>\n<p>还是高考的800字作文，</p>\n<p>甚至是现在工作上的文档/报告，</p>\n<p>都曾为我的脱发症增添几分贡献🤧。</p>\n<p>自从维护博客/写公众号以来，我常常反思，<strong>写文章为什么令我痛苦</strong></p>\n<p>我写文章，一是为了将我自己对某些事物的思考/总结记录下来，供自己回顾；二是为了分享给你，听听你不同的见解。</p>\n<p>总归是有一些东西在脑子里，想表达出来，却缺乏章法🤯。</p>\n<p>因此在朋友给我推荐这本书的时候，就没有犹豫加入书单了✅。</p>\n<h2 id=\"《麦肯锡教我的写作武器》是怎样的书\"><a href=\"#《麦肯锡教我的写作武器》是怎样的书\" class=\"headerlink\" title=\"《麦肯锡教我的写作武器》是怎样的书\"></a>《麦肯锡教我的写作武器》是怎样的书</h2><p>这本书可以说是一本<strong>商务文案写作指南</strong></p>\n<p>虽说是商务文案，但是也同样适合日常写作和技术文章。</p>\n<p>因为这本书<strong>从信息筛选、遣词造句，到整体结构的设计</strong>这些方面，介绍了写文章的通用技巧和思维。</p>\n<p>下面的正文，会从上述的三个方面，总结书中的内容。</p>\n<h2 id=\"信息筛选\"><a href=\"#信息筛选\" class=\"headerlink\" title=\"信息筛选\"></a>信息筛选</h2><h3 id=\"信息是组成文章的“零件”\"><a href=\"#信息是组成文章的“零件”\" class=\"headerlink\" title=\"信息是组成文章的“零件”\"></a>信息是组成文章的“零件”</h3><p>写作本质上就是信息的整合。</p>\n<p>能明确表现主语与谓语的关系的句子，都是信息。</p>\n<p>“这瓶农夫山泉的容量是500ml”可以作为一条信息；</p>\n<p>“农夫山泉”、“500ml”这种单独的对象，都不是信息；</p>\n<h3 id=\"信息分三类\"><a href=\"#信息分三类\" class=\"headerlink\" title=\"信息分三类\"></a>信息分三类</h3><ul>\n<li><strong>记述信息</strong>：描述事物的情况和现象本身，常常包含现象、数据、经验、实例（平铺直叙）</li>\n</ul>\n<p>例子🌰：本篇文章总结了《麦肯锡教我的写作武器》这本书的主要内容。</p>\n<ul>\n<li><strong>评价信息</strong>：表达某一情况或现象的好坏（有形容词）</li>\n</ul>\n<p>例子🌰：《麦肯锡教我的写作武器》这本书很值得读。</p>\n<ul>\n<li><strong>规范信息</strong>：要求事物应有的状态以及人该采取的行动（有动词）</li>\n</ul>\n<p>例子🌰：你应该读一读《麦肯锡教我的写作武器》。</p>\n<p><strong>区分清楚信息类型非常重要</strong>，以书中的一处对话为例🌰：</p>\n<blockquote>\n<p>主管：山田，X公司最近的业绩如何？</p>\n<p>山田：是……X公司最近一季的销售额为220亿日元，营业利益为5亿日元。自由现金流量（Free Cash Flow）为87亿日元。昨天股票的收盘价为每股358日元。</p>\n<p>主管：喔，所以呢……</p>\n<p>山田：啊！是……好像还有特别损失的部分，再扣除税之后，利益为2亿日元。利息支出大概是1千万日元左右。</p>\n<p>主管：所以呢？</p>\n<p>山田：啊！还有……该公司利息收入为200万日元。销售成本是……</p>\n<p>主管：我是问你“他们的业绩怎么样？好还是不好？”</p>\n<p>山田：喔！是……似乎回升了不少。</p>\n<p>主管：好啦，有上升就是了，我知道了……</p>\n</blockquote>\n<p>从上面的对话可以看出来，主管想要了解的是<strong>评价信息</strong>，并进行了四次提问才得到想要的回答，而山田小呆呆前三次都回答的是<strong>记述信息</strong>。</p>\n<p>所以为了避免像他一样给上司留下“鸡同鸭讲、对牛弹琴”的不良印象❌，</p>\n<p>同样为了避免给文章读者造成混淆❌</p>\n<p>在传达信息前，我们应该明确，究竟要传达哪一类信息。</p>\n<h3 id=\"活用三种类型的信息\"><a href=\"#活用三种类型的信息\" class=\"headerlink\" title=\"活用三种类型的信息\"></a>活用三种类型的信息</h3><p>记述信息 + 评价标准：有“评价信息”的效果，却比直接评价更委婉。🌰例如小明的妈妈说：你这次考了40分，60分是及格分。</p>\n<p>评价某种行为的信息：有“规范信息”的效果，却比规范信息更委婉。🌰例如小明的妈妈接着说：下次再考40分就过分了。</p>\n<p>如果你表达了某一类信息，例如记述信息，别人仍然说“听不懂”时,可以接着说出评价信息、规范信息。🌰例如小明对妈妈说：这台电脑RAM有32G。+运行内存很大，电脑运行十分流畅。+妈妈你应该买给我学习。</p>\n<h3 id=\"文章的主题不是信息\"><a href=\"#文章的主题不是信息\" class=\"headerlink\" title=\"文章的主题不是信息\"></a>文章的主题不是信息</h3><p>一般来说，文章的主题不应该是一条信息，🌰例如“我分享了一篇关于《麦肯锡教我的写作武器》的文章”不适合作为文章的主题。</p>\n<p>文章的主题应该告诉别人你文章内<strong>信息的范围</strong>，🌰例如“《麦肯锡教我的写作武器》读后感觉”可以作为文章主题。</p>\n<p>此外，用“时间”替主题定调，可以增加吸引力,🌰例如”三分钟了解《麦肯锡教我的写作武器》”。</p>\n<h2 id=\"遣词造句\"><a href=\"#遣词造句\" class=\"headerlink\" title=\"遣词造句\"></a>遣词造句</h2><p>信息的筛选很重要，如何将信息合适的表达出来也很重要，</p>\n<p>想让信息提升说服力，可以从遣词造句下手。</p>\n<h3 id=\"1-善用主语\"><a href=\"#1-善用主语\" class=\"headerlink\" title=\"1. 善用主语\"></a>1. 善用主语</h3><p>明确表达一条信息，核心在于，高度明确的<strong>主语与谓语的关系</strong>。</p>\n<p>在日常生活口语中，我们常常习惯于省略主语，但是这个习惯带入到文章中，容易造成误解、加重阅读负担。</p>\n<p>此外，也可以通过主语影响别人思考，🌰例如：“门要关了”，“列车员要关门了”这两句话，后一句的主语时活生生的人，会引发听者更多思考。</p>\n<h3 id=\"2-明确逻辑，善用连接词\"><a href=\"#2-明确逻辑，善用连接词\" class=\"headerlink\" title=\"2. 明确逻辑，善用连接词\"></a>2. 明确逻辑，善用连接词</h3><p>文字的逻辑性是否强，思维是否流畅，很大程度上取决于<strong>连接词</strong>。</p>\n<p>连接词用好，可以降低阅读负担，让文章一气呵成。</p>\n<p>🌰举个例子，如果删去下面这段话中加粗的连接词，会给人一种“这段话每个句子我都认识，但就是不知道想表达什么”的感觉：</p>\n<blockquote>\n<p>美国总统明年一月开始进入第二任的任期，<strong>关于执政</strong>(解说)，国民年金以及税制的根本改革是优先课题。<strong>首先</strong>(分点1)，国民年金将导入确定提拔型的“个人结算”，<strong>以</strong>(目的)防止高龄化带来的年金财政的缺口。<strong>其次</strong>(分点2)，简化繁杂的所得税制，<strong>同时</strong>(追加)继续保持减税路线，<strong>为的是</strong>(目的)长期的经济成长。<strong>当然</strong>(让步)，要努力减少过去最严重的“双重赤字”，也就是财政赤字和贸易赤字。<strong>不过</strong>(转折)，在通往实现的道路上，困难重重。</p>\n</blockquote>\n<p>常见的逻辑连接词及分类可以参考下图：</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324101814.png\" alt=\"高杉逻辑连接词表\"></p>\n<h3 id=\"3-用词“具体”\"><a href=\"#3-用词“具体”\" class=\"headerlink\" title=\"3. 用词“具体”\"></a>3. 用词“具体”</h3><p>滥用抽象的表达，是不负责任的表现。</p>\n<p>“……的活性化”、“……的多样化”、“重新评估”、“推动”、“调整”这类词汇仅仅可以用于表达一个方向性，如果用多了，会显得文章空泛、圆滑闪躲。</p>\n<h3 id=\"4-合理分段\"><a href=\"#4-合理分段\" class=\"headerlink\" title=\"4. 合理分段\"></a>4. 合理分段</h3><p>一个分段最好传达单一的信息。</p>\n<p>分段的数量也有小tips，最少3个，5、7这样的质数也比较合适，因为3是稳定结构的最小数量，7是科学证明人类一次能记住的最大数量，而质数更容易被记忆。</p>\n<h2 id=\"文章结构\"><a href=\"#文章结构\" class=\"headerlink\" title=\"文章结构\"></a>文章结构</h2><p>前两段，分别讲了如何筛选合适的信息、如何遣词造句以更好的传达信息，</p>\n<p>除了表达独立的信息，整体文章的设计也很重要。</p>\n<h3 id=\"金字塔结构\"><a href=\"#金字塔结构\" class=\"headerlink\" title=\"金字塔结构\"></a>金字塔结构</h3><p>金字塔结构是写大多数文章的常用结构，分为多个层级</p>\n<ol>\n<li>主要信息</li>\n<li>关键信息</li>\n<li>次要信息</li>\n</ol>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324122454.png\" alt=\"金字塔结构\"></p>\n<p>和思维导图一样，金字塔结构可以一路扩展下去，这样的结构，逻辑性强，条理清晰。</p>\n<h3 id=\"由上而下⬇️设计结构（分解\"><a href=\"#由上而下⬇️设计结构（分解\" class=\"headerlink\" title=\"由上而下⬇️设计结构（分解\"></a>由上而下⬇️设计结构（分解</h3><p>当你拥有一个写作目标时，例如高考的命题作文，就可以由上而下设计文章结构。</p>\n<p>先选定一个主要信息，然后再分解成个别的关键信息。</p>\n<p>分解的方法有理由法和详述法，考虑“为了让上层信息更有说服力，要用哪些下层信息比较能够支持论点”，来设计信息。</p>\n<h3 id=\"由下而上⬆️设计结构（抽象、摘要\"><a href=\"#由下而上⬆️设计结构（抽象、摘要\" class=\"headerlink\" title=\"由下而上⬆️设计结构（抽象、摘要\"></a>由下而上⬆️设计结构（抽象、摘要</h3><p>当你拥有一些零散信息和思维时，可以由下而上设计文章结构。</p>\n<p>由下而上法就是要将位于下层的信息群往上精炼，成为上层的信息。</p>\n<p>具体来说，需要先将零散信息分组，再通过结论法和摘要法，得到上层信息。</p>\n<p>通常我写读书笔记就是采用这种方法：看书时，标记出有收获的字句、段落，输出笔记时，聚合所有的标记、分类、向上提炼，三步套路之后，写读书笔记就能得心应手。</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324123212.png\" alt=\"由下而上\"></p>\n<h3 id=\"MECE：不重复不遗漏\"><a href=\"#MECE：不重复不遗漏\" class=\"headerlink\" title=\"MECE：不重复不遗漏\"></a>MECE：不重复不遗漏</h3><p>除了主题的数量、金字塔结构，还有一个在构成关键主题时很重要的概念，那就是主题之间是否为MECE。</p>\n<p>MECE的全称是“Mutually Exclusive Collectively Exhaustive”，直译之意为“相互排他性、集合网罗性”，也有人翻译成“不重复、不遗漏”。</p>\n<p>将关键主题设定在三、五、七个，目的在于分类能够清楚，<strong>没有重复冗余</strong>，同时又能<strong>足够完整</strong>地网罗重要条目，没有遗漏。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>掌握了信息筛选、遣词造句、结构设计，足够写出一篇逻辑清晰的文章，</p>\n<ul>\n<li>如何将脑子里的种种思维，以更有逻辑的形式，形成文章</li>\n<li>如何提高文章说服力</li>\n<li>如何流畅写作，提高写作效率</li>\n</ul>\n<p>这些写作最核心的问题，也能找到答案。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言-写文章为什么令我痛苦\"><a href=\"#引言-写文章为什么令我痛苦\" class=\"headerlink\" title=\"引言 - 写文章为什么令我痛苦\"></a>引言 - 写文章为什么令我痛苦</h2><p>作为一个理科生，要问我学生生涯最讨厌的是什么，我无疑会回答<strong>写作文</strong>。</p>\n<p>无论是小学的流水账日记，</p>\n<p>还是高考的800字作文，</p>\n<p>甚至是现在工作上的文档/报告，</p>\n<p>都曾为我的脱发症增添几分贡献🤧。</p>\n<p>自从维护博客/写公众号以来，我常常反思，<strong>写文章为什么令我痛苦</strong></p>\n<p>我写文章，一是为了将我自己对某些事物的思考/总结记录下来，供自己回顾；二是为了分享给你，听听你不同的见解。</p>\n<p>总归是有一些东西在脑子里，想表达出来，却缺乏章法🤯。</p>\n<p>因此在朋友给我推荐这本书的时候，就没有犹豫加入书单了✅。</p>\n<h2 id=\"《麦肯锡教我的写作武器》是怎样的书\"><a href=\"#《麦肯锡教我的写作武器》是怎样的书\" class=\"headerlink\" title=\"《麦肯锡教我的写作武器》是怎样的书\"></a>《麦肯锡教我的写作武器》是怎样的书</h2><p>这本书可以说是一本<strong>商务文案写作指南</strong></p>\n<p>虽说是商务文案，但是也同样适合日常写作和技术文章。</p>\n<p>因为这本书<strong>从信息筛选、遣词造句，到整体结构的设计</strong>这些方面，介绍了写文章的通用技巧和思维。</p>\n<p>下面的正文，会从上述的三个方面，总结书中的内容。</p>\n<h2 id=\"信息筛选\"><a href=\"#信息筛选\" class=\"headerlink\" title=\"信息筛选\"></a>信息筛选</h2><h3 id=\"信息是组成文章的“零件”\"><a href=\"#信息是组成文章的“零件”\" class=\"headerlink\" title=\"信息是组成文章的“零件”\"></a>信息是组成文章的“零件”</h3><p>写作本质上就是信息的整合。</p>\n<p>能明确表现主语与谓语的关系的句子，都是信息。</p>\n<p>“这瓶农夫山泉的容量是500ml”可以作为一条信息；</p>\n<p>“农夫山泉”、“500ml”这种单独的对象，都不是信息；</p>\n<h3 id=\"信息分三类\"><a href=\"#信息分三类\" class=\"headerlink\" title=\"信息分三类\"></a>信息分三类</h3><ul>\n<li><strong>记述信息</strong>：描述事物的情况和现象本身，常常包含现象、数据、经验、实例（平铺直叙）</li>\n</ul>\n<p>例子🌰：本篇文章总结了《麦肯锡教我的写作武器》这本书的主要内容。</p>\n<ul>\n<li><strong>评价信息</strong>：表达某一情况或现象的好坏（有形容词）</li>\n</ul>\n<p>例子🌰：《麦肯锡教我的写作武器》这本书很值得读。</p>\n<ul>\n<li><strong>规范信息</strong>：要求事物应有的状态以及人该采取的行动（有动词）</li>\n</ul>\n<p>例子🌰：你应该读一读《麦肯锡教我的写作武器》。</p>\n<p><strong>区分清楚信息类型非常重要</strong>，以书中的一处对话为例🌰：</p>\n<blockquote>\n<p>主管：山田，X公司最近的业绩如何？</p>\n<p>山田：是……X公司最近一季的销售额为220亿日元，营业利益为5亿日元。自由现金流量（Free Cash Flow）为87亿日元。昨天股票的收盘价为每股358日元。</p>\n<p>主管：喔，所以呢……</p>\n<p>山田：啊！是……好像还有特别损失的部分，再扣除税之后，利益为2亿日元。利息支出大概是1千万日元左右。</p>\n<p>主管：所以呢？</p>\n<p>山田：啊！还有……该公司利息收入为200万日元。销售成本是……</p>\n<p>主管：我是问你“他们的业绩怎么样？好还是不好？”</p>\n<p>山田：喔！是……似乎回升了不少。</p>\n<p>主管：好啦，有上升就是了，我知道了……</p>\n</blockquote>\n<p>从上面的对话可以看出来，主管想要了解的是<strong>评价信息</strong>，并进行了四次提问才得到想要的回答，而山田小呆呆前三次都回答的是<strong>记述信息</strong>。</p>\n<p>所以为了避免像他一样给上司留下“鸡同鸭讲、对牛弹琴”的不良印象❌，</p>\n<p>同样为了避免给文章读者造成混淆❌</p>\n<p>在传达信息前，我们应该明确，究竟要传达哪一类信息。</p>\n<h3 id=\"活用三种类型的信息\"><a href=\"#活用三种类型的信息\" class=\"headerlink\" title=\"活用三种类型的信息\"></a>活用三种类型的信息</h3><p>记述信息 + 评价标准：有“评价信息”的效果，却比直接评价更委婉。🌰例如小明的妈妈说：你这次考了40分，60分是及格分。</p>\n<p>评价某种行为的信息：有“规范信息”的效果，却比规范信息更委婉。🌰例如小明的妈妈接着说：下次再考40分就过分了。</p>\n<p>如果你表达了某一类信息，例如记述信息，别人仍然说“听不懂”时,可以接着说出评价信息、规范信息。🌰例如小明对妈妈说：这台电脑RAM有32G。+运行内存很大，电脑运行十分流畅。+妈妈你应该买给我学习。</p>\n<h3 id=\"文章的主题不是信息\"><a href=\"#文章的主题不是信息\" class=\"headerlink\" title=\"文章的主题不是信息\"></a>文章的主题不是信息</h3><p>一般来说，文章的主题不应该是一条信息，🌰例如“我分享了一篇关于《麦肯锡教我的写作武器》的文章”不适合作为文章的主题。</p>\n<p>文章的主题应该告诉别人你文章内<strong>信息的范围</strong>，🌰例如“《麦肯锡教我的写作武器》读后感觉”可以作为文章主题。</p>\n<p>此外，用“时间”替主题定调，可以增加吸引力,🌰例如”三分钟了解《麦肯锡教我的写作武器》”。</p>\n<h2 id=\"遣词造句\"><a href=\"#遣词造句\" class=\"headerlink\" title=\"遣词造句\"></a>遣词造句</h2><p>信息的筛选很重要，如何将信息合适的表达出来也很重要，</p>\n<p>想让信息提升说服力，可以从遣词造句下手。</p>\n<h3 id=\"1-善用主语\"><a href=\"#1-善用主语\" class=\"headerlink\" title=\"1. 善用主语\"></a>1. 善用主语</h3><p>明确表达一条信息，核心在于，高度明确的<strong>主语与谓语的关系</strong>。</p>\n<p>在日常生活口语中，我们常常习惯于省略主语，但是这个习惯带入到文章中，容易造成误解、加重阅读负担。</p>\n<p>此外，也可以通过主语影响别人思考，🌰例如：“门要关了”，“列车员要关门了”这两句话，后一句的主语时活生生的人，会引发听者更多思考。</p>\n<h3 id=\"2-明确逻辑，善用连接词\"><a href=\"#2-明确逻辑，善用连接词\" class=\"headerlink\" title=\"2. 明确逻辑，善用连接词\"></a>2. 明确逻辑，善用连接词</h3><p>文字的逻辑性是否强，思维是否流畅，很大程度上取决于<strong>连接词</strong>。</p>\n<p>连接词用好，可以降低阅读负担，让文章一气呵成。</p>\n<p>🌰举个例子，如果删去下面这段话中加粗的连接词，会给人一种“这段话每个句子我都认识，但就是不知道想表达什么”的感觉：</p>\n<blockquote>\n<p>美国总统明年一月开始进入第二任的任期，<strong>关于执政</strong>(解说)，国民年金以及税制的根本改革是优先课题。<strong>首先</strong>(分点1)，国民年金将导入确定提拔型的“个人结算”，<strong>以</strong>(目的)防止高龄化带来的年金财政的缺口。<strong>其次</strong>(分点2)，简化繁杂的所得税制，<strong>同时</strong>(追加)继续保持减税路线，<strong>为的是</strong>(目的)长期的经济成长。<strong>当然</strong>(让步)，要努力减少过去最严重的“双重赤字”，也就是财政赤字和贸易赤字。<strong>不过</strong>(转折)，在通往实现的道路上，困难重重。</p>\n</blockquote>\n<p>常见的逻辑连接词及分类可以参考下图：</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324101814.png\" alt=\"高杉逻辑连接词表\"></p>\n<h3 id=\"3-用词“具体”\"><a href=\"#3-用词“具体”\" class=\"headerlink\" title=\"3. 用词“具体”\"></a>3. 用词“具体”</h3><p>滥用抽象的表达，是不负责任的表现。</p>\n<p>“……的活性化”、“……的多样化”、“重新评估”、“推动”、“调整”这类词汇仅仅可以用于表达一个方向性，如果用多了，会显得文章空泛、圆滑闪躲。</p>\n<h3 id=\"4-合理分段\"><a href=\"#4-合理分段\" class=\"headerlink\" title=\"4. 合理分段\"></a>4. 合理分段</h3><p>一个分段最好传达单一的信息。</p>\n<p>分段的数量也有小tips，最少3个，5、7这样的质数也比较合适，因为3是稳定结构的最小数量，7是科学证明人类一次能记住的最大数量，而质数更容易被记忆。</p>\n<h2 id=\"文章结构\"><a href=\"#文章结构\" class=\"headerlink\" title=\"文章结构\"></a>文章结构</h2><p>前两段，分别讲了如何筛选合适的信息、如何遣词造句以更好的传达信息，</p>\n<p>除了表达独立的信息，整体文章的设计也很重要。</p>\n<h3 id=\"金字塔结构\"><a href=\"#金字塔结构\" class=\"headerlink\" title=\"金字塔结构\"></a>金字塔结构</h3><p>金字塔结构是写大多数文章的常用结构，分为多个层级</p>\n<ol>\n<li>主要信息</li>\n<li>关键信息</li>\n<li>次要信息</li>\n</ol>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324122454.png\" alt=\"金字塔结构\"></p>\n<p>和思维导图一样，金字塔结构可以一路扩展下去，这样的结构，逻辑性强，条理清晰。</p>\n<h3 id=\"由上而下⬇️设计结构（分解\"><a href=\"#由上而下⬇️设计结构（分解\" class=\"headerlink\" title=\"由上而下⬇️设计结构（分解\"></a>由上而下⬇️设计结构（分解</h3><p>当你拥有一个写作目标时，例如高考的命题作文，就可以由上而下设计文章结构。</p>\n<p>先选定一个主要信息，然后再分解成个别的关键信息。</p>\n<p>分解的方法有理由法和详述法，考虑“为了让上层信息更有说服力，要用哪些下层信息比较能够支持论点”，来设计信息。</p>\n<h3 id=\"由下而上⬆️设计结构（抽象、摘要\"><a href=\"#由下而上⬆️设计结构（抽象、摘要\" class=\"headerlink\" title=\"由下而上⬆️设计结构（抽象、摘要\"></a>由下而上⬆️设计结构（抽象、摘要</h3><p>当你拥有一些零散信息和思维时，可以由下而上设计文章结构。</p>\n<p>由下而上法就是要将位于下层的信息群往上精炼，成为上层的信息。</p>\n<p>具体来说，需要先将零散信息分组，再通过结论法和摘要法，得到上层信息。</p>\n<p>通常我写读书笔记就是采用这种方法：看书时，标记出有收获的字句、段落，输出笔记时，聚合所有的标记、分类、向上提炼，三步套路之后，写读书笔记就能得心应手。</p>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210324123212.png\" alt=\"由下而上\"></p>\n<h3 id=\"MECE：不重复不遗漏\"><a href=\"#MECE：不重复不遗漏\" class=\"headerlink\" title=\"MECE：不重复不遗漏\"></a>MECE：不重复不遗漏</h3><p>除了主题的数量、金字塔结构，还有一个在构成关键主题时很重要的概念，那就是主题之间是否为MECE。</p>\n<p>MECE的全称是“Mutually Exclusive Collectively Exhaustive”，直译之意为“相互排他性、集合网罗性”，也有人翻译成“不重复、不遗漏”。</p>\n<p>将关键主题设定在三、五、七个，目的在于分类能够清楚，<strong>没有重复冗余</strong>，同时又能<strong>足够完整</strong>地网罗重要条目，没有遗漏。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>掌握了信息筛选、遣词造句、结构设计，足够写出一篇逻辑清晰的文章，</p>\n<ul>\n<li>如何将脑子里的种种思维，以更有逻辑的形式，形成文章</li>\n<li>如何提高文章说服力</li>\n<li>如何流畅写作，提高写作效率</li>\n</ul>\n<p>这些写作最核心的问题，也能找到答案。</p>\n"},{"title":"【月刊#3】2021.04","date":"2021-03-31T16:00:00.000Z","description":"舒适生活指南、职业发展、投资、话题、文章推荐","status":"Done","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210309112740.png","_content":"\n## 舒适生活\n\n- 成年人[如何科学地应对压力？](http://wufazhuce.com/question/3148)\n- [每天晚上睡觉之前写下当天发生的3件好事](https://www.douban.com/gallery/topic/284123/)：低成本持续幸福\n- [写日记的意义](https://www.douban.com/gallery/topic/296222/)：和自己对话\n- [闲鱼攻略](https://www.notion.so/xian-b0da52ba0afe4946907efd7dbcd91ed6)\n\n## 职业发展\n\n- Solo Developer：[两位独立开发者](https://twitter.com/waylybaye/status/1356513036303962112)\n- 若川：[公众号运营策略](https://mp.weixin.qq.com/s/HWMfggIU6YTSOW2WviAxQg)\n- Happy Xiao博客推荐：[你在展示你是谁，你如何思考，而不是你在想什么](https://mailchi.mp/2934bd0bd96e/newsletter?e=5fe73a4a12)\n\n## 投资\n\n- 【[2020胡润财富报告](https://www.hurun.net/zh-CN/reports/Detail?num=O37XUUGER51W)】目前中国拥有600万人民币资产、千万人民币资产、亿元人民币资产和3000万美金资产的家庭数量和地域分布情况，包括中国内地和香港、澳门、台湾\n- 【业界事件】[一表看完散户大战华尔街全过程（持续更新）](https://bitable.feishu.cn/apppmH1tnO5OPZvBiOjl3fu3tBB?table=tblvGUyT13QJ3qDm&view=vewuNfwLSj)\n- 【投资思维】[复利的谎言](https://mp.weixin.qq.com/s/1pJSuOSrNIj4KPB0F8O54A) 随机性、不连续性、不均匀性、非对称性、思考>勤奋\n- 【投资分析】[中国居民会增加股票配置吗？](https://mp.weixin.qq.com/s/FbEpVm5HZXVLiF-CAmAg6g)\n\n## 话题推荐\n\n- 【自律=压抑欲望？】 所谓自律，就是主动要求自己以积极的态度承受痛苦。——[《少有人走的路》](https://weread.qq.com/web/reader/1d2322d0720cbe751d2d787k45c322601945c48cce2e120)\n- 【感情是信念的基础】“爸爸说我很冷静，他并没有真正理解我，我认为，有时候，感情是信念的基础，这里有我汗水浸过的土地，这里有我患难与共的亲友，这里有我相濡以沫的妻子，这里有我生命的根。”——电影[《牧马人》](https://movie.douban.com/subject/1308038/)\n- 【投射】我们所看到的每件事其实都是我们内心的投射。我们怎么评论别人，就是我们怎么看待自己。如果我觉得别人太爱批评而讨厌他，就代表我讨厌自己爱批评的习性。——[《亲密关系》](https://book.douban.com/subject/26363229/)\n\n## 文章推荐\n\n- 教育内卷现状：[为了鸡娃，上海的家长到底有多拼](https://mp.weixin.qq.com/s/kBWQ9DU_R2fvawzgkAXQug)\n- [「翻墙违法是无可争议的事实」](https://mp.weixin.qq.com/s/vy668sp66e4ZeOXo2QZU1w)","source":"_posts/monthly_3_2021_04.md","raw":"---\ntitle: 【月刊#3】2021.04\ncategories:\n    - 00月刊\ntags:\ndate: 2021-04-01\ndescription: 舒适生活指南、职业发展、投资、话题、文章推荐\nstatus: Done\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210309112740.png\n---\n\n## 舒适生活\n\n- 成年人[如何科学地应对压力？](http://wufazhuce.com/question/3148)\n- [每天晚上睡觉之前写下当天发生的3件好事](https://www.douban.com/gallery/topic/284123/)：低成本持续幸福\n- [写日记的意义](https://www.douban.com/gallery/topic/296222/)：和自己对话\n- [闲鱼攻略](https://www.notion.so/xian-b0da52ba0afe4946907efd7dbcd91ed6)\n\n## 职业发展\n\n- Solo Developer：[两位独立开发者](https://twitter.com/waylybaye/status/1356513036303962112)\n- 若川：[公众号运营策略](https://mp.weixin.qq.com/s/HWMfggIU6YTSOW2WviAxQg)\n- Happy Xiao博客推荐：[你在展示你是谁，你如何思考，而不是你在想什么](https://mailchi.mp/2934bd0bd96e/newsletter?e=5fe73a4a12)\n\n## 投资\n\n- 【[2020胡润财富报告](https://www.hurun.net/zh-CN/reports/Detail?num=O37XUUGER51W)】目前中国拥有600万人民币资产、千万人民币资产、亿元人民币资产和3000万美金资产的家庭数量和地域分布情况，包括中国内地和香港、澳门、台湾\n- 【业界事件】[一表看完散户大战华尔街全过程（持续更新）](https://bitable.feishu.cn/apppmH1tnO5OPZvBiOjl3fu3tBB?table=tblvGUyT13QJ3qDm&view=vewuNfwLSj)\n- 【投资思维】[复利的谎言](https://mp.weixin.qq.com/s/1pJSuOSrNIj4KPB0F8O54A) 随机性、不连续性、不均匀性、非对称性、思考>勤奋\n- 【投资分析】[中国居民会增加股票配置吗？](https://mp.weixin.qq.com/s/FbEpVm5HZXVLiF-CAmAg6g)\n\n## 话题推荐\n\n- 【自律=压抑欲望？】 所谓自律，就是主动要求自己以积极的态度承受痛苦。——[《少有人走的路》](https://weread.qq.com/web/reader/1d2322d0720cbe751d2d787k45c322601945c48cce2e120)\n- 【感情是信念的基础】“爸爸说我很冷静，他并没有真正理解我，我认为，有时候，感情是信念的基础，这里有我汗水浸过的土地，这里有我患难与共的亲友，这里有我相濡以沫的妻子，这里有我生命的根。”——电影[《牧马人》](https://movie.douban.com/subject/1308038/)\n- 【投射】我们所看到的每件事其实都是我们内心的投射。我们怎么评论别人，就是我们怎么看待自己。如果我觉得别人太爱批评而讨厌他，就代表我讨厌自己爱批评的习性。——[《亲密关系》](https://book.douban.com/subject/26363229/)\n\n## 文章推荐\n\n- 教育内卷现状：[为了鸡娃，上海的家长到底有多拼](https://mp.weixin.qq.com/s/kBWQ9DU_R2fvawzgkAXQug)\n- [「翻墙违法是无可争议的事实」](https://mp.weixin.qq.com/s/vy668sp66e4ZeOXo2QZU1w)","slug":"monthly_3_2021_04","published":1,"updated":"2021-04-13T09:46:22.298Z","_id":"cknfsvz8o0000tgy6zy50kvrr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"舒适生活\"><a href=\"#舒适生活\" class=\"headerlink\" title=\"舒适生活\"></a>舒适生活</h2><ul>\n<li>成年人<a href=\"http://wufazhuce.com/question/3148\" target=\"_blank\" rel=\"noopener\">如何科学地应对压力？</a></li>\n<li><a href=\"https://www.douban.com/gallery/topic/284123/\" target=\"_blank\" rel=\"noopener\">每天晚上睡觉之前写下当天发生的3件好事</a>：低成本持续幸福</li>\n<li><a href=\"https://www.douban.com/gallery/topic/296222/\" target=\"_blank\" rel=\"noopener\">写日记的意义</a>：和自己对话</li>\n<li><a href=\"https://www.notion.so/xian-b0da52ba0afe4946907efd7dbcd91ed6\" target=\"_blank\" rel=\"noopener\">闲鱼攻略</a></li>\n</ul>\n<h2 id=\"职业发展\"><a href=\"#职业发展\" class=\"headerlink\" title=\"职业发展\"></a>职业发展</h2><ul>\n<li>Solo Developer：<a href=\"https://twitter.com/waylybaye/status/1356513036303962112\" target=\"_blank\" rel=\"noopener\">两位独立开发者</a></li>\n<li>若川：<a href=\"https://mp.weixin.qq.com/s/HWMfggIU6YTSOW2WviAxQg\" target=\"_blank\" rel=\"noopener\">公众号运营策略</a></li>\n<li>Happy Xiao博客推荐：<a href=\"https://mailchi.mp/2934bd0bd96e/newsletter?e=5fe73a4a12\" target=\"_blank\" rel=\"noopener\">你在展示你是谁，你如何思考，而不是你在想什么</a></li>\n</ul>\n<h2 id=\"投资\"><a href=\"#投资\" class=\"headerlink\" title=\"投资\"></a>投资</h2><ul>\n<li>【<a href=\"https://www.hurun.net/zh-CN/reports/Detail?num=O37XUUGER51W\" target=\"_blank\" rel=\"noopener\">2020胡润财富报告</a>】目前中国拥有600万人民币资产、千万人民币资产、亿元人民币资产和3000万美金资产的家庭数量和地域分布情况，包括中国内地和香港、澳门、台湾</li>\n<li>【业界事件】<a href=\"https://bitable.feishu.cn/apppmH1tnO5OPZvBiOjl3fu3tBB?table=tblvGUyT13QJ3qDm&amp;view=vewuNfwLSj\" target=\"_blank\" rel=\"noopener\">一表看完散户大战华尔街全过程（持续更新）</a></li>\n<li>【投资思维】<a href=\"https://mp.weixin.qq.com/s/1pJSuOSrNIj4KPB0F8O54A\" target=\"_blank\" rel=\"noopener\">复利的谎言</a> 随机性、不连续性、不均匀性、非对称性、思考&gt;勤奋</li>\n<li>【投资分析】<a href=\"https://mp.weixin.qq.com/s/FbEpVm5HZXVLiF-CAmAg6g\" target=\"_blank\" rel=\"noopener\">中国居民会增加股票配置吗？</a></li>\n</ul>\n<h2 id=\"话题推荐\"><a href=\"#话题推荐\" class=\"headerlink\" title=\"话题推荐\"></a>话题推荐</h2><ul>\n<li>【自律=压抑欲望？】 所谓自律，就是主动要求自己以积极的态度承受痛苦。——<a href=\"https://weread.qq.com/web/reader/1d2322d0720cbe751d2d787k45c322601945c48cce2e120\" target=\"_blank\" rel=\"noopener\">《少有人走的路》</a></li>\n<li>【感情是信念的基础】“爸爸说我很冷静，他并没有真正理解我，我认为，有时候，感情是信念的基础，这里有我汗水浸过的土地，这里有我患难与共的亲友，这里有我相濡以沫的妻子，这里有我生命的根。”——电影<a href=\"https://movie.douban.com/subject/1308038/\" target=\"_blank\" rel=\"noopener\">《牧马人》</a></li>\n<li>【投射】我们所看到的每件事其实都是我们内心的投射。我们怎么评论别人，就是我们怎么看待自己。如果我觉得别人太爱批评而讨厌他，就代表我讨厌自己爱批评的习性。——<a href=\"https://book.douban.com/subject/26363229/\" target=\"_blank\" rel=\"noopener\">《亲密关系》</a></li>\n</ul>\n<h2 id=\"文章推荐\"><a href=\"#文章推荐\" class=\"headerlink\" title=\"文章推荐\"></a>文章推荐</h2><ul>\n<li>教育内卷现状：<a href=\"https://mp.weixin.qq.com/s/kBWQ9DU_R2fvawzgkAXQug\" target=\"_blank\" rel=\"noopener\">为了鸡娃，上海的家长到底有多拼</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/vy668sp66e4ZeOXo2QZU1w\" target=\"_blank\" rel=\"noopener\">「翻墙违法是无可争议的事实」</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"舒适生活\"><a href=\"#舒适生活\" class=\"headerlink\" title=\"舒适生活\"></a>舒适生活</h2><ul>\n<li>成年人<a href=\"http://wufazhuce.com/question/3148\" target=\"_blank\" rel=\"noopener\">如何科学地应对压力？</a></li>\n<li><a href=\"https://www.douban.com/gallery/topic/284123/\" target=\"_blank\" rel=\"noopener\">每天晚上睡觉之前写下当天发生的3件好事</a>：低成本持续幸福</li>\n<li><a href=\"https://www.douban.com/gallery/topic/296222/\" target=\"_blank\" rel=\"noopener\">写日记的意义</a>：和自己对话</li>\n<li><a href=\"https://www.notion.so/xian-b0da52ba0afe4946907efd7dbcd91ed6\" target=\"_blank\" rel=\"noopener\">闲鱼攻略</a></li>\n</ul>\n<h2 id=\"职业发展\"><a href=\"#职业发展\" class=\"headerlink\" title=\"职业发展\"></a>职业发展</h2><ul>\n<li>Solo Developer：<a href=\"https://twitter.com/waylybaye/status/1356513036303962112\" target=\"_blank\" rel=\"noopener\">两位独立开发者</a></li>\n<li>若川：<a href=\"https://mp.weixin.qq.com/s/HWMfggIU6YTSOW2WviAxQg\" target=\"_blank\" rel=\"noopener\">公众号运营策略</a></li>\n<li>Happy Xiao博客推荐：<a href=\"https://mailchi.mp/2934bd0bd96e/newsletter?e=5fe73a4a12\" target=\"_blank\" rel=\"noopener\">你在展示你是谁，你如何思考，而不是你在想什么</a></li>\n</ul>\n<h2 id=\"投资\"><a href=\"#投资\" class=\"headerlink\" title=\"投资\"></a>投资</h2><ul>\n<li>【<a href=\"https://www.hurun.net/zh-CN/reports/Detail?num=O37XUUGER51W\" target=\"_blank\" rel=\"noopener\">2020胡润财富报告</a>】目前中国拥有600万人民币资产、千万人民币资产、亿元人民币资产和3000万美金资产的家庭数量和地域分布情况，包括中国内地和香港、澳门、台湾</li>\n<li>【业界事件】<a href=\"https://bitable.feishu.cn/apppmH1tnO5OPZvBiOjl3fu3tBB?table=tblvGUyT13QJ3qDm&amp;view=vewuNfwLSj\" target=\"_blank\" rel=\"noopener\">一表看完散户大战华尔街全过程（持续更新）</a></li>\n<li>【投资思维】<a href=\"https://mp.weixin.qq.com/s/1pJSuOSrNIj4KPB0F8O54A\" target=\"_blank\" rel=\"noopener\">复利的谎言</a> 随机性、不连续性、不均匀性、非对称性、思考&gt;勤奋</li>\n<li>【投资分析】<a href=\"https://mp.weixin.qq.com/s/FbEpVm5HZXVLiF-CAmAg6g\" target=\"_blank\" rel=\"noopener\">中国居民会增加股票配置吗？</a></li>\n</ul>\n<h2 id=\"话题推荐\"><a href=\"#话题推荐\" class=\"headerlink\" title=\"话题推荐\"></a>话题推荐</h2><ul>\n<li>【自律=压抑欲望？】 所谓自律，就是主动要求自己以积极的态度承受痛苦。——<a href=\"https://weread.qq.com/web/reader/1d2322d0720cbe751d2d787k45c322601945c48cce2e120\" target=\"_blank\" rel=\"noopener\">《少有人走的路》</a></li>\n<li>【感情是信念的基础】“爸爸说我很冷静，他并没有真正理解我，我认为，有时候，感情是信念的基础，这里有我汗水浸过的土地，这里有我患难与共的亲友，这里有我相濡以沫的妻子，这里有我生命的根。”——电影<a href=\"https://movie.douban.com/subject/1308038/\" target=\"_blank\" rel=\"noopener\">《牧马人》</a></li>\n<li>【投射】我们所看到的每件事其实都是我们内心的投射。我们怎么评论别人，就是我们怎么看待自己。如果我觉得别人太爱批评而讨厌他，就代表我讨厌自己爱批评的习性。——<a href=\"https://book.douban.com/subject/26363229/\" target=\"_blank\" rel=\"noopener\">《亲密关系》</a></li>\n</ul>\n<h2 id=\"文章推荐\"><a href=\"#文章推荐\" class=\"headerlink\" title=\"文章推荐\"></a>文章推荐</h2><ul>\n<li>教育内卷现状：<a href=\"https://mp.weixin.qq.com/s/kBWQ9DU_R2fvawzgkAXQug\" target=\"_blank\" rel=\"noopener\">为了鸡娃，上海的家长到底有多拼</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/vy668sp66e4ZeOXo2QZU1w\" target=\"_blank\" rel=\"noopener\">「翻墙违法是无可争议的事实」</a></li>\n</ul>\n"},{"title":"《亲密关系》：好的亲密关系是独立+合作","date":"2021-06-04T16:00:00.000Z","description":"我们都是完整而独立的个体、而爱情就是拥有一个合作伙伴一起经营人生","toc":1,"top":0,"status":"Done","img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210605124352.png","_content":"\n## 引言\n\n阿德勒曾说过：“一切烦恼都来自于人际关系”\n\n> 因为我们每个人都是社会中的一份子，无法脱离人群和社会独自生存\n\n而亲密关系，更是占据了我们人生的大部分篇章\n\n子女、父母、爱人、朋友，都是我们人生中不可或缺的角色\n\n处理得好，亲密关系能给我们带来极大的快乐\n\n处理得不好，则会造成重大创伤和无与伦比的痛苦\n\n## 恋爱的本质是满足需求\n\n> 情感是来自人类“爱与被爱”的基本需求\n\n开始和维持一段亲密关系背后的真正动机，其实在于需求。\n\n在日常生活中，我们的所作所为，绝大部分都是为了让某些需求得到满足。我们追求或吸引别人来做我们的伴侣，是因为我们需要人陪伴、照顾、了解、支持、接受、赞赏、抚摸和相拥而眠……\n\n**这是人类的本性，并没有什么不对**，但是如果我们认为，我们所需要的快乐、安全感、自尊或其他的许多事物，都要**依赖别人来实现**的话，这就成为一个大问题了。\n\n## 爱不是依赖、不是占有\n\n每个人的童年时代，没有任何生活能力，所以需要依赖父母来达成的内心的需求、满足归属感、感受自己的重要性。\n\n但是当我们长大之后，我们应该培养自己独立生活的能力、自爱的能力，而不是找到一个人，来满足自己的这些感受，弥补这些缺失，从别人身上索取爱。\n\n因为如果你依赖别人，当发现对方不满足需求和期望时，就想改造对方，各种“手段”因此而生：\n\n- 暗示、明示、甚至PUA，以“改造”对方，“如果你真的爱我，你就应该xxx”。\n- 吵架，用愤怒当作自我防御、自我欺骗的机制，用愤怒保护自己脆弱的内心。\n- 扮演受害者，把自己的伤痛归咎在对方身上。\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210413155630.png)\n\n这不是爱，这是把对方当作满足自己内心的需求的工具人。\n\n## 好的亲密关系是：独立+合作\n\n> 我们每个人都是完整的个体，不是离开谁活不下去\n\n害怕受伤、痛苦、恐惧，渴望永恒真挚、开心、快乐，都是我们生而拥有的情绪，\n\n要学会独立消化、处理自己的情绪\n\n要学会接受、面对自己，面对自己最好的、最糟的状态\n\n> 每个成年人的行为、决策，都是他生而为人的自由\n\n你可以建议、沟通，但是不能干涉、强迫；\n\n与自由相应的，每个人都有独立承担其行为后果的责任\n\n不要扮演受害者，你的需求未满，不是别人的责任\n\n> 亲密关系，不是我们人生的最终目的\n\n亲密关系是丰富我们漫漫人生之旅的风景、增强人生体验的精神补剂\n\n要勇于接受未来，舍得放下过去\n\n> 不能把自己的需求和期望，强加在伴侣、亲人、朋友身上\n\n要学会自爱，让自己内心变得完整、安全、有爱\n\n建立独立完整的自尊体系，心智成熟\n\n你跟我在一起，我拥有了**合作**走完人生的伙伴，我可以开心幸福\n\n你不跟我在一起，我也能独自看完这世上的风景，我也不会崩溃度日\n\n## 不要过度追求浪漫主义的恋爱\n\n一见钟情的颜值、小鹿乱撞的心动、一束花、\n\n一次表白、几句甜言蜜语、嘘寒问暖、\n\n肾上腺飙升的亲密接触、轰轰烈烈的你追我逐、\n\n都是爱情的修饰，而不是爱情本质，\n\n不要再通过 小说/影视剧/磕cp去 学习爱情，\n\n坚持读书、勇于识人，可以补充我们缺少的“爱情教育”\n\n积累知识和人生经验，去成就洒脱、成熟的亲密关系\n\n## 总结\n\n慕名而读，结果读错了，不是这本，是另一本罗兰·米勒的《亲密关系》。但是看完了这本书，还是有一定收获的。\n\n这本书从心理学和人性的角度，直戳亲密关系中的问题，以及问题出现的原因。 \n\n边看书边审视自己的上一段恋爱，从而发现导致分手的原因双方都有责任，过去对他的埋怨和不满也放下了，把这本书推荐给他看之后，我们复合了。从高中到工作第三年，我们从懵懂无知地向往爱情，到热恋期的亲密无间 ，到归于平淡，再到吵吵闹闹，互相埋怨，分道扬镳......\n\n一切都是因为我们不懂爱情，我们在年少无知的时候选择了彼此，把彼此当作依赖，当作生活、工作、压力的唯一寄托和宣泄口，把彼此当作那个 理所当然、应该无条件支持、纵容自己的人。 \n\n现在我们才懂，我们都是完整而独立的个体、而爱情就是拥有一个合作伙伴一起经营人生\n","source":"_posts/relationship.md","raw":"---\ntitle: 《亲密关系》：好的亲密关系是独立+合作\ncategories:\n  - 02阅读 | 读书笔记 # 一级分类\ntags:\ndate: 2021-06-05\ndescription: 我们都是完整而独立的个体、而爱情就是拥有一个合作伙伴一起经营人生\ntoc: 1\ntop: 0\nstatus: Done\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210605124352.png\n---\n\n## 引言\n\n阿德勒曾说过：“一切烦恼都来自于人际关系”\n\n> 因为我们每个人都是社会中的一份子，无法脱离人群和社会独自生存\n\n而亲密关系，更是占据了我们人生的大部分篇章\n\n子女、父母、爱人、朋友，都是我们人生中不可或缺的角色\n\n处理得好，亲密关系能给我们带来极大的快乐\n\n处理得不好，则会造成重大创伤和无与伦比的痛苦\n\n## 恋爱的本质是满足需求\n\n> 情感是来自人类“爱与被爱”的基本需求\n\n开始和维持一段亲密关系背后的真正动机，其实在于需求。\n\n在日常生活中，我们的所作所为，绝大部分都是为了让某些需求得到满足。我们追求或吸引别人来做我们的伴侣，是因为我们需要人陪伴、照顾、了解、支持、接受、赞赏、抚摸和相拥而眠……\n\n**这是人类的本性，并没有什么不对**，但是如果我们认为，我们所需要的快乐、安全感、自尊或其他的许多事物，都要**依赖别人来实现**的话，这就成为一个大问题了。\n\n## 爱不是依赖、不是占有\n\n每个人的童年时代，没有任何生活能力，所以需要依赖父母来达成的内心的需求、满足归属感、感受自己的重要性。\n\n但是当我们长大之后，我们应该培养自己独立生活的能力、自爱的能力，而不是找到一个人，来满足自己的这些感受，弥补这些缺失，从别人身上索取爱。\n\n因为如果你依赖别人，当发现对方不满足需求和期望时，就想改造对方，各种“手段”因此而生：\n\n- 暗示、明示、甚至PUA，以“改造”对方，“如果你真的爱我，你就应该xxx”。\n- 吵架，用愤怒当作自我防御、自我欺骗的机制，用愤怒保护自己脆弱的内心。\n- 扮演受害者，把自己的伤痛归咎在对方身上。\n\n![](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210413155630.png)\n\n这不是爱，这是把对方当作满足自己内心的需求的工具人。\n\n## 好的亲密关系是：独立+合作\n\n> 我们每个人都是完整的个体，不是离开谁活不下去\n\n害怕受伤、痛苦、恐惧，渴望永恒真挚、开心、快乐，都是我们生而拥有的情绪，\n\n要学会独立消化、处理自己的情绪\n\n要学会接受、面对自己，面对自己最好的、最糟的状态\n\n> 每个成年人的行为、决策，都是他生而为人的自由\n\n你可以建议、沟通，但是不能干涉、强迫；\n\n与自由相应的，每个人都有独立承担其行为后果的责任\n\n不要扮演受害者，你的需求未满，不是别人的责任\n\n> 亲密关系，不是我们人生的最终目的\n\n亲密关系是丰富我们漫漫人生之旅的风景、增强人生体验的精神补剂\n\n要勇于接受未来，舍得放下过去\n\n> 不能把自己的需求和期望，强加在伴侣、亲人、朋友身上\n\n要学会自爱，让自己内心变得完整、安全、有爱\n\n建立独立完整的自尊体系，心智成熟\n\n你跟我在一起，我拥有了**合作**走完人生的伙伴，我可以开心幸福\n\n你不跟我在一起，我也能独自看完这世上的风景，我也不会崩溃度日\n\n## 不要过度追求浪漫主义的恋爱\n\n一见钟情的颜值、小鹿乱撞的心动、一束花、\n\n一次表白、几句甜言蜜语、嘘寒问暖、\n\n肾上腺飙升的亲密接触、轰轰烈烈的你追我逐、\n\n都是爱情的修饰，而不是爱情本质，\n\n不要再通过 小说/影视剧/磕cp去 学习爱情，\n\n坚持读书、勇于识人，可以补充我们缺少的“爱情教育”\n\n积累知识和人生经验，去成就洒脱、成熟的亲密关系\n\n## 总结\n\n慕名而读，结果读错了，不是这本，是另一本罗兰·米勒的《亲密关系》。但是看完了这本书，还是有一定收获的。\n\n这本书从心理学和人性的角度，直戳亲密关系中的问题，以及问题出现的原因。 \n\n边看书边审视自己的上一段恋爱，从而发现导致分手的原因双方都有责任，过去对他的埋怨和不满也放下了，把这本书推荐给他看之后，我们复合了。从高中到工作第三年，我们从懵懂无知地向往爱情，到热恋期的亲密无间 ，到归于平淡，再到吵吵闹闹，互相埋怨，分道扬镳......\n\n一切都是因为我们不懂爱情，我们在年少无知的时候选择了彼此，把彼此当作依赖，当作生活、工作、压力的唯一寄托和宣泄口，把彼此当作那个 理所当然、应该无条件支持、纵容自己的人。 \n\n现在我们才懂，我们都是完整而独立的个体、而爱情就是拥有一个合作伙伴一起经营人生\n","slug":"relationship","published":1,"updated":"2021-06-05T04:46:25.212Z","_id":"cknfsvz8w0001tgy6p2oo5wu9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>阿德勒曾说过：“一切烦恼都来自于人际关系”</p>\n<blockquote>\n<p>因为我们每个人都是社会中的一份子，无法脱离人群和社会独自生存</p>\n</blockquote>\n<p>而亲密关系，更是占据了我们人生的大部分篇章</p>\n<p>子女、父母、爱人、朋友，都是我们人生中不可或缺的角色</p>\n<p>处理得好，亲密关系能给我们带来极大的快乐</p>\n<p>处理得不好，则会造成重大创伤和无与伦比的痛苦</p>\n<h2 id=\"恋爱的本质是满足需求\"><a href=\"#恋爱的本质是满足需求\" class=\"headerlink\" title=\"恋爱的本质是满足需求\"></a>恋爱的本质是满足需求</h2><blockquote>\n<p>情感是来自人类“爱与被爱”的基本需求</p>\n</blockquote>\n<p>开始和维持一段亲密关系背后的真正动机，其实在于需求。</p>\n<p>在日常生活中，我们的所作所为，绝大部分都是为了让某些需求得到满足。我们追求或吸引别人来做我们的伴侣，是因为我们需要人陪伴、照顾、了解、支持、接受、赞赏、抚摸和相拥而眠……</p>\n<p><strong>这是人类的本性，并没有什么不对</strong>，但是如果我们认为，我们所需要的快乐、安全感、自尊或其他的许多事物，都要<strong>依赖别人来实现</strong>的话，这就成为一个大问题了。</p>\n<h2 id=\"爱不是依赖、不是占有\"><a href=\"#爱不是依赖、不是占有\" class=\"headerlink\" title=\"爱不是依赖、不是占有\"></a>爱不是依赖、不是占有</h2><p>每个人的童年时代，没有任何生活能力，所以需要依赖父母来达成的内心的需求、满足归属感、感受自己的重要性。</p>\n<p>但是当我们长大之后，我们应该培养自己独立生活的能力、自爱的能力，而不是找到一个人，来满足自己的这些感受，弥补这些缺失，从别人身上索取爱。</p>\n<p>因为如果你依赖别人，当发现对方不满足需求和期望时，就想改造对方，各种“手段”因此而生：</p>\n<ul>\n<li>暗示、明示、甚至PUA，以“改造”对方，“如果你真的爱我，你就应该xxx”。</li>\n<li>吵架，用愤怒当作自我防御、自我欺骗的机制，用愤怒保护自己脆弱的内心。</li>\n<li>扮演受害者，把自己的伤痛归咎在对方身上。</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210413155630.png\" alt></p>\n<p>这不是爱，这是把对方当作满足自己内心的需求的工具人。</p>\n<h2 id=\"好的亲密关系是：独立-合作\"><a href=\"#好的亲密关系是：独立-合作\" class=\"headerlink\" title=\"好的亲密关系是：独立+合作\"></a>好的亲密关系是：独立+合作</h2><blockquote>\n<p>我们每个人都是完整的个体，不是离开谁活不下去</p>\n</blockquote>\n<p>害怕受伤、痛苦、恐惧，渴望永恒真挚、开心、快乐，都是我们生而拥有的情绪，</p>\n<p>要学会独立消化、处理自己的情绪</p>\n<p>要学会接受、面对自己，面对自己最好的、最糟的状态</p>\n<blockquote>\n<p>每个成年人的行为、决策，都是他生而为人的自由</p>\n</blockquote>\n<p>你可以建议、沟通，但是不能干涉、强迫；</p>\n<p>与自由相应的，每个人都有独立承担其行为后果的责任</p>\n<p>不要扮演受害者，你的需求未满，不是别人的责任</p>\n<blockquote>\n<p>亲密关系，不是我们人生的最终目的</p>\n</blockquote>\n<p>亲密关系是丰富我们漫漫人生之旅的风景、增强人生体验的精神补剂</p>\n<p>要勇于接受未来，舍得放下过去</p>\n<blockquote>\n<p>不能把自己的需求和期望，强加在伴侣、亲人、朋友身上</p>\n</blockquote>\n<p>要学会自爱，让自己内心变得完整、安全、有爱</p>\n<p>建立独立完整的自尊体系，心智成熟</p>\n<p>你跟我在一起，我拥有了<strong>合作</strong>走完人生的伙伴，我可以开心幸福</p>\n<p>你不跟我在一起，我也能独自看完这世上的风景，我也不会崩溃度日</p>\n<h2 id=\"不要过度追求浪漫主义的恋爱\"><a href=\"#不要过度追求浪漫主义的恋爱\" class=\"headerlink\" title=\"不要过度追求浪漫主义的恋爱\"></a>不要过度追求浪漫主义的恋爱</h2><p>一见钟情的颜值、小鹿乱撞的心动、一束花、</p>\n<p>一次表白、几句甜言蜜语、嘘寒问暖、</p>\n<p>肾上腺飙升的亲密接触、轰轰烈烈的你追我逐、</p>\n<p>都是爱情的修饰，而不是爱情本质，</p>\n<p>不要再通过 小说/影视剧/磕cp去 学习爱情，</p>\n<p>坚持读书、勇于识人，可以补充我们缺少的“爱情教育”</p>\n<p>积累知识和人生经验，去成就洒脱、成熟的亲密关系</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>慕名而读，结果读错了，不是这本，是另一本罗兰·米勒的《亲密关系》。但是看完了这本书，还是有一定收获的。</p>\n<p>这本书从心理学和人性的角度，直戳亲密关系中的问题，以及问题出现的原因。 </p>\n<p>边看书边审视自己的上一段恋爱，从而发现导致分手的原因双方都有责任，过去对他的埋怨和不满也放下了，把这本书推荐给他看之后，我们复合了。从高中到工作第三年，我们从懵懂无知地向往爱情，到热恋期的亲密无间 ，到归于平淡，再到吵吵闹闹，互相埋怨，分道扬镳……</p>\n<p>一切都是因为我们不懂爱情，我们在年少无知的时候选择了彼此，把彼此当作依赖，当作生活、工作、压力的唯一寄托和宣泄口，把彼此当作那个 理所当然、应该无条件支持、纵容自己的人。 </p>\n<p>现在我们才懂，我们都是完整而独立的个体、而爱情就是拥有一个合作伙伴一起经营人生</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>阿德勒曾说过：“一切烦恼都来自于人际关系”</p>\n<blockquote>\n<p>因为我们每个人都是社会中的一份子，无法脱离人群和社会独自生存</p>\n</blockquote>\n<p>而亲密关系，更是占据了我们人生的大部分篇章</p>\n<p>子女、父母、爱人、朋友，都是我们人生中不可或缺的角色</p>\n<p>处理得好，亲密关系能给我们带来极大的快乐</p>\n<p>处理得不好，则会造成重大创伤和无与伦比的痛苦</p>\n<h2 id=\"恋爱的本质是满足需求\"><a href=\"#恋爱的本质是满足需求\" class=\"headerlink\" title=\"恋爱的本质是满足需求\"></a>恋爱的本质是满足需求</h2><blockquote>\n<p>情感是来自人类“爱与被爱”的基本需求</p>\n</blockquote>\n<p>开始和维持一段亲密关系背后的真正动机，其实在于需求。</p>\n<p>在日常生活中，我们的所作所为，绝大部分都是为了让某些需求得到满足。我们追求或吸引别人来做我们的伴侣，是因为我们需要人陪伴、照顾、了解、支持、接受、赞赏、抚摸和相拥而眠……</p>\n<p><strong>这是人类的本性，并没有什么不对</strong>，但是如果我们认为，我们所需要的快乐、安全感、自尊或其他的许多事物，都要<strong>依赖别人来实现</strong>的话，这就成为一个大问题了。</p>\n<h2 id=\"爱不是依赖、不是占有\"><a href=\"#爱不是依赖、不是占有\" class=\"headerlink\" title=\"爱不是依赖、不是占有\"></a>爱不是依赖、不是占有</h2><p>每个人的童年时代，没有任何生活能力，所以需要依赖父母来达成的内心的需求、满足归属感、感受自己的重要性。</p>\n<p>但是当我们长大之后，我们应该培养自己独立生活的能力、自爱的能力，而不是找到一个人，来满足自己的这些感受，弥补这些缺失，从别人身上索取爱。</p>\n<p>因为如果你依赖别人，当发现对方不满足需求和期望时，就想改造对方，各种“手段”因此而生：</p>\n<ul>\n<li>暗示、明示、甚至PUA，以“改造”对方，“如果你真的爱我，你就应该xxx”。</li>\n<li>吵架，用愤怒当作自我防御、自我欺骗的机制，用愤怒保护自己脆弱的内心。</li>\n<li>扮演受害者，把自己的伤痛归咎在对方身上。</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210413155630.png\" alt></p>\n<p>这不是爱，这是把对方当作满足自己内心的需求的工具人。</p>\n<h2 id=\"好的亲密关系是：独立-合作\"><a href=\"#好的亲密关系是：独立-合作\" class=\"headerlink\" title=\"好的亲密关系是：独立+合作\"></a>好的亲密关系是：独立+合作</h2><blockquote>\n<p>我们每个人都是完整的个体，不是离开谁活不下去</p>\n</blockquote>\n<p>害怕受伤、痛苦、恐惧，渴望永恒真挚、开心、快乐，都是我们生而拥有的情绪，</p>\n<p>要学会独立消化、处理自己的情绪</p>\n<p>要学会接受、面对自己，面对自己最好的、最糟的状态</p>\n<blockquote>\n<p>每个成年人的行为、决策，都是他生而为人的自由</p>\n</blockquote>\n<p>你可以建议、沟通，但是不能干涉、强迫；</p>\n<p>与自由相应的，每个人都有独立承担其行为后果的责任</p>\n<p>不要扮演受害者，你的需求未满，不是别人的责任</p>\n<blockquote>\n<p>亲密关系，不是我们人生的最终目的</p>\n</blockquote>\n<p>亲密关系是丰富我们漫漫人生之旅的风景、增强人生体验的精神补剂</p>\n<p>要勇于接受未来，舍得放下过去</p>\n<blockquote>\n<p>不能把自己的需求和期望，强加在伴侣、亲人、朋友身上</p>\n</blockquote>\n<p>要学会自爱，让自己内心变得完整、安全、有爱</p>\n<p>建立独立完整的自尊体系，心智成熟</p>\n<p>你跟我在一起，我拥有了<strong>合作</strong>走完人生的伙伴，我可以开心幸福</p>\n<p>你不跟我在一起，我也能独自看完这世上的风景，我也不会崩溃度日</p>\n<h2 id=\"不要过度追求浪漫主义的恋爱\"><a href=\"#不要过度追求浪漫主义的恋爱\" class=\"headerlink\" title=\"不要过度追求浪漫主义的恋爱\"></a>不要过度追求浪漫主义的恋爱</h2><p>一见钟情的颜值、小鹿乱撞的心动、一束花、</p>\n<p>一次表白、几句甜言蜜语、嘘寒问暖、</p>\n<p>肾上腺飙升的亲密接触、轰轰烈烈的你追我逐、</p>\n<p>都是爱情的修饰，而不是爱情本质，</p>\n<p>不要再通过 小说/影视剧/磕cp去 学习爱情，</p>\n<p>坚持读书、勇于识人，可以补充我们缺少的“爱情教育”</p>\n<p>积累知识和人生经验，去成就洒脱、成熟的亲密关系</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>慕名而读，结果读错了，不是这本，是另一本罗兰·米勒的《亲密关系》。但是看完了这本书，还是有一定收获的。</p>\n<p>这本书从心理学和人性的角度，直戳亲密关系中的问题，以及问题出现的原因。 </p>\n<p>边看书边审视自己的上一段恋爱，从而发现导致分手的原因双方都有责任，过去对他的埋怨和不满也放下了，把这本书推荐给他看之后，我们复合了。从高中到工作第三年，我们从懵懂无知地向往爱情，到热恋期的亲密无间 ，到归于平淡，再到吵吵闹闹，互相埋怨，分道扬镳……</p>\n<p>一切都是因为我们不懂爱情，我们在年少无知的时候选择了彼此，把彼此当作依赖，当作生活、工作、压力的唯一寄托和宣泄口，把彼此当作那个 理所当然、应该无条件支持、纵容自己的人。 </p>\n<p>现在我们才懂，我们都是完整而独立的个体、而爱情就是拥有一个合作伙伴一起经营人生</p>\n"},{"title":"【月刊#4】2021.05-06","date":"2021-05-31T16:00:00.000Z","description":"指路人系列、开发资源、有意思的资源、纪录片推荐","status":"Done","toc":1,"top":0,"img":"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210604101649.png","_content":"\n### 【Grow Up With You】指路人系列\n\n- [霍孙杨 hcy](https://github.com/HcySunYang): Vue核心团队成员，Vue设计分析文章《Vue Design》作者\n\n### 开发资源\n\n- [MDH • 前端情报日刊](https://fe-cool.github.io/news/)：社群活跃，每日更新\n- 最新的[前端框架性能对比结果](https://krausest.github.io/js-framework-benchmark/index.html)、[分析文章](https://mp.weixin.qq.com/s/6Oygy93y9NW0VkRD5HRVkg)、[了解测试的基准](https://dev.to/ryansolid/making-sense-of-the-js-framework-benchmark-25hl)\n- [You-Dont-Need-JavaScript](https://github.com/you-dont-need/You-Dont-Need-JavaScript)： 用原生CSS实现UI逻辑\n- [免费公开API搜集仓库](https://github.com/public-apis/public-apis)\n- [动画算法仓库](https://github.com/chefyuan/algorithm-base)\n- 手写[easy webpack](https://mp.weixin.qq.com/s/gW_2sDfX5o4wamoiZMsxCw) ，熟悉AST\n\n### 纪录片推荐\n\n- [海豚湾 2009](https://movie.douban.com/subject/3442220/)\n\n### 有意思的资源\n\n- [FUNN.FUN](https://fuun.fun/)： 奇趣网站收藏家\n- [世界电台](http://radio.garden/)：从世界地图上探索全世界电台\n- [Deep Nostalgia](https://www.myheritage.com/deep-nostalgia/)：将人脸照片转换成表情视频\n- [NandGame](https://nandgame.com/#)：从逻辑电路开始一步一步制造电脑的游戏\n\n![NandGame](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210604101214.png)","source":"_posts/monthly_4_2021_05-06.md","raw":"---\ntitle: 【月刊#4】2021.05-06\ncategories:\n    - 00月刊\ntags:\ndate: 2021-06-01\ndescription: 指路人系列、开发资源、有意思的资源、纪录片推荐\nstatus: Done\ntoc: 1\ntop: 0\nimg: https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210604101649.png\n---\n\n### 【Grow Up With You】指路人系列\n\n- [霍孙杨 hcy](https://github.com/HcySunYang): Vue核心团队成员，Vue设计分析文章《Vue Design》作者\n\n### 开发资源\n\n- [MDH • 前端情报日刊](https://fe-cool.github.io/news/)：社群活跃，每日更新\n- 最新的[前端框架性能对比结果](https://krausest.github.io/js-framework-benchmark/index.html)、[分析文章](https://mp.weixin.qq.com/s/6Oygy93y9NW0VkRD5HRVkg)、[了解测试的基准](https://dev.to/ryansolid/making-sense-of-the-js-framework-benchmark-25hl)\n- [You-Dont-Need-JavaScript](https://github.com/you-dont-need/You-Dont-Need-JavaScript)： 用原生CSS实现UI逻辑\n- [免费公开API搜集仓库](https://github.com/public-apis/public-apis)\n- [动画算法仓库](https://github.com/chefyuan/algorithm-base)\n- 手写[easy webpack](https://mp.weixin.qq.com/s/gW_2sDfX5o4wamoiZMsxCw) ，熟悉AST\n\n### 纪录片推荐\n\n- [海豚湾 2009](https://movie.douban.com/subject/3442220/)\n\n### 有意思的资源\n\n- [FUNN.FUN](https://fuun.fun/)： 奇趣网站收藏家\n- [世界电台](http://radio.garden/)：从世界地图上探索全世界电台\n- [Deep Nostalgia](https://www.myheritage.com/deep-nostalgia/)：将人脸照片转换成表情视频\n- [NandGame](https://nandgame.com/#)：从逻辑电路开始一步一步制造电脑的游戏\n\n![NandGame](https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210604101214.png)","slug":"monthly_4_2021_05-06","published":1,"updated":"2021-06-04T02:40:05.446Z","_id":"ckphpzcy500013gy64wdsy8hw","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"【Grow-Up-With-You】指路人系列\"><a href=\"#【Grow-Up-With-You】指路人系列\" class=\"headerlink\" title=\"【Grow Up With You】指路人系列\"></a>【Grow Up With You】指路人系列</h3><ul>\n<li><a href=\"https://github.com/HcySunYang\" target=\"_blank\" rel=\"noopener\">霍孙杨 hcy</a>: Vue核心团队成员，Vue设计分析文章《Vue Design》作者</li>\n</ul>\n<h3 id=\"开发资源\"><a href=\"#开发资源\" class=\"headerlink\" title=\"开发资源\"></a>开发资源</h3><ul>\n<li><a href=\"https://fe-cool.github.io/news/\" target=\"_blank\" rel=\"noopener\">MDH • 前端情报日刊</a>：社群活跃，每日更新</li>\n<li>最新的<a href=\"https://krausest.github.io/js-framework-benchmark/index.html\" target=\"_blank\" rel=\"noopener\">前端框架性能对比结果</a>、<a href=\"https://mp.weixin.qq.com/s/6Oygy93y9NW0VkRD5HRVkg\" target=\"_blank\" rel=\"noopener\">分析文章</a>、<a href=\"https://dev.to/ryansolid/making-sense-of-the-js-framework-benchmark-25hl\" target=\"_blank\" rel=\"noopener\">了解测试的基准</a></li>\n<li><a href=\"https://github.com/you-dont-need/You-Dont-Need-JavaScript\" target=\"_blank\" rel=\"noopener\">You-Dont-Need-JavaScript</a>： 用原生CSS实现UI逻辑</li>\n<li><a href=\"https://github.com/public-apis/public-apis\" target=\"_blank\" rel=\"noopener\">免费公开API搜集仓库</a></li>\n<li><a href=\"https://github.com/chefyuan/algorithm-base\" target=\"_blank\" rel=\"noopener\">动画算法仓库</a></li>\n<li>手写<a href=\"https://mp.weixin.qq.com/s/gW_2sDfX5o4wamoiZMsxCw\" target=\"_blank\" rel=\"noopener\">easy webpack</a> ，熟悉AST</li>\n</ul>\n<h3 id=\"纪录片推荐\"><a href=\"#纪录片推荐\" class=\"headerlink\" title=\"纪录片推荐\"></a>纪录片推荐</h3><ul>\n<li><a href=\"https://movie.douban.com/subject/3442220/\" target=\"_blank\" rel=\"noopener\">海豚湾 2009</a></li>\n</ul>\n<h3 id=\"有意思的资源\"><a href=\"#有意思的资源\" class=\"headerlink\" title=\"有意思的资源\"></a>有意思的资源</h3><ul>\n<li><a href=\"https://fuun.fun/\" target=\"_blank\" rel=\"noopener\">FUNN.FUN</a>： 奇趣网站收藏家</li>\n<li><a href=\"http://radio.garden/\" target=\"_blank\" rel=\"noopener\">世界电台</a>：从世界地图上探索全世界电台</li>\n<li><a href=\"https://www.myheritage.com/deep-nostalgia/\" target=\"_blank\" rel=\"noopener\">Deep Nostalgia</a>：将人脸照片转换成表情视频</li>\n<li><a href=\"https://nandgame.com/#\" target=\"_blank\" rel=\"noopener\">NandGame</a>：从逻辑电路开始一步一步制造电脑的游戏</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210604101214.png\" alt=\"NandGame\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"【Grow-Up-With-You】指路人系列\"><a href=\"#【Grow-Up-With-You】指路人系列\" class=\"headerlink\" title=\"【Grow Up With You】指路人系列\"></a>【Grow Up With You】指路人系列</h3><ul>\n<li><a href=\"https://github.com/HcySunYang\" target=\"_blank\" rel=\"noopener\">霍孙杨 hcy</a>: Vue核心团队成员，Vue设计分析文章《Vue Design》作者</li>\n</ul>\n<h3 id=\"开发资源\"><a href=\"#开发资源\" class=\"headerlink\" title=\"开发资源\"></a>开发资源</h3><ul>\n<li><a href=\"https://fe-cool.github.io/news/\" target=\"_blank\" rel=\"noopener\">MDH • 前端情报日刊</a>：社群活跃，每日更新</li>\n<li>最新的<a href=\"https://krausest.github.io/js-framework-benchmark/index.html\" target=\"_blank\" rel=\"noopener\">前端框架性能对比结果</a>、<a href=\"https://mp.weixin.qq.com/s/6Oygy93y9NW0VkRD5HRVkg\" target=\"_blank\" rel=\"noopener\">分析文章</a>、<a href=\"https://dev.to/ryansolid/making-sense-of-the-js-framework-benchmark-25hl\" target=\"_blank\" rel=\"noopener\">了解测试的基准</a></li>\n<li><a href=\"https://github.com/you-dont-need/You-Dont-Need-JavaScript\" target=\"_blank\" rel=\"noopener\">You-Dont-Need-JavaScript</a>： 用原生CSS实现UI逻辑</li>\n<li><a href=\"https://github.com/public-apis/public-apis\" target=\"_blank\" rel=\"noopener\">免费公开API搜集仓库</a></li>\n<li><a href=\"https://github.com/chefyuan/algorithm-base\" target=\"_blank\" rel=\"noopener\">动画算法仓库</a></li>\n<li>手写<a href=\"https://mp.weixin.qq.com/s/gW_2sDfX5o4wamoiZMsxCw\" target=\"_blank\" rel=\"noopener\">easy webpack</a> ，熟悉AST</li>\n</ul>\n<h3 id=\"纪录片推荐\"><a href=\"#纪录片推荐\" class=\"headerlink\" title=\"纪录片推荐\"></a>纪录片推荐</h3><ul>\n<li><a href=\"https://movie.douban.com/subject/3442220/\" target=\"_blank\" rel=\"noopener\">海豚湾 2009</a></li>\n</ul>\n<h3 id=\"有意思的资源\"><a href=\"#有意思的资源\" class=\"headerlink\" title=\"有意思的资源\"></a>有意思的资源</h3><ul>\n<li><a href=\"https://fuun.fun/\" target=\"_blank\" rel=\"noopener\">FUNN.FUN</a>： 奇趣网站收藏家</li>\n<li><a href=\"http://radio.garden/\" target=\"_blank\" rel=\"noopener\">世界电台</a>：从世界地图上探索全世界电台</li>\n<li><a href=\"https://www.myheritage.com/deep-nostalgia/\" target=\"_blank\" rel=\"noopener\">Deep Nostalgia</a>：将人脸照片转换成表情视频</li>\n<li><a href=\"https://nandgame.com/#\" target=\"_blank\" rel=\"noopener\">NandGame</a>：从逻辑电路开始一步一步制造电脑的游戏</li>\n</ul>\n<p><img src=\"https://scarsu.oss-cn-shanghai.aliyuncs.com/picgo20210604101214.png\" alt=\"NandGame\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckir88iev0005c8y6w5tzusi4","category_id":"ckir88if3000bc8y65ondomb3","_id":"ckir88ifb000kc8y61q8c2htq"},{"post_id":"ckir88iex0006c8y6r0r65c02","category_id":"ckir88if7000gc8y6wkrsvju8","_id":"ckir88ife000pc8y6gi61whmo"},{"post_id":"ckir88ifa000jc8y6xaw3eq0u","category_id":"ckir88if7000gc8y6wkrsvju8","_id":"ckir88ifg000tc8y6ffm238re"},{"post_id":"ckir88ifm0016c8y66cnli0er","category_id":"ckir88if3000bc8y65ondomb3","_id":"ckir88ifs001fc8y6p7w4dx7m"},{"post_id":"ckir88iff000sc8y6zgdo5hx7","category_id":"ckir88ift001jc8y6ed4nwbhr","_id":"ckir88ifz001tc8y67u3nm7zs"},{"post_id":"ckir88ifx001pc8y6jpn3u5tu","category_id":"ckir88ifq001dc8y65u57i3gb","_id":"ckir88ig1001wc8y687xf0kct"},{"post_id":"ckir88ifg000uc8y6jutdylha","category_id":"ckir88ifq001dc8y65u57i3gb","_id":"ckir88ig3001zc8y6r0d97p0l"},{"post_id":"ckir88ifk0011c8y6vgilgk72","category_id":"ckir88ifm0014c8y6w39njmm7","_id":"ckir88ig40022c8y6t4y81qge"},{"post_id":"ckir88ig2001yc8y63m895z78","category_id":"ckir88ifm0014c8y6w39njmm7","_id":"ckir88ig60025c8y6tyc0eb8s"},{"post_id":"ckir88ifn0017c8y6g8xqk19r","category_id":"ckir88ift001jc8y6ed4nwbhr","_id":"ckir88ig80028c8y684fbab5c"},{"post_id":"ckir88ifu001kc8y6kgwmuq41","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88ige002ic8y6zzw7cbx6"},{"post_id":"ckir88ifv001mc8y6qvf49oko","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88igi002mc8y6iiz3alej"},{"post_id":"ckir88ify001rc8y6xfrvbi4s","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88igl002qc8y6zd13949a"},{"post_id":"ckir88ifz001uc8y6lz60feng","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88igo002uc8y610i4g0en"},{"post_id":"ckir88ig0001vc8y6w4pjyxnm","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88igr002yc8y617e85wql"},{"post_id":"ckir88ig30020c8y6ivgbin59","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88igt0031c8y6xemnabgc"},{"post_id":"ckir88igr002zc8y62xqp0lds","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckir88igv0035c8y6iezuxyu3"},{"post_id":"ckir88igs0030c8y612t6unlg","category_id":"ckir88if3000bc8y65ondomb3","_id":"ckir88igz003ac8y6q9jgi4tk"},{"post_id":"ckir88igu0033c8y63dp93z5v","category_id":"ckir88ifm0014c8y6w39njmm7","_id":"ckir88ih0003dc8y6k9eyls4h"},{"post_id":"ckir88igz003cc8y64vphv3lm","category_id":"ckir88ifq001dc8y65u57i3gb","_id":"ckir88ihe003sc8y6pditfyct"},{"post_id":"ckir88ihb003mc8y6l27z2ffz","category_id":"ckir88ifm0014c8y6w39njmm7","_id":"ckir88ihi003zc8y6e0aal8bv"},{"post_id":"ckir88ih3003hc8y6f7mhh9mh","category_id":"ckir88ihn004jc8y6di9namsq","_id":"ckir88iho004mc8y6l0pc72qp"},{"post_id":"ckir88jb6004oc8y6ljec7xed","category_id":"ckir88if3000bc8y65ondomb3","_id":"ckir88jbh004vc8y6t30j04y9"},{"post_id":"ckir88jbi004xc8y624f5cuoh","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88jbr0056c8y6s06s9nn3"},{"post_id":"ckir88jbk0050c8y66ncem4pl","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88jbt0059c8y6j9x3evd7"},{"post_id":"ckir88jbg004uc8y6hvdtrm3m","category_id":"ckir88jbk004zc8y6brbwgce3","_id":"ckir88jby005ec8y6xauil6ww"},{"post_id":"ckir88jbq0055c8y6cupef1xc","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88jbz005fc8y6q3dlxsi4"},{"post_id":"ckir88jca005jc8y6l8p7h1d5","category_id":"ckir88ifm0014c8y6w39njmm7","_id":"ckir88jce005nc8y6ia7m1rsl"},{"post_id":"ckir88jfh005rc8y6wbv4fi7u","category_id":"ckir88ig70026c8y6p4zfxgrn","_id":"ckir88jfj005tc8y6m1mgudjn"},{"post_id":"ckir88jfp005wc8y61b8xexrl","category_id":"ckir88ifm0014c8y6w39njmm7","_id":"ckir88jfq005xc8y6ev7nlwnh"},{"post_id":"ckir88ig50023c8y66gbw8vjx","category_id":"ckk7wfafg000050y6tvxfrier","_id":"ckk7wfagd000250y6ycaecc7f"},{"post_id":"ckir88igx0039c8y6rqyn76kb","category_id":"ckk7wfafg000050y6tvxfrier","_id":"ckk7wfagf000550y6enc2hzqs"},{"post_id":"ckir88ifr001ec8y6nxzocntr","category_id":"ckk7wfafg000050y6tvxfrier","_id":"ckk7wfagg000750y6pvu30h8m"},{"post_id":"ckir88igw0037c8y6agf88jqd","category_id":"ckk7wfafg000050y6tvxfrier","_id":"ckk7wfagh000850y6n2gl7yim"},{"post_id":"ckk7wfjrl0000ncy6lpofswdj","category_id":"ckk7wfafg000050y6tvxfrier","_id":"ckk83geio0000vwy6vvtutezq"},{"post_id":"ckir88if6000ec8y653nxnc39","category_id":"ckir88if7000gc8y6wkrsvju8","_id":"ckk84anhr0002poy66a2euxrd"},{"post_id":"ckir88if7000hc8y6ie7s6ab0","category_id":"ckir88ifm0014c8y6w39njmm7","_id":"ckk84anhs0003poy6um0hydob"},{"post_id":"ckir88ifc000nc8y6hdunfi6s","category_id":"ckir88ifq001dc8y65u57i3gb","_id":"ckk84anhu0004poy6q0pohiu7"},{"post_id":"ckir88ig70027c8y65j98566f","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84anhw0005poy6wb0aju3h"},{"post_id":"ckir88igb002ec8y6wfnnfnc5","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84anhy0006poy69gemh8ah"},{"post_id":"ckir88ig80029c8y6wxt4qxo0","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84anhz0007poy67ic882vn"},{"post_id":"ckir88ig9002bc8y6cfld39wj","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84ani10008poy6n7lfdf8p"},{"post_id":"ckir88igg002kc8y6o8kd1rv3","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84ani20009poy6cfrzpfjy"},{"post_id":"ckir88igf002jc8y642ev17s6","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84ani3000apoy6qfcfeoam"},{"post_id":"ckir88igi002nc8y6z419fz2f","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84ani4000bpoy6dwneb30s"},{"post_id":"ckir88igd002gc8y6lpklidt9","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84ani5000cpoy6kr57351p"},{"post_id":"ckir88igk002oc8y6jtqy41pd","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84ani6000dpoy6u621lnxy"},{"post_id":"ckir88igp002vc8y6b71gyjnn","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84ani8000epoy6c7t9weah"},{"post_id":"ckir88igl002rc8y6g9j6r3bh","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84ani9000fpoy6gt0excaz"},{"post_id":"ckir88igq002wc8y6o3usfy37","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84anib000gpoy6kl2nn3m4"},{"post_id":"ckir88igm002sc8y6gqb6gj12","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84anid000hpoy6qag2hyzj"},{"post_id":"ckir88igv0034c8y6pqz7ffmk","category_id":"ckir88igq002xc8y6ybxh73jh","_id":"ckk84anih000jpoy6jmr4fwf0"},{"post_id":"ckir88ih1003ec8y6ws8nihh1","category_id":"ckir88ihm004gc8y67r3owoew","_id":"ckk84anim000kpoy6wyk9jt09"},{"post_id":"ckir88jbx005dc8y6uc7rnqdt","category_id":"ckir88ifm0014c8y6w39njmm7","_id":"ckk84anin000lpoy6wfw83oxo"},{"post_id":"ckir88jbt0058c8y6q2cm44i6","category_id":"ckir88jbw005cc8y681hfwino","_id":"ckk84anio000mpoy6lqiyrkdf"},{"post_id":"ckjbb32ab0000ggy67apv3ljt","category_id":"ckjbb32am0001ggy6rn99xznh","_id":"ckk84anj2000npoy6zlwtvqmr"},{"post_id":"ckir88jcd005mc8y6xl39n7t8","category_id":"ckir88ifm0014c8y6w39njmm7","_id":"ckk84anj3000opoy6na2ovqrc"},{"post_id":"ckir88jfi005sc8y674owpx8n","category_id":"ckir88if3000bc8y65ondomb3","_id":"ckk84anpa000qpoy680ynmht2"},{"post_id":"ckir88ih9003jc8y6cod164t0","category_id":"ckkf7l96o0001rwy6uepzriwf","_id":"ckkf7l97v0003rwy61fu2xwoz"},{"post_id":"ckir88jcb005kc8y61grko4d8","category_id":"ckkf7l96o0001rwy6uepzriwf","_id":"ckkf7la040004rwy6ju0oylvd"},{"post_id":"ckkf7l95r0000rwy6lui7ryrg","category_id":"ckkf7l96o0001rwy6uepzriwf","_id":"ckkf9kkho0000roy63bq20w68"},{"post_id":"ckir88ifs001gc8y6cvc0j8ce","category_id":"ckir88if3000bc8y65ondomb3","_id":"ckkgab2tw00024gy66nd1fbmy"},{"post_id":"ckir88ig60024c8y6t6pdy6ha","category_id":"ckkf7l96o0001rwy6uepzriwf","_id":"ckkgab2tw00034gy6dzbqd12q"},{"post_id":"ckir88ihd003rc8y6qhp9zbns","category_id":"ckir88if3000bc8y65ondomb3","_id":"ckkgab2tx00044gy6uwg4qzau"},{"post_id":"ckkgab2s300004gy67qvaiyis","category_id":"ckk7wfafg000050y6tvxfrier","_id":"ckkjlpd8d0002qgy6ocnov8z2"},{"post_id":"ckm1fzj0h0000z8y6tel4kgno","category_id":"ckkx9fhsc0000ewy6r16kij31","_id":"ckm1fzj1n0001z8y6vhsv5ks9"},{"post_id":"ckkmfqfnq0000x0y6fwpj74y1","category_id":"ckkx9fhsc0000ewy6r16kij31","_id":"ckm7ccufr00005gy6mbqolrc2"},{"post_id":"ckir88ihc003oc8y69x8gu0cu","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64oq000488y6qihv9chr"},{"post_id":"ckir88ifb000mc8y6cujj97z8","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64os000688y63zhiw2zc"},{"post_id":"ckjbdh6af00006sy66vr96vc9","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64ot000788y61x6fyvsy"},{"post_id":"ckir88ifi000zc8y6rmkxl20h","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64ox000988y6a9fkobti"},{"post_id":"cknfsvz8o0000tgy6zy50kvrr","category_id":"ckkx9fhsc0000ewy6r16kij31","_id":"ckphp64oy000a88y64ef6g11t"},{"post_id":"ckir88ihg003xc8y64243bnnq","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64oy000b88y640k2ekem"},{"post_id":"ckir88ifp001ac8y6nre3y1bb","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64oz000c88y6pyow5xi2"},{"post_id":"ckjbdg4yy00006wy6pf5xk8vu","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64oz000d88y68rn27iz0"},{"post_id":"ckir88ihf003uc8y6gadqdzdm","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64oz000e88y6enpv6lqa"},{"post_id":"ckkjlpcdh0000qgy6a3ksx9g5","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64p0000f88y64c16o9f6"},{"post_id":"ckir88jbf004sc8y6tvenejju","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64vy000g88y66ttzx898"},{"post_id":"ckir88jbm0053c8y68vhcqh1p","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64vz000h88y6rtpclbjd"},{"post_id":"ckmlugz7q0000n8y6j30g8ugz","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp64vz000i88y6q2og16mp"},{"post_id":"ckir88jcc005lc8y6r38sqf7g","category_id":"ckphp64o2000288y630dl38ct","_id":"ckphp651e000j88y6sxrh2czr"},{"post_id":"ckphpzcy500013gy64wdsy8hw","category_id":"ckkx9fhsc0000ewy6r16kij31","_id":"ckphpzcy500023gy64cb1j0rz"},{"post_id":"cknfsvz8w0001tgy6p2oo5wu9","category_id":"ckphp64o2000288y630dl38ct","_id":"ckpj9xxeu0000vwy6sz5gct83"}],"PostTag":[{"post_id":"ckir88ifa000jc8y6xaw3eq0u","tag_id":"ckir88if9000ic8y66vc1pv7v","_id":"ckir88ifl0013c8y61j2qygmk"},{"post_id":"ckir88iff000sc8y6zgdo5hx7","tag_id":"ckir88ifl0012c8y6ta0cwjuz","_id":"ckir88ifq001cc8y655qbskq1"},{"post_id":"ckir88ifk0011c8y6vgilgk72","tag_id":"ckir88ifp0019c8y6yiqdhpk8","_id":"ckir88ift001ic8y6ufrzu5cv"},{"post_id":"ckir88ihc003oc8y69x8gu0cu","tag_id":"ckir88ihe003tc8y6e9nd1w4k","_id":"ckir88ihi0041c8y6reuj0b3e"},{"post_id":"ckir88if6000ec8y653nxnc39","tag_id":"ckir88if9000ic8y66vc1pv7v","_id":"ckk84anho0000poy6sj79ttb3"},{"post_id":"ckir88if7000hc8y6ie7s6ab0","tag_id":"ckir88if9000ic8y66vc1pv7v","_id":"ckk84anhq0001poy6f1mikjqt"}],"Tag":[{"name":"stateOfJs","_id":"ckir88if9000ic8y66vc1pv7v"},{"name":"360fed","_id":"ckir88ifl0012c8y6ta0cwjuz"},{"name":"ES","_id":"ckir88ifp0019c8y6yiqdhpk8"},{"name":"阿德勒心理学","_id":"ckir88ihe003tc8y6e9nd1w4k"}]}}